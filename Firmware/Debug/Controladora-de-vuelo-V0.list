
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e10  080002b0  080002b0  000012b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  080190c0  080190c0  0001a0c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019e50  08019e50  0001ae50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019e58  08019e58  0001ae58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019e5c  08019e5c  0001ae5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000290  24000000  08019e60  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006684  24000290  0801a0f0  0001b290  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24006914  0801a0f0  0001b914  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b290  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035258  00000000  00000000  0001b2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007b07  00000000  00000000  00050516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028f0  00000000  00000000  00058020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001f89  00000000  00000000  0005a910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d410  00000000  00000000  0005c899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00040945  00000000  00000000  00099ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001615ef  00000000  00000000  000da5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0023bbdd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ba80  00000000  00000000  0023bc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  002476a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000290 	.word	0x24000290
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080190a8 	.word	0x080190a8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000294 	.word	0x24000294
 80002ec:	080190a8 	.word	0x080190a8

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_ldivmod>:
 8000728:	b97b      	cbnz	r3, 800074a <__aeabi_ldivmod+0x22>
 800072a:	b972      	cbnz	r2, 800074a <__aeabi_ldivmod+0x22>
 800072c:	2900      	cmp	r1, #0
 800072e:	bfbe      	ittt	lt
 8000730:	2000      	movlt	r0, #0
 8000732:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000736:	e006      	blt.n	8000746 <__aeabi_ldivmod+0x1e>
 8000738:	bf08      	it	eq
 800073a:	2800      	cmpeq	r0, #0
 800073c:	bf1c      	itt	ne
 800073e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000742:	f04f 30ff 	movne.w	r0, #4294967295
 8000746:	f000 b9ed 	b.w	8000b24 <__aeabi_idiv0>
 800074a:	f1ad 0c08 	sub.w	ip, sp, #8
 800074e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000752:	2900      	cmp	r1, #0
 8000754:	db09      	blt.n	800076a <__aeabi_ldivmod+0x42>
 8000756:	2b00      	cmp	r3, #0
 8000758:	db1a      	blt.n	8000790 <__aeabi_ldivmod+0x68>
 800075a:	f000 f885 	bl	8000868 <__udivmoddi4>
 800075e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000766:	b004      	add	sp, #16
 8000768:	4770      	bx	lr
 800076a:	4240      	negs	r0, r0
 800076c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000770:	2b00      	cmp	r3, #0
 8000772:	db1b      	blt.n	80007ac <__aeabi_ldivmod+0x84>
 8000774:	f000 f878 	bl	8000868 <__udivmoddi4>
 8000778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000780:	b004      	add	sp, #16
 8000782:	4240      	negs	r0, r0
 8000784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	4770      	bx	lr
 8000790:	4252      	negs	r2, r2
 8000792:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000796:	f000 f867 	bl	8000868 <__udivmoddi4>
 800079a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a2:	b004      	add	sp, #16
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	4770      	bx	lr
 80007ac:	4252      	negs	r2, r2
 80007ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007b2:	f000 f859 	bl	8000868 <__udivmoddi4>
 80007b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007be:	b004      	add	sp, #16
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	4770      	bx	lr

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9a2 	b.w	8000b24 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	460c      	mov	r4, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14e      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000874:	4694      	mov	ip, r2
 8000876:	458c      	cmp	ip, r1
 8000878:	4686      	mov	lr, r0
 800087a:	fab2 f282 	clz	r2, r2
 800087e:	d962      	bls.n	8000946 <__udivmoddi4+0xde>
 8000880:	b14a      	cbz	r2, 8000896 <__udivmoddi4+0x2e>
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	4091      	lsls	r1, r2
 8000888:	fa20 f303 	lsr.w	r3, r0, r3
 800088c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000890:	4319      	orrs	r1, r3
 8000892:	fa00 fe02 	lsl.w	lr, r0, r2
 8000896:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800089a:	fa1f f68c 	uxth.w	r6, ip
 800089e:	fbb1 f4f7 	udiv	r4, r1, r7
 80008a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a6:	fb07 1114 	mls	r1, r7, r4, r1
 80008aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ae:	fb04 f106 	mul.w	r1, r4, r6
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80008be:	f080 8112 	bcs.w	8000ae6 <__udivmoddi4+0x27e>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 810f 	bls.w	8000ae6 <__udivmoddi4+0x27e>
 80008c8:	3c02      	subs	r4, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a59      	subs	r1, r3, r1
 80008ce:	fa1f f38e 	uxth.w	r3, lr
 80008d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80008d6:	fb07 1110 	mls	r1, r7, r0, r1
 80008da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008de:	fb00 f606 	mul.w	r6, r0, r6
 80008e2:	429e      	cmp	r6, r3
 80008e4:	d90a      	bls.n	80008fc <__udivmoddi4+0x94>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ee:	f080 80fc 	bcs.w	8000aea <__udivmoddi4+0x282>
 80008f2:	429e      	cmp	r6, r3
 80008f4:	f240 80f9 	bls.w	8000aea <__udivmoddi4+0x282>
 80008f8:	4463      	add	r3, ip
 80008fa:	3802      	subs	r0, #2
 80008fc:	1b9b      	subs	r3, r3, r6
 80008fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000902:	2100      	movs	r1, #0
 8000904:	b11d      	cbz	r5, 800090e <__udivmoddi4+0xa6>
 8000906:	40d3      	lsrs	r3, r2
 8000908:	2200      	movs	r2, #0
 800090a:	e9c5 3200 	strd	r3, r2, [r5]
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d905      	bls.n	8000922 <__udivmoddi4+0xba>
 8000916:	b10d      	cbz	r5, 800091c <__udivmoddi4+0xb4>
 8000918:	e9c5 0100 	strd	r0, r1, [r5]
 800091c:	2100      	movs	r1, #0
 800091e:	4608      	mov	r0, r1
 8000920:	e7f5      	b.n	800090e <__udivmoddi4+0xa6>
 8000922:	fab3 f183 	clz	r1, r3
 8000926:	2900      	cmp	r1, #0
 8000928:	d146      	bne.n	80009b8 <__udivmoddi4+0x150>
 800092a:	42a3      	cmp	r3, r4
 800092c:	d302      	bcc.n	8000934 <__udivmoddi4+0xcc>
 800092e:	4290      	cmp	r0, r2
 8000930:	f0c0 80f0 	bcc.w	8000b14 <__udivmoddi4+0x2ac>
 8000934:	1a86      	subs	r6, r0, r2
 8000936:	eb64 0303 	sbc.w	r3, r4, r3
 800093a:	2001      	movs	r0, #1
 800093c:	2d00      	cmp	r5, #0
 800093e:	d0e6      	beq.n	800090e <__udivmoddi4+0xa6>
 8000940:	e9c5 6300 	strd	r6, r3, [r5]
 8000944:	e7e3      	b.n	800090e <__udivmoddi4+0xa6>
 8000946:	2a00      	cmp	r2, #0
 8000948:	f040 8090 	bne.w	8000a6c <__udivmoddi4+0x204>
 800094c:	eba1 040c 	sub.w	r4, r1, ip
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa1f f78c 	uxth.w	r7, ip
 8000958:	2101      	movs	r1, #1
 800095a:	fbb4 f6f8 	udiv	r6, r4, r8
 800095e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000962:	fb08 4416 	mls	r4, r8, r6, r4
 8000966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800096a:	fb07 f006 	mul.w	r0, r7, r6
 800096e:	4298      	cmp	r0, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x11c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f106 34ff 	add.w	r4, r6, #4294967295
 800097a:	d202      	bcs.n	8000982 <__udivmoddi4+0x11a>
 800097c:	4298      	cmp	r0, r3
 800097e:	f200 80cd 	bhi.w	8000b1c <__udivmoddi4+0x2b4>
 8000982:	4626      	mov	r6, r4
 8000984:	1a1c      	subs	r4, r3, r0
 8000986:	fa1f f38e 	uxth.w	r3, lr
 800098a:	fbb4 f0f8 	udiv	r0, r4, r8
 800098e:	fb08 4410 	mls	r4, r8, r0, r4
 8000992:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000996:	fb00 f707 	mul.w	r7, r0, r7
 800099a:	429f      	cmp	r7, r3
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x148>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x146>
 80009a8:	429f      	cmp	r7, r3
 80009aa:	f200 80b0 	bhi.w	8000b0e <__udivmoddi4+0x2a6>
 80009ae:	4620      	mov	r0, r4
 80009b0:	1bdb      	subs	r3, r3, r7
 80009b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009b6:	e7a5      	b.n	8000904 <__udivmoddi4+0x9c>
 80009b8:	f1c1 0620 	rsb	r6, r1, #32
 80009bc:	408b      	lsls	r3, r1
 80009be:	fa22 f706 	lsr.w	r7, r2, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80009c8:	fa04 f301 	lsl.w	r3, r4, r1
 80009cc:	ea43 030c 	orr.w	r3, r3, ip
 80009d0:	40f4      	lsrs	r4, r6
 80009d2:	fa00 f801 	lsl.w	r8, r0, r1
 80009d6:	0c38      	lsrs	r0, r7, #16
 80009d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009dc:	fbb4 fef0 	udiv	lr, r4, r0
 80009e0:	fa1f fc87 	uxth.w	ip, r7
 80009e4:	fb00 441e 	mls	r4, r0, lr, r4
 80009e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ec:	fb0e f90c 	mul.w	r9, lr, ip
 80009f0:	45a1      	cmp	r9, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	d90a      	bls.n	8000a0e <__udivmoddi4+0x1a6>
 80009f8:	193c      	adds	r4, r7, r4
 80009fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009fe:	f080 8084 	bcs.w	8000b0a <__udivmoddi4+0x2a2>
 8000a02:	45a1      	cmp	r9, r4
 8000a04:	f240 8081 	bls.w	8000b0a <__udivmoddi4+0x2a2>
 8000a08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a0c:	443c      	add	r4, r7
 8000a0e:	eba4 0409 	sub.w	r4, r4, r9
 8000a12:	fa1f f983 	uxth.w	r9, r3
 8000a16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000a1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a26:	45a4      	cmp	ip, r4
 8000a28:	d907      	bls.n	8000a3a <__udivmoddi4+0x1d2>
 8000a2a:	193c      	adds	r4, r7, r4
 8000a2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a30:	d267      	bcs.n	8000b02 <__udivmoddi4+0x29a>
 8000a32:	45a4      	cmp	ip, r4
 8000a34:	d965      	bls.n	8000b02 <__udivmoddi4+0x29a>
 8000a36:	3b02      	subs	r3, #2
 8000a38:	443c      	add	r4, r7
 8000a3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000a42:	eba4 040c 	sub.w	r4, r4, ip
 8000a46:	429c      	cmp	r4, r3
 8000a48:	46ce      	mov	lr, r9
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	d351      	bcc.n	8000af2 <__udivmoddi4+0x28a>
 8000a4e:	d04e      	beq.n	8000aee <__udivmoddi4+0x286>
 8000a50:	b155      	cbz	r5, 8000a68 <__udivmoddi4+0x200>
 8000a52:	ebb8 030e 	subs.w	r3, r8, lr
 8000a56:	eb64 040c 	sbc.w	r4, r4, ip
 8000a5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a5e:	40cb      	lsrs	r3, r1
 8000a60:	431e      	orrs	r6, r3
 8000a62:	40cc      	lsrs	r4, r1
 8000a64:	e9c5 6400 	strd	r6, r4, [r5]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	e750      	b.n	800090e <__udivmoddi4+0xa6>
 8000a6c:	f1c2 0320 	rsb	r3, r2, #32
 8000a70:	fa20 f103 	lsr.w	r1, r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa24 f303 	lsr.w	r3, r4, r3
 8000a7c:	4094      	lsls	r4, r2
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a88:	fa1f f78c 	uxth.w	r7, ip
 8000a8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a90:	fb08 3110 	mls	r1, r8, r0, r3
 8000a94:	0c23      	lsrs	r3, r4, #16
 8000a96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a9a:	fb00 f107 	mul.w	r1, r0, r7
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x24c>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000aaa:	d22c      	bcs.n	8000b06 <__udivmoddi4+0x29e>
 8000aac:	4299      	cmp	r1, r3
 8000aae:	d92a      	bls.n	8000b06 <__udivmoddi4+0x29e>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000abc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ac0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ac4:	fb01 f307 	mul.w	r3, r1, r7
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x276>
 8000acc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ad0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ad4:	d213      	bcs.n	8000afe <__udivmoddi4+0x296>
 8000ad6:	42a3      	cmp	r3, r4
 8000ad8:	d911      	bls.n	8000afe <__udivmoddi4+0x296>
 8000ada:	3902      	subs	r1, #2
 8000adc:	4464      	add	r4, ip
 8000ade:	1ae4      	subs	r4, r4, r3
 8000ae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae4:	e739      	b.n	800095a <__udivmoddi4+0xf2>
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	e6f0      	b.n	80008cc <__udivmoddi4+0x64>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e706      	b.n	80008fc <__udivmoddi4+0x94>
 8000aee:	45c8      	cmp	r8, r9
 8000af0:	d2ae      	bcs.n	8000a50 <__udivmoddi4+0x1e8>
 8000af2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000af6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000afa:	3801      	subs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <__udivmoddi4+0x1e8>
 8000afe:	4631      	mov	r1, r6
 8000b00:	e7ed      	b.n	8000ade <__udivmoddi4+0x276>
 8000b02:	4603      	mov	r3, r0
 8000b04:	e799      	b.n	8000a3a <__udivmoddi4+0x1d2>
 8000b06:	4630      	mov	r0, r6
 8000b08:	e7d4      	b.n	8000ab4 <__udivmoddi4+0x24c>
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	e77f      	b.n	8000a0e <__udivmoddi4+0x1a6>
 8000b0e:	4463      	add	r3, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e74d      	b.n	80009b0 <__udivmoddi4+0x148>
 8000b14:	4606      	mov	r6, r0
 8000b16:	4623      	mov	r3, r4
 8000b18:	4608      	mov	r0, r1
 8000b1a:	e70f      	b.n	800093c <__udivmoddi4+0xd4>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	e730      	b.n	8000984 <__udivmoddi4+0x11c>
 8000b22:	bf00      	nop

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <LPF_cmd_filter_init>:
LPF_s commands_fltrs[4] ;
float cmds_out[4];
float COF_cmds[4];

void LPF_cmd_filter_init(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
	//
	COF_cmds[0] = CutOffFreq_cmd_ail;
 8000b2e:	4b40      	ldr	r3, [pc, #256]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b30:	4a40      	ldr	r2, [pc, #256]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b32:	601a      	str	r2, [r3, #0]
	COF_cmds[1] = CutOffFreq_cmd_ele;
 8000b34:	4b3e      	ldr	r3, [pc, #248]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b36:	4a3f      	ldr	r2, [pc, #252]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b38:	605a      	str	r2, [r3, #4]
	COF_cmds[2] = CutOffFreq_cmd_rud;
 8000b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b3e:	609a      	str	r2, [r3, #8]
	COF_cmds[3] = CutOffFreq_cmd_thr;
 8000b40:	4b3b      	ldr	r3, [pc, #236]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b42:	4a3c      	ldr	r2, [pc, #240]	@ (8000c34 <LPF_cmd_filter_init+0x10c>)
 8000b44:	60da      	str	r2, [r3, #12]
	for(int idx = 0; idx < 4; idx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	e066      	b.n	8000c1a <LPF_cmd_filter_init+0xf2>
	{
		//
		commands_fltrs[idx].inicio 		= 1;
 8000b4c:	4a3a      	ldr	r2, [pc, #232]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	212c      	movs	r1, #44	@ 0x2c
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	4413      	add	r3, r2
 8000b58:	3328      	adds	r3, #40	@ 0x28
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].f_cutoff 	= COF_cmds[idx];
 8000b5e:	4a34      	ldr	r2, [pc, #208]	@ (8000c30 <LPF_cmd_filter_init+0x108>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4933      	ldr	r1, [pc, #204]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	202c      	movs	r0, #44	@ 0x2c
 8000b6e:	fb00 f303 	mul.w	r3, r0, r3
 8000b72:	440b      	add	r3, r1
 8000b74:	3318      	adds	r3, #24
 8000b76:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_sample 	= SAMPLE_ATT ;
 8000b78:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	212c      	movs	r1, #44	@ 0x2c
 8000b7e:	fb01 f303 	mul.w	r3, r1, r3
 8000b82:	4413      	add	r3, r2
 8000b84:	331c      	adds	r3, #28
 8000b86:	4a2d      	ldr	r2, [pc, #180]	@ (8000c3c <LPF_cmd_filter_init+0x114>)
 8000b88:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_0 		= 0.0f ;
 8000b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	212c      	movs	r1, #44	@ 0x2c
 8000b90:	fb01 f303 	mul.w	r3, r1, r3
 8000b94:	4413      	add	r3, r2
 8000b96:	3308      	adds	r3, #8
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].U_n 		= 0.0f ;
 8000b9e:	4a26      	ldr	r2, [pc, #152]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	212c      	movs	r1, #44	@ 0x2c
 8000ba4:	fb01 f303 	mul.w	r3, r1, r3
 8000ba8:	4413      	add	r3, r2
 8000baa:	330c      	adds	r3, #12
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_n 		= 0.0f ;
 8000bb2:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	212c      	movs	r1, #44	@ 0x2c
 8000bb8:	fb01 f303 	mul.w	r3, r1, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].Y_nm1 		= 0.0f ;
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	212c      	movs	r1, #44	@ 0x2c
 8000bca:	fb01 f303 	mul.w	r3, r1, r3
 8000bce:	4413      	add	r3, r2
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].U_nm1 		= 0.0f ;
 8000bd8:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	212c      	movs	r1, #44	@ 0x2c
 8000bde:	fb01 f303 	mul.w	r3, r1, r3
 8000be2:	4413      	add	r3, r2
 8000be4:	3310      	adds	r3, #16
 8000be6:	f04f 0200 	mov.w	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_n 		= 0.0f ;
 8000bec:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	212c      	movs	r1, #44	@ 0x2c
 8000bf2:	fb01 f303 	mul.w	r3, r1, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3320      	adds	r3, #32
 8000bfa:	f04f 0200 	mov.w	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx].t_nm1 		= 0.0f ;
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <LPF_cmd_filter_init+0x110>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	212c      	movs	r1, #44	@ 0x2c
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	3324      	adds	r3, #36	@ 0x24
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
	for(int idx = 0; idx < 4; idx++)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3301      	adds	r3, #1
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	dd95      	ble.n	8000b4c <LPF_cmd_filter_init+0x24>
	}
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	2400037c 	.word	0x2400037c
 8000c34:	42480000 	.word	0x42480000
 8000c38:	240002cc 	.word	0x240002cc
 8000c3c:	3ba3d70a 	.word	0x3ba3d70a

08000c40 <command_filtering>:

void command_filtering(void)
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b092      	sub	sp, #72	@ 0x48
 8000c44:	af00      	add	r7, sp, #0
	//
	Cmd_s commands ;

	commands_noise[0] = Command_out.roll   ;
 8000c46:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <command_filtering+0xa0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a26      	ldr	r2, [pc, #152]	@ (8000ce4 <command_filtering+0xa4>)
 8000c4c:	6013      	str	r3, [r2, #0]
	commands_noise[1] = Command_out.pitch  ;
 8000c4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <command_filtering+0xa0>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a24      	ldr	r2, [pc, #144]	@ (8000ce4 <command_filtering+0xa4>)
 8000c54:	6053      	str	r3, [r2, #4]
	commands_noise[2] = Command_out.yaw    ;
 8000c56:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <command_filtering+0xa0>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	4a22      	ldr	r2, [pc, #136]	@ (8000ce4 <command_filtering+0xa4>)
 8000c5c:	6093      	str	r3, [r2, #8]
	commands_noise[3] = Command_out.thrust ;
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <command_filtering+0xa0>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	4a20      	ldr	r2, [pc, #128]	@ (8000ce4 <command_filtering+0xa4>)
 8000c64:	60d3      	str	r3, [r2, #12]

	for(int idx = 0; idx < 4; idx++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c6a:	e024      	b.n	8000cb6 <command_filtering+0x76>
	{
		//
		commands_fltrs[idx].U_n 	= commands_noise[idx];
 8000c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce4 <command_filtering+0xa4>)
 8000c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	491c      	ldr	r1, [pc, #112]	@ (8000ce8 <command_filtering+0xa8>)
 8000c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c7a:	202c      	movs	r0, #44	@ 0x2c
 8000c7c:	fb00 f303 	mul.w	r3, r0, r3
 8000c80:	440b      	add	r3, r1
 8000c82:	330c      	adds	r3, #12
 8000c84:	601a      	str	r2, [r3, #0]
		commands_fltrs[idx] 		= filtering_lpf(&commands_fltrs);
 8000c86:	4a18      	ldr	r2, [pc, #96]	@ (8000ce8 <command_filtering+0xa8>)
 8000c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c8a:	212c      	movs	r1, #44	@ 0x2c
 8000c8c:	fb01 f303 	mul.w	r3, r1, r3
 8000c90:	18d4      	adds	r4, r2, r3
 8000c92:	463b      	mov	r3, r7
 8000c94:	4914      	ldr	r1, [pc, #80]	@ (8000ce8 <command_filtering+0xa8>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fbcc 	bl	8001434 <filtering_lpf>
 8000c9c:	4625      	mov	r5, r4
 8000c9e:	463c      	mov	r4, r7
 8000ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ca8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000cac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	for(int idx = 0; idx < 4; idx++)
 8000cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000cb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	ddd7      	ble.n	8000c6c <command_filtering+0x2c>

	}
	//
	commands.roll 		= commands_fltrs[0].Y_n ;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <command_filtering+0xa8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	637b      	str	r3, [r7, #52]	@ 0x34
	commands.pitch 	= commands_fltrs[1].Y_n ;
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <command_filtering+0xa8>)
 8000cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
	commands.yaw 		= commands_fltrs[2].Y_n ;
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <command_filtering+0xa8>)
 8000cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	commands.thrust 	= commands_fltrs[3].Y_n ;
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <command_filtering+0xa8>)
 8000cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000cd4:	643b      	str	r3, [r7, #64]	@ 0x40


}
 8000cd6:	bf00      	nop
 8000cd8:	3748      	adds	r7, #72	@ 0x48
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	240002ac 	.word	0x240002ac
 8000ce4:	240002bc 	.word	0x240002bc
 8000ce8:	240002cc 	.word	0x240002cc
 8000cec:	00000000 	.word	0x00000000

08000cf0 <get_commands_rc>:
    }
    return signal_out;
}

Cmd_s get_commands_rc(void)
{
 8000cf0:	b490      	push	{r4, r7}
 8000cf2:	b08c      	sub	sp, #48	@ 0x30
 8000cf4:	af00      	add	r7, sp, #0
	//
	Cmd_s out_norms;

	out_norms.roll 		= ((float)Radio_input.Canal_1 - 1500.0 ) / 500.0 ;
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000df0 <get_commands_rc+0x100>)
 8000cf8:	885b      	ldrh	r3, [r3, #2]
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d06:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8000dd8 <get_commands_rc+0xe8>
 8000d0a:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000d0e:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 8000de0 <get_commands_rc+0xf0>
 8000d12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d1a:	edc7 7a04 	vstr	s15, [r7, #16]

	out_norms.pitch 	= ((float)Radio_input.Canal_2 - 1500.0 ) / 500.0 ;
 8000d1e:	4b34      	ldr	r3, [pc, #208]	@ (8000df0 <get_commands_rc+0x100>)
 8000d20:	889b      	ldrh	r3, [r3, #4]
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d2e:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8000dd8 <get_commands_rc+0xe8>
 8000d32:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000d36:	ed9f 5b2a 	vldr	d5, [pc, #168]	@ 8000de0 <get_commands_rc+0xf0>
 8000d3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d42:	edc7 7a05 	vstr	s15, [r7, #20]

	out_norms.yaw 		= ((float)Radio_input.Canal_3 - 1500.0 ) / 500.0 ;
 8000d46:	4b2a      	ldr	r3, [pc, #168]	@ (8000df0 <get_commands_rc+0x100>)
 8000d48:	88db      	ldrh	r3, [r3, #6]
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d56:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8000dd8 <get_commands_rc+0xe8>
 8000d5a:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000d5e:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8000de0 <get_commands_rc+0xf0>
 8000d62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d6a:	edc7 7a06 	vstr	s15, [r7, #24]

	out_norms.thrust 	= ((float)Radio_input.Canal_4 - 1000.0 ) / 1000.0 ;
 8000d6e:	4b20      	ldr	r3, [pc, #128]	@ (8000df0 <get_commands_rc+0x100>)
 8000d70:	891b      	ldrh	r3, [r3, #8]
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d7e:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 8000de8 <get_commands_rc+0xf8>
 8000d82:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000d86:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8000de8 <get_commands_rc+0xf8>
 8000d8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d92:	edc7 7a07 	vstr	s15, [r7, #28]

	return out_norms;
 8000d96:	f107 0420 	add.w	r4, r7, #32
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000da4:	6a38      	ldr	r0, [r7, #32]
 8000da6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000da8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dac:	ee06 0a10 	vmov	s12, r0
 8000db0:	ee06 1a90 	vmov	s13, r1
 8000db4:	ee07 2a10 	vmov	s14, r2
 8000db8:	ee07 3a90 	vmov	s15, r3
}
 8000dbc:	eeb0 0a46 	vmov.f32	s0, s12
 8000dc0:	eef0 0a66 	vmov.f32	s1, s13
 8000dc4:	eeb0 1a47 	vmov.f32	s2, s14
 8000dc8:	eef0 1a67 	vmov.f32	s3, s15
 8000dcc:	3730      	adds	r7, #48	@ 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc90      	pop	{r4, r7}
 8000dd2:	4770      	bx	lr
 8000dd4:	f3af 8000 	nop.w
 8000dd8:	00000000 	.word	0x00000000
 8000ddc:	40977000 	.word	0x40977000
 8000de0:	00000000 	.word	0x00000000
 8000de4:	407f4000 	.word	0x407f4000
 8000de8:	00000000 	.word	0x00000000
 8000dec:	408f4000 	.word	0x408f4000
 8000df0:	2400007c 	.word	0x2400007c

08000df4 <FlightTaskAttitude>:
Cmd_s rates_Gains;



void FlightTaskAttitude(void)
{
 8000df4:	b598      	push	{r3, r4, r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	//
	attitude_parameters_refresh();
 8000df8:	f000 f8b2 	bl	8000f60 <attitude_parameters_refresh>

	refresh_actual_rates();
 8000dfc:	f000 f9b4 	bl	8001168 <refresh_actual_rates>

	get_flight_mode();
 8000e00:	f000 f8a2 	bl	8000f48 <get_flight_mode>

	Command_in = get_commands_rc();
 8000e04:	f7ff ff74 	bl	8000cf0 <get_commands_rc>
 8000e08:	eeb0 6a40 	vmov.f32	s12, s0
 8000e0c:	eef0 6a60 	vmov.f32	s13, s1
 8000e10:	eeb0 7a41 	vmov.f32	s14, s2
 8000e14:	eef0 7a61 	vmov.f32	s15, s3
 8000e18:	4b30      	ldr	r3, [pc, #192]	@ (8000edc <FlightTaskAttitude+0xe8>)
 8000e1a:	ed83 6a00 	vstr	s12, [r3]
 8000e1e:	edc3 6a01 	vstr	s13, [r3, #4]
 8000e22:	ed83 7a02 	vstr	s14, [r3, #8]
 8000e26:	edc3 7a03 	vstr	s15, [r3, #12]


	switch(mode)
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee0 <FlightTaskAttitude+0xec>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	dc47      	bgt.n	8000ec2 <FlightTaskAttitude+0xce>
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	da4c      	bge.n	8000ed0 <FlightTaskAttitude+0xdc>
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d03c      	beq.n	8000eb4 <FlightTaskAttitude+0xc0>
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d141      	bne.n	8000ec2 <FlightTaskAttitude+0xce>
	case ATTITUDE_HOLD_MODE:
//		AttitudeHold();
		break;
	case RATE_MODE:
		//
		Command_out = rates_control_law(Command_in , actual_rates, rates_Gains);
 8000e3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ee4 <FlightTaskAttitude+0xf0>)
 8000e40:	edd3 3a00 	vldr	s7, [r3]
 8000e44:	ed93 4a01 	vldr	s8, [r3, #4]
 8000e48:	edd3 4a02 	vldr	s9, [r3, #8]
 8000e4c:	ed93 5a03 	vldr	s10, [r3, #12]
 8000e50:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <FlightTaskAttitude+0xf4>)
 8000e52:	edd3 2a00 	vldr	s5, [r3]
 8000e56:	ed93 3a01 	vldr	s6, [r3, #4]
 8000e5a:	edd3 5a02 	vldr	s11, [r3, #8]
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <FlightTaskAttitude+0xe8>)
 8000e60:	ed93 6a00 	vldr	s12, [r3]
 8000e64:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e68:	ed93 7a02 	vldr	s14, [r3, #8]
 8000e6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e70:	eeb0 2a62 	vmov.f32	s4, s5
 8000e74:	eef0 2a43 	vmov.f32	s5, s6
 8000e78:	eeb0 3a65 	vmov.f32	s6, s11
 8000e7c:	eeb0 0a46 	vmov.f32	s0, s12
 8000e80:	eef0 0a66 	vmov.f32	s1, s13
 8000e84:	eeb0 1a47 	vmov.f32	s2, s14
 8000e88:	eef0 1a67 	vmov.f32	s3, s15
 8000e8c:	f000 f87c 	bl	8000f88 <rates_control_law>
 8000e90:	eeb0 6a40 	vmov.f32	s12, s0
 8000e94:	eef0 6a60 	vmov.f32	s13, s1
 8000e98:	eeb0 7a41 	vmov.f32	s14, s2
 8000e9c:	eef0 7a61 	vmov.f32	s15, s3
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <FlightTaskAttitude+0xf8>)
 8000ea2:	ed83 6a00 	vstr	s12, [r3]
 8000ea6:	edc3 6a01 	vstr	s13, [r3, #4]
 8000eaa:	ed83 7a02 	vstr	s14, [r3, #8]
 8000eae:	edc3 7a03 	vstr	s15, [r3, #12]
		break;
 8000eb2:	e00e      	b.n	8000ed2 <FlightTaskAttitude+0xde>
	case MANUAL_MODE:
		//
		Command_out = Command_in;
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <FlightTaskAttitude+0xf8>)
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <FlightTaskAttitude+0xe8>)
 8000eb8:	4614      	mov	r4, r2
 8000eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 8000ec0:	e007      	b.n	8000ed2 <FlightTaskAttitude+0xde>
	default:
		//
		Command_out = Command_in;
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <FlightTaskAttitude+0xf8>)
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <FlightTaskAttitude+0xe8>)
 8000ec6:	4614      	mov	r4, r2
 8000ec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		break;
 8000ece:	e000      	b.n	8000ed2 <FlightTaskAttitude+0xde>
		break;
 8000ed0:	bf00      	nop
	}

	command_filtering();
 8000ed2:	f7ff feb5 	bl	8000c40 <command_filtering>

}
 8000ed6:	bf00      	nop
 8000ed8:	bd98      	pop	{r3, r4, r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2400038c 	.word	0x2400038c
 8000ee0:	240003ac 	.word	0x240003ac
 8000ee4:	2400039c 	.word	0x2400039c
 8000ee8:	2400044c 	.word	0x2400044c
 8000eec:	240002ac 	.word	0x240002ac

08000ef0 <rc_three_steps_CurrentMode>:
#include "Flight_Management_Control/modes_management.h"

FlightMode_t mode ;

uint8_t rc_three_steps_CurrentMode(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
	//
	uint16_t pwm_value = Radio_input.Canal_5;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <rc_three_steps_CurrentMode+0x50>)
 8000ef8:	895b      	ldrh	r3, [r3, #10]
 8000efa:	80fb      	strh	r3, [r7, #6]

	if (pwm_value < (PWM_MID - PWM_DEADZONE))
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d801      	bhi.n	8000f0a <rc_three_steps_CurrentMode+0x1a>
	{
	        return MANUAL_MODE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e014      	b.n	8000f34 <rc_three_steps_CurrentMode+0x44>
	 }
	else if (pwm_value < (PWM_MID + PWM_DEADZONE) && pwm_value > (PWM_MAX - PWM_DEADZONE))
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d806      	bhi.n	8000f22 <rc_three_steps_CurrentMode+0x32>
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d901      	bls.n	8000f22 <rc_three_steps_CurrentMode+0x32>
	 {
	        return RATE_MODE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e008      	b.n	8000f34 <rc_three_steps_CurrentMode+0x44>
	  }
	else if (pwm_value >= (PWM_MAX - PWM_DEADZONE))
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	f240 62d5 	movw	r2, #1749	@ 0x6d5
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d901      	bls.n	8000f30 <rc_three_steps_CurrentMode+0x40>
	 {
	        return ATTITUDE_HOLD_MODE;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e001      	b.n	8000f34 <rc_three_steps_CurrentMode+0x44>
	  }
	else {
	        // Zona muerta → mantener último modo (evita oscilaciones)
	        static FlightMode_t last_mode = MANUAL_MODE;
	        return last_mode;
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <rc_three_steps_CurrentMode+0x54>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
	    }

}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	2400007c 	.word	0x2400007c
 8000f44:	240003ad 	.word	0x240003ad

08000f48 <get_flight_mode>:

void get_flight_mode(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	//
	mode = (FlightMode_t)rc_three_steps_CurrentMode();
 8000f4c:	f7ff ffd0 	bl	8000ef0 <rc_three_steps_CurrentMode>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b01      	ldr	r3, [pc, #4]	@ (8000f5c <get_flight_mode+0x14>)
 8000f56:	701a      	strb	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	240003ac 	.word	0x240003ac

08000f60 <attitude_parameters_refresh>:
#include "Flight_Management_Control/parameters_manager.h"
#include "Flight_Management_Control/flight_management.h"


void attitude_parameters_refresh(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
	//
	rates_Gains.roll  = K_P * 100;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <attitude_parameters_refresh+0x20>)
 8000f66:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <attitude_parameters_refresh+0x24>)
 8000f68:	601a      	str	r2, [r3, #0]
	rates_Gains.pitch = K_Q * 100;
 8000f6a:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <attitude_parameters_refresh+0x20>)
 8000f6c:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <attitude_parameters_refresh+0x24>)
 8000f6e:	605a      	str	r2, [r3, #4]
	rates_Gains.yaw   = K_R * 100;
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <attitude_parameters_refresh+0x20>)
 8000f72:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <attitude_parameters_refresh+0x24>)
 8000f74:	609a      	str	r2, [r3, #8]

}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	2400039c 	.word	0x2400039c
 8000f84:	3dcccccd 	.word	0x3dcccccd

08000f88 <rates_control_law>:
 *      Author: rtrujillo
 */
#include "Flight_Management_Control/rates_mode.h"

Cmd_s rates_control_law(Cmd_s inputs_norms, Gyro_s actual_gyro, Cmd_s K)
{
 8000f88:	b490      	push	{r4, r7}
 8000f8a:	b098      	sub	sp, #96	@ 0x60
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	eef0 5a43 	vmov.f32	s11, s6
 8000f92:	eeb0 6a63 	vmov.f32	s12, s7
 8000f96:	eef0 6a44 	vmov.f32	s13, s8
 8000f9a:	eeb0 7a64 	vmov.f32	s14, s9
 8000f9e:	eef0 7a45 	vmov.f32	s15, s10
 8000fa2:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8000fa6:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 8000faa:	ed87 1a0e 	vstr	s2, [r7, #56]	@ 0x38
 8000fae:	edc7 1a0f 	vstr	s3, [r7, #60]	@ 0x3c
 8000fb2:	ed87 2a09 	vstr	s4, [r7, #36]	@ 0x24
 8000fb6:	edc7 2a0a 	vstr	s5, [r7, #40]	@ 0x28
 8000fba:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8000fbe:	ed87 6a05 	vstr	s12, [r7, #20]
 8000fc2:	edc7 6a06 	vstr	s13, [r7, #24]
 8000fc6:	ed87 7a07 	vstr	s14, [r7, #28]
 8000fca:	edc7 7a08 	vstr	s15, [r7, #32]
	//
	Cmd_s out_puts;

	out_puts.roll   = inputs_norms.roll  -  actual_gyro.roll * K.roll ;
 8000fce:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8000fd2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000fd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	out_puts.pitch  = inputs_norms.pitch -  actual_gyro.pitch* K.pitch ;
 8000fe6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000fea:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000fee:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	out_puts.yaw    = inputs_norms.yaw   -  actual_gyro.yaw  * K.yaw ;
 8000ffe:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001002:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001006:	edd7 7a07 	vldr	s15, [r7, #28]
 800100a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800100e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001012:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	out_puts.thrust = inputs_norms.thrust ;
 8001016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001018:	64fb      	str	r3, [r7, #76]	@ 0x4c

	return out_puts ;
 800101a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800101e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001028:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800102a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800102c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800102e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001030:	ee06 0a10 	vmov	s12, r0
 8001034:	ee06 1a90 	vmov	s13, r1
 8001038:	ee07 2a10 	vmov	s14, r2
 800103c:	ee07 3a90 	vmov	s15, r3
}
 8001040:	eeb0 0a46 	vmov.f32	s0, s12
 8001044:	eef0 0a66 	vmov.f32	s1, s13
 8001048:	eeb0 1a47 	vmov.f32	s2, s14
 800104c:	eef0 1a67 	vmov.f32	s3, s15
 8001050:	3760      	adds	r7, #96	@ 0x60
 8001052:	46bd      	mov	sp, r7
 8001054:	bc90      	pop	{r4, r7}
 8001056:	4770      	bx	lr

08001058 <LPF_gyro_filter_init>:


Gyro_s actual_rates;

void LPF_gyro_filter_init(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
	// Inicializaciones
	LPF_gyros[0] = LPF_gyro_x ;
 800105e:	4b3e      	ldr	r3, [pc, #248]	@ (8001158 <LPF_gyro_filter_init+0x100>)
 8001060:	4a3e      	ldr	r2, [pc, #248]	@ (800115c <LPF_gyro_filter_init+0x104>)
 8001062:	601a      	str	r2, [r3, #0]
	LPF_gyros[1] = LPF_gyro_y ;
 8001064:	4b3c      	ldr	r3, [pc, #240]	@ (8001158 <LPF_gyro_filter_init+0x100>)
 8001066:	4a3d      	ldr	r2, [pc, #244]	@ (800115c <LPF_gyro_filter_init+0x104>)
 8001068:	605a      	str	r2, [r3, #4]
	LPF_gyros[2] = LPF_gyro_z ;
 800106a:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <LPF_gyro_filter_init+0x100>)
 800106c:	4a3b      	ldr	r2, [pc, #236]	@ (800115c <LPF_gyro_filter_init+0x104>)
 800106e:	609a      	str	r2, [r3, #8]
	for(int idx = 0;idx < 3; idx++)
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	e066      	b.n	8001144 <LPF_gyro_filter_init+0xec>
	{
		//
		gyros_fltrs[idx].inicio 	= 1;
 8001076:	4a3a      	ldr	r2, [pc, #232]	@ (8001160 <LPF_gyro_filter_init+0x108>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	212c      	movs	r1, #44	@ 0x2c
 800107c:	fb01 f303 	mul.w	r3, r1, r3
 8001080:	4413      	add	r3, r2
 8001082:	3328      	adds	r3, #40	@ 0x28
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].f_cutoff 	= LPF_gyros[idx] ;
 8001088:	4a33      	ldr	r2, [pc, #204]	@ (8001158 <LPF_gyro_filter_init+0x100>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4933      	ldr	r1, [pc, #204]	@ (8001160 <LPF_gyro_filter_init+0x108>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	202c      	movs	r0, #44	@ 0x2c
 8001098:	fb00 f303 	mul.w	r3, r0, r3
 800109c:	440b      	add	r3, r1
 800109e:	3318      	adds	r3, #24
 80010a0:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_sample 	= SAMPLE_ATT ;
 80010a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001160 <LPF_gyro_filter_init+0x108>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	212c      	movs	r1, #44	@ 0x2c
 80010a8:	fb01 f303 	mul.w	r3, r1, r3
 80010ac:	4413      	add	r3, r2
 80010ae:	331c      	adds	r3, #28
 80010b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001164 <LPF_gyro_filter_init+0x10c>)
 80010b2:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_0 		= 0.0f ;
 80010b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001160 <LPF_gyro_filter_init+0x108>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	212c      	movs	r1, #44	@ 0x2c
 80010ba:	fb01 f303 	mul.w	r3, r1, r3
 80010be:	4413      	add	r3, r2
 80010c0:	3308      	adds	r3, #8
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_n 		= 0.0f;
 80010c8:	4a25      	ldr	r2, [pc, #148]	@ (8001160 <LPF_gyro_filter_init+0x108>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	212c      	movs	r1, #44	@ 0x2c
 80010ce:	fb01 f303 	mul.w	r3, r1, r3
 80010d2:	4413      	add	r3, r2
 80010d4:	330c      	adds	r3, #12
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_n 		= 0.0f;
 80010dc:	4a20      	ldr	r2, [pc, #128]	@ (8001160 <LPF_gyro_filter_init+0x108>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	212c      	movs	r1, #44	@ 0x2c
 80010e2:	fb01 f303 	mul.w	r3, r1, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].Y_nm1 		= 0.0f;
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <LPF_gyro_filter_init+0x108>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	212c      	movs	r1, #44	@ 0x2c
 80010f4:	fb01 f303 	mul.w	r3, r1, r3
 80010f8:	4413      	add	r3, r2
 80010fa:	3304      	adds	r3, #4
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].U_nm1 		= 0.0f;
 8001102:	4a17      	ldr	r2, [pc, #92]	@ (8001160 <LPF_gyro_filter_init+0x108>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	212c      	movs	r1, #44	@ 0x2c
 8001108:	fb01 f303 	mul.w	r3, r1, r3
 800110c:	4413      	add	r3, r2
 800110e:	3310      	adds	r3, #16
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_n 		= 0.0f;
 8001116:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <LPF_gyro_filter_init+0x108>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	212c      	movs	r1, #44	@ 0x2c
 800111c:	fb01 f303 	mul.w	r3, r1, r3
 8001120:	4413      	add	r3, r2
 8001122:	3320      	adds	r3, #32
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
		gyros_fltrs[idx].t_nm1 		= 0.0f;
 800112a:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <LPF_gyro_filter_init+0x108>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	212c      	movs	r1, #44	@ 0x2c
 8001130:	fb01 f303 	mul.w	r3, r1, r3
 8001134:	4413      	add	r3, r2
 8001136:	3324      	adds	r3, #36	@ 0x24
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
	for(int idx = 0;idx < 3; idx++)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3301      	adds	r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b02      	cmp	r3, #2
 8001148:	dd95      	ble.n	8001076 <LPF_gyro_filter_init+0x1e>

	}

}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	24000434 	.word	0x24000434
 800115c:	42480000 	.word	0x42480000
 8001160:	240003b0 	.word	0x240003b0
 8001164:	3ba3d70a 	.word	0x3ba3d70a

08001168 <refresh_actual_rates>:

void refresh_actual_rates(void)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b08e      	sub	sp, #56	@ 0x38
 800116c:	af00      	add	r7, sp, #0
	//
	imu_gyr[0] 		= IMU.GYR.x ;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <refresh_actual_rates+0xa0>)
 8001170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001172:	4a26      	ldr	r2, [pc, #152]	@ (800120c <refresh_actual_rates+0xa4>)
 8001174:	6013      	str	r3, [r2, #0]
	imu_gyr[1] 		= IMU.GYR.y ;
 8001176:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <refresh_actual_rates+0xa0>)
 8001178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117a:	4a24      	ldr	r2, [pc, #144]	@ (800120c <refresh_actual_rates+0xa4>)
 800117c:	6053      	str	r3, [r2, #4]
	imu_gyr[2] 		= IMU.GYR.z ;
 800117e:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <refresh_actual_rates+0xa0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a22      	ldr	r2, [pc, #136]	@ (800120c <refresh_actual_rates+0xa4>)
 8001184:	6093      	str	r3, [r2, #8]

	//
	for(int idx = 0; idx < 3; idx++)
 8001186:	2300      	movs	r3, #0
 8001188:	637b      	str	r3, [r7, #52]	@ 0x34
 800118a:	e02a      	b.n	80011e2 <refresh_actual_rates+0x7a>
	{
		//
		gyros_fltrs[idx].U_n = imu_gyr[idx];
 800118c:	4a1f      	ldr	r2, [pc, #124]	@ (800120c <refresh_actual_rates+0xa4>)
 800118e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	491e      	ldr	r1, [pc, #120]	@ (8001210 <refresh_actual_rates+0xa8>)
 8001198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800119a:	202c      	movs	r0, #44	@ 0x2c
 800119c:	fb00 f303 	mul.w	r3, r0, r3
 80011a0:	440b      	add	r3, r1
 80011a2:	330c      	adds	r3, #12
 80011a4:	601a      	str	r2, [r3, #0]

		gyros_fltrs[idx] = filtering_lpf(&gyros_fltrs[idx]);
 80011a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a8:	222c      	movs	r2, #44	@ 0x2c
 80011aa:	fb02 f303 	mul.w	r3, r2, r3
 80011ae:	4a18      	ldr	r2, [pc, #96]	@ (8001210 <refresh_actual_rates+0xa8>)
 80011b0:	441a      	add	r2, r3
 80011b2:	4917      	ldr	r1, [pc, #92]	@ (8001210 <refresh_actual_rates+0xa8>)
 80011b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b6:	202c      	movs	r0, #44	@ 0x2c
 80011b8:	fb00 f303 	mul.w	r3, r0, r3
 80011bc:	18cc      	adds	r4, r1, r3
 80011be:	463b      	mov	r3, r7
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f936 	bl	8001434 <filtering_lpf>
 80011c8:	4625      	mov	r5, r4
 80011ca:	463c      	mov	r4, r7
 80011cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	for(int idx = 0; idx < 3; idx++)
 80011dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011de:	3301      	adds	r3, #1
 80011e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80011e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	ddd1      	ble.n	800118c <refresh_actual_rates+0x24>
	}

	actual_rates.roll  = gyros_fltrs[0].Y_n ;
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <refresh_actual_rates+0xa8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <refresh_actual_rates+0xac>)
 80011ee:	6013      	str	r3, [r2, #0]
	actual_rates.pitch = gyros_fltrs[1].Y_n ;
 80011f0:	4b07      	ldr	r3, [pc, #28]	@ (8001210 <refresh_actual_rates+0xa8>)
 80011f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <refresh_actual_rates+0xac>)
 80011f6:	6053      	str	r3, [r2, #4]
	actual_rates.yaw   = gyros_fltrs[2].Y_n ;
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <refresh_actual_rates+0xa8>)
 80011fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fc:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <refresh_actual_rates+0xac>)
 80011fe:	6093      	str	r3, [r2, #8]
}
 8001200:	bf00      	nop
 8001202:	3738      	adds	r7, #56	@ 0x38
 8001204:	46bd      	mov	sp, r7
 8001206:	bdb0      	pop	{r4, r5, r7, pc}
 8001208:	24001620 	.word	0x24001620
 800120c:	24000440 	.word	0x24000440
 8001210:	240003b0 	.word	0x240003b0
 8001214:	2400044c 	.word	0x2400044c

08001218 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <MX_DMA_Init+0x5c>)
 8001220:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001224:	4a13      	ldr	r2, [pc, #76]	@ (8001274 <MX_DMA_Init+0x5c>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <MX_DMA_Init+0x5c>)
 8001230:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2105      	movs	r1, #5
 8001240:	200b      	movs	r0, #11
 8001242:	f004 fe01 	bl	8005e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001246:	200b      	movs	r0, #11
 8001248:	f004 fe18 	bl	8005e7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2105      	movs	r1, #5
 8001250:	200c      	movs	r0, #12
 8001252:	f004 fdf9 	bl	8005e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001256:	200c      	movs	r0, #12
 8001258:	f004 fe10 	bl	8005e7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2105      	movs	r1, #5
 8001260:	200d      	movs	r0, #13
 8001262:	f004 fdf1 	bl	8005e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001266:	200d      	movs	r0, #13
 8001268:	f004 fe08 	bl	8005e7c <HAL_NVIC_EnableIRQ>

}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58024400 	.word	0x58024400

08001278 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800127c:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 800127e:	4a2f      	ldr	r2, [pc, #188]	@ (800133c <MX_FDCAN1_Init+0xc4>)
 8001280:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001282:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001288:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800128e:	4b2a      	ldr	r3, [pc, #168]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 8001290:	2200      	movs	r2, #0
 8001292:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001294:	4b28      	ldr	r3, [pc, #160]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800129a:	4b27      	ldr	r3, [pc, #156]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 800129c:	2200      	movs	r2, #0
 800129e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80012a0:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012a2:	2210      	movs	r2, #16
 80012a4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80012a6:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80012ac:	4b22      	ldr	r3, [pc, #136]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80012b2:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012b4:	2202      	movs	r2, #2
 80012b6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80012e8:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012ea:	2204      	movs	r2, #4
 80012ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80012ee:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80012f4:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012f6:	2204      	movs	r2, #4
 80012f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001300:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 8001302:	2204      	movs	r2, #4
 8001304:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001306:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 8001308:	2200      	movs	r2, #0
 800130a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 800130e:	2200      	movs	r2, #0
 8001310:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 8001314:	2200      	movs	r2, #0
 8001316:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001318:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 800131a:	2200      	movs	r2, #0
 800131c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 8001320:	2204      	movs	r2, #4
 8001322:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	@ (8001338 <MX_FDCAN1_Init+0xc0>)
 8001326:	f007 fd19 	bl	8008d5c <HAL_FDCAN_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001330:	f001 f936 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	24000458 	.word	0x24000458
 800133c:	4000a000 	.word	0x4000a000

08001340 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0ba      	sub	sp, #232	@ 0xe8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	22c0      	movs	r2, #192	@ 0xc0
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f015 fe88 	bl	8017076 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a2f      	ldr	r2, [pc, #188]	@ (8001428 <HAL_FDCAN_MspInit+0xe8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d157      	bne.n	8001420 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001370:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800137c:	2304      	movs	r3, #4
 800137e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001380:	2308      	movs	r3, #8
 8001382:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001390:	23c0      	movs	r3, #192	@ 0xc0
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800139c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4618      	mov	r0, r3
 80013aa:	f009 fb73 	bl	800aa94 <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80013b4:	f001 f8f4 	bl	80025a0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80013b8:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <HAL_FDCAN_MspInit+0xec>)
 80013ba:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013be:	4a1b      	ldr	r2, [pc, #108]	@ (800142c <HAL_FDCAN_MspInit+0xec>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c4:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_FDCAN_MspInit+0xec>)
 80013ca:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80013ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_FDCAN_MspInit+0xec>)
 80013d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013dc:	4a13      	ldr	r2, [pc, #76]	@ (800142c <HAL_FDCAN_MspInit+0xec>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_FDCAN_MspInit+0xec>)
 80013e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013f4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80013f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800140e:	2309      	movs	r3, #9
 8001410:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001418:	4619      	mov	r1, r3
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <HAL_FDCAN_MspInit+0xf0>)
 800141c:	f008 f802 	bl	8009424 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001420:	bf00      	nop
 8001422:	37e8      	adds	r7, #232	@ 0xe8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	4000a000 	.word	0x4000a000
 800142c:	58024400 	.word	0x58024400
 8001430:	58020000 	.word	0x58020000

08001434 <filtering_lpf>:
/* Includes ------------------------------------------------------------------*/
#include "filter.h"
#include <math.h>

LPF_s filtering_lpf(LPF_s *filtro)
{
 8001434:	b4b0      	push	{r4, r5, r7}
 8001436:	b097      	sub	sp, #92	@ 0x5c
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
     *   f_cutoff -> frecuencia de corte
     *   u -> Señal de entrada
     *   y -> Señal de salida
     *   */

    LPF_s resultado = *filtro;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f107 040c 	add.w	r4, r7, #12
 8001444:	461d      	mov	r5, r3
 8001446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001452:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    static float y_n;

    // Validación básica de parámetros
    if(filtro->f_cutoff <= 0.0f || filtro->t_sample <= 0.0f) {
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	edd3 7a06 	vldr	s15, [r3, #24]
 800145c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001464:	d907      	bls.n	8001476 <filtering_lpf+0x42>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	edd3 7a07 	vldr	s15, [r3, #28]
 800146c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d80c      	bhi.n	8001490 <filtering_lpf+0x5c>
        return resultado;  // O manejar error adecuadamente
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	461d      	mov	r5, r3
 800147a:	f107 040c 	add.w	r4, r7, #12
 800147e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001486:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800148a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800148e:	e0c6      	b.n	800161e <filtering_lpf+0x1ea>
    }

    const float w_0 = filtro->f_cutoff * 6.283185307179586f; // 2*PI
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	edd3 7a06 	vldr	s15, [r3, #24]
 8001496:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8001628 <filtering_lpf+0x1f4>
 800149a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    if(filtro->inicio) {
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d016      	beq.n	80014d8 <filtering_lpf+0xa4>
        y_n = resultado.Y_n = resultado.Y_nm1 = filtro->Y_0;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4a5d      	ldr	r2, [pc, #372]	@ (800162c <filtering_lpf+0x1f8>)
 80014b8:	6013      	str	r3, [r2, #0]
        resultado.inicio = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	637b      	str	r3, [r7, #52]	@ 0x34
        return resultado;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	461d      	mov	r5, r3
 80014c2:	f107 040c 	add.w	r4, r7, #12
 80014c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80014d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80014d6:	e0a2      	b.n	800161e <filtering_lpf+0x1ea>
    }

    const float u_n = filtro->U_n;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	653b      	str	r3, [r7, #80]	@ 0x50
    const float h = filtro->t_sample;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const float h2 = h * 0.5f;
 80014e4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80014e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    // Runge-Kutta 4to orden
    const float k1 = w_0 * (u_n - y_n);
 80014f4:	4b4d      	ldr	r3, [pc, #308]	@ (800162c <filtering_lpf+0x1f8>)
 80014f6:	edd3 7a00 	vldr	s15, [r3]
 80014fa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80014fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001502:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    const float k2 = w_0 * (u_n - (y_n + k1 * h2));
 800150e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001512:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001516:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151a:	4b44      	ldr	r3, [pc, #272]	@ (800162c <filtering_lpf+0x1f8>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    const float k3 = w_0 * (u_n - (y_n + k2 * h2));
 8001538:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800153c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001540:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001544:	4b39      	ldr	r3, [pc, #228]	@ (800162c <filtering_lpf+0x1f8>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001556:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800155a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    const float k4 = w_0 * (u_n - (y_n + k3 * h));
 8001562:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001566:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800156a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800156e:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <filtering_lpf+0x1f8>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001578:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800157c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001580:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001588:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    y_n += h * (0.166666667f * k1 + 0.333333333f * (k2 + k3) + 0.166666667f * k4);
 800158c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001590:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001630 <filtering_lpf+0x1fc>
 8001594:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001598:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800159c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80015a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015a4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001634 <filtering_lpf+0x200>
 80015a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015b0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80015b4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8001630 <filtering_lpf+0x1fc>
 80015b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80015bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80015c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <filtering_lpf+0x1f8>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d2:	4b16      	ldr	r3, [pc, #88]	@ (800162c <filtering_lpf+0x1f8>)
 80015d4:	edc3 7a00 	vstr	s15, [r3]

    // Manejo robusto de NaN (protección contra condiciones inválidas)
    y_n = isnan(y_n) ? resultado.Y_nm1 : y_n;
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <filtering_lpf+0x1f8>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eef4 7a67 	vcmp.f32	s15, s15
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e6:	d701      	bvc.n	80015ec <filtering_lpf+0x1b8>
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	e001      	b.n	80015f0 <filtering_lpf+0x1bc>
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <filtering_lpf+0x1f8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <filtering_lpf+0x1f8>)
 80015f2:	6013      	str	r3, [r2, #0]

    // Actualizar estructura de resultado
    resultado.Y_n = resultado.Y_nm1 = y_n;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <filtering_lpf+0x1f8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	60fb      	str	r3, [r7, #12]
    resultado.U_nm1 = u_n;
 80015fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001600:	61fb      	str	r3, [r7, #28]
    resultado.t_nm1 = resultado.t_n;
 8001602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001604:	633b      	str	r3, [r7, #48]	@ 0x30

    return resultado;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	461d      	mov	r5, r3
 800160a:	f107 040c 	add.w	r4, r7, #12
 800160e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001616:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800161a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	375c      	adds	r7, #92	@ 0x5c
 8001622:	46bd      	mov	sp, r7
 8001624:	bcb0      	pop	{r4, r5, r7}
 8001626:	4770      	bx	lr
 8001628:	40c90fdb 	.word	0x40c90fdb
 800162c:	240004f8 	.word	0x240004f8
 8001630:	3e2aaaab 	.word	0x3e2aaaab
 8001634:	3eaaaaab 	.word	0x3eaaaaab

08001638 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <vApplicationGetIdleTaskMemory+0x2c>)
 8001648:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4a06      	ldr	r2, [pc, #24]	@ (8001668 <vApplicationGetIdleTaskMemory+0x30>)
 800164e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2280      	movs	r2, #128	@ 0x80
 8001654:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	24000508 	.word	0x24000508
 8001668:	2400055c 	.word	0x2400055c

0800166c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800166c:	b5b0      	push	{r4, r5, r7, lr}
 800166e:	b096      	sub	sp, #88	@ 0x58
 8001670:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, fTask_1ms, osPriorityNormal, 0, 128);
 8001672:	4b1d      	ldr	r3, [pc, #116]	@ (80016e8 <MX_FREERTOS_Init+0x7c>)
 8001674:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001678:	461d      	mov	r5, r3
 800167a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8001686:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f012 fb7f 	bl	8013d90 <osThreadCreate>
 8001692:	4603      	mov	r3, r0
 8001694:	4a15      	ldr	r2, [pc, #84]	@ (80016ec <MX_FREERTOS_Init+0x80>)
 8001696:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, fTask_10ms, osPriorityNormal, 0, 128);
 8001698:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <MX_FREERTOS_Init+0x84>)
 800169a:	f107 0420 	add.w	r4, r7, #32
 800169e:	461d      	mov	r5, r3
 80016a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f012 fb6c 	bl	8013d90 <osThreadCreate>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a0e      	ldr	r2, [pc, #56]	@ (80016f4 <MX_FREERTOS_Init+0x88>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, fTask_100ms, osPriorityNormal, 0, 128);
 80016be:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <MX_FREERTOS_Init+0x8c>)
 80016c0:	1d3c      	adds	r4, r7, #4
 80016c2:	461d      	mov	r5, r3
 80016c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f012 fb5b 	bl	8013d90 <osThreadCreate>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a07      	ldr	r2, [pc, #28]	@ (80016fc <MX_FREERTOS_Init+0x90>)
 80016de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80016e0:	bf00      	nop
 80016e2:	3758      	adds	r7, #88	@ 0x58
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bdb0      	pop	{r4, r5, r7, pc}
 80016e8:	080190cc 	.word	0x080190cc
 80016ec:	240004fc 	.word	0x240004fc
 80016f0:	080190f4 	.word	0x080190f4
 80016f4:	24000500 	.word	0x24000500
 80016f8:	0801911c 	.word	0x0801911c
 80016fc:	24000504 	.word	0x24000504

08001700 <fTask_1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_1ms */
void fTask_1ms(void const * argument)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_1ms */
  /* Infinite loop */
	LPF_gyro_filter_init();
 8001708:	f7ff fca6 	bl	8001058 <LPF_gyro_filter_init>
	LPF_cmd_filter_init();
 800170c:	f7ff fa0c 	bl	8000b28 <LPF_cmd_filter_init>
  for(;;)
  {
	TimeOn_Counter++;
 8001710:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <fTask_1ms+0x30>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3301      	adds	r3, #1
 8001716:	4a06      	ldr	r2, [pc, #24]	@ (8001730 <fTask_1ms+0x30>)
 8001718:	6013      	str	r3, [r2, #0]
	LED_Tasks();
 800171a:	f003 fc2d 	bl	8004f78 <LED_Tasks>
	SBUS_IntegrityVerification();
 800171e:	f004 f8ed 	bl	80058fc <SBUS_IntegrityVerification>
	NMEA_process_task();
 8001722:	f000 fdb1 	bl	8002288 <NMEA_process_task>
    osDelay(1);
 8001726:	2001      	movs	r0, #1
 8001728:	f012 fb7e 	bl	8013e28 <osDelay>
	TimeOn_Counter++;
 800172c:	bf00      	nop
 800172e:	e7ef      	b.n	8001710 <fTask_1ms+0x10>
 8001730:	24000e94 	.word	0x24000e94

08001734 <fTask_10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_10ms */
void fTask_10ms(void const * argument)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_10ms */
  /* Infinite loop */
  for(;;)
  {
	BNO_Tasks();
 800173c:	f003 fb58 	bl	8004df0 <BNO_Tasks>
	BMP280_calculate();
 8001740:	f002 fda8 	bl	8004294 <BMP280_calculate>

	FlightTaskAttitude();
 8001744:	f7ff fb56 	bl	8000df4 <FlightTaskAttitude>

	PWM_Assign();
 8001748:	f003 fcc8 	bl	80050dc <PWM_Assign>
	SD_blackbox_write();
 800174c:	f004 f9b8 	bl	8005ac0 <SD_blackbox_write>
    osDelay(10);
 8001750:	200a      	movs	r0, #10
 8001752:	f012 fb69 	bl	8013e28 <osDelay>
  {
 8001756:	bf00      	nop
 8001758:	e7f0      	b.n	800173c <fTask_10ms+0x8>

0800175a <fTask_100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fTask_100ms */
void fTask_100ms(void const * argument)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fTask_100ms */
  /* Infinite loop */
  for(;;)
  {
	LR03_StateMachine();
 8001762:	f003 fca3 	bl	80050ac <LR03_StateMachine>
    osDelay(100);
 8001766:	2064      	movs	r0, #100	@ 0x64
 8001768:	f012 fb5e 	bl	8013e28 <osDelay>
	LR03_StateMachine();
 800176c:	bf00      	nop
 800176e:	e7f8      	b.n	8001762 <fTask_100ms+0x8>

08001770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b4e      	ldr	r3, [pc, #312]	@ (80018c0 <MX_GPIO_Init+0x150>)
 8001788:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800178c:	4a4c      	ldr	r2, [pc, #304]	@ (80018c0 <MX_GPIO_Init+0x150>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001796:	4b4a      	ldr	r3, [pc, #296]	@ (80018c0 <MX_GPIO_Init+0x150>)
 8001798:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b46      	ldr	r3, [pc, #280]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80017a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017aa:	4a45      	ldr	r2, [pc, #276]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017b4:	4b42      	ldr	r3, [pc, #264]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80017b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	4b3f      	ldr	r3, [pc, #252]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80017c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017c8:	4a3d      	ldr	r2, [pc, #244]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017d2:	4b3b      	ldr	r3, [pc, #236]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80017d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e0:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80017e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017e6:	4a36      	ldr	r2, [pc, #216]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80017f0:	4b33      	ldr	r3, [pc, #204]	@ (80018c0 <MX_GPIO_Init+0x150>)
 80017f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80017fe:	2200      	movs	r2, #0
 8001800:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001804:	482f      	ldr	r0, [pc, #188]	@ (80018c4 <MX_GPIO_Init+0x154>)
 8001806:	f007 ffbd 	bl	8009784 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2110      	movs	r1, #16
 800180e:	482e      	ldr	r0, [pc, #184]	@ (80018c8 <MX_GPIO_Init+0x158>)
 8001810:	f007 ffb8 	bl	8009784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IMU_BOOT_Pin|BME_NSS_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800181a:	482c      	ldr	r0, [pc, #176]	@ (80018cc <MX_GPIO_Init+0x15c>)
 800181c:	f007 ffb2 	bl	8009784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2104      	movs	r1, #4
 8001824:	482a      	ldr	r0, [pc, #168]	@ (80018d0 <MX_GPIO_Init+0x160>)
 8001826:	f007 ffad 	bl	8009784 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800182a:	f242 030f 	movw	r3, #8207	@ 0x200f
 800182e:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4820      	ldr	r0, [pc, #128]	@ (80018c4 <MX_GPIO_Init+0x154>)
 8001844:	f007 fdee 	bl	8009424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8001848:	2310      	movs	r3, #16
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	481a      	ldr	r0, [pc, #104]	@ (80018c8 <MX_GPIO_Init+0x158>)
 8001860:	f007 fde0 	bl	8009424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IMU_BOOT_Pin|BME_NSS_Pin;
 8001864:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4813      	ldr	r0, [pc, #76]	@ (80018cc <MX_GPIO_Init+0x15c>)
 800187e:	f007 fdd1 	bl	8009424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 8001882:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <MX_GPIO_Init+0x154>)
 8001898:	f007 fdc4 	bl	8009424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_RST_Pin;
 800189c:	2304      	movs	r3, #4
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_RST_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4807      	ldr	r0, [pc, #28]	@ (80018d0 <MX_GPIO_Init+0x160>)
 80018b4:	f007 fdb6 	bl	8009424 <HAL_GPIO_Init>

}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	@ 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	58024400 	.word	0x58024400
 80018c4:	58020800 	.word	0x58020800
 80018c8:	58020000 	.word	0x58020000
 80018cc:	58020400 	.word	0x58020400
 80018d0:	58020c00 	.word	0x58020c00

080018d4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <MX_I2C3_Init+0x74>)
 80018da:	4a1c      	ldr	r2, [pc, #112]	@ (800194c <MX_I2C3_Init+0x78>)
 80018dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <MX_I2C3_Init+0x74>)
 80018e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001950 <MX_I2C3_Init+0x7c>)
 80018e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <MX_I2C3_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ea:	4b17      	ldr	r3, [pc, #92]	@ (8001948 <MX_I2C3_Init+0x74>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <MX_I2C3_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80018f6:	4b14      	ldr	r3, [pc, #80]	@ (8001948 <MX_I2C3_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <MX_I2C3_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001902:	4b11      	ldr	r3, [pc, #68]	@ (8001948 <MX_I2C3_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <MX_I2C3_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800190e:	480e      	ldr	r0, [pc, #56]	@ (8001948 <MX_I2C3_Init+0x74>)
 8001910:	f007 ff52 	bl	80097b8 <HAL_I2C_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800191a:	f000 fe41 	bl	80025a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800191e:	2100      	movs	r1, #0
 8001920:	4809      	ldr	r0, [pc, #36]	@ (8001948 <MX_I2C3_Init+0x74>)
 8001922:	f007 ffe5 	bl	80098f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800192c:	f000 fe38 	bl	80025a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_I2C3_Init+0x74>)
 8001934:	f008 f827 	bl	8009986 <HAL_I2CEx_ConfigDigitalFilter>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800193e:	f000 fe2f 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2400075c 	.word	0x2400075c
 800194c:	40005c00 	.word	0x40005c00
 8001950:	20b0ccff 	.word	0x20b0ccff

08001954 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b0bc      	sub	sp, #240	@ 0xf0
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800196c:	f107 0318 	add.w	r3, r7, #24
 8001970:	22c0      	movs	r2, #192	@ 0xc0
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f015 fb7e 	bl	8017076 <memset>
  if(i2cHandle->Instance==I2C3)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a39      	ldr	r2, [pc, #228]	@ (8001a64 <HAL_I2C_MspInit+0x110>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d16b      	bne.n	8001a5c <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001984:	f04f 0208 	mov.w	r2, #8
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	4618      	mov	r0, r3
 800199c:	f009 f87a 	bl	800aa94 <HAL_RCCEx_PeriphCLKConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80019a6:	f000 fdfb 	bl	80025a0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001a68 <HAL_I2C_MspInit+0x114>)
 80019ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a68 <HAL_I2C_MspInit+0x114>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001a68 <HAL_I2C_MspInit+0x114>)
 80019bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	4b27      	ldr	r3, [pc, #156]	@ (8001a68 <HAL_I2C_MspInit+0x114>)
 80019ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019ce:	4a26      	ldr	r2, [pc, #152]	@ (8001a68 <HAL_I2C_MspInit+0x114>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019d8:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <HAL_I2C_MspInit+0x114>)
 80019da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ee:	2312      	movs	r3, #18
 80019f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a00:	2304      	movs	r3, #4
 8001a02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a06:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4817      	ldr	r0, [pc, #92]	@ (8001a6c <HAL_I2C_MspInit+0x118>)
 8001a0e:	f007 fd09 	bl	8009424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1a:	2312      	movs	r3, #18
 8001a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001a36:	4619      	mov	r1, r3
 8001a38:	480d      	ldr	r0, [pc, #52]	@ (8001a70 <HAL_I2C_MspInit+0x11c>)
 8001a3a:	f007 fcf3 	bl	8009424 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_I2C_MspInit+0x114>)
 8001a40:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a44:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <HAL_I2C_MspInit+0x114>)
 8001a46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a4a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_I2C_MspInit+0x114>)
 8001a50:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	37f0      	adds	r7, #240	@ 0xf0
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40005c00 	.word	0x40005c00
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	58020800 	.word	0x58020800
 8001a70:	58020000 	.word	0x58020000

08001a74 <default_CB>:
static float speed_fall_barrier;	/**< Barrier of decreasing speed*/
/**
 * default_CB() is a default function for all the CB pointers which do nothing.\n
 * The unregistering CB pointer is setting to pointer of this function.  
 */
static void default_CB(void){}
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <NMEA_parser>:
 * NMEA_parser is function which parses single correct NMEA message.\n
 * Inside this function all known types of NMEA message are recognized and nmea_data structure fields are set.\n
 * There is also implemented mechanism of recognizing specified events and calling corresponding to them callbacks.
 * @param[in]	message	pointer to buffer storing NMEA message.
 */
static void 	NMEA_parser(char *message){
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b0b2      	sub	sp, #200	@ 0xc8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

	NMEA_data previous_data = nmea_data;
 8001a8c:	4ba9      	ldr	r3, [pc, #676]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001a8e:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001a92:	461d      	mov	r5, r3
 8001a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aa4:	e884 0003 	stmia.w	r4, {r0, r1}

	int num = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
	char *fields[32]={NULL};
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	2280      	movs	r2, #128	@ 0x80
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f015 fadd 	bl	8017076 <memset>
	fields[num++]=message;
 8001abc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	33c8      	adds	r3, #200	@ 0xc8
 8001aca:	443b      	add	r3, r7
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8001ad2:	e00f      	b.n	8001af4 <NMEA_parser+0x70>
		*message++ = 0;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
		fields[num++]=message;
 8001ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	33c8      	adds	r3, #200	@ 0xc8
 8001aec:	443b      	add	r3, r7
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	f843 2cbc 	str.w	r2, [r3, #-188]
	while ((message = strchr(message, ','))) {
 8001af4:	212c      	movs	r1, #44	@ 0x2c
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f015 fac5 	bl	8017086 <strchr>
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e7      	bne.n	8001ad4 <NMEA_parser+0x50>
	}

	if(strcmp(fields[0],"$GPGLL")==0){
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	498c      	ldr	r1, [pc, #560]	@ (8001d38 <NMEA_parser+0x2b4>)
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fbf1 	bl	80002f0 <strcmp>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d11e      	bne.n	8001b52 <NMEA_parser+0xce>

		nmea_data.latitude = atof(fields[1]);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f014 fb5e 	bl	80161d8 <atof>
 8001b1c:	eeb0 7b40 	vmov.f64	d7, d0
 8001b20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b24:	4b83      	ldr	r3, [pc, #524]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001b26:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[2];
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	4b81      	ldr	r3, [pc, #516]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001b30:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[3]);
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f014 fb4f 	bl	80161d8 <atof>
 8001b3a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b42:	4b7c      	ldr	r3, [pc, #496]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001b44:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[4];
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	4b79      	ldr	r3, [pc, #484]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001b4e:	751a      	strb	r2, [r3, #20]
 8001b50:	e10d      	b.n	8001d6e <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPRMC")==0){
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4979      	ldr	r1, [pc, #484]	@ (8001d3c <NMEA_parser+0x2b8>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fbca 	bl	80002f0 <strcmp>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d130      	bne.n	8001bc4 <NMEA_parser+0x140>

		nmea_data.UTC_time = atof(fields[1]);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f014 fb37 	bl	80161d8 <atof>
 8001b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b72:	4b70      	ldr	r3, [pc, #448]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001b74:	edc3 7a00 	vstr	s15, [r3]
		nmea_data.UT_date = atoi(fields[9]);
 8001b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f014 fb2f 	bl	80161de <atoi>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a6c      	ldr	r2, [pc, #432]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001b84:	6053      	str	r3, [r2, #4]

		nmea_data.latitude = atof(fields[3]);
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f014 fb25 	bl	80161d8 <atof>
 8001b8e:	eeb0 7b40 	vmov.f64	d7, d0
 8001b92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b96:	4b67      	ldr	r3, [pc, #412]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001b98:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[4];
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	4b64      	ldr	r3, [pc, #400]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001ba2:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[5]);
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f014 fb16 	bl	80161d8 <atof>
 8001bac:	eeb0 7b40 	vmov.f64	d7, d0
 8001bb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bb4:	4b5f      	ldr	r3, [pc, #380]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001bb6:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[6];
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001bc0:	751a      	strb	r2, [r3, #20]
 8001bc2:	e0d4      	b.n	8001d6e <NMEA_parser+0x2ea>


	}else if(strcmp(fields[0],"$GPVTG")==0){
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	495e      	ldr	r1, [pc, #376]	@ (8001d40 <NMEA_parser+0x2bc>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fb91 	bl	80002f0 <strcmp>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d116      	bne.n	8001c02 <NMEA_parser+0x17e>

		nmea_data.speed_knots =  atoi(fields[5]);
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f014 fb01 	bl	80161de <atoi>
 8001bdc:	ee07 0a90 	vmov	s15, r0
 8001be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be4:	4b53      	ldr	r3, [pc, #332]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001be6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		nmea_data.speed_kmph =  atoi(fields[7]);
 8001bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bec:	4618      	mov	r0, r3
 8001bee:	f014 faf6 	bl	80161de <atoi>
 8001bf2:	ee07 0a90 	vmov	s15, r0
 8001bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001bfc:	edc3 7a08 	vstr	s15, [r3, #32]
 8001c00:	e0b5      	b.n	8001d6e <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGGA")==0){
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	494f      	ldr	r1, [pc, #316]	@ (8001d44 <NMEA_parser+0x2c0>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fb72 	bl	80002f0 <strcmp>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d15c      	bne.n	8001ccc <NMEA_parser+0x248>

		nmea_data.UTC_time = atof(fields[1]);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f014 fadf 	bl	80161d8 <atof>
 8001c1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001c1e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c22:	4b44      	ldr	r3, [pc, #272]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001c24:	edc3 7a00 	vstr	s15, [r3]

		nmea_data.latitude = atof(fields[2]);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f014 fad4 	bl	80161d8 <atof>
 8001c30:	eeb0 7b40 	vmov.f64	d7, d0
 8001c34:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c38:	4b3e      	ldr	r3, [pc, #248]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001c3a:	edc3 7a02 	vstr	s15, [r3, #8]
		nmea_data.latitude_direction = *fields[3];
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4b3c      	ldr	r3, [pc, #240]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001c44:	731a      	strb	r2, [r3, #12]
		nmea_data.longitude = atof(fields[4]);
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f014 fac5 	bl	80161d8 <atof>
 8001c4e:	eeb0 7b40 	vmov.f64	d7, d0
 8001c52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c56:	4b37      	ldr	r3, [pc, #220]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001c58:	edc3 7a04 	vstr	s15, [r3, #16]
		nmea_data.longitude_direction = *fields[5];
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001c62:	751a      	strb	r2, [r3, #20]

		nmea_data.fix = atoi(fields[6]);
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	4618      	mov	r0, r3
 8001c68:	f014 fab9 	bl	80161de <atoi>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001c72:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		nmea_data.sat_in_use = atoi(fields[7]);
 8001c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f014 fab0 	bl	80161de <atoi>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001c84:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		nmea_data.HDOP = atof(fields[8]);
 8001c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f014 faa4 	bl	80161d8 <atof>
 8001c90:	eeb0 7b40 	vmov.f64	d7, d0
 8001c94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001c9a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		nmea_data.altitude = atof(fields[9]);
 8001c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f014 fa99 	bl	80161d8 <atof>
 8001ca6:	eeb0 7b40 	vmov.f64	d7, d0
 8001caa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cae:	4b21      	ldr	r3, [pc, #132]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001cb0:	edc3 7a06 	vstr	s15, [r3, #24]
		nmea_data.geoidal_separation = atof(fields[11]);
 8001cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f014 fa8e 	bl	80161d8 <atof>
 8001cbc:	eeb0 7b40 	vmov.f64	d7, d0
 8001cc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001cc6:	edc3 7a07 	vstr	s15, [r3, #28]
 8001cca:	e050      	b.n	8001d6e <NMEA_parser+0x2ea>

	}else if(strcmp(fields[0],"$GPGSA")==0){
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	491e      	ldr	r1, [pc, #120]	@ (8001d48 <NMEA_parser+0x2c4>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fb0d 	bl	80002f0 <strcmp>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d137      	bne.n	8001d4c <NMEA_parser+0x2c8>

		nmea_data.fix_mode = atoi(fields[2]);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f014 fa7d 	bl	80161de <atoi>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001cea:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

		nmea_data.PDOP = atof(fields[15]);
 8001cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f014 fa71 	bl	80161d8 <atof>
 8001cf6:	eeb0 7b40 	vmov.f64	d7, d0
 8001cfa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001d00:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		nmea_data.HDOP = atof(fields[16]);
 8001d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d06:	4618      	mov	r0, r3
 8001d08:	f014 fa66 	bl	80161d8 <atof>
 8001d0c:	eeb0 7b40 	vmov.f64	d7, d0
 8001d10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d14:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001d16:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		nmea_data.VDOP = atof(fields[17]);
 8001d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f014 fa5b 	bl	80161d8 <atof>
 8001d22:	eeb0 7b40 	vmov.f64	d7, d0
 8001d26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d2a:	4b02      	ldr	r3, [pc, #8]	@ (8001d34 <NMEA_parser+0x2b0>)
 8001d2c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
 8001d30:	e01d      	b.n	8001d6e <NMEA_parser+0x2ea>
 8001d32:	bf00      	nop
 8001d34:	24000e58 	.word	0x24000e58
 8001d38:	08019138 	.word	0x08019138
 8001d3c:	08019140 	.word	0x08019140
 8001d40:	08019148 	.word	0x08019148
 8001d44:	08019150 	.word	0x08019150
 8001d48:	08019158 	.word	0x08019158

	}else if(strcmp(fields[0],"$GPGSV")==0){
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4931      	ldr	r1, [pc, #196]	@ (8001e14 <NMEA_parser+0x390>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe facd 	bl	80002f0 <strcmp>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d108      	bne.n	8001d6e <NMEA_parser+0x2ea>
		nmea_data.sat_in_view = atoi(fields[3]);
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f014 fa3d 	bl	80161de <atoi>
 8001d64:	4603      	mov	r3, r0
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	4b2b      	ldr	r3, [pc, #172]	@ (8001e18 <NMEA_parser+0x394>)
 8001d6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

	if (abs(nmea_data.speed_kmph - previous_data.speed_kmph) > speed_change_tolerance){
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e18 <NMEA_parser+0x394>)
 8001d70:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d74:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d80:	ee17 3a90 	vmov	r3, s15
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bfb8      	it	lt
 8001d88:	425b      	neglt	r3, r3
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d92:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <NMEA_parser+0x398>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da0:	dd02      	ble.n	8001da8 <NMEA_parser+0x324>
		speed_change_CB_fun_ptr();
 8001da2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <NMEA_parser+0x39c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph > speed_raise_barrier && previous_data.speed_kmph <= speed_raise_barrier){
 8001da8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <NMEA_parser+0x394>)
 8001daa:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dae:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <NMEA_parser+0x3a0>)
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	dd0c      	ble.n	8001dd8 <NMEA_parser+0x354>
 8001dbe:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8001dc2:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <NMEA_parser+0x3a0>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	d802      	bhi.n	8001dd8 <NMEA_parser+0x354>
		speed_raise_barrier_CB_fun_ptr();
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <NMEA_parser+0x3a4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4798      	blx	r3
	}

	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e18 <NMEA_parser+0x394>)
 8001dda:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dde:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <NMEA_parser+0x3a0>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	d400      	bmi.n	8001df0 <NMEA_parser+0x36c>
		speed_fall_barrier_CB_fun_ptr();
	}
}
 8001dee:	e00d      	b.n	8001e0c <NMEA_parser+0x388>
	if (nmea_data.speed_kmph < speed_raise_barrier && previous_data.speed_kmph >= speed_raise_barrier){
 8001df0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <NMEA_parser+0x3a0>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	da00      	bge.n	8001e06 <NMEA_parser+0x382>
}
 8001e04:	e002      	b.n	8001e0c <NMEA_parser+0x388>
		speed_fall_barrier_CB_fun_ptr();
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <NMEA_parser+0x3a8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4798      	blx	r3
}
 8001e0c:	bf00      	nop
 8001e0e:	37c8      	adds	r7, #200	@ 0xc8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bdb0      	pop	{r4, r5, r7, pc}
 8001e14:	08019160 	.word	0x08019160
 8001e18:	24000e58 	.word	0x24000e58
 8001e1c:	24000e40 	.word	0x24000e40
 8001e20:	24000e3c 	.word	0x24000e3c
 8001e24:	24000e48 	.word	0x24000e48
 8001e28:	24000e44 	.word	0x24000e44
 8001e2c:	24000e4c 	.word	0x24000e4c

08001e30 <hx2int>:
 * hx2int is function which converts hex number written using characters to corresponding integer.
 * @param[in]	n2		is older position ix hex code
 * @param[in]	n1		is younger position ix hex code
 * @param[out]	uint8_t	is integer corresponding to input hex
 */
static uint8_t hx2int(uint8_t n2, uint8_t n1){
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	460a      	mov	r2, r1
 8001e3a:	71fb      	strb	r3, [r7, #7]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71bb      	strb	r3, [r7, #6]
	if (n2 <= '9') n2-='0';
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b39      	cmp	r3, #57	@ 0x39
 8001e44:	d803      	bhi.n	8001e4e <hx2int+0x1e>
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	3b30      	subs	r3, #48	@ 0x30
 8001e4a:	71fb      	strb	r3, [r7, #7]
 8001e4c:	e002      	b.n	8001e54 <hx2int+0x24>
	else n2=n2-'A'+10;
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	3b37      	subs	r3, #55	@ 0x37
 8001e52:	71fb      	strb	r3, [r7, #7]

	if (n1 <= '9') n1-='0';
 8001e54:	79bb      	ldrb	r3, [r7, #6]
 8001e56:	2b39      	cmp	r3, #57	@ 0x39
 8001e58:	d803      	bhi.n	8001e62 <hx2int+0x32>
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	3b30      	subs	r3, #48	@ 0x30
 8001e5e:	71bb      	strb	r3, [r7, #6]
 8001e60:	e002      	b.n	8001e68 <hx2int+0x38>
	else n1=n1-'A'+10;
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	3b37      	subs	r3, #55	@ 0x37
 8001e66:	71bb      	strb	r3, [r7, #6]

	return n2*16+n1;
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	79bb      	ldrb	r3, [r7, #6]
 8001e70:	4413      	add	r3, r2
 8001e72:	b2db      	uxtb	r3, r3

}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <NMEA_checksum_clc>:
 * NMEA_checksum_clc is function which calculates checksum of the message and compares it to checksum value given in NMEA message.\n
 * To convert given checksum it uses hx2int function.
 * @param[in]	message	pointer to buffer storing NMEA message.
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_checksum_clc(uint8_t * message){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	uint8_t index = 1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum_clc =0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73bb      	strb	r3, [r7, #14]

	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8001e90:	e009      	b.n	8001ea6 <NMEA_checksum_clc+0x26>
		checksum_clc^=message[index++];
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	1c5a      	adds	r2, r3, #1
 8001e96:	73fa      	strb	r2, [r7, #15]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	4053      	eors	r3, r2
 8001ea4:	73bb      	strb	r3, [r7, #14]
	while (message[index]!='*' && index<NMEA_WORKING_BUFFER_SIZE-2){
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8001eb0:	d002      	beq.n	8001eb8 <NMEA_checksum_clc+0x38>
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b7d      	cmp	r3, #125	@ 0x7d
 8001eb6:	d9ec      	bls.n	8001e92 <NMEA_checksum_clc+0x12>
	}

	uint8_t checksum = hx2int(message[index+1],message[index+2]);
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	7818      	ldrb	r0, [r3, #0]
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7ff ffaf 	bl	8001e30 <hx2int>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	737b      	strb	r3, [r7, #13]
	if (checksum!=checksum_clc){
 8001ed6:	7b7a      	ldrb	r2, [r7, #13]
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <NMEA_checksum_clc+0x62>
		return NMEA_CHECKSUM_ERROR;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e000      	b.n	8001ee4 <NMEA_checksum_clc+0x64>
	}
	return NMEA_OK;
 8001ee2:	2300      	movs	r3, #0


}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <NMEA_read_line>:

/**
 * NMEA_read_line is function which reads one NMEA message line from NMEA_UART_buffer circular buffer to NMEA_working_buffer.
 */
static void NMEA_read_line(void){
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
	int index = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
	while (index < NMEA_WORKING_BUFFER_SIZE) NMEA_working_buffer[index++]=0;	// Clean up working buffer.
 8001ef6:	e005      	b.n	8001f04 <NMEA_read_line+0x18>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	4a2b      	ldr	r2, [pc, #172]	@ (8001fac <NMEA_read_line+0xc0>)
 8001f00:	2100      	movs	r1, #0
 8001f02:	54d1      	strb	r1, [r2, r3]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f08:	ddf6      	ble.n	8001ef8 <NMEA_read_line+0xc>

	index = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8001f0e:	e01c      	b.n	8001f4a <NMEA_read_line+0x5e>
		NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8001f10:	4b27      	ldr	r3, [pc, #156]	@ (8001fb0 <NMEA_read_line+0xc4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a27      	ldr	r2, [pc, #156]	@ (8001fb4 <NMEA_read_line+0xc8>)
 8001f16:	5cd1      	ldrb	r1, [r2, r3]
 8001f18:	4a24      	ldr	r2, [pc, #144]	@ (8001fac <NMEA_read_line+0xc0>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	460a      	mov	r2, r1
 8001f20:	701a      	strb	r2, [r3, #0]
		NMEA_UART_buffer[UART_buffer_tail] = 0;
 8001f22:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <NMEA_read_line+0xc4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a23      	ldr	r2, [pc, #140]	@ (8001fb4 <NMEA_read_line+0xc8>)
 8001f28:	2100      	movs	r1, #0
 8001f2a:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001f2c:	4b20      	ldr	r3, [pc, #128]	@ (8001fb0 <NMEA_read_line+0xc4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	425a      	negs	r2, r3
 8001f34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f38:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001f3c:	bf58      	it	pl
 8001f3e:	4253      	negpl	r3, r2
 8001f40:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb0 <NMEA_read_line+0xc4>)
 8001f42:	6013      	str	r3, [r2, #0]
		++index;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3301      	adds	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
	while(NMEA_UART_buffer[UART_buffer_tail]!= '\n' && index < NMEA_WORKING_BUFFER_SIZE-2){
 8001f4a:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <NMEA_read_line+0xc4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <NMEA_read_line+0xc8>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	2b0a      	cmp	r3, #10
 8001f54:	d002      	beq.n	8001f5c <NMEA_read_line+0x70>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b7d      	cmp	r3, #125	@ 0x7d
 8001f5a:	ddd9      	ble.n	8001f10 <NMEA_read_line+0x24>
	}
	NMEA_working_buffer[index]=NMEA_UART_buffer[UART_buffer_tail];
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <NMEA_read_line+0xc4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <NMEA_read_line+0xc8>)
 8001f62:	5cd1      	ldrb	r1, [r2, r3]
 8001f64:	4a11      	ldr	r2, [pc, #68]	@ (8001fac <NMEA_read_line+0xc0>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
	NMEA_UART_buffer[UART_buffer_tail] = 0;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <NMEA_read_line+0xc4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a10      	ldr	r2, [pc, #64]	@ (8001fb4 <NMEA_read_line+0xc8>)
 8001f74:	2100      	movs	r1, #0
 8001f76:	54d1      	strb	r1, [r2, r3]
	UART_buffer_tail = (UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 8001f78:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <NMEA_read_line+0xc4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	425a      	negs	r2, r3
 8001f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f84:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001f88:	bf58      	it	pl
 8001f8a:	4253      	negpl	r3, r2
 8001f8c:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <NMEA_read_line+0xc4>)
 8001f8e:	6013      	str	r3, [r2, #0]
	++index;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3301      	adds	r3, #1
 8001f94:	607b      	str	r3, [r7, #4]
	--UART_buffer_lines;
 8001f96:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <NMEA_read_line+0xcc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	4a06      	ldr	r2, [pc, #24]	@ (8001fb8 <NMEA_read_line+0xcc>)
 8001f9e:	6013      	str	r3, [r2, #0]

}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	24000db0 	.word	0x24000db0
 8001fb0:	24000e34 	.word	0x24000e34
 8001fb4:	240009b0 	.word	0x240009b0
 8001fb8:	24000e38 	.word	0x24000e38

08001fbc <NMEA_init>:

void NMEA_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef *DMA){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
	HAL_Delay(10);
 8001fc6:	200a      	movs	r0, #10
 8001fc8:	f003 fe62 	bl	8005c90 <HAL_Delay>
	NMEA_huart=huart;
 8001fcc:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <NMEA_init+0x5c>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
	NMEA_DMA=DMA;
 8001fd2:	4a12      	ldr	r2, [pc, #72]	@ (800201c <NMEA_init+0x60>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6013      	str	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(NMEA_huart,UART_IT_IDLE);
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <NMEA_init+0x5c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <NMEA_init+0x5c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0210 	orr.w	r2, r2, #16
 8001fea:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8001fec:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <NMEA_init+0x5c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ff4:	490a      	ldr	r1, [pc, #40]	@ (8002020 <NMEA_init+0x64>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f00c ff58 	bl	800eeac <HAL_UART_Receive_DMA>


	speed_change_CB_fun_ptr = &default_CB;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <NMEA_init+0x68>)
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <NMEA_init+0x6c>)
 8002000:	601a      	str	r2, [r3, #0]
	speed_raise_barrier_CB_fun_ptr = &default_CB;
 8002002:	4b0a      	ldr	r3, [pc, #40]	@ (800202c <NMEA_init+0x70>)
 8002004:	4a08      	ldr	r2, [pc, #32]	@ (8002028 <NMEA_init+0x6c>)
 8002006:	601a      	str	r2, [r3, #0]
	speed_fall_barrier_CB_fun_ptr = &default_CB;
 8002008:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <NMEA_init+0x74>)
 800200a:	4a07      	ldr	r2, [pc, #28]	@ (8002028 <NMEA_init+0x6c>)
 800200c:	601a      	str	r2, [r3, #0]
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	24000e50 	.word	0x24000e50
 800201c:	24000e54 	.word	0x24000e54
 8002020:	240007b0 	.word	0x240007b0
 8002024:	24000e3c 	.word	0x24000e3c
 8002028:	08001a75 	.word	0x08001a75
 800202c:	24000e44 	.word	0x24000e44
 8002030:	24000e4c 	.word	0x24000e4c

08002034 <NMEA_UART_DMA_get_char>:
 * If buffer overflowes, the oldest NMEA message will be deleted to make space for incoming messages.\n
 * If new line character is detected ('\ n'), the line counter (UART_buffer_lines) increases.
 * @param[in]	DMA_char	character from DMA buffer
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_get_char(uint8_t DMA_char){
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
	int position = (UART_buffer_head + 1)%NMEA_UART_BUFFER_SIZE;
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <NMEA_UART_DMA_get_char+0xc0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	425a      	negs	r2, r3
 8002046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800204a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800204e:	bf58      	it	pl
 8002050:	4253      	negpl	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
	NMEA_status stat=NMEA_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]

	if (position == UART_buffer_tail){		//buffer overflowed! make space for new message
 8002058:	4b27      	ldr	r3, [pc, #156]	@ (80020f8 <NMEA_UART_DMA_get_char+0xc4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	d130      	bne.n	80020c4 <NMEA_UART_DMA_get_char+0x90>
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002062:	e010      	b.n	8002086 <NMEA_UART_DMA_get_char+0x52>
			NMEA_UART_buffer[UART_buffer_tail]=0;
 8002064:	4b24      	ldr	r3, [pc, #144]	@ (80020f8 <NMEA_UART_DMA_get_char+0xc4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a24      	ldr	r2, [pc, #144]	@ (80020fc <NMEA_UART_DMA_get_char+0xc8>)
 800206a:	2100      	movs	r1, #0
 800206c:	54d1      	strb	r1, [r2, r3]
			UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 800206e:	4b22      	ldr	r3, [pc, #136]	@ (80020f8 <NMEA_UART_DMA_get_char+0xc4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3301      	adds	r3, #1
 8002074:	425a      	negs	r2, r3
 8002076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800207a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800207e:	bf58      	it	pl
 8002080:	4253      	negpl	r3, r2
 8002082:	4a1d      	ldr	r2, [pc, #116]	@ (80020f8 <NMEA_UART_DMA_get_char+0xc4>)
 8002084:	6013      	str	r3, [r2, #0]
		while (NMEA_UART_buffer[UART_buffer_tail]!='\n' && NMEA_UART_buffer[UART_buffer_tail]!=0){
 8002086:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <NMEA_UART_DMA_get_char+0xc4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <NMEA_UART_DMA_get_char+0xc8>)
 800208c:	5cd3      	ldrb	r3, [r2, r3]
 800208e:	2b0a      	cmp	r3, #10
 8002090:	d005      	beq.n	800209e <NMEA_UART_DMA_get_char+0x6a>
 8002092:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <NMEA_UART_DMA_get_char+0xc4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <NMEA_UART_DMA_get_char+0xc8>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1e2      	bne.n	8002064 <NMEA_UART_DMA_get_char+0x30>
		}
		NMEA_UART_buffer[UART_buffer_tail]=0;
 800209e:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <NMEA_UART_DMA_get_char+0xc4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a16      	ldr	r2, [pc, #88]	@ (80020fc <NMEA_UART_DMA_get_char+0xc8>)
 80020a4:	2100      	movs	r1, #0
 80020a6:	54d1      	strb	r1, [r2, r3]
		UART_buffer_tail=(UART_buffer_tail + 1)%NMEA_UART_BUFFER_SIZE;
 80020a8:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <NMEA_UART_DMA_get_char+0xc4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	425a      	negs	r2, r3
 80020b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80020b8:	bf58      	it	pl
 80020ba:	4253      	negpl	r3, r2
 80020bc:	4a0e      	ldr	r2, [pc, #56]	@ (80020f8 <NMEA_UART_DMA_get_char+0xc4>)
 80020be:	6013      	str	r3, [r2, #0]
		stat=NMEA_BUFFER_OVERFLOWED;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
	}

	NMEA_UART_buffer[UART_buffer_head]=DMA_char;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <NMEA_UART_DMA_get_char+0xc0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	490c      	ldr	r1, [pc, #48]	@ (80020fc <NMEA_UART_DMA_get_char+0xc8>)
 80020ca:	79fa      	ldrb	r2, [r7, #7]
 80020cc:	54ca      	strb	r2, [r1, r3]

	UART_buffer_head=position;
 80020ce:	4a09      	ldr	r2, [pc, #36]	@ (80020f4 <NMEA_UART_DMA_get_char+0xc0>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	6013      	str	r3, [r2, #0]

	if(DMA_char=='\n'){
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	2b0a      	cmp	r3, #10
 80020d8:	d104      	bne.n	80020e4 <NMEA_UART_DMA_get_char+0xb0>
		++UART_buffer_lines;	//increment lines counter
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <NMEA_UART_DMA_get_char+0xcc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a07      	ldr	r2, [pc, #28]	@ (8002100 <NMEA_UART_DMA_get_char+0xcc>)
 80020e2:	6013      	str	r3, [r2, #0]
	}

	return stat;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	24000e30 	.word	0x24000e30
 80020f8:	24000e34 	.word	0x24000e34
 80020fc:	240009b0 	.word	0x240009b0
 8002100:	24000e38 	.word	0x24000e38

08002104 <NMEA_UART_DMA_copy_buffer>:
/**
 * NMEA_UART_DMA_copy_buffer is a function which copies messages from DMA buffer to UART circular buffer.\n
 * To do so, it uses NMEA_UART_DMA_get_char function for every character in NMEA_UART_DMA_buffer from 0 to (NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA)).
 * @param[out]	NMEA_status 	is a status code. It should be NMEA_OK. For more information check out NMEA_status documentation.
 */
static NMEA_status NMEA_UART_DMA_copy_buffer(void){
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0


	NMEA_status stat=NMEA_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]

	int data_length = NMEA_UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(NMEA_DMA);
 800210e:	4b4b      	ldr	r3, [pc, #300]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a4a      	ldr	r2, [pc, #296]	@ (8002240 <NMEA_UART_DMA_copy_buffer+0x13c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d059      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 800211a:	4b48      	ldr	r3, [pc, #288]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a48      	ldr	r2, [pc, #288]	@ (8002244 <NMEA_UART_DMA_copy_buffer+0x140>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d053      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 8002126:	4b45      	ldr	r3, [pc, #276]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a46      	ldr	r2, [pc, #280]	@ (8002248 <NMEA_UART_DMA_copy_buffer+0x144>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d04d      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 8002132:	4b42      	ldr	r3, [pc, #264]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a44      	ldr	r2, [pc, #272]	@ (800224c <NMEA_UART_DMA_copy_buffer+0x148>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d047      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 800213e:	4b3f      	ldr	r3, [pc, #252]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a42      	ldr	r2, [pc, #264]	@ (8002250 <NMEA_UART_DMA_copy_buffer+0x14c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d041      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 800214a:	4b3c      	ldr	r3, [pc, #240]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a40      	ldr	r2, [pc, #256]	@ (8002254 <NMEA_UART_DMA_copy_buffer+0x150>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d03b      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 8002156:	4b39      	ldr	r3, [pc, #228]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a3e      	ldr	r2, [pc, #248]	@ (8002258 <NMEA_UART_DMA_copy_buffer+0x154>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d035      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 8002162:	4b36      	ldr	r3, [pc, #216]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a3c      	ldr	r2, [pc, #240]	@ (800225c <NMEA_UART_DMA_copy_buffer+0x158>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d02f      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 800216e:	4b33      	ldr	r3, [pc, #204]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a3a      	ldr	r2, [pc, #232]	@ (8002260 <NMEA_UART_DMA_copy_buffer+0x15c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d029      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 800217a:	4b30      	ldr	r3, [pc, #192]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a38      	ldr	r2, [pc, #224]	@ (8002264 <NMEA_UART_DMA_copy_buffer+0x160>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d023      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 8002186:	4b2d      	ldr	r3, [pc, #180]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a36      	ldr	r2, [pc, #216]	@ (8002268 <NMEA_UART_DMA_copy_buffer+0x164>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01d      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 8002192:	4b2a      	ldr	r3, [pc, #168]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a34      	ldr	r2, [pc, #208]	@ (800226c <NMEA_UART_DMA_copy_buffer+0x168>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d017      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 800219e:	4b27      	ldr	r3, [pc, #156]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a32      	ldr	r2, [pc, #200]	@ (8002270 <NMEA_UART_DMA_copy_buffer+0x16c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d011      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 80021aa:	4b24      	ldr	r3, [pc, #144]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a30      	ldr	r2, [pc, #192]	@ (8002274 <NMEA_UART_DMA_copy_buffer+0x170>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00b      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 80021b6:	4b21      	ldr	r3, [pc, #132]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002278 <NMEA_UART_DMA_copy_buffer+0x174>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d005      	beq.n	80021ce <NMEA_UART_DMA_copy_buffer+0xca>
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2c      	ldr	r2, [pc, #176]	@ (800227c <NMEA_UART_DMA_copy_buffer+0x178>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d106      	bne.n	80021dc <NMEA_UART_DMA_copy_buffer+0xd8>
 80021ce:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80021da:	e005      	b.n	80021e8 <NMEA_UART_DMA_copy_buffer+0xe4>
 80021dc:	4b17      	ldr	r3, [pc, #92]	@ (800223c <NMEA_UART_DMA_copy_buffer+0x138>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80021e8:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < data_length; i++){
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	e013      	b.n	8002218 <NMEA_UART_DMA_copy_buffer+0x114>
		if (NMEA_UART_DMA_get_char(NMEA_UART_DMA_buffer[i])==NMEA_BUFFER_OVERFLOWED){
 80021f0:	4a23      	ldr	r2, [pc, #140]	@ (8002280 <NMEA_UART_DMA_copy_buffer+0x17c>)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4413      	add	r3, r2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff1b 	bl	8002034 <NMEA_UART_DMA_get_char>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <NMEA_UART_DMA_copy_buffer+0x104>
			stat=NMEA_BUFFER_OVERFLOWED;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
		}
		NMEA_UART_DMA_buffer[i]=0;
 8002208:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <NMEA_UART_DMA_copy_buffer+0x17c>)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4413      	add	r3, r2
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < data_length; i++){
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3301      	adds	r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	429a      	cmp	r2, r3
 800221e:	dbe7      	blt.n	80021f0 <NMEA_UART_DMA_copy_buffer+0xec>
	}

	HAL_UART_Receive_DMA(NMEA_huart, NMEA_UART_DMA_buffer, NMEA_UART_DMA_BUFFER_SIZE);
 8002220:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <NMEA_UART_DMA_copy_buffer+0x180>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002228:	4915      	ldr	r1, [pc, #84]	@ (8002280 <NMEA_UART_DMA_copy_buffer+0x17c>)
 800222a:	4618      	mov	r0, r3
 800222c:	f00c fe3e 	bl	800eeac <HAL_UART_Receive_DMA>
	return stat;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	24000e54 	.word	0x24000e54
 8002240:	40020010 	.word	0x40020010
 8002244:	40020028 	.word	0x40020028
 8002248:	40020040 	.word	0x40020040
 800224c:	40020058 	.word	0x40020058
 8002250:	40020070 	.word	0x40020070
 8002254:	40020088 	.word	0x40020088
 8002258:	400200a0 	.word	0x400200a0
 800225c:	400200b8 	.word	0x400200b8
 8002260:	40020410 	.word	0x40020410
 8002264:	40020428 	.word	0x40020428
 8002268:	40020440 	.word	0x40020440
 800226c:	40020458 	.word	0x40020458
 8002270:	40020470 	.word	0x40020470
 8002274:	40020488 	.word	0x40020488
 8002278:	400204a0 	.word	0x400204a0
 800227c:	400204b8 	.word	0x400204b8
 8002280:	240007b0 	.word	0x240007b0
 8002284:	24000e50 	.word	0x24000e50

08002288 <NMEA_process_task>:

NMEA_status NMEA_process_task(void){
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 8002292:	e00d      	b.n	80022b0 <NMEA_process_task+0x28>
		NMEA_read_line();
 8002294:	f7ff fe2a 	bl	8001eec <NMEA_read_line>
		if (NMEA_checksum_clc(NMEA_working_buffer) == NMEA_OK){
 8002298:	480a      	ldr	r0, [pc, #40]	@ (80022c4 <NMEA_process_task+0x3c>)
 800229a:	f7ff fdf1 	bl	8001e80 <NMEA_checksum_clc>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d103      	bne.n	80022ac <NMEA_process_task+0x24>
			NMEA_parser((char *)NMEA_working_buffer);
 80022a4:	4807      	ldr	r0, [pc, #28]	@ (80022c4 <NMEA_process_task+0x3c>)
 80022a6:	f7ff fbed 	bl	8001a84 <NMEA_parser>
 80022aa:	e001      	b.n	80022b0 <NMEA_process_task+0x28>
		}else stat = NMEA_CHECKSUM_ERROR;
 80022ac:	2302      	movs	r3, #2
 80022ae:	71fb      	strb	r3, [r7, #7]
	while(UART_buffer_lines>0) {
 80022b0:	4b05      	ldr	r3, [pc, #20]	@ (80022c8 <NMEA_process_task+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	dced      	bgt.n	8002294 <NMEA_process_task+0xc>
	}
	return stat;
 80022b8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	24000db0 	.word	0x24000db0
 80022c8:	24000e38 	.word	0x24000e38

080022cc <user_UART_IDLE_IT_handler>:

NMEA_status user_UART_IDLE_IT_handler(void){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
	NMEA_status stat = NMEA_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	71fb      	strb	r3, [r7, #7]
	if (__HAL_UART_GET_FLAG(NMEA_huart, UART_FLAG_IDLE) == SET) {
 80022d6:	4b0d      	ldr	r3, [pc, #52]	@ (800230c <user_UART_IDLE_IT_handler+0x40>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b10      	cmp	r3, #16
 80022e4:	d10d      	bne.n	8002302 <user_UART_IDLE_IT_handler+0x36>
		__HAL_UART_CLEAR_FLAG(NMEA_huart,UART_FLAG_IDLE);
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <user_UART_IDLE_IT_handler+0x40>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2210      	movs	r2, #16
 80022ee:	621a      	str	r2, [r3, #32]
		HAL_UART_DMAStop(NMEA_huart);
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <user_UART_IDLE_IT_handler+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f00c fe25 	bl	800ef44 <HAL_UART_DMAStop>
		stat = NMEA_UART_DMA_copy_buffer();
 80022fa:	f7ff ff03 	bl	8002104 <NMEA_UART_DMA_copy_buffer>
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
	}
	return stat;
 8002302:	79fb      	ldrb	r3, [r7, #7]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	24000e50 	.word	0x24000e50

08002310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002314:	f000 f906 	bl	8002524 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002318:	f003 fc5e 	bl	8005bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800231c:	f000 f842 	bl	80023a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002320:	f7ff fa26 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 8002324:	f7fe ff78 	bl	8001218 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8002328:	f7fe ffa6 	bl	8001278 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 800232c:	f7ff fad2 	bl	80018d4 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002330:	f000 f93c 	bl	80025ac <MX_SPI1_Init>
  MX_SPI2_Init();
 8002334:	f000 f990 	bl	8002658 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002338:	f000 fcc8 	bl	8002ccc <MX_TIM2_Init>
  MX_TIM3_Init();
 800233c:	f000 fd42 	bl	8002dc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002340:	f000 fda6 	bl	8002e90 <MX_TIM4_Init>
  MX_UART4_Init();
 8002344:	f000 ff5e 	bl	8003204 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002348:	f000 ffa8 	bl	800329c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800234c:	f001 f842 	bl	80033d4 <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8002350:	f000 fe1a 	bl	8002f88 <MX_TIM13_Init>
  MX_USART3_UART_Init();
 8002354:	f000 fff2 	bl	800333c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8002358:	f00f ffe4 	bl	8012324 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 800235c:	f001 ff74 	bl	8004248 <BMP280_init>
  //SD_init();
  SBUS_init();
 8002360:	f002 ff20 	bl	80051a4 <SBUS_init>
  HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8002364:	2201      	movs	r2, #1
 8002366:	4909      	ldr	r1, [pc, #36]	@ (800238c <main+0x7c>)
 8002368:	4809      	ldr	r0, [pc, #36]	@ (8002390 <main+0x80>)
 800236a:	f00c fd9f 	bl	800eeac <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 800236e:	2201      	movs	r2, #1
 8002370:	4908      	ldr	r1, [pc, #32]	@ (8002394 <main+0x84>)
 8002372:	4809      	ldr	r0, [pc, #36]	@ (8002398 <main+0x88>)
 8002374:	f00c fd4e 	bl	800ee14 <HAL_UART_Receive_IT>
  NMEA_init(&huart4, &hdma_uart4_rx);
 8002378:	4908      	ldr	r1, [pc, #32]	@ (800239c <main+0x8c>)
 800237a:	4809      	ldr	r0, [pc, #36]	@ (80023a0 <main+0x90>)
 800237c:	f7ff fe1e 	bl	8001fbc <NMEA_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002380:	f7ff f974 	bl	800166c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002384:	f011 fcfd 	bl	8013d82 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002388:	bf00      	nop
 800238a:	e7fd      	b.n	8002388 <main+0x78>
 800238c:	24001617 	.word	0x24001617
 8002390:	24001250 	.word	0x24001250
 8002394:	24000e90 	.word	0x24000e90
 8002398:	240012e4 	.word	0x240012e4
 800239c:	24001378 	.word	0x24001378
 80023a0:	24001128 	.word	0x24001128

080023a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b09c      	sub	sp, #112	@ 0x70
 80023a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023ae:	224c      	movs	r2, #76	@ 0x4c
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f014 fe5f 	bl	8017076 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	2220      	movs	r2, #32
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f014 fe59 	bl	8017076 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80023c4:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <SystemClock_Config+0xe4>)
 80023c6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80023ce:	2002      	movs	r0, #2
 80023d0:	f007 fb26 	bl	8009a20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80023d4:	2300      	movs	r3, #0
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	4b2c      	ldr	r3, [pc, #176]	@ (800248c <SystemClock_Config+0xe8>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a2b      	ldr	r2, [pc, #172]	@ (800248c <SystemClock_Config+0xe8>)
 80023de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b29      	ldr	r3, [pc, #164]	@ (800248c <SystemClock_Config+0xe8>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023ec:	603b      	str	r3, [r7, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023f0:	bf00      	nop
 80023f2:	4b26      	ldr	r3, [pc, #152]	@ (800248c <SystemClock_Config+0xe8>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fe:	d1f8      	bne.n	80023f2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002400:	2302      	movs	r3, #2
 8002402:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002404:	2301      	movs	r3, #1
 8002406:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8002408:	2340      	movs	r3, #64	@ 0x40
 800240a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800240c:	2302      	movs	r3, #2
 800240e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002410:	2300      	movs	r3, #0
 8002412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002414:	2304      	movs	r3, #4
 8002416:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 8002418:	2323      	movs	r3, #35	@ 0x23
 800241a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800241c:	2302      	movs	r3, #2
 800241e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002420:	2302      	movs	r3, #2
 8002422:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002424:	2302      	movs	r3, #2
 8002426:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002428:	230c      	movs	r3, #12
 800242a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800242c:	2300      	movs	r3, #0
 800242e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002438:	4618      	mov	r0, r3
 800243a:	f007 fb2b 	bl	8009a94 <HAL_RCC_OscConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002444:	f000 f8ac 	bl	80025a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002448:	233f      	movs	r3, #63	@ 0x3f
 800244a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800244c:	2303      	movs	r3, #3
 800244e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002458:	2340      	movs	r3, #64	@ 0x40
 800245a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800245c:	2340      	movs	r3, #64	@ 0x40
 800245e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002460:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002464:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002466:	2340      	movs	r3, #64	@ 0x40
 8002468:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	2106      	movs	r1, #6
 800246e:	4618      	mov	r0, r3
 8002470:	f007 ff42 	bl	800a2f8 <HAL_RCC_ClockConfig>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800247a:	f000 f891 	bl	80025a0 <Error_Handler>
  }
}
 800247e:	bf00      	nop
 8002480:	3770      	adds	r7, #112	@ 0x70
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	58024400 	.word	0x58024400
 800248c:	58024800 	.word	0x58024800

08002490 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1){
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a18      	ldr	r2, [pc, #96]	@ (8002500 <HAL_UART_RxCpltCallback+0x70>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10a      	bne.n	80024b8 <HAL_UART_RxCpltCallback+0x28>
		SBUS_Receive(SBUS_RxBuffer);
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <HAL_UART_RxCpltCallback+0x74>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 fe8a 	bl	80051c0 <SBUS_Receive>
		HAL_UART_Receive_DMA(&huart1, &SBUS_RxBuffer, 1);
 80024ac:	2201      	movs	r2, #1
 80024ae:	4915      	ldr	r1, [pc, #84]	@ (8002504 <HAL_UART_RxCpltCallback+0x74>)
 80024b0:	4815      	ldr	r0, [pc, #84]	@ (8002508 <HAL_UART_RxCpltCallback+0x78>)
 80024b2:	f00c fcfb 	bl	800eeac <HAL_UART_Receive_DMA>
    }
    else if(huart -> Instance == USART6){
    	LR03_Receive(LR03_RxByte);
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
    }
}
 80024b6:	e01e      	b.n	80024f6 <HAL_UART_RxCpltCallback+0x66>
    else if (huart -> Instance == USART3){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a13      	ldr	r2, [pc, #76]	@ (800250c <HAL_UART_RxCpltCallback+0x7c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10a      	bne.n	80024d8 <HAL_UART_RxCpltCallback+0x48>
        BNO_Receive(BNO_BufferByte);
 80024c2:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <HAL_UART_RxCpltCallback+0x80>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 fbf2 	bl	8004cb0 <BNO_Receive>
        HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 80024cc:	2201      	movs	r2, #1
 80024ce:	4910      	ldr	r1, [pc, #64]	@ (8002510 <HAL_UART_RxCpltCallback+0x80>)
 80024d0:	4810      	ldr	r0, [pc, #64]	@ (8002514 <HAL_UART_RxCpltCallback+0x84>)
 80024d2:	f00c fceb 	bl	800eeac <HAL_UART_Receive_DMA>
}
 80024d6:	e00e      	b.n	80024f6 <HAL_UART_RxCpltCallback+0x66>
    else if(huart -> Instance == USART6){
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002518 <HAL_UART_RxCpltCallback+0x88>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d109      	bne.n	80024f6 <HAL_UART_RxCpltCallback+0x66>
    	LR03_Receive(LR03_RxByte);
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <HAL_UART_RxCpltCallback+0x8c>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fdc4 	bl	8005074 <LR03_Receive>
    	HAL_UART_Receive_IT(&huart6, &LR03_RxByte,1);
 80024ec:	2201      	movs	r2, #1
 80024ee:	490b      	ldr	r1, [pc, #44]	@ (800251c <HAL_UART_RxCpltCallback+0x8c>)
 80024f0:	480b      	ldr	r0, [pc, #44]	@ (8002520 <HAL_UART_RxCpltCallback+0x90>)
 80024f2:	f00c fc8f 	bl	800ee14 <HAL_UART_Receive_IT>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40011000 	.word	0x40011000
 8002504:	240017a1 	.word	0x240017a1
 8002508:	240011bc 	.word	0x240011bc
 800250c:	40004800 	.word	0x40004800
 8002510:	24001617 	.word	0x24001617
 8002514:	24001250 	.word	0x24001250
 8002518:	40011400 	.word	0x40011400
 800251c:	24000e90 	.word	0x24000e90
 8002520:	240012e4 	.word	0x240012e4

08002524 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800252a:	463b      	mov	r3, r7
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002536:	f003 fcaf 	bl	8005e98 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800253a:	2301      	movs	r3, #1
 800253c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800253e:	2300      	movs	r3, #0
 8002540:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002546:	231f      	movs	r3, #31
 8002548:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800254a:	2387      	movs	r3, #135	@ 0x87
 800254c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800254e:	2300      	movs	r3, #0
 8002550:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002552:	2300      	movs	r3, #0
 8002554:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002556:	2301      	movs	r3, #1
 8002558:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002566:	463b      	mov	r3, r7
 8002568:	4618      	mov	r0, r3
 800256a:	f003 fccd 	bl	8005f08 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800256e:	2004      	movs	r0, #4
 8002570:	f003 fcaa 	bl	8005ec8 <HAL_MPU_Enable>

}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a04      	ldr	r2, [pc, #16]	@ (800259c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800258e:	f003 fb5f 	bl	8005c50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40014800 	.word	0x40014800

080025a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a4:	b672      	cpsid	i
}
 80025a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <Error_Handler+0x8>

080025ac <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80025b0:	4b27      	ldr	r3, [pc, #156]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025b2:	4a28      	ldr	r2, [pc, #160]	@ (8002654 <MX_SPI1_Init+0xa8>)
 80025b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025b6:	4b26      	ldr	r3, [pc, #152]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025b8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80025bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025be:	4b24      	ldr	r3, [pc, #144]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c4:	4b22      	ldr	r3, [pc, #136]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025c6:	2207      	movs	r2, #7
 80025c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ca:	4b21      	ldr	r3, [pc, #132]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025d8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80025de:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025e0:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80025e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025ec:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f2:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80025f8:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <MX_SPI1_Init+0xa4>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <MX_SPI1_Init+0xa4>)
 8002600:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002604:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002606:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <MX_SPI1_Init+0xa4>)
 8002608:	2200      	movs	r2, #0
 800260a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <MX_SPI1_Init+0xa4>)
 800260e:	2200      	movs	r2, #0
 8002610:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <MX_SPI1_Init+0xa4>)
 8002614:	2200      	movs	r2, #0
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002618:	4b0d      	ldr	r3, [pc, #52]	@ (8002650 <MX_SPI1_Init+0xa4>)
 800261a:	2200      	movs	r2, #0
 800261c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <MX_SPI1_Init+0xa4>)
 8002620:	2200      	movs	r2, #0
 8002622:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <MX_SPI1_Init+0xa4>)
 8002626:	2200      	movs	r2, #0
 8002628:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800262a:	4b09      	ldr	r3, [pc, #36]	@ (8002650 <MX_SPI1_Init+0xa4>)
 800262c:	2200      	movs	r2, #0
 800262e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002630:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <MX_SPI1_Init+0xa4>)
 8002632:	2200      	movs	r2, #0
 8002634:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002636:	4b06      	ldr	r3, [pc, #24]	@ (8002650 <MX_SPI1_Init+0xa4>)
 8002638:	2200      	movs	r2, #0
 800263a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800263c:	4804      	ldr	r0, [pc, #16]	@ (8002650 <MX_SPI1_Init+0xa4>)
 800263e:	f00a f809 	bl	800c654 <HAL_SPI_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8002648:	f7ff ffaa 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	24000e98 	.word	0x24000e98
 8002654:	40013000 	.word	0x40013000

08002658 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800265c:	4b27      	ldr	r3, [pc, #156]	@ (80026fc <MX_SPI2_Init+0xa4>)
 800265e:	4a28      	ldr	r2, [pc, #160]	@ (8002700 <MX_SPI2_Init+0xa8>)
 8002660:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002662:	4b26      	ldr	r3, [pc, #152]	@ (80026fc <MX_SPI2_Init+0xa4>)
 8002664:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002668:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800266a:	4b24      	ldr	r3, [pc, #144]	@ (80026fc <MX_SPI2_Init+0xa4>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002670:	4b22      	ldr	r3, [pc, #136]	@ (80026fc <MX_SPI2_Init+0xa4>)
 8002672:	2207      	movs	r2, #7
 8002674:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002676:	4b21      	ldr	r3, [pc, #132]	@ (80026fc <MX_SPI2_Init+0xa4>)
 8002678:	2200      	movs	r2, #0
 800267a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800267c:	4b1f      	ldr	r3, [pc, #124]	@ (80026fc <MX_SPI2_Init+0xa4>)
 800267e:	2200      	movs	r2, #0
 8002680:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002682:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <MX_SPI2_Init+0xa4>)
 8002684:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002688:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800268a:	4b1c      	ldr	r3, [pc, #112]	@ (80026fc <MX_SPI2_Init+0xa4>)
 800268c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8002690:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002692:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <MX_SPI2_Init+0xa4>)
 8002694:	2200      	movs	r2, #0
 8002696:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002698:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <MX_SPI2_Init+0xa4>)
 800269a:	2200      	movs	r2, #0
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800269e:	4b17      	ldr	r3, [pc, #92]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80026a4:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026aa:	4b14      	ldr	r3, [pc, #80]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026b0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80026b2:	4b12      	ldr	r3, [pc, #72]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80026b8:	4b10      	ldr	r3, [pc, #64]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80026be:	4b0f      	ldr	r3, [pc, #60]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80026ca:	4b0c      	ldr	r3, [pc, #48]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026d8:	2200      	movs	r2, #0
 80026da:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80026dc:	4b07      	ldr	r3, [pc, #28]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026de:	2200      	movs	r2, #0
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80026e8:	4804      	ldr	r0, [pc, #16]	@ (80026fc <MX_SPI2_Init+0xa4>)
 80026ea:	f009 ffb3 	bl	800c654 <HAL_SPI_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80026f4:	f7ff ff54 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	24000f20 	.word	0x24000f20
 8002700:	40003800 	.word	0x40003800

08002704 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0bc      	sub	sp, #240	@ 0xf0
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800271c:	f107 0318 	add.w	r3, r7, #24
 8002720:	22c0      	movs	r2, #192	@ 0xc0
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f014 fca6 	bl	8017076 <memset>
  if(spiHandle->Instance==SPI1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a4c      	ldr	r2, [pc, #304]	@ (8002860 <HAL_SPI_MspInit+0x15c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d145      	bne.n	80027c0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002734:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002740:	2300      	movs	r3, #0
 8002742:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002744:	f107 0318 	add.w	r3, r7, #24
 8002748:	4618      	mov	r0, r3
 800274a:	f008 f9a3 	bl	800aa94 <HAL_RCCEx_PeriphCLKConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002754:	f7ff ff24 	bl	80025a0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002758:	4b42      	ldr	r3, [pc, #264]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 800275a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800275e:	4a41      	ldr	r2, [pc, #260]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 8002760:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002764:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002768:	4b3e      	ldr	r3, [pc, #248]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 800276a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800276e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	4b3b      	ldr	r3, [pc, #236]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 8002778:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800277c:	4a39      	ldr	r2, [pc, #228]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002786:	4b37      	ldr	r3, [pc, #220]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 8002788:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002794:	23e0      	movs	r3, #224	@ 0xe0
 8002796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027ac:	2305      	movs	r3, #5
 80027ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80027b6:	4619      	mov	r1, r3
 80027b8:	482b      	ldr	r0, [pc, #172]	@ (8002868 <HAL_SPI_MspInit+0x164>)
 80027ba:	f006 fe33 	bl	8009424 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80027be:	e04a      	b.n	8002856 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a29      	ldr	r2, [pc, #164]	@ (800286c <HAL_SPI_MspInit+0x168>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d145      	bne.n	8002856 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80027ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027da:	f107 0318 	add.w	r3, r7, #24
 80027de:	4618      	mov	r0, r3
 80027e0:	f008 f958 	bl	800aa94 <HAL_RCCEx_PeriphCLKConfig>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80027ea:	f7ff fed9 	bl	80025a0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 80027f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80027f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 80027f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027fa:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80027fe:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 8002800:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280c:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 800280e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002812:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800281c:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <HAL_SPI_MspInit+0x160>)
 800281e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800282a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800282e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002844:	2305      	movs	r3, #5
 8002846:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800284e:	4619      	mov	r1, r3
 8002850:	4807      	ldr	r0, [pc, #28]	@ (8002870 <HAL_SPI_MspInit+0x16c>)
 8002852:	f006 fde7 	bl	8009424 <HAL_GPIO_Init>
}
 8002856:	bf00      	nop
 8002858:	37f0      	adds	r7, #240	@ 0xf0
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40013000 	.word	0x40013000
 8002864:	58024400 	.word	0x58024400
 8002868:	58020000 	.word	0x58020000
 800286c:	40003800 	.word	0x40003800
 8002870:	58020400 	.word	0x58020400

08002874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <HAL_MspInit+0x38>)
 800287c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002880:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <HAL_MspInit+0x38>)
 8002882:	f043 0302 	orr.w	r3, r3, #2
 8002886:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <HAL_MspInit+0x38>)
 800288c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	210f      	movs	r1, #15
 800289c:	f06f 0001 	mvn.w	r0, #1
 80028a0:	f003 fad2 	bl	8005e48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	58024400 	.word	0x58024400

080028b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08e      	sub	sp, #56	@ 0x38
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b0f      	cmp	r3, #15
 80028bc:	d844      	bhi.n	8002948 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80028be:	2200      	movs	r2, #0
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	2076      	movs	r0, #118	@ 0x76
 80028c4:	f003 fac0 	bl	8005e48 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80028c8:	2076      	movs	r0, #118	@ 0x76
 80028ca:	f003 fad7 	bl	8005e7c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80028ce:	4a24      	ldr	r2, [pc, #144]	@ (8002960 <HAL_InitTick+0xb0>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80028d4:	4b23      	ldr	r3, [pc, #140]	@ (8002964 <HAL_InitTick+0xb4>)
 80028d6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80028da:	4a22      	ldr	r2, [pc, #136]	@ (8002964 <HAL_InitTick+0xb4>)
 80028dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e0:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80028e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002964 <HAL_InitTick+0xb4>)
 80028e6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80028ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028f2:	f107 020c 	add.w	r2, r7, #12
 80028f6:	f107 0310 	add.w	r3, r7, #16
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f008 f887 	bl	800aa10 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002902:	f008 f86f 	bl	800a9e4 <HAL_RCC_GetPCLK2Freq>
 8002906:	4603      	mov	r3, r0
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800290c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <HAL_InitTick+0xb8>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	3b01      	subs	r3, #1
 8002918:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800291a:	4b14      	ldr	r3, [pc, #80]	@ (800296c <HAL_InitTick+0xbc>)
 800291c:	4a14      	ldr	r2, [pc, #80]	@ (8002970 <HAL_InitTick+0xc0>)
 800291e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <HAL_InitTick+0xbc>)
 8002922:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002926:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8002928:	4a10      	ldr	r2, [pc, #64]	@ (800296c <HAL_InitTick+0xbc>)
 800292a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800292e:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <HAL_InitTick+0xbc>)
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002934:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <HAL_InitTick+0xbc>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800293a:	480c      	ldr	r0, [pc, #48]	@ (800296c <HAL_InitTick+0xbc>)
 800293c:	f00b f831 	bl	800d9a2 <HAL_TIM_Base_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d107      	bne.n	8002956 <HAL_InitTick+0xa6>
 8002946:	e001      	b.n	800294c <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e005      	b.n	8002958 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800294c:	4807      	ldr	r0, [pc, #28]	@ (800296c <HAL_InitTick+0xbc>)
 800294e:	f00b f87f 	bl	800da50 <HAL_TIM_Base_Start_IT>
 8002952:	4603      	mov	r3, r0
 8002954:	e000      	b.n	8002958 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3738      	adds	r7, #56	@ 0x38
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	240000a4 	.word	0x240000a4
 8002964:	58024400 	.word	0x58024400
 8002968:	431bde83 	.word	0x431bde83
 800296c:	24000fa8 	.word	0x24000fa8
 8002970:	40014800 	.word	0x40014800

08002974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <NMI_Handler+0x4>

0800297c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <HardFault_Handler+0x4>

08002984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <MemManage_Handler+0x4>

0800298c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <BusFault_Handler+0x4>

08002994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <UsageFault_Handler+0x4>

0800299c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80029b0:	4802      	ldr	r0, [pc, #8]	@ (80029bc <DMA1_Stream0_IRQHandler+0x10>)
 80029b2:	f004 fe45 	bl	8007640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	240013f0 	.word	0x240013f0

080029c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80029c4:	4802      	ldr	r0, [pc, #8]	@ (80029d0 <DMA1_Stream1_IRQHandler+0x10>)
 80029c6:	f004 fe3b 	bl	8007640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	24001468 	.word	0x24001468

080029d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80029d8:	4802      	ldr	r0, [pc, #8]	@ (80029e4 <DMA1_Stream2_IRQHandler+0x10>)
 80029da:	f004 fe31 	bl	8007640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	24001378 	.word	0x24001378

080029e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <USART1_IRQHandler+0x10>)
 80029ee:	f00c fc7b 	bl	800f2e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	240011bc 	.word	0x240011bc

080029fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a00:	4802      	ldr	r0, [pc, #8]	@ (8002a0c <USART3_IRQHandler+0x10>)
 8002a02:	f00c fc71 	bl	800f2e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	24001250 	.word	0x24001250

08002a10 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	user_UART_IDLE_IT_handler();
 8002a14:	f7ff fc5a 	bl	80022cc <user_UART_IDLE_IT_handler>
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002a18:	4802      	ldr	r0, [pc, #8]	@ (8002a24 <UART4_IRQHandler+0x14>)
 8002a1a:	f00c fc65 	bl	800f2e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	24001128 	.word	0x24001128

08002a28 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002a2c:	4802      	ldr	r0, [pc, #8]	@ (8002a38 <USART6_IRQHandler+0x10>)
 8002a2e:	f00c fc5b 	bl	800f2e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	240012e4 	.word	0x240012e4

08002a3c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002a40:	4802      	ldr	r0, [pc, #8]	@ (8002a4c <TIM17_IRQHandler+0x10>)
 8002a42:	f00b f9e3 	bl	800de0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	24000fa8 	.word	0x24000fa8

08002a50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return 1;
 8002a54:	2301      	movs	r3, #1
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <_kill>:

int _kill(int pid, int sig)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a6a:	f014 fb71 	bl	8017150 <__errno>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2216      	movs	r2, #22
 8002a72:	601a      	str	r2, [r3, #0]
  return -1;
 8002a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_exit>:

void _exit (int status)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ffe7 	bl	8002a60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a92:	bf00      	nop
 8002a94:	e7fd      	b.n	8002a92 <_exit+0x12>

08002a96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e00a      	b.n	8002abe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aa8:	f3af 8000 	nop.w
 8002aac:	4601      	mov	r1, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	60ba      	str	r2, [r7, #8]
 8002ab4:	b2ca      	uxtb	r2, r1
 8002ab6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3301      	adds	r3, #1
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	dbf0      	blt.n	8002aa8 <_read+0x12>
  }

  return len;
 8002ac6:	687b      	ldr	r3, [r7, #4]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e009      	b.n	8002af6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	60ba      	str	r2, [r7, #8]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	3301      	adds	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	dbf1      	blt.n	8002ae2 <_write+0x12>
  }
  return len;
 8002afe:	687b      	ldr	r3, [r7, #4]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_close>:

int _close(int file)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b30:	605a      	str	r2, [r3, #4]
  return 0;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <_isatty>:

int _isatty(int file)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b48:	2301      	movs	r3, #1
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3714      	adds	r7, #20
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b78:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <_sbrk+0x5c>)
 8002b7a:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <_sbrk+0x60>)
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b84:	4b13      	ldr	r3, [pc, #76]	@ (8002bd4 <_sbrk+0x64>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <_sbrk+0x64>)
 8002b8e:	4a12      	ldr	r2, [pc, #72]	@ (8002bd8 <_sbrk+0x68>)
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b92:	4b10      	ldr	r3, [pc, #64]	@ (8002bd4 <_sbrk+0x64>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d207      	bcs.n	8002bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba0:	f014 fad6 	bl	8017150 <__errno>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bae:	e009      	b.n	8002bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb0:	4b08      	ldr	r3, [pc, #32]	@ (8002bd4 <_sbrk+0x64>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bb6:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <_sbrk+0x64>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4a05      	ldr	r2, [pc, #20]	@ (8002bd4 <_sbrk+0x64>)
 8002bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	24100000 	.word	0x24100000
 8002bd0:	00000400 	.word	0x00000400
 8002bd4:	24000ff4 	.word	0x24000ff4
 8002bd8:	24006918 	.word	0x24006918

08002bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002be0:	4b32      	ldr	r3, [pc, #200]	@ (8002cac <SystemInit+0xd0>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	4a31      	ldr	r2, [pc, #196]	@ (8002cac <SystemInit+0xd0>)
 8002be8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb0 <SystemInit+0xd4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d807      	bhi.n	8002c0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb0 <SystemInit+0xd4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 030f 	bic.w	r3, r3, #15
 8002c04:	4a2a      	ldr	r2, [pc, #168]	@ (8002cb0 <SystemInit+0xd4>)
 8002c06:	f043 0303 	orr.w	r3, r3, #3
 8002c0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c0c:	4b29      	ldr	r3, [pc, #164]	@ (8002cb4 <SystemInit+0xd8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a28      	ldr	r2, [pc, #160]	@ (8002cb4 <SystemInit+0xd8>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c18:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <SystemInit+0xd8>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c1e:	4b25      	ldr	r3, [pc, #148]	@ (8002cb4 <SystemInit+0xd8>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4924      	ldr	r1, [pc, #144]	@ (8002cb4 <SystemInit+0xd8>)
 8002c24:	4b24      	ldr	r3, [pc, #144]	@ (8002cb8 <SystemInit+0xdc>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c2a:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <SystemInit+0xd4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c36:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <SystemInit+0xd4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 030f 	bic.w	r3, r3, #15
 8002c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb0 <SystemInit+0xd4>)
 8002c40:	f043 0303 	orr.w	r3, r3, #3
 8002c44:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002c46:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <SystemInit+0xd8>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002c4c:	4b19      	ldr	r3, [pc, #100]	@ (8002cb4 <SystemInit+0xd8>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002c52:	4b18      	ldr	r3, [pc, #96]	@ (8002cb4 <SystemInit+0xd8>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c58:	4b16      	ldr	r3, [pc, #88]	@ (8002cb4 <SystemInit+0xd8>)
 8002c5a:	4a18      	ldr	r2, [pc, #96]	@ (8002cbc <SystemInit+0xe0>)
 8002c5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002c5e:	4b15      	ldr	r3, [pc, #84]	@ (8002cb4 <SystemInit+0xd8>)
 8002c60:	4a17      	ldr	r2, [pc, #92]	@ (8002cc0 <SystemInit+0xe4>)
 8002c62:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <SystemInit+0xd8>)
 8002c66:	4a17      	ldr	r2, [pc, #92]	@ (8002cc4 <SystemInit+0xe8>)
 8002c68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002c6a:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <SystemInit+0xd8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002c70:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <SystemInit+0xd8>)
 8002c72:	4a14      	ldr	r2, [pc, #80]	@ (8002cc4 <SystemInit+0xe8>)
 8002c74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002c76:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb4 <SystemInit+0xd8>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <SystemInit+0xd8>)
 8002c7e:	4a11      	ldr	r2, [pc, #68]	@ (8002cc4 <SystemInit+0xe8>)
 8002c80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002c82:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <SystemInit+0xd8>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb4 <SystemInit+0xd8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a09      	ldr	r2, [pc, #36]	@ (8002cb4 <SystemInit+0xd8>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c94:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <SystemInit+0xd8>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <SystemInit+0xec>)
 8002c9c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002ca0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00
 8002cb0:	52002000 	.word	0x52002000
 8002cb4:	58024400 	.word	0x58024400
 8002cb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002cbc:	02020200 	.word	0x02020200
 8002cc0:	01ff0000 	.word	0x01ff0000
 8002cc4:	01010280 	.word	0x01010280
 8002cc8:	52004000 	.word	0x52004000

08002ccc <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cd2:	f107 031c 	add.w	r3, r7, #28
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cde:	463b      	mov	r3, r7
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	611a      	str	r2, [r3, #16]
 8002cec:	615a      	str	r2, [r3, #20]
 8002cee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cf0:	4b33      	ldr	r3, [pc, #204]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002cf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002cf6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8002cf8:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002cfa:	f240 1217 	movw	r2, #279	@ 0x117
 8002cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d00:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8002d06:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002d08:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d14:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002d16:	2280      	movs	r2, #128	@ 0x80
 8002d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d1a:	4829      	ldr	r0, [pc, #164]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002d1c:	f00a ff10 	bl	800db40 <HAL_TIM_PWM_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002d26:	f7ff fc3b 	bl	80025a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	4619      	mov	r1, r3
 8002d38:	4821      	ldr	r0, [pc, #132]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002d3a:	f00b fe4d 	bl	800e9d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002d44:	f7ff fc2c 	bl	80025a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d48:	2360      	movs	r3, #96	@ 0x60
 8002d4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d58:	463b      	mov	r3, r7
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4818      	ldr	r0, [pc, #96]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002d60:	f00b f95c 	bl	800e01c <HAL_TIM_PWM_ConfigChannel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002d6a:	f7ff fc19 	bl	80025a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d6e:	463b      	mov	r3, r7
 8002d70:	2204      	movs	r2, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	4812      	ldr	r0, [pc, #72]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002d76:	f00b f951 	bl	800e01c <HAL_TIM_PWM_ConfigChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8002d80:	f7ff fc0e 	bl	80025a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d84:	463b      	mov	r3, r7
 8002d86:	2208      	movs	r2, #8
 8002d88:	4619      	mov	r1, r3
 8002d8a:	480d      	ldr	r0, [pc, #52]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002d8c:	f00b f946 	bl	800e01c <HAL_TIM_PWM_ConfigChannel>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8002d96:	f7ff fc03 	bl	80025a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d9a:	463b      	mov	r3, r7
 8002d9c:	220c      	movs	r2, #12
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4807      	ldr	r0, [pc, #28]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002da2:	f00b f93b 	bl	800e01c <HAL_TIM_PWM_ConfigChannel>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002dac:	f7ff fbf8 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002db0:	4803      	ldr	r0, [pc, #12]	@ (8002dc0 <MX_TIM2_Init+0xf4>)
 8002db2:	f000 f97d 	bl	80030b0 <HAL_TIM_MspPostInit>

}
 8002db6:	bf00      	nop
 8002db8:	3728      	adds	r7, #40	@ 0x28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	24000ff8 	.word	0x24000ff8

08002dc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	@ 0x28
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dca:	f107 031c 	add.w	r3, r7, #28
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
 8002de4:	615a      	str	r2, [r3, #20]
 8002de6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002de8:	4b27      	ldr	r3, [pc, #156]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002dea:	4a28      	ldr	r2, [pc, #160]	@ (8002e8c <MX_TIM3_Init+0xc8>)
 8002dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8002dee:	4b26      	ldr	r3, [pc, #152]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002df0:	f240 1217 	movw	r2, #279	@ 0x117
 8002df4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df6:	4b24      	ldr	r3, [pc, #144]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8002dfc:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002dfe:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002e02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e04:	4b20      	ldr	r3, [pc, #128]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002e0c:	2280      	movs	r2, #128	@ 0x80
 8002e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e10:	481d      	ldr	r0, [pc, #116]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002e12:	f00a fe95 	bl	800db40 <HAL_TIM_PWM_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002e1c:	f7ff fbc0 	bl	80025a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e28:	f107 031c 	add.w	r3, r7, #28
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4816      	ldr	r0, [pc, #88]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002e30:	f00b fdd2 	bl	800e9d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002e3a:	f7ff fbb1 	bl	80025a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e3e:	2360      	movs	r3, #96	@ 0x60
 8002e40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e4e:	463b      	mov	r3, r7
 8002e50:	2200      	movs	r2, #0
 8002e52:	4619      	mov	r1, r3
 8002e54:	480c      	ldr	r0, [pc, #48]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002e56:	f00b f8e1 	bl	800e01c <HAL_TIM_PWM_ConfigChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002e60:	f7ff fb9e 	bl	80025a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e64:	463b      	mov	r3, r7
 8002e66:	2204      	movs	r2, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4807      	ldr	r0, [pc, #28]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002e6c:	f00b f8d6 	bl	800e01c <HAL_TIM_PWM_ConfigChannel>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002e76:	f7ff fb93 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002e7a:	4803      	ldr	r0, [pc, #12]	@ (8002e88 <MX_TIM3_Init+0xc4>)
 8002e7c:	f000 f918 	bl	80030b0 <HAL_TIM_MspPostInit>

}
 8002e80:	bf00      	nop
 8002e82:	3728      	adds	r7, #40	@ 0x28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	24001044 	.word	0x24001044
 8002e8c:	40000400 	.word	0x40000400

08002e90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	@ 0x28
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e96:	f107 031c 	add.w	r3, r7, #28
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ea2:	463b      	mov	r3, r7
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
 8002eb0:	615a      	str	r2, [r3, #20]
 8002eb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002eb4:	4b32      	ldr	r3, [pc, #200]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002eb6:	4a33      	ldr	r2, [pc, #204]	@ (8002f84 <MX_TIM4_Init+0xf4>)
 8002eb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8002eba:	4b31      	ldr	r3, [pc, #196]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002ebc:	f240 1217 	movw	r2, #279	@ 0x117
 8002ec0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002eca:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002ece:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002ed8:	2280      	movs	r2, #128	@ 0x80
 8002eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002edc:	4828      	ldr	r0, [pc, #160]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002ede:	f00a fe2f 	bl	800db40 <HAL_TIM_PWM_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002ee8:	f7ff fb5a 	bl	80025a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ef4:	f107 031c 	add.w	r3, r7, #28
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4821      	ldr	r0, [pc, #132]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002efc:	f00b fd6c 	bl	800e9d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002f06:	f7ff fb4b 	bl	80025a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f0a:	2360      	movs	r3, #96	@ 0x60
 8002f0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f1a:	463b      	mov	r3, r7
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4817      	ldr	r0, [pc, #92]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002f22:	f00b f87b 	bl	800e01c <HAL_TIM_PWM_ConfigChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002f2c:	f7ff fb38 	bl	80025a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f30:	463b      	mov	r3, r7
 8002f32:	2204      	movs	r2, #4
 8002f34:	4619      	mov	r1, r3
 8002f36:	4812      	ldr	r0, [pc, #72]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002f38:	f00b f870 	bl	800e01c <HAL_TIM_PWM_ConfigChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002f42:	f7ff fb2d 	bl	80025a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f46:	463b      	mov	r3, r7
 8002f48:	2208      	movs	r2, #8
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	480c      	ldr	r0, [pc, #48]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002f4e:	f00b f865 	bl	800e01c <HAL_TIM_PWM_ConfigChannel>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002f58:	f7ff fb22 	bl	80025a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f5c:	463b      	mov	r3, r7
 8002f5e:	220c      	movs	r2, #12
 8002f60:	4619      	mov	r1, r3
 8002f62:	4807      	ldr	r0, [pc, #28]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002f64:	f00b f85a 	bl	800e01c <HAL_TIM_PWM_ConfigChannel>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8002f6e:	f7ff fb17 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002f72:	4803      	ldr	r0, [pc, #12]	@ (8002f80 <MX_TIM4_Init+0xf0>)
 8002f74:	f000 f89c 	bl	80030b0 <HAL_TIM_MspPostInit>

}
 8002f78:	bf00      	nop
 8002f7a:	3728      	adds	r7, #40	@ 0x28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	24001090 	.word	0x24001090
 8002f84:	40000800 	.word	0x40000800

08002f88 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <MX_TIM13_Init+0x40>)
 8002f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002fcc <MX_TIM13_Init+0x44>)
 8002f90:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 8002f92:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc8 <MX_TIM13_Init+0x40>)
 8002f94:	f240 1217 	movw	r2, #279	@ 0x117
 8002f98:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc8 <MX_TIM13_Init+0x40>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002fa0:	4b09      	ldr	r3, [pc, #36]	@ (8002fc8 <MX_TIM13_Init+0x40>)
 8002fa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fa6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa8:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <MX_TIM13_Init+0x40>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <MX_TIM13_Init+0x40>)
 8002fb0:	2280      	movs	r2, #128	@ 0x80
 8002fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002fb4:	4804      	ldr	r0, [pc, #16]	@ (8002fc8 <MX_TIM13_Init+0x40>)
 8002fb6:	f00a fcf4 	bl	800d9a2 <HAL_TIM_Base_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002fc0:	f7ff faee 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	240010dc 	.word	0x240010dc
 8002fcc:	40001c00 	.word	0x40001c00

08002fd0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe0:	d10f      	bne.n	8003002 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8003060 <HAL_TIM_PWM_MspInit+0x90>)
 8002fe4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8003060 <HAL_TIM_PWM_MspInit+0x90>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <HAL_TIM_PWM_MspInit+0x90>)
 8002ff4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003000:	e028      	b.n	8003054 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a17      	ldr	r2, [pc, #92]	@ (8003064 <HAL_TIM_PWM_MspInit+0x94>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d10f      	bne.n	800302c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800300c:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <HAL_TIM_PWM_MspInit+0x90>)
 800300e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003012:	4a13      	ldr	r2, [pc, #76]	@ (8003060 <HAL_TIM_PWM_MspInit+0x90>)
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800301c:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <HAL_TIM_PWM_MspInit+0x90>)
 800301e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	613b      	str	r3, [r7, #16]
 8003028:	693b      	ldr	r3, [r7, #16]
}
 800302a:	e013      	b.n	8003054 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0d      	ldr	r2, [pc, #52]	@ (8003068 <HAL_TIM_PWM_MspInit+0x98>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003036:	4b0a      	ldr	r3, [pc, #40]	@ (8003060 <HAL_TIM_PWM_MspInit+0x90>)
 8003038:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800303c:	4a08      	ldr	r2, [pc, #32]	@ (8003060 <HAL_TIM_PWM_MspInit+0x90>)
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003046:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <HAL_TIM_PWM_MspInit+0x90>)
 8003048:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	bf00      	nop
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	58024400 	.word	0x58024400
 8003064:	40000400 	.word	0x40000400
 8003068:	40000800 	.word	0x40000800

0800306c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0b      	ldr	r2, [pc, #44]	@ (80030a8 <HAL_TIM_Base_MspInit+0x3c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10e      	bne.n	800309c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <HAL_TIM_Base_MspInit+0x40>)
 8003080:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003084:	4a09      	ldr	r2, [pc, #36]	@ (80030ac <HAL_TIM_Base_MspInit+0x40>)
 8003086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800308a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800308e:	4b07      	ldr	r3, [pc, #28]	@ (80030ac <HAL_TIM_Base_MspInit+0x40>)
 8003090:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800309c:	bf00      	nop
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40001c00 	.word	0x40001c00
 80030ac:	58024400 	.word	0x58024400

080030b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	@ 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d0:	d13f      	bne.n	8003152 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	4b47      	ldr	r3, [pc, #284]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 80030d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030d8:	4a45      	ldr	r2, [pc, #276]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80030e2:	4b43      	ldr	r3, [pc, #268]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 80030e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f0:	4b3f      	ldr	r3, [pc, #252]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 80030f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80030f6:	4a3e      	ldr	r2, [pc, #248]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 80030f8:	f043 0302 	orr.w	r3, r3, #2
 80030fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003100:	4b3b      	ldr	r3, [pc, #236]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 8003102:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800310e:	f248 030c 	movw	r3, #32780	@ 0x800c
 8003112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311c:	2300      	movs	r3, #0
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003120:	2301      	movs	r3, #1
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	f107 031c 	add.w	r3, r7, #28
 8003128:	4619      	mov	r1, r3
 800312a:	4832      	ldr	r0, [pc, #200]	@ (80031f4 <HAL_TIM_MspPostInit+0x144>)
 800312c:	f006 f97a 	bl	8009424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003130:	2308      	movs	r3, #8
 8003132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	2300      	movs	r3, #0
 800313e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003140:	2301      	movs	r3, #1
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003144:	f107 031c 	add.w	r3, r7, #28
 8003148:	4619      	mov	r1, r3
 800314a:	482b      	ldr	r0, [pc, #172]	@ (80031f8 <HAL_TIM_MspPostInit+0x148>)
 800314c:	f006 f96a 	bl	8009424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003150:	e049      	b.n	80031e6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a29      	ldr	r2, [pc, #164]	@ (80031fc <HAL_TIM_MspPostInit+0x14c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d11f      	bne.n	800319c <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315c:	4b24      	ldr	r3, [pc, #144]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 800315e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003162:	4a23      	ldr	r2, [pc, #140]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800316c:	4b20      	ldr	r3, [pc, #128]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 800316e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800317a:	2330      	movs	r3, #48	@ 0x30
 800317c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800318a:	2302      	movs	r3, #2
 800318c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318e:	f107 031c 	add.w	r3, r7, #28
 8003192:	4619      	mov	r1, r3
 8003194:	4818      	ldr	r0, [pc, #96]	@ (80031f8 <HAL_TIM_MspPostInit+0x148>)
 8003196:	f006 f945 	bl	8009424 <HAL_GPIO_Init>
}
 800319a:	e024      	b.n	80031e6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a17      	ldr	r2, [pc, #92]	@ (8003200 <HAL_TIM_MspPostInit+0x150>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d11f      	bne.n	80031e6 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a6:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 80031a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031ac:	4a10      	ldr	r2, [pc, #64]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 80031ae:	f043 0302 	orr.w	r3, r3, #2
 80031b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80031b6:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <HAL_TIM_MspPostInit+0x140>)
 80031b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80031c4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80031c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80031d6:	2302      	movs	r3, #2
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031da:	f107 031c 	add.w	r3, r7, #28
 80031de:	4619      	mov	r1, r3
 80031e0:	4805      	ldr	r0, [pc, #20]	@ (80031f8 <HAL_TIM_MspPostInit+0x148>)
 80031e2:	f006 f91f 	bl	8009424 <HAL_GPIO_Init>
}
 80031e6:	bf00      	nop
 80031e8:	3730      	adds	r7, #48	@ 0x30
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	58024400 	.word	0x58024400
 80031f4:	58020000 	.word	0x58020000
 80031f8:	58020400 	.word	0x58020400
 80031fc:	40000400 	.word	0x40000400
 8003200:	40000800 	.word	0x40000800

08003204 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003208:	4b22      	ldr	r3, [pc, #136]	@ (8003294 <MX_UART4_Init+0x90>)
 800320a:	4a23      	ldr	r2, [pc, #140]	@ (8003298 <MX_UART4_Init+0x94>)
 800320c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800320e:	4b21      	ldr	r3, [pc, #132]	@ (8003294 <MX_UART4_Init+0x90>)
 8003210:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003214:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003216:	4b1f      	ldr	r3, [pc, #124]	@ (8003294 <MX_UART4_Init+0x90>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800321c:	4b1d      	ldr	r3, [pc, #116]	@ (8003294 <MX_UART4_Init+0x90>)
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003222:	4b1c      	ldr	r3, [pc, #112]	@ (8003294 <MX_UART4_Init+0x90>)
 8003224:	2200      	movs	r2, #0
 8003226:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003228:	4b1a      	ldr	r3, [pc, #104]	@ (8003294 <MX_UART4_Init+0x90>)
 800322a:	220c      	movs	r2, #12
 800322c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322e:	4b19      	ldr	r3, [pc, #100]	@ (8003294 <MX_UART4_Init+0x90>)
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003234:	4b17      	ldr	r3, [pc, #92]	@ (8003294 <MX_UART4_Init+0x90>)
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800323a:	4b16      	ldr	r3, [pc, #88]	@ (8003294 <MX_UART4_Init+0x90>)
 800323c:	2200      	movs	r2, #0
 800323e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003240:	4b14      	ldr	r3, [pc, #80]	@ (8003294 <MX_UART4_Init+0x90>)
 8003242:	2200      	movs	r2, #0
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003246:	4b13      	ldr	r3, [pc, #76]	@ (8003294 <MX_UART4_Init+0x90>)
 8003248:	2200      	movs	r2, #0
 800324a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800324c:	4811      	ldr	r0, [pc, #68]	@ (8003294 <MX_UART4_Init+0x90>)
 800324e:	f00b fc6f 	bl	800eb30 <HAL_UART_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8003258:	f7ff f9a2 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800325c:	2100      	movs	r1, #0
 800325e:	480d      	ldr	r0, [pc, #52]	@ (8003294 <MX_UART4_Init+0x90>)
 8003260:	f00e ff95 	bl	801218e <HAL_UARTEx_SetTxFifoThreshold>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800326a:	f7ff f999 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800326e:	2100      	movs	r1, #0
 8003270:	4808      	ldr	r0, [pc, #32]	@ (8003294 <MX_UART4_Init+0x90>)
 8003272:	f00e ffca 	bl	801220a <HAL_UARTEx_SetRxFifoThreshold>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800327c:	f7ff f990 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003280:	4804      	ldr	r0, [pc, #16]	@ (8003294 <MX_UART4_Init+0x90>)
 8003282:	f00e ff4b 	bl	801211c <HAL_UARTEx_DisableFifoMode>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800328c:	f7ff f988 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}
 8003294:	24001128 	.word	0x24001128
 8003298:	40004c00 	.word	0x40004c00

0800329c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032a0:	4b23      	ldr	r3, [pc, #140]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032a2:	4a24      	ldr	r2, [pc, #144]	@ (8003334 <MX_USART1_UART_Init+0x98>)
 80032a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80032a6:	4b22      	ldr	r3, [pc, #136]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032a8:	4a23      	ldr	r2, [pc, #140]	@ (8003338 <MX_USART1_UART_Init+0x9c>)
 80032aa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80032ac:	4b20      	ldr	r3, [pc, #128]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80032ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032c4:	220c      	movs	r2, #12
 80032c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032c8:	4b19      	ldr	r3, [pc, #100]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032ce:	4b18      	ldr	r3, [pc, #96]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032d4:	4b16      	ldr	r3, [pc, #88]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032da:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032dc:	2200      	movs	r2, #0
 80032de:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032e0:	4b13      	ldr	r3, [pc, #76]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032e6:	4812      	ldr	r0, [pc, #72]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032e8:	f00b fc22 	bl	800eb30 <HAL_UART_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80032f2:	f7ff f955 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032f6:	2100      	movs	r1, #0
 80032f8:	480d      	ldr	r0, [pc, #52]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 80032fa:	f00e ff48 	bl	801218e <HAL_UARTEx_SetTxFifoThreshold>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003304:	f7ff f94c 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003308:	2100      	movs	r1, #0
 800330a:	4809      	ldr	r0, [pc, #36]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 800330c:	f00e ff7d 	bl	801220a <HAL_UARTEx_SetRxFifoThreshold>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003316:	f7ff f943 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800331a:	4805      	ldr	r0, [pc, #20]	@ (8003330 <MX_USART1_UART_Init+0x94>)
 800331c:	f00e fefe 	bl	801211c <HAL_UARTEx_DisableFifoMode>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003326:	f7ff f93b 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	240011bc 	.word	0x240011bc
 8003334:	40011000 	.word	0x40011000
 8003338:	000186a0 	.word	0x000186a0

0800333c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003340:	4b22      	ldr	r3, [pc, #136]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 8003342:	4a23      	ldr	r2, [pc, #140]	@ (80033d0 <MX_USART3_UART_Init+0x94>)
 8003344:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003346:	4b21      	ldr	r3, [pc, #132]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 8003348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800334c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800334e:	4b1f      	ldr	r3, [pc, #124]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003354:	4b1d      	ldr	r3, [pc, #116]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800335a:	4b1c      	ldr	r3, [pc, #112]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 800335c:	2200      	movs	r2, #0
 800335e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003360:	4b1a      	ldr	r3, [pc, #104]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 8003362:	220c      	movs	r2, #12
 8003364:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003366:	4b19      	ldr	r3, [pc, #100]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 8003368:	2200      	movs	r2, #0
 800336a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800336c:	4b17      	ldr	r3, [pc, #92]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 800336e:	2200      	movs	r2, #0
 8003370:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003372:	4b16      	ldr	r3, [pc, #88]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 8003374:	2200      	movs	r2, #0
 8003376:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003378:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 800337a:	2200      	movs	r2, #0
 800337c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800337e:	4b13      	ldr	r3, [pc, #76]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 8003380:	2200      	movs	r2, #0
 8003382:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003384:	4811      	ldr	r0, [pc, #68]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 8003386:	f00b fbd3 	bl	800eb30 <HAL_UART_Init>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003390:	f7ff f906 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003394:	2100      	movs	r1, #0
 8003396:	480d      	ldr	r0, [pc, #52]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 8003398:	f00e fef9 	bl	801218e <HAL_UARTEx_SetTxFifoThreshold>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80033a2:	f7ff f8fd 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033a6:	2100      	movs	r1, #0
 80033a8:	4808      	ldr	r0, [pc, #32]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 80033aa:	f00e ff2e 	bl	801220a <HAL_UARTEx_SetRxFifoThreshold>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80033b4:	f7ff f8f4 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80033b8:	4804      	ldr	r0, [pc, #16]	@ (80033cc <MX_USART3_UART_Init+0x90>)
 80033ba:	f00e feaf 	bl	801211c <HAL_UARTEx_DisableFifoMode>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80033c4:	f7ff f8ec 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	24001250 	.word	0x24001250
 80033d0:	40004800 	.word	0x40004800

080033d4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80033d8:	4b22      	ldr	r3, [pc, #136]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 80033da:	4a23      	ldr	r2, [pc, #140]	@ (8003468 <MX_USART6_UART_Init+0x94>)
 80033dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80033de:	4b21      	ldr	r3, [pc, #132]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 80033e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80033e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80033e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80033ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80033f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80033f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 80033fa:	220c      	movs	r2, #12
 80033fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fe:	4b19      	ldr	r3, [pc, #100]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003404:	4b17      	ldr	r3, [pc, #92]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800340a:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 800340c:	2200      	movs	r2, #0
 800340e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003410:	4b14      	ldr	r3, [pc, #80]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 8003412:	2200      	movs	r2, #0
 8003414:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003416:	4b13      	ldr	r3, [pc, #76]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 8003418:	2200      	movs	r2, #0
 800341a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800341c:	4811      	ldr	r0, [pc, #68]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 800341e:	f00b fb87 	bl	800eb30 <HAL_UART_Init>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8003428:	f7ff f8ba 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800342c:	2100      	movs	r1, #0
 800342e:	480d      	ldr	r0, [pc, #52]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 8003430:	f00e fead 	bl	801218e <HAL_UARTEx_SetTxFifoThreshold>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800343a:	f7ff f8b1 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800343e:	2100      	movs	r1, #0
 8003440:	4808      	ldr	r0, [pc, #32]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 8003442:	f00e fee2 	bl	801220a <HAL_UARTEx_SetRxFifoThreshold>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800344c:	f7ff f8a8 	bl	80025a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003450:	4804      	ldr	r0, [pc, #16]	@ (8003464 <MX_USART6_UART_Init+0x90>)
 8003452:	f00e fe63 	bl	801211c <HAL_UARTEx_DisableFifoMode>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800345c:	f7ff f8a0 	bl	80025a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}
 8003464:	240012e4 	.word	0x240012e4
 8003468:	40011400 	.word	0x40011400

0800346c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0c0      	sub	sp, #256	@ 0x100
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003484:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003488:	22c0      	movs	r2, #192	@ 0xc0
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f013 fdf2 	bl	8017076 <memset>
  if(uartHandle->Instance==UART4)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a82      	ldr	r2, [pc, #520]	@ (80036a0 <HAL_UART_MspInit+0x234>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d17c      	bne.n	8003596 <HAL_UART_MspInit+0x12a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800349c:	f04f 0202 	mov.w	r2, #2
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034b2:	4618      	mov	r0, r3
 80034b4:	f007 faee 	bl	800aa94 <HAL_RCCEx_PeriphCLKConfig>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80034be:	f7ff f86f 	bl	80025a0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034c2:	4b78      	ldr	r3, [pc, #480]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80034c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80034c8:	4a76      	ldr	r2, [pc, #472]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80034ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034ce:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80034d2:	4b74      	ldr	r3, [pc, #464]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80034d4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80034d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e0:	4b70      	ldr	r3, [pc, #448]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80034e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80034e6:	4a6f      	ldr	r2, [pc, #444]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80034f0:	4b6c      	ldr	r3, [pc, #432]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80034f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	623b      	str	r3, [r7, #32]
 80034fc:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034fe:	2303      	movs	r3, #3
 8003500:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003504:	2302      	movs	r3, #2
 8003506:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003516:	2308      	movs	r3, #8
 8003518:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003520:	4619      	mov	r1, r3
 8003522:	4861      	ldr	r0, [pc, #388]	@ (80036a8 <HAL_UART_MspInit+0x23c>)
 8003524:	f005 ff7e 	bl	8009424 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003528:	4b60      	ldr	r3, [pc, #384]	@ (80036ac <HAL_UART_MspInit+0x240>)
 800352a:	4a61      	ldr	r2, [pc, #388]	@ (80036b0 <HAL_UART_MspInit+0x244>)
 800352c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800352e:	4b5f      	ldr	r3, [pc, #380]	@ (80036ac <HAL_UART_MspInit+0x240>)
 8003530:	223f      	movs	r2, #63	@ 0x3f
 8003532:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003534:	4b5d      	ldr	r3, [pc, #372]	@ (80036ac <HAL_UART_MspInit+0x240>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800353a:	4b5c      	ldr	r3, [pc, #368]	@ (80036ac <HAL_UART_MspInit+0x240>)
 800353c:	2200      	movs	r2, #0
 800353e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003540:	4b5a      	ldr	r3, [pc, #360]	@ (80036ac <HAL_UART_MspInit+0x240>)
 8003542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003546:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003548:	4b58      	ldr	r3, [pc, #352]	@ (80036ac <HAL_UART_MspInit+0x240>)
 800354a:	2200      	movs	r2, #0
 800354c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800354e:	4b57      	ldr	r3, [pc, #348]	@ (80036ac <HAL_UART_MspInit+0x240>)
 8003550:	2200      	movs	r2, #0
 8003552:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003554:	4b55      	ldr	r3, [pc, #340]	@ (80036ac <HAL_UART_MspInit+0x240>)
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800355a:	4b54      	ldr	r3, [pc, #336]	@ (80036ac <HAL_UART_MspInit+0x240>)
 800355c:	2200      	movs	r2, #0
 800355e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003560:	4b52      	ldr	r3, [pc, #328]	@ (80036ac <HAL_UART_MspInit+0x240>)
 8003562:	2200      	movs	r2, #0
 8003564:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003566:	4851      	ldr	r0, [pc, #324]	@ (80036ac <HAL_UART_MspInit+0x240>)
 8003568:	f002 fd0e 	bl	8005f88 <HAL_DMA_Init>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8003572:	f7ff f815 	bl	80025a0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4c      	ldr	r2, [pc, #304]	@ (80036ac <HAL_UART_MspInit+0x240>)
 800357a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800357e:	4a4b      	ldr	r2, [pc, #300]	@ (80036ac <HAL_UART_MspInit+0x240>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2105      	movs	r1, #5
 8003588:	2034      	movs	r0, #52	@ 0x34
 800358a:	f002 fc5d 	bl	8005e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800358e:	2034      	movs	r0, #52	@ 0x34
 8003590:	f002 fc74 	bl	8005e7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003594:	e16a      	b.n	800386c <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a46      	ldr	r2, [pc, #280]	@ (80036b4 <HAL_UART_MspInit+0x248>)
 800359c:	4293      	cmp	r3, r2
 800359e:	f040 808f 	bne.w	80036c0 <HAL_UART_MspInit+0x254>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035a2:	f04f 0201 	mov.w	r2, #1
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80035b8:	4618      	mov	r0, r3
 80035ba:	f007 fa6b 	bl	800aa94 <HAL_RCCEx_PeriphCLKConfig>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_UART_MspInit+0x15c>
      Error_Handler();
 80035c4:	f7fe ffec 	bl	80025a0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80035c8:	4b36      	ldr	r3, [pc, #216]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80035ca:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80035ce:	4a35      	ldr	r2, [pc, #212]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80035d0:	f043 0310 	orr.w	r3, r3, #16
 80035d4:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80035d8:	4b32      	ldr	r3, [pc, #200]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80035da:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e6:	4b2f      	ldr	r3, [pc, #188]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80035e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80035ec:	4a2d      	ldr	r2, [pc, #180]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80035f6:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <HAL_UART_MspInit+0x238>)
 80035f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 8003604:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003608:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360c:	2302      	movs	r3, #2
 800360e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800361e:	2307      	movs	r3, #7
 8003620:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003624:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003628:	4619      	mov	r1, r3
 800362a:	481f      	ldr	r0, [pc, #124]	@ (80036a8 <HAL_UART_MspInit+0x23c>)
 800362c:	f005 fefa 	bl	8009424 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8003630:	4b21      	ldr	r3, [pc, #132]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 8003632:	4a22      	ldr	r2, [pc, #136]	@ (80036bc <HAL_UART_MspInit+0x250>)
 8003634:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003636:	4b20      	ldr	r3, [pc, #128]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 8003638:	2229      	movs	r2, #41	@ 0x29
 800363a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800363c:	4b1e      	ldr	r3, [pc, #120]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 800363e:	2200      	movs	r2, #0
 8003640:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003642:	4b1d      	ldr	r3, [pc, #116]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 8003644:	2200      	movs	r2, #0
 8003646:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003648:	4b1b      	ldr	r3, [pc, #108]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 800364a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800364e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003650:	4b19      	ldr	r3, [pc, #100]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 8003652:	2200      	movs	r2, #0
 8003654:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003656:	4b18      	ldr	r3, [pc, #96]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 8003658:	2200      	movs	r2, #0
 800365a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800365c:	4b16      	ldr	r3, [pc, #88]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 800365e:	2200      	movs	r2, #0
 8003660:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003662:	4b15      	ldr	r3, [pc, #84]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 8003664:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003668:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800366a:	4b13      	ldr	r3, [pc, #76]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 800366c:	2200      	movs	r2, #0
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003670:	4811      	ldr	r0, [pc, #68]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 8003672:	f002 fc89 	bl	8005f88 <HAL_DMA_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_UART_MspInit+0x214>
      Error_Handler();
 800367c:	f7fe ff90 	bl	80025a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a0d      	ldr	r2, [pc, #52]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 8003684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003688:	4a0b      	ldr	r2, [pc, #44]	@ (80036b8 <HAL_UART_MspInit+0x24c>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800368e:	2200      	movs	r2, #0
 8003690:	2105      	movs	r1, #5
 8003692:	2025      	movs	r0, #37	@ 0x25
 8003694:	f002 fbd8 	bl	8005e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003698:	2025      	movs	r0, #37	@ 0x25
 800369a:	f002 fbef 	bl	8005e7c <HAL_NVIC_EnableIRQ>
}
 800369e:	e0e5      	b.n	800386c <HAL_UART_MspInit+0x400>
 80036a0:	40004c00 	.word	0x40004c00
 80036a4:	58024400 	.word	0x58024400
 80036a8:	58020000 	.word	0x58020000
 80036ac:	24001378 	.word	0x24001378
 80036b0:	40020040 	.word	0x40020040
 80036b4:	40011000 	.word	0x40011000
 80036b8:	240013f0 	.word	0x240013f0
 80036bc:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6c      	ldr	r2, [pc, #432]	@ (8003878 <HAL_UART_MspInit+0x40c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d17d      	bne.n	80037c6 <HAL_UART_MspInit+0x35a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80036ca:	f04f 0202 	mov.w	r2, #2
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036e0:	4618      	mov	r0, r3
 80036e2:	f007 f9d7 	bl	800aa94 <HAL_RCCEx_PeriphCLKConfig>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80036ec:	f7fe ff58 	bl	80025a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80036f0:	4b62      	ldr	r3, [pc, #392]	@ (800387c <HAL_UART_MspInit+0x410>)
 80036f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80036f6:	4a61      	ldr	r2, [pc, #388]	@ (800387c <HAL_UART_MspInit+0x410>)
 80036f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036fc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8003700:	4b5e      	ldr	r3, [pc, #376]	@ (800387c <HAL_UART_MspInit+0x410>)
 8003702:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8003706:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800370e:	4b5b      	ldr	r3, [pc, #364]	@ (800387c <HAL_UART_MspInit+0x410>)
 8003710:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003714:	4a59      	ldr	r2, [pc, #356]	@ (800387c <HAL_UART_MspInit+0x410>)
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800371e:	4b57      	ldr	r3, [pc, #348]	@ (800387c <HAL_UART_MspInit+0x410>)
 8003720:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800372c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003730:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003740:	2300      	movs	r3, #0
 8003742:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003746:	2307      	movs	r3, #7
 8003748:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800374c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003750:	4619      	mov	r1, r3
 8003752:	484b      	ldr	r0, [pc, #300]	@ (8003880 <HAL_UART_MspInit+0x414>)
 8003754:	f005 fe66 	bl	8009424 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003758:	4b4a      	ldr	r3, [pc, #296]	@ (8003884 <HAL_UART_MspInit+0x418>)
 800375a:	4a4b      	ldr	r2, [pc, #300]	@ (8003888 <HAL_UART_MspInit+0x41c>)
 800375c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800375e:	4b49      	ldr	r3, [pc, #292]	@ (8003884 <HAL_UART_MspInit+0x418>)
 8003760:	222d      	movs	r2, #45	@ 0x2d
 8003762:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003764:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_UART_MspInit+0x418>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800376a:	4b46      	ldr	r3, [pc, #280]	@ (8003884 <HAL_UART_MspInit+0x418>)
 800376c:	2200      	movs	r2, #0
 800376e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003770:	4b44      	ldr	r3, [pc, #272]	@ (8003884 <HAL_UART_MspInit+0x418>)
 8003772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003776:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003778:	4b42      	ldr	r3, [pc, #264]	@ (8003884 <HAL_UART_MspInit+0x418>)
 800377a:	2200      	movs	r2, #0
 800377c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800377e:	4b41      	ldr	r3, [pc, #260]	@ (8003884 <HAL_UART_MspInit+0x418>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003784:	4b3f      	ldr	r3, [pc, #252]	@ (8003884 <HAL_UART_MspInit+0x418>)
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800378a:	4b3e      	ldr	r3, [pc, #248]	@ (8003884 <HAL_UART_MspInit+0x418>)
 800378c:	2200      	movs	r2, #0
 800378e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003790:	4b3c      	ldr	r3, [pc, #240]	@ (8003884 <HAL_UART_MspInit+0x418>)
 8003792:	2200      	movs	r2, #0
 8003794:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003796:	483b      	ldr	r0, [pc, #236]	@ (8003884 <HAL_UART_MspInit+0x418>)
 8003798:	f002 fbf6 	bl	8005f88 <HAL_DMA_Init>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_UART_MspInit+0x33a>
      Error_Handler();
 80037a2:	f7fe fefd 	bl	80025a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a36      	ldr	r2, [pc, #216]	@ (8003884 <HAL_UART_MspInit+0x418>)
 80037aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80037ae:	4a35      	ldr	r2, [pc, #212]	@ (8003884 <HAL_UART_MspInit+0x418>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80037b4:	2200      	movs	r2, #0
 80037b6:	2105      	movs	r1, #5
 80037b8:	2027      	movs	r0, #39	@ 0x27
 80037ba:	f002 fb45 	bl	8005e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80037be:	2027      	movs	r0, #39	@ 0x27
 80037c0:	f002 fb5c 	bl	8005e7c <HAL_NVIC_EnableIRQ>
}
 80037c4:	e052      	b.n	800386c <HAL_UART_MspInit+0x400>
  else if(uartHandle->Instance==USART6)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a30      	ldr	r2, [pc, #192]	@ (800388c <HAL_UART_MspInit+0x420>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d14d      	bne.n	800386c <HAL_UART_MspInit+0x400>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80037d0:	f04f 0201 	mov.w	r2, #1
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80037dc:	2300      	movs	r3, #0
 80037de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037e6:	4618      	mov	r0, r3
 80037e8:	f007 f954 	bl	800aa94 <HAL_RCCEx_PeriphCLKConfig>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_UART_MspInit+0x38a>
      Error_Handler();
 80037f2:	f7fe fed5 	bl	80025a0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80037f6:	4b21      	ldr	r3, [pc, #132]	@ (800387c <HAL_UART_MspInit+0x410>)
 80037f8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80037fc:	4a1f      	ldr	r2, [pc, #124]	@ (800387c <HAL_UART_MspInit+0x410>)
 80037fe:	f043 0320 	orr.w	r3, r3, #32
 8003802:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8003806:	4b1d      	ldr	r3, [pc, #116]	@ (800387c <HAL_UART_MspInit+0x410>)
 8003808:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003814:	4b19      	ldr	r3, [pc, #100]	@ (800387c <HAL_UART_MspInit+0x410>)
 8003816:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800381a:	4a18      	ldr	r2, [pc, #96]	@ (800387c <HAL_UART_MspInit+0x410>)
 800381c:	f043 0304 	orr.w	r3, r3, #4
 8003820:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8003824:	4b15      	ldr	r3, [pc, #84]	@ (800387c <HAL_UART_MspInit+0x410>)
 8003826:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003832:	23c0      	movs	r3, #192	@ 0xc0
 8003834:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800384a:	2307      	movs	r3, #7
 800384c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003850:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003854:	4619      	mov	r1, r3
 8003856:	480a      	ldr	r0, [pc, #40]	@ (8003880 <HAL_UART_MspInit+0x414>)
 8003858:	f005 fde4 	bl	8009424 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800385c:	2200      	movs	r2, #0
 800385e:	2105      	movs	r1, #5
 8003860:	2047      	movs	r0, #71	@ 0x47
 8003862:	f002 faf1 	bl	8005e48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003866:	2047      	movs	r0, #71	@ 0x47
 8003868:	f002 fb08 	bl	8005e7c <HAL_NVIC_EnableIRQ>
}
 800386c:	bf00      	nop
 800386e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40004800 	.word	0x40004800
 800387c:	58024400 	.word	0x58024400
 8003880:	58020800 	.word	0x58020800
 8003884:	24001468 	.word	0x24001468
 8003888:	40020028 	.word	0x40020028
 800388c:	40011400 	.word	0x40011400

08003890 <Reset_UART>:
  /* USER CODE END USART6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_UART(UART_HandleTypeDef *huart) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

      // Clear any pending error flags
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	220f      	movs	r2, #15
 800389e:	621a      	str	r2, [r3, #32]

    // Abort ongoing UART transfer
    if (HAL_UART_Abort_IT(huart) != HAL_OK) {
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f00b fbe5 	bl	800f070 <HAL_UART_Abort_IT>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <Reset_UART+0x20>
        // Abort Error
        Error_Handler();
 80038ac:	f7fe fe78 	bl	80025a0 <Error_Handler>
    }
     if(huart == &huart3){
    	 MX_USART3_UART_Init();
     }
*/
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	460a      	mov	r2, r1
 80038c2:	71fb      	strb	r3, [r7, #7]
 80038c4:	4613      	mov	r3, r2
 80038c6:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 80038c8:	2200      	movs	r2, #0
 80038ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038ce:	480f      	ldr	r0, [pc, #60]	@ (800390c <BMP280_write+0x54>)
 80038d0:	f005 ff58 	bl	8009784 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80038de:	1df9      	adds	r1, r7, #7
 80038e0:	2364      	movs	r3, #100	@ 0x64
 80038e2:	2201      	movs	r2, #1
 80038e4:	480a      	ldr	r0, [pc, #40]	@ (8003910 <BMP280_write+0x58>)
 80038e6:	f008 ffd9 	bl	800c89c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80038ea:	1db9      	adds	r1, r7, #6
 80038ec:	2364      	movs	r3, #100	@ 0x64
 80038ee:	2201      	movs	r2, #1
 80038f0:	4807      	ldr	r0, [pc, #28]	@ (8003910 <BMP280_write+0x58>)
 80038f2:	f008 ffd3 	bl	800c89c <HAL_SPI_Transmit>

	BMP280_unselect();
 80038f6:	2201      	movs	r2, #1
 80038f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038fc:	4803      	ldr	r0, [pc, #12]	@ (800390c <BMP280_write+0x54>)
 80038fe:	f005 ff41 	bl	8009784 <HAL_GPIO_WritePin>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	58020400 	.word	0x58020400
 8003910:	24000f20 	.word	0x24000f20

08003914 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 800391e:	79fb      	ldrb	r3, [r7, #7]
 8003920:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003924:	b2db      	uxtb	r3, r3
 8003926:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8003928:	2200      	movs	r2, #0
 800392a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800392e:	480e      	ldr	r0, [pc, #56]	@ (8003968 <BMP280_read+0x54>)
 8003930:	f005 ff28 	bl	8009784 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8003934:	f107 010f 	add.w	r1, r7, #15
 8003938:	2364      	movs	r3, #100	@ 0x64
 800393a:	2201      	movs	r2, #1
 800393c:	480b      	ldr	r0, [pc, #44]	@ (800396c <BMP280_read+0x58>)
 800393e:	f008 ffad 	bl	800c89c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8003942:	f107 010f 	add.w	r1, r7, #15
 8003946:	2364      	movs	r3, #100	@ 0x64
 8003948:	2201      	movs	r2, #1
 800394a:	4808      	ldr	r0, [pc, #32]	@ (800396c <BMP280_read+0x58>)
 800394c:	f009 f994 	bl	800cc78 <HAL_SPI_Receive>
	BMP280_unselect();
 8003950:	2201      	movs	r2, #1
 8003952:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003956:	4804      	ldr	r0, [pc, #16]	@ (8003968 <BMP280_read+0x54>)
 8003958:	f005 ff14 	bl	8009784 <HAL_GPIO_WritePin>

	return Buffer;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	58020400 	.word	0x58020400
 800396c:	24000f20 	.word	0x24000f20

08003970 <BMP280_config>:

void BMP280_config(void){
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8003974:	2157      	movs	r1, #87	@ 0x57
 8003976:	20f4      	movs	r0, #244	@ 0xf4
 8003978:	f7ff ff9e 	bl	80038b8 <BMP280_write>
	BMP280_write(config, 0x10);
 800397c:	2110      	movs	r1, #16
 800397e:	20f5      	movs	r0, #245	@ 0xf5
 8003980:	f7ff ff9a 	bl	80038b8 <BMP280_write>
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 800398e:	2388      	movs	r3, #136	@ 0x88
 8003990:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	f107 0308 	add.w	r3, r7, #8
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
 80039a0:	609a      	str	r2, [r3, #8]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	611a      	str	r2, [r3, #16]
	BMP280_select();
 80039a6:	2200      	movs	r2, #0
 80039a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039ac:	4843      	ldr	r0, [pc, #268]	@ (8003abc <BMP280_calibrationData+0x134>)
 80039ae:	f005 fee9 	bl	8009784 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80039b2:	f107 011f 	add.w	r1, r7, #31
 80039b6:	2364      	movs	r3, #100	@ 0x64
 80039b8:	2201      	movs	r2, #1
 80039ba:	4841      	ldr	r0, [pc, #260]	@ (8003ac0 <BMP280_calibrationData+0x138>)
 80039bc:	f008 ff6e 	bl	800c89c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 80039c0:	1d39      	adds	r1, r7, #4
 80039c2:	2364      	movs	r3, #100	@ 0x64
 80039c4:	2218      	movs	r2, #24
 80039c6:	483e      	ldr	r0, [pc, #248]	@ (8003ac0 <BMP280_calibrationData+0x138>)
 80039c8:	f009 f956 	bl	800cc78 <HAL_SPI_Receive>
	BMP280_unselect();
 80039cc:	2201      	movs	r2, #1
 80039ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039d2:	483a      	ldr	r0, [pc, #232]	@ (8003abc <BMP280_calibrationData+0x134>)
 80039d4:	f005 fed6 	bl	8009784 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80039d8:	797b      	ldrb	r3, [r7, #5]
 80039da:	021b      	lsls	r3, r3, #8
 80039dc:	b21a      	sxth	r2, r3
 80039de:	793b      	ldrb	r3, [r7, #4]
 80039e0:	b21b      	sxth	r3, r3
 80039e2:	4313      	orrs	r3, r2
 80039e4:	b21b      	sxth	r3, r3
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	4b36      	ldr	r3, [pc, #216]	@ (8003ac4 <BMP280_calibrationData+0x13c>)
 80039ea:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	b21a      	sxth	r2, r3
 80039f2:	79bb      	ldrb	r3, [r7, #6]
 80039f4:	b21b      	sxth	r3, r3
 80039f6:	4313      	orrs	r3, r2
 80039f8:	b21a      	sxth	r2, r3
 80039fa:	4b33      	ldr	r3, [pc, #204]	@ (8003ac8 <BMP280_calibrationData+0x140>)
 80039fc:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80039fe:	7a7b      	ldrb	r3, [r7, #9]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	b21a      	sxth	r2, r3
 8003a04:	7a3b      	ldrb	r3, [r7, #8]
 8003a06:	b21b      	sxth	r3, r3
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	b21a      	sxth	r2, r3
 8003a0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003acc <BMP280_calibrationData+0x144>)
 8003a0e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8003a10:	7afb      	ldrb	r3, [r7, #11]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	b21a      	sxth	r2, r3
 8003a16:	7abb      	ldrb	r3, [r7, #10]
 8003a18:	b21b      	sxth	r3, r3
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	b21b      	sxth	r3, r3
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad0 <BMP280_calibrationData+0x148>)
 8003a22:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8003a24:	7b7b      	ldrb	r3, [r7, #13]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	b21a      	sxth	r2, r3
 8003a2a:	7b3b      	ldrb	r3, [r7, #12]
 8003a2c:	b21b      	sxth	r3, r3
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	b21a      	sxth	r2, r3
 8003a32:	4b28      	ldr	r3, [pc, #160]	@ (8003ad4 <BMP280_calibrationData+0x14c>)
 8003a34:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	b21a      	sxth	r2, r3
 8003a3c:	7bbb      	ldrb	r3, [r7, #14]
 8003a3e:	b21b      	sxth	r3, r3
 8003a40:	4313      	orrs	r3, r2
 8003a42:	b21a      	sxth	r2, r3
 8003a44:	4b24      	ldr	r3, [pc, #144]	@ (8003ad8 <BMP280_calibrationData+0x150>)
 8003a46:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8003a48:	7c7b      	ldrb	r3, [r7, #17]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	b21a      	sxth	r2, r3
 8003a4e:	7c3b      	ldrb	r3, [r7, #16]
 8003a50:	b21b      	sxth	r3, r3
 8003a52:	4313      	orrs	r3, r2
 8003a54:	b21a      	sxth	r2, r3
 8003a56:	4b21      	ldr	r3, [pc, #132]	@ (8003adc <BMP280_calibrationData+0x154>)
 8003a58:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	b21a      	sxth	r2, r3
 8003a60:	7cbb      	ldrb	r3, [r7, #18]
 8003a62:	b21b      	sxth	r3, r3
 8003a64:	4313      	orrs	r3, r2
 8003a66:	b21a      	sxth	r2, r3
 8003a68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae0 <BMP280_calibrationData+0x158>)
 8003a6a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8003a6c:	7d7b      	ldrb	r3, [r7, #21]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	b21a      	sxth	r2, r3
 8003a72:	7d3b      	ldrb	r3, [r7, #20]
 8003a74:	b21b      	sxth	r3, r3
 8003a76:	4313      	orrs	r3, r2
 8003a78:	b21a      	sxth	r2, r3
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae4 <BMP280_calibrationData+0x15c>)
 8003a7c:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	b21a      	sxth	r2, r3
 8003a84:	7dbb      	ldrb	r3, [r7, #22]
 8003a86:	b21b      	sxth	r3, r3
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	b21a      	sxth	r2, r3
 8003a8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ae8 <BMP280_calibrationData+0x160>)
 8003a8e:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8003a90:	7e7b      	ldrb	r3, [r7, #25]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	b21a      	sxth	r2, r3
 8003a96:	7e3b      	ldrb	r3, [r7, #24]
 8003a98:	b21b      	sxth	r3, r3
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	b21a      	sxth	r2, r3
 8003a9e:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <BMP280_calibrationData+0x164>)
 8003aa0:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8003aa2:	7efb      	ldrb	r3, [r7, #27]
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	b21a      	sxth	r2, r3
 8003aa8:	7ebb      	ldrb	r3, [r7, #26]
 8003aaa:	b21b      	sxth	r3, r3
 8003aac:	4313      	orrs	r3, r2
 8003aae:	b21a      	sxth	r2, r3
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <BMP280_calibrationData+0x168>)
 8003ab2:	801a      	strh	r2, [r3, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	3720      	adds	r7, #32
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	58020400 	.word	0x58020400
 8003ac0:	24000f20 	.word	0x24000f20
 8003ac4:	240014f4 	.word	0x240014f4
 8003ac8:	240014f8 	.word	0x240014f8
 8003acc:	240014fa 	.word	0x240014fa
 8003ad0:	240014f6 	.word	0x240014f6
 8003ad4:	240014fc 	.word	0x240014fc
 8003ad8:	240014fe 	.word	0x240014fe
 8003adc:	24001500 	.word	0x24001500
 8003ae0:	24001502 	.word	0x24001502
 8003ae4:	24001504 	.word	0x24001504
 8003ae8:	24001506 	.word	0x24001506
 8003aec:	24001508 	.word	0x24001508
 8003af0:	2400150a 	.word	0x2400150a

08003af4 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8003afa:	23f7      	movs	r3, #247	@ 0xf7
 8003afc:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8003afe:	2300      	movs	r3, #0
 8003b00:	603b      	str	r3, [r7, #0]
 8003b02:	2300      	movs	r3, #0
 8003b04:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8003b06:	2200      	movs	r2, #0
 8003b08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b0c:	4817      	ldr	r0, [pc, #92]	@ (8003b6c <BMP280_readRawValues+0x78>)
 8003b0e:	f005 fe39 	bl	8009784 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8003b12:	1df9      	adds	r1, r7, #7
 8003b14:	2364      	movs	r3, #100	@ 0x64
 8003b16:	2201      	movs	r2, #1
 8003b18:	4815      	ldr	r0, [pc, #84]	@ (8003b70 <BMP280_readRawValues+0x7c>)
 8003b1a:	f008 febf 	bl	800c89c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8003b1e:	4639      	mov	r1, r7
 8003b20:	2364      	movs	r3, #100	@ 0x64
 8003b22:	2206      	movs	r2, #6
 8003b24:	4812      	ldr	r0, [pc, #72]	@ (8003b70 <BMP280_readRawValues+0x7c>)
 8003b26:	f009 f8a7 	bl	800cc78 <HAL_SPI_Receive>
	BMP280_unselect();
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b30:	480e      	ldr	r0, [pc, #56]	@ (8003b6c <BMP280_readRawValues+0x78>)
 8003b32:	f005 fe27 	bl	8009784 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8003b36:	783b      	ldrb	r3, [r7, #0]
 8003b38:	031a      	lsls	r2, r3, #12
 8003b3a:	787b      	ldrb	r3, [r7, #1]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	78ba      	ldrb	r2, [r7, #2]
 8003b42:	0912      	lsrs	r2, r2, #4
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	4313      	orrs	r3, r2
 8003b48:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <BMP280_readRawValues+0x80>)
 8003b4a:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	031a      	lsls	r2, r3, #12
 8003b50:	793b      	ldrb	r3, [r7, #4]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	4313      	orrs	r3, r2
 8003b56:	797a      	ldrb	r2, [r7, #5]
 8003b58:	0912      	lsrs	r2, r2, #4
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	4a06      	ldr	r2, [pc, #24]	@ (8003b78 <BMP280_readRawValues+0x84>)
 8003b60:	6013      	str	r3, [r2, #0]
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	58020400 	.word	0x58020400
 8003b70:	24000f20 	.word	0x24000f20
 8003b74:	24001510 	.word	0x24001510
 8003b78:	2400150c 	.word	0x2400150c

08003b7c <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8003b84:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf0 <BMP280_measureT+0x74>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	10da      	asrs	r2, r3, #3
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf4 <BMP280_measureT+0x78>)
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	4a19      	ldr	r2, [pc, #100]	@ (8003bf8 <BMP280_measureT+0x7c>)
 8003b94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	12db      	asrs	r3, r3, #11
 8003b9e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	111b      	asrs	r3, r3, #4
 8003ba4:	4a13      	ldr	r2, [pc, #76]	@ (8003bf4 <BMP280_measureT+0x78>)
 8003ba6:	8812      	ldrh	r2, [r2, #0]
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	1112      	asrs	r2, r2, #4
 8003bae:	4911      	ldr	r1, [pc, #68]	@ (8003bf4 <BMP280_measureT+0x78>)
 8003bb0:	8809      	ldrh	r1, [r1, #0]
 8003bb2:	1a52      	subs	r2, r2, r1
 8003bb4:	fb02 f303 	mul.w	r3, r2, r3
 8003bb8:	131b      	asrs	r3, r3, #12
 8003bba:	4a10      	ldr	r2, [pc, #64]	@ (8003bfc <BMP280_measureT+0x80>)
 8003bbc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
 8003bc4:	139b      	asrs	r3, r3, #14
 8003bc6:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	4a0c      	ldr	r2, [pc, #48]	@ (8003c00 <BMP280_measureT+0x84>)
 8003bd0:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <BMP280_measureT+0x84>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	3380      	adds	r3, #128	@ 0x80
 8003bde:	121b      	asrs	r3, r3, #8
 8003be0:	60fb      	str	r3, [r7, #12]
	return T;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	2400150c 	.word	0x2400150c
 8003bf4:	240014f4 	.word	0x240014f4
 8003bf8:	240014f8 	.word	0x240014f8
 8003bfc:	240014fa 	.word	0x240014fa
 8003c00:	24001514 	.word	0x24001514

08003c04 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8003c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c08:	b0ca      	sub	sp, #296	@ 0x128
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8003c10:	4baf      	ldr	r3, [pc, #700]	@ (8003ed0 <BMP280_measureP+0x2cc>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	17da      	asrs	r2, r3, #31
 8003c16:	461c      	mov	r4, r3
 8003c18:	4615      	mov	r5, r2
 8003c1a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8003c1e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8003c22:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8003c26:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003c2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c2e:	fb03 f102 	mul.w	r1, r3, r2
 8003c32:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003c36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	18ca      	adds	r2, r1, r3
 8003c40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c44:	fba3 8903 	umull	r8, r9, r3, r3
 8003c48:	eb02 0309 	add.w	r3, r2, r9
 8003c4c:	4699      	mov	r9, r3
 8003c4e:	4ba1      	ldr	r3, [pc, #644]	@ (8003ed4 <BMP280_measureP+0x2d0>)
 8003c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c54:	b21b      	sxth	r3, r3
 8003c56:	17da      	asrs	r2, r3, #31
 8003c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c60:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8003c64:	4603      	mov	r3, r0
 8003c66:	fb03 f209 	mul.w	r2, r3, r9
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	fb08 f303 	mul.w	r3, r8, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	4602      	mov	r2, r0
 8003c74:	fba8 1202 	umull	r1, r2, r8, r2
 8003c78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c7c:	460a      	mov	r2, r1
 8003c7e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8003c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c86:	4413      	add	r3, r2
 8003c88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c8c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8003c90:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8003c94:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8003c98:	4b8f      	ldr	r3, [pc, #572]	@ (8003ed8 <BMP280_measureP+0x2d4>)
 8003c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c9e:	b21b      	sxth	r3, r3
 8003ca0:	17da      	asrs	r2, r3, #31
 8003ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ca6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003caa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cae:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003cb2:	462a      	mov	r2, r5
 8003cb4:	fb02 f203 	mul.w	r2, r2, r3
 8003cb8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	441a      	add	r2, r3
 8003cc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cc8:	4621      	mov	r1, r4
 8003cca:	fba3 1301 	umull	r1, r3, r3, r1
 8003cce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cdc:	18d3      	adds	r3, r2, r3
 8003cde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ce2:	f04f 0000 	mov.w	r0, #0
 8003ce6:	f04f 0100 	mov.w	r1, #0
 8003cea:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8003cee:	462b      	mov	r3, r5
 8003cf0:	0459      	lsls	r1, r3, #17
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	0458      	lsls	r0, r3, #17
 8003cfc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003d00:	1814      	adds	r4, r2, r0
 8003d02:	643c      	str	r4, [r7, #64]	@ 0x40
 8003d04:	414b      	adcs	r3, r1
 8003d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d08:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003d0c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8003d10:	4b72      	ldr	r3, [pc, #456]	@ (8003edc <BMP280_measureP+0x2d8>)
 8003d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d16:	b21b      	sxth	r3, r3
 8003d18:	17da      	asrs	r2, r3, #31
 8003d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d1e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d22:	f04f 0000 	mov.w	r0, #0
 8003d26:	f04f 0100 	mov.w	r1, #0
 8003d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d2e:	00d9      	lsls	r1, r3, #3
 8003d30:	2000      	movs	r0, #0
 8003d32:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003d36:	1814      	adds	r4, r2, r0
 8003d38:	63bc      	str	r4, [r7, #56]	@ 0x38
 8003d3a:	414b      	adcs	r3, r1
 8003d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d3e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8003d42:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8003d46:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003d4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d4e:	fb03 f102 	mul.w	r1, r3, r2
 8003d52:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8003d56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	18ca      	adds	r2, r1, r3
 8003d60:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d64:	fba3 1303 	umull	r1, r3, r3, r3
 8003d68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d76:	18d3      	adds	r3, r2, r3
 8003d78:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d7c:	4b58      	ldr	r3, [pc, #352]	@ (8003ee0 <BMP280_measureP+0x2dc>)
 8003d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d82:	b21b      	sxth	r3, r3
 8003d84:	17da      	asrs	r2, r3, #31
 8003d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d8e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8003d92:	462b      	mov	r3, r5
 8003d94:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d98:	4642      	mov	r2, r8
 8003d9a:	fb02 f203 	mul.w	r2, r2, r3
 8003d9e:	464b      	mov	r3, r9
 8003da0:	4621      	mov	r1, r4
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	4413      	add	r3, r2
 8003da8:	4622      	mov	r2, r4
 8003daa:	4641      	mov	r1, r8
 8003dac:	fba2 1201 	umull	r1, r2, r2, r1
 8003db0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003db4:	460a      	mov	r2, r1
 8003db6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8003dba:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	f04f 0000 	mov.w	r0, #0
 8003dc8:	f04f 0100 	mov.w	r1, #0
 8003dcc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	0a18      	lsrs	r0, r3, #8
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8003dda:	462b      	mov	r3, r5
 8003ddc:	1219      	asrs	r1, r3, #8
 8003dde:	4b41      	ldr	r3, [pc, #260]	@ (8003ee4 <BMP280_measureP+0x2e0>)
 8003de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003de4:	b21b      	sxth	r3, r3
 8003de6:	17da      	asrs	r2, r3, #31
 8003de8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003df0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003df4:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8003df8:	464a      	mov	r2, r9
 8003dfa:	fb02 f203 	mul.w	r2, r2, r3
 8003dfe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003e02:	4644      	mov	r4, r8
 8003e04:	fb04 f303 	mul.w	r3, r4, r3
 8003e08:	441a      	add	r2, r3
 8003e0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e0e:	4644      	mov	r4, r8
 8003e10:	fba3 4304 	umull	r4, r3, r3, r4
 8003e14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e18:	4623      	mov	r3, r4
 8003e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003e22:	18d3      	adds	r3, r2, r3
 8003e24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8003e34:	464c      	mov	r4, r9
 8003e36:	0323      	lsls	r3, r4, #12
 8003e38:	4644      	mov	r4, r8
 8003e3a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8003e3e:	4644      	mov	r4, r8
 8003e40:	0322      	lsls	r2, r4, #12
 8003e42:	1884      	adds	r4, r0, r2
 8003e44:	633c      	str	r4, [r7, #48]	@ 0x30
 8003e46:	eb41 0303 	adc.w	r3, r1, r3
 8003e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e4c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8003e50:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8003e54:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003e58:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8003e5c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8003e60:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8003e64:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <BMP280_measureP+0x2e4>)
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e74:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e78:	462b      	mov	r3, r5
 8003e7a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e7e:	4642      	mov	r2, r8
 8003e80:	fb02 f203 	mul.w	r2, r2, r3
 8003e84:	464b      	mov	r3, r9
 8003e86:	4621      	mov	r1, r4
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	4622      	mov	r2, r4
 8003e90:	4641      	mov	r1, r8
 8003e92:	fba2 1201 	umull	r1, r2, r2, r1
 8003e96:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8003e9a:	460a      	mov	r2, r1
 8003e9c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003ea0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	104a      	asrs	r2, r1, #1
 8003eba:	4629      	mov	r1, r5
 8003ebc:	17cb      	asrs	r3, r1, #31
 8003ebe:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8003ec2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	d110      	bne.n	8003eec <BMP280_measureP+0x2e8>
	{
	return 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e154      	b.n	8004178 <BMP280_measureP+0x574>
 8003ece:	bf00      	nop
 8003ed0:	24001514 	.word	0x24001514
 8003ed4:	24001504 	.word	0x24001504
 8003ed8:	24001502 	.word	0x24001502
 8003edc:	24001500 	.word	0x24001500
 8003ee0:	240014fe 	.word	0x240014fe
 8003ee4:	240014fc 	.word	0x240014fc
 8003ee8:	240014f6 	.word	0x240014f6
	}
	p = 1048576-adc_P;
 8003eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ef0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8003ef4:	17da      	asrs	r2, r3, #31
 8003ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003efa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8003efe:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8003f02:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f06:	105b      	asrs	r3, r3, #1
 8003f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003f10:	07db      	lsls	r3, r3, #31
 8003f12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f16:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003f1a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8003f1e:	4621      	mov	r1, r4
 8003f20:	1a89      	subs	r1, r1, r2
 8003f22:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003f24:	4629      	mov	r1, r5
 8003f26:	eb61 0303 	sbc.w	r3, r1, r3
 8003f2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f2c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003f30:	4622      	mov	r2, r4
 8003f32:	462b      	mov	r3, r5
 8003f34:	1891      	adds	r1, r2, r2
 8003f36:	6239      	str	r1, [r7, #32]
 8003f38:	415b      	adcs	r3, r3
 8003f3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f40:	4621      	mov	r1, r4
 8003f42:	1851      	adds	r1, r2, r1
 8003f44:	61b9      	str	r1, [r7, #24]
 8003f46:	4629      	mov	r1, r5
 8003f48:	414b      	adcs	r3, r1
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003f58:	4649      	mov	r1, r9
 8003f5a:	018b      	lsls	r3, r1, #6
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f62:	4641      	mov	r1, r8
 8003f64:	018a      	lsls	r2, r1, #6
 8003f66:	4641      	mov	r1, r8
 8003f68:	1889      	adds	r1, r1, r2
 8003f6a:	6139      	str	r1, [r7, #16]
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	eb43 0101 	adc.w	r1, r3, r1
 8003f72:	6179      	str	r1, [r7, #20]
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003f80:	4649      	mov	r1, r9
 8003f82:	008b      	lsls	r3, r1, #2
 8003f84:	4641      	mov	r1, r8
 8003f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f8a:	4641      	mov	r1, r8
 8003f8c:	008a      	lsls	r2, r1, #2
 8003f8e:	4610      	mov	r0, r2
 8003f90:	4619      	mov	r1, r3
 8003f92:	4603      	mov	r3, r0
 8003f94:	4622      	mov	r2, r4
 8003f96:	189b      	adds	r3, r3, r2
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	462a      	mov	r2, r5
 8003f9e:	eb42 0303 	adc.w	r3, r2, r3
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	008b      	lsls	r3, r1, #2
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fba:	4641      	mov	r1, r8
 8003fbc:	008a      	lsls	r2, r1, #2
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fca:	462b      	mov	r3, r5
 8003fcc:	460a      	mov	r2, r1
 8003fce:	eb42 0303 	adc.w	r3, r2, r3
 8003fd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fd4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003fd8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003fdc:	f7fc fba4 	bl	8000728 <__aeabi_ldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8003fe8:	4b66      	ldr	r3, [pc, #408]	@ (8004184 <BMP280_measureP+0x580>)
 8003fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fee:	b21b      	sxth	r3, r3
 8003ff0:	17da      	asrs	r2, r3, #31
 8003ff2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ff4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ff6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003ffa:	f04f 0000 	mov.w	r0, #0
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	0b50      	lsrs	r0, r2, #13
 8004004:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004008:	1359      	asrs	r1, r3, #13
 800400a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800400e:	462b      	mov	r3, r5
 8004010:	fb00 f203 	mul.w	r2, r0, r3
 8004014:	4623      	mov	r3, r4
 8004016:	fb03 f301 	mul.w	r3, r3, r1
 800401a:	4413      	add	r3, r2
 800401c:	4622      	mov	r2, r4
 800401e:	fba2 1200 	umull	r1, r2, r2, r0
 8004022:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004026:	460a      	mov	r2, r1
 8004028:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800402c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004030:	4413      	add	r3, r2
 8004032:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004036:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800403a:	f04f 0000 	mov.w	r0, #0
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	0b50      	lsrs	r0, r2, #13
 8004044:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8004048:	1359      	asrs	r1, r3, #13
 800404a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800404e:	462b      	mov	r3, r5
 8004050:	fb00 f203 	mul.w	r2, r0, r3
 8004054:	4623      	mov	r3, r4
 8004056:	fb03 f301 	mul.w	r3, r3, r1
 800405a:	4413      	add	r3, r2
 800405c:	4622      	mov	r2, r4
 800405e:	fba2 1200 	umull	r1, r2, r2, r0
 8004062:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004066:	460a      	mov	r2, r1
 8004068:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800406c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8004070:	4413      	add	r3, r2
 8004072:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8004082:	4621      	mov	r1, r4
 8004084:	0e4a      	lsrs	r2, r1, #25
 8004086:	4629      	mov	r1, r5
 8004088:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800408c:	4629      	mov	r1, r5
 800408e:	164b      	asrs	r3, r1, #25
 8004090:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8004094:	4b3c      	ldr	r3, [pc, #240]	@ (8004188 <BMP280_measureP+0x584>)
 8004096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800409a:	b21b      	sxth	r3, r3
 800409c:	17da      	asrs	r2, r3, #31
 800409e:	663b      	str	r3, [r7, #96]	@ 0x60
 80040a0:	667a      	str	r2, [r7, #100]	@ 0x64
 80040a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80040a6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80040aa:	462a      	mov	r2, r5
 80040ac:	fb02 f203 	mul.w	r2, r2, r3
 80040b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b4:	4621      	mov	r1, r4
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80040c0:	4621      	mov	r1, r4
 80040c2:	fba2 1201 	umull	r1, r2, r2, r1
 80040c6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80040ca:	460a      	mov	r2, r1
 80040cc:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80040d0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80040d4:	4413      	add	r3, r2
 80040d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80040e6:	4621      	mov	r1, r4
 80040e8:	0cca      	lsrs	r2, r1, #19
 80040ea:	4629      	mov	r1, r5
 80040ec:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80040f0:	4629      	mov	r1, r5
 80040f2:	14cb      	asrs	r3, r1, #19
 80040f4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 80040f8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80040fc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8004100:	1884      	adds	r4, r0, r2
 8004102:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004104:	eb41 0303 	adc.w	r3, r1, r3
 8004108:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800410a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800410e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8004112:	4621      	mov	r1, r4
 8004114:	1889      	adds	r1, r1, r2
 8004116:	6539      	str	r1, [r7, #80]	@ 0x50
 8004118:	4629      	mov	r1, r5
 800411a:	eb43 0101 	adc.w	r1, r3, r1
 800411e:	6579      	str	r1, [r7, #84]	@ 0x54
 8004120:	f04f 0000 	mov.w	r0, #0
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800412c:	4623      	mov	r3, r4
 800412e:	0a18      	lsrs	r0, r3, #8
 8004130:	462b      	mov	r3, r5
 8004132:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8004136:	462b      	mov	r3, r5
 8004138:	1219      	asrs	r1, r3, #8
 800413a:	4b14      	ldr	r3, [pc, #80]	@ (800418c <BMP280_measureP+0x588>)
 800413c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004140:	b21b      	sxth	r3, r3
 8004142:	17da      	asrs	r2, r3, #31
 8004144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004146:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8004154:	464c      	mov	r4, r9
 8004156:	0123      	lsls	r3, r4, #4
 8004158:	4644      	mov	r4, r8
 800415a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800415e:	4644      	mov	r4, r8
 8004160:	0122      	lsls	r2, r4, #4
 8004162:	1884      	adds	r4, r0, r2
 8004164:	603c      	str	r4, [r7, #0]
 8004166:	eb41 0303 	adc.w	r3, r1, r3
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004170:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8004174:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8004178:	4618      	mov	r0, r3
 800417a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800417e:	46bd      	mov	sp, r7
 8004180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004184:	2400150a 	.word	0x2400150a
 8004188:	24001508 	.word	0x24001508
 800418c:	24001506 	.word	0x24001506

08004190 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <BMP280_measureH+0x14>
 80041a0:	2300      	movs	r3, #0
 80041a2:	e03d      	b.n	8004220 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80041ae:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8004228 <BMP280_measureH+0x98>
 80041b2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80041b6:	eeb0 0b46 	vmov.f64	d0, d6
 80041ba:	f014 fe49 	bl	8018e50 <log>
 80041be:	eeb0 7b40 	vmov.f64	d7, d0
 80041c2:	eeb1 7b47 	vneg.f64	d7, d7
 80041c6:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 80041ca:	ed97 7b06 	vldr	d7, [r7, #24]
 80041ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80041d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d6:	d101      	bne.n	80041dc <BMP280_measureH+0x4c>
 80041d8:	2300      	movs	r3, #0
 80041da:	e021      	b.n	8004220 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80041e6:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004230 <BMP280_measureH+0xa0>
 80041ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80041ee:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8004238 <BMP280_measureH+0xa8>
 80041f2:	ee37 6b06 	vadd.f64	d6, d7, d6
 80041f6:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8004240 <BMP280_measureH+0xb0>
 80041fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80041fe:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8004202:	ed97 5b06 	vldr	d5, [r7, #24]
 8004206:	ed97 6b04 	vldr	d6, [r7, #16]
 800420a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800420e:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8004212:	ed97 7b02 	vldr	d7, [r7, #8]
 8004216:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800421a:	ee17 3a90 	vmov	r3, s15
 800421e:	b29b      	uxth	r3, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	00000000 	.word	0x00000000
 800422c:	40f8bcd0 	.word	0x40f8bcd0
 8004230:	00000000 	.word	0x00000000
 8004234:	40590000 	.word	0x40590000
 8004238:	66666666 	.word	0x66666666
 800423c:	40711266 	.word	0x40711266
 8004240:	ca402a92 	.word	0xca402a92
 8004244:	3fa17e3e 	.word	0x3fa17e3e

08004248 <BMP280_init>:

void BMP280_init(void){
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
	BMP280_unselect();
 800424c:	2201      	movs	r2, #1
 800424e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004252:	480d      	ldr	r0, [pc, #52]	@ (8004288 <BMP280_init+0x40>)
 8004254:	f005 fa96 	bl	8009784 <HAL_GPIO_WritePin>
	BMP280_config();
 8004258:	f7ff fb8a 	bl	8003970 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 800425c:	2089      	movs	r0, #137	@ 0x89
 800425e:	f7ff fb59 	bl	8003914 <BMP280_read>
 8004262:	4603      	mov	r3, r0
 8004264:	461a      	mov	r2, r3
 8004266:	4b09      	ldr	r3, [pc, #36]	@ (800428c <BMP280_init+0x44>)
 8004268:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 800426a:	f7ff fb8d 	bl	8003988 <BMP280_calibrationData>
	BMP280_readRawValues();
 800426e:	f7ff fc41 	bl	8003af4 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8004272:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <BMP280_init+0x48>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff fc80 	bl	8003b7c <BMP280_measureT>
 800427c:	4603      	mov	r3, r0
 800427e:	4a03      	ldr	r2, [pc, #12]	@ (800428c <BMP280_init+0x44>)
 8004280:	6093      	str	r3, [r2, #8]
}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	58020400 	.word	0x58020400
 800428c:	240014e0 	.word	0x240014e0
 8004290:	2400150c 	.word	0x2400150c

08004294 <BMP280_calculate>:

void BMP280_calculate(void){
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8004298:	2089      	movs	r0, #137	@ 0x89
 800429a:	f7ff fb3b 	bl	8003914 <BMP280_read>
 800429e:	4603      	mov	r3, r0
 80042a0:	461a      	mov	r2, r3
 80042a2:	4b16      	ldr	r3, [pc, #88]	@ (80042fc <BMP280_calculate+0x68>)
 80042a4:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 80042a6:	f7ff fc25 	bl	8003af4 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 80042aa:	4b15      	ldr	r3, [pc, #84]	@ (8004300 <BMP280_calculate+0x6c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fc64 	bl	8003b7c <BMP280_measureT>
 80042b4:	4603      	mov	r3, r0
 80042b6:	4a11      	ldr	r2, [pc, #68]	@ (80042fc <BMP280_calculate+0x68>)
 80042b8:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 80042ba:	4b12      	ldr	r3, [pc, #72]	@ (8004304 <BMP280_calculate+0x70>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fca0 	bl	8003c04 <BMP280_measureP>
 80042c4:	4603      	mov	r3, r0
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	4a0c      	ldr	r2, [pc, #48]	@ (80042fc <BMP280_calculate+0x68>)
 80042ca:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 80042cc:	4b0b      	ldr	r3, [pc, #44]	@ (80042fc <BMP280_calculate+0x68>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a0a      	ldr	r2, [pc, #40]	@ (80042fc <BMP280_calculate+0x68>)
 80042d2:	6892      	ldr	r2, [r2, #8]
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff ff5a 	bl	8004190 <BMP280_measureH>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <BMP280_calculate+0x68>)
 80042e2:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80042e4:	4b05      	ldr	r3, [pc, #20]	@ (80042fc <BMP280_calculate+0x68>)
 80042e6:	8a1a      	ldrh	r2, [r3, #16]
 80042e8:	4b04      	ldr	r3, [pc, #16]	@ (80042fc <BMP280_calculate+0x68>)
 80042ea:	8a5b      	ldrh	r3, [r3, #18]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d903      	bls.n	80042f8 <BMP280_calculate+0x64>
 80042f0:	4b02      	ldr	r3, [pc, #8]	@ (80042fc <BMP280_calculate+0x68>)
 80042f2:	8a1a      	ldrh	r2, [r3, #16]
 80042f4:	4b01      	ldr	r3, [pc, #4]	@ (80042fc <BMP280_calculate+0x68>)
 80042f6:	825a      	strh	r2, [r3, #18]
}
 80042f8:	bf00      	nop
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	240014e0 	.word	0x240014e0
 8004300:	2400150c 	.word	0x2400150c
 8004304:	24001510 	.word	0x24001510

08004308 <bno055_delay>:

BNO_CurrentState_e BNO_CurrentState = Init;

IMU_t IMU;

void bno055_delay(uint8_t time) {
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
	BNO_DelayCounter += time;
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <bno055_delay+0x24>)
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	4413      	add	r3, r2
 800431a:	b2da      	uxtb	r2, r3
 800431c:	4b03      	ldr	r3, [pc, #12]	@ (800432c <bno055_delay+0x24>)
 800431e:	701a      	strb	r2, [r3, #0]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	2400161b 	.word	0x2400161b

08004330 <BNO_Read>:

HAL_StatusTypeDef BNO_Read(uint8_t Address,uint8_t Size){
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	4603      	mov	r3, r0
 8004338:	460a      	mov	r2, r1
 800433a:	71fb      	strb	r3, [r7, #7]
 800433c:	4613      	mov	r3, r2
 800433e:	71bb      	strb	r3, [r7, #6]
	uint8_t ReadCommand[4] = {0xAA, 0x01, Address, Size};
 8004340:	23aa      	movs	r3, #170	@ 0xaa
 8004342:	723b      	strb	r3, [r7, #8]
 8004344:	2301      	movs	r3, #1
 8004346:	727b      	strb	r3, [r7, #9]
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	72bb      	strb	r3, [r7, #10]
 800434c:	79bb      	ldrb	r3, [r7, #6]
 800434e:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef uartError;

	BNO_RxBuffer[0] = Address;
 8004350:	4a08      	ldr	r2, [pc, #32]	@ (8004374 <BNO_Read+0x44>)
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	7013      	strb	r3, [r2, #0]

	uartError = HAL_UART_Transmit(&huart3, ReadCommand, 4,100);
 8004356:	f107 0108 	add.w	r1, r7, #8
 800435a:	2364      	movs	r3, #100	@ 0x64
 800435c:	2204      	movs	r2, #4
 800435e:	4806      	ldr	r0, [pc, #24]	@ (8004378 <BNO_Read+0x48>)
 8004360:	f00a fc36 	bl	800ebd0 <HAL_UART_Transmit>
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]
	return uartError;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	24001518 	.word	0x24001518
 8004378:	24001250 	.word	0x24001250

0800437c <BNO_Write>:

HAL_StatusTypeDef BNO_Write(uint8_t Address,uint8_t Data){
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	460a      	mov	r2, r1
 8004386:	71fb      	strb	r3, [r7, #7]
 8004388:	4613      	mov	r3, r2
 800438a:	71bb      	strb	r3, [r7, #6]
	uint8_t WriteCommand[5];
	HAL_StatusTypeDef uartError;

	WriteCommand[0] = 0xAA;
 800438c:	23aa      	movs	r3, #170	@ 0xaa
 800438e:	723b      	strb	r3, [r7, #8]
	WriteCommand[1] = 0x00;
 8004390:	2300      	movs	r3, #0
 8004392:	727b      	strb	r3, [r7, #9]
	WriteCommand[2] = Address;
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	72bb      	strb	r3, [r7, #10]
	WriteCommand[3] = 1;
 8004398:	2301      	movs	r3, #1
 800439a:	72fb      	strb	r3, [r7, #11]
	WriteCommand[4] = Data;
 800439c:	79bb      	ldrb	r3, [r7, #6]
 800439e:	733b      	strb	r3, [r7, #12]

	uartError = HAL_UART_Transmit(&huart3, WriteCommand,5,100);
 80043a0:	f107 0108 	add.w	r1, r7, #8
 80043a4:	2364      	movs	r3, #100	@ 0x64
 80043a6:	2205      	movs	r2, #5
 80043a8:	4804      	ldr	r0, [pc, #16]	@ (80043bc <BNO_Write+0x40>)
 80043aa:	f00a fc11 	bl	800ebd0 <HAL_UART_Transmit>
 80043ae:	4603      	mov	r3, r0
 80043b0:	73fb      	strb	r3, [r7, #15]
	return uartError;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	24001250 	.word	0x24001250

080043c0 <BNO_Write_MB>:

HAL_StatusTypeDef BNO_Write_MB(uint8_t Address,uint8_t Size, uint8_t *pData){
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b0c4      	sub	sp, #272	@ 0x110
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043d4:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80043d8:	4602      	mov	r2, r0
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043e0:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80043e4:	460a      	mov	r2, r1
 80043e6:	701a      	strb	r2, [r3, #0]
    uint8_t WriteCommand[255];
    HAL_StatusTypeDef uartError;

    WriteCommand[0] = 0xAA;
 80043e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043f0:	22aa      	movs	r2, #170	@ 0xaa
 80043f2:	701a      	strb	r2, [r3, #0]
    WriteCommand[1] = 0x00;
 80043f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80043f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043fc:	2200      	movs	r2, #0
 80043fe:	705a      	strb	r2, [r3, #1]
    WriteCommand[2] = Address;
 8004400:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004408:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800440c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8004410:	7812      	ldrb	r2, [r2, #0]
 8004412:	709a      	strb	r2, [r3, #2]
    WriteCommand[3] = Size;
 8004414:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800441c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004420:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8004424:	7812      	ldrb	r2, [r2, #0]
 8004426:	70da      	strb	r2, [r3, #3]

    for (uint8_t n = 0; n < Size; ++n) {
 8004428:	2300      	movs	r3, #0
 800442a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800442e:	e015      	b.n	800445c <BNO_Write_MB+0x9c>
        WriteCommand[n + 4] = pData[n];
 8004430:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004434:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004438:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	441a      	add	r2, r3
 8004440:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004444:	3304      	adds	r3, #4
 8004446:	7811      	ldrb	r1, [r2, #0]
 8004448:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800444c:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8004450:	54d1      	strb	r1, [r2, r3]
    for (uint8_t n = 0; n < Size; ++n) {
 8004452:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004456:	3301      	adds	r3, #1
 8004458:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800445c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004460:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004464:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d3e0      	bcc.n	8004430 <BNO_Write_MB+0x70>
    }

    uartError = HAL_UART_Transmit(&huart3, WriteCommand, (Size + 4),100);
 800446e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004472:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	b29b      	uxth	r3, r3
 800447a:	3304      	adds	r3, #4
 800447c:	b29a      	uxth	r2, r3
 800447e:	f107 010c 	add.w	r1, r7, #12
 8004482:	2364      	movs	r3, #100	@ 0x64
 8004484:	4806      	ldr	r0, [pc, #24]	@ (80044a0 <BNO_Write_MB+0xe0>)
 8004486:	f00a fba3 	bl	800ebd0 <HAL_UART_Transmit>
 800448a:	4603      	mov	r3, r0
 800448c:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
    return uartError;
 8004490:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
}
 8004494:	4618      	mov	r0, r3
 8004496:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	24001250 	.word	0x24001250

080044a4 <BNO_Page0Adress>:

void BNO_Page0Adress(void){
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 80044a8:	4ba6      	ldr	r3, [pc, #664]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b55      	cmp	r3, #85	@ 0x55
 80044ae:	f300 8247 	bgt.w	8004940 <BNO_Page0Adress+0x49c>
 80044b2:	2b35      	cmp	r3, #53	@ 0x35
 80044b4:	da0a      	bge.n	80044cc <BNO_Page0Adress+0x28>
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	f000 814a 	beq.w	8004750 <BNO_Page0Adress+0x2ac>
 80044bc:	2b08      	cmp	r3, #8
 80044be:	f300 823f 	bgt.w	8004940 <BNO_Page0Adress+0x49c>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d04c      	beq.n	8004560 <BNO_Page0Adress+0xbc>
 80044c6:	2b07      	cmp	r3, #7
 80044c8:	d064      	beq.n	8004594 <BNO_Page0Adress+0xf0>
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;

			BNO_ErrorHandler = ReadSucces;
			break;
		default:
			break;
 80044ca:	e239      	b.n	8004940 <BNO_Page0Adress+0x49c>
	switch (BNO_RxBuffer[0]) {
 80044cc:	3b35      	subs	r3, #53	@ 0x35
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	f200 8236 	bhi.w	8004940 <BNO_Page0Adress+0x49c>
 80044d4:	a201      	add	r2, pc, #4	@ (adr r2, 80044dc <BNO_Page0Adress+0x38>)
 80044d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044da:	bf00      	nop
 80044dc:	080045dd 	.word	0x080045dd
 80044e0:	08004941 	.word	0x08004941
 80044e4:	08004941 	.word	0x08004941
 80044e8:	08004941 	.word	0x08004941
 80044ec:	080045b9 	.word	0x080045b9
 80044f0:	08004941 	.word	0x08004941
 80044f4:	080045a7 	.word	0x080045a7
 80044f8:	08004941 	.word	0x08004941
 80044fc:	080045cb 	.word	0x080045cb
 8004500:	08004941 	.word	0x08004941
 8004504:	08004941 	.word	0x08004941
 8004508:	08004941 	.word	0x08004941
 800450c:	08004941 	.word	0x08004941
 8004510:	08004941 	.word	0x08004941
 8004514:	08004941 	.word	0x08004941
 8004518:	08004941 	.word	0x08004941
 800451c:	08004941 	.word	0x08004941
 8004520:	08004941 	.word	0x08004941
 8004524:	08004941 	.word	0x08004941
 8004528:	08004941 	.word	0x08004941
 800452c:	08004941 	.word	0x08004941
 8004530:	08004941 	.word	0x08004941
 8004534:	08004941 	.word	0x08004941
 8004538:	08004941 	.word	0x08004941
 800453c:	08004941 	.word	0x08004941
 8004540:	08004941 	.word	0x08004941
 8004544:	08004941 	.word	0x08004941
 8004548:	08004941 	.word	0x08004941
 800454c:	08004941 	.word	0x08004941
 8004550:	08004941 	.word	0x08004941
 8004554:	08004941 	.word	0x08004941
 8004558:	08004941 	.word	0x08004941
 800455c:	08004635 	.word	0x08004635
			if(BNO_RxBuffer[1] != 160) return;
 8004560:	4b78      	ldr	r3, [pc, #480]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	2ba0      	cmp	r3, #160	@ 0xa0
 8004566:	f040 81ed 	bne.w	8004944 <BNO_Page0Adress+0x4a0>
			IMU.ID = BNO_RxBuffer[1];
 800456a:	4b76      	ldr	r3, [pc, #472]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 800456c:	785a      	ldrb	r2, [r3, #1]
 800456e:	4b76      	ldr	r3, [pc, #472]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004570:	701a      	strb	r2, [r3, #0]
			IMU.ACC.ID = BNO_RxBuffer[2];
 8004572:	4b74      	ldr	r3, [pc, #464]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004574:	789a      	ldrb	r2, [r3, #2]
 8004576:	4b74      	ldr	r3, [pc, #464]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004578:	711a      	strb	r2, [r3, #4]
			IMU.MAG.ID = BNO_RxBuffer[3];
 800457a:	4b72      	ldr	r3, [pc, #456]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 800457c:	78da      	ldrb	r2, [r3, #3]
 800457e:	4b72      	ldr	r3, [pc, #456]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004580:	751a      	strb	r2, [r3, #20]
			IMU.GYR.ID = BNO_RxBuffer[4];
 8004582:	4b70      	ldr	r3, [pc, #448]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004584:	791a      	ldrb	r2, [r3, #4]
 8004586:	4b70      	ldr	r3, [pc, #448]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BNO_ErrorHandler = ReadSucces;
 800458c:	4b6f      	ldr	r3, [pc, #444]	@ (800474c <BNO_Page0Adress+0x2a8>)
 800458e:	220b      	movs	r2, #11
 8004590:	701a      	strb	r2, [r3, #0]
			break;
 8004592:	e1d8      	b.n	8004946 <BNO_Page0Adress+0x4a2>
			IMU.Page = BNO_RxBuffer[1];
 8004594:	4b6b      	ldr	r3, [pc, #428]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004596:	785a      	ldrb	r2, [r3, #1]
 8004598:	4b6b      	ldr	r3, [pc, #428]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 800459e:	4b6b      	ldr	r3, [pc, #428]	@ (800474c <BNO_Page0Adress+0x2a8>)
 80045a0:	220b      	movs	r2, #11
 80045a2:	701a      	strb	r2, [r3, #0]
			break;
 80045a4:	e1cf      	b.n	8004946 <BNO_Page0Adress+0x4a2>
			IMU.Unit_Select = BNO_RxBuffer[1];
 80045a6:	4b67      	ldr	r3, [pc, #412]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80045a8:	785a      	ldrb	r2, [r3, #1]
 80045aa:	4b67      	ldr	r3, [pc, #412]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
			BNO_ErrorHandler = ReadSucces;
 80045b0:	4b66      	ldr	r3, [pc, #408]	@ (800474c <BNO_Page0Adress+0x2a8>)
 80045b2:	220b      	movs	r2, #11
 80045b4:	701a      	strb	r2, [r3, #0]
			break;
 80045b6:	e1c6      	b.n	8004946 <BNO_Page0Adress+0x4a2>
			IMU.System_Status = BNO_RxBuffer[1];
 80045b8:	4b62      	ldr	r3, [pc, #392]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80045ba:	785a      	ldrb	r2, [r3, #1]
 80045bc:	4b62      	ldr	r3, [pc, #392]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 80045be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
			BNO_ErrorHandler = ReadSucces;
 80045c2:	4b62      	ldr	r3, [pc, #392]	@ (800474c <BNO_Page0Adress+0x2a8>)
 80045c4:	220b      	movs	r2, #11
 80045c6:	701a      	strb	r2, [r3, #0]
			break;
 80045c8:	e1bd      	b.n	8004946 <BNO_Page0Adress+0x4a2>
			IMU.Op_Mode = BNO_RxBuffer[1];
 80045ca:	4b5e      	ldr	r3, [pc, #376]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80045cc:	785a      	ldrb	r2, [r3, #1]
 80045ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 80045d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
			BNO_ErrorHandler = ReadSucces;
 80045d4:	4b5d      	ldr	r3, [pc, #372]	@ (800474c <BNO_Page0Adress+0x2a8>)
 80045d6:	220b      	movs	r2, #11
 80045d8:	701a      	strb	r2, [r3, #0]
			break;
 80045da:	e1b4      	b.n	8004946 <BNO_Page0Adress+0x4a2>
			IMU.CalSatus.Full = BNO_RxBuffer[1];
 80045dc:	4b59      	ldr	r3, [pc, #356]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80045de:	785a      	ldrb	r2, [r3, #1]
 80045e0:	4b59      	ldr	r3, [pc, #356]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 80045e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			IMU.CalSatus.Sys = (BNO_RxBuffer[1] >> 6) & 0x03;
 80045e6:	4b57      	ldr	r3, [pc, #348]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	099b      	lsrs	r3, r3, #6
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4b56      	ldr	r3, [pc, #344]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			IMU.CalSatus.Gyr = (BNO_RxBuffer[1] >> 4) & 0x03;
 80045f4:	4b53      	ldr	r3, [pc, #332]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80045f6:	785b      	ldrb	r3, [r3, #1]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	b2da      	uxtb	r2, r3
 8004602:	4b51      	ldr	r3, [pc, #324]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004604:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
			IMU.CalSatus.Acc = (BNO_RxBuffer[1] >> 2) & 0x03;
 8004608:	4b4e      	ldr	r3, [pc, #312]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	b2da      	uxtb	r2, r3
 8004616:	4b4c      	ldr	r3, [pc, #304]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			IMU.CalSatus.Mag = BNO_RxBuffer[1] & 0x03;
 800461c:	4b49      	ldr	r3, [pc, #292]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 800461e:	785b      	ldrb	r3, [r3, #1]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	b2da      	uxtb	r2, r3
 8004626:	4b48      	ldr	r3, [pc, #288]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			BNO_ErrorHandler = ReadSucces;
 800462c:	4b47      	ldr	r3, [pc, #284]	@ (800474c <BNO_Page0Adress+0x2a8>)
 800462e:	220b      	movs	r2, #11
 8004630:	701a      	strb	r2, [r3, #0]
			break;
 8004632:	e188      	b.n	8004946 <BNO_Page0Adress+0x4a2>
			IMU.Calibration_Data.offset.accel.x = (int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1]);
 8004634:	4b43      	ldr	r3, [pc, #268]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004636:	789b      	ldrb	r3, [r3, #2]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	b21a      	sxth	r2, r3
 800463c:	4b41      	ldr	r3, [pc, #260]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	b21b      	sxth	r3, r3
 8004642:	4313      	orrs	r3, r2
 8004644:	b21a      	sxth	r2, r3
 8004646:	4b40      	ldr	r3, [pc, #256]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004648:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			IMU.Calibration_Data.offset.accel.y = (int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3]);
 800464c:	4b3d      	ldr	r3, [pc, #244]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 800464e:	791b      	ldrb	r3, [r3, #4]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	b21a      	sxth	r2, r3
 8004654:	4b3b      	ldr	r3, [pc, #236]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004656:	78db      	ldrb	r3, [r3, #3]
 8004658:	b21b      	sxth	r3, r3
 800465a:	4313      	orrs	r3, r2
 800465c:	b21a      	sxth	r2, r3
 800465e:	4b3a      	ldr	r3, [pc, #232]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004660:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
			IMU.Calibration_Data.offset.accel.z = (int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5]);
 8004664:	4b37      	ldr	r3, [pc, #220]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004666:	799b      	ldrb	r3, [r3, #6]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	b21a      	sxth	r2, r3
 800466c:	4b35      	ldr	r3, [pc, #212]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 800466e:	795b      	ldrb	r3, [r3, #5]
 8004670:	b21b      	sxth	r3, r3
 8004672:	4313      	orrs	r3, r2
 8004674:	b21a      	sxth	r2, r3
 8004676:	4b34      	ldr	r3, [pc, #208]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004678:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
			IMU.Calibration_Data.offset.mag.x = (int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7]);
 800467c:	4b31      	ldr	r3, [pc, #196]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 800467e:	7a1b      	ldrb	r3, [r3, #8]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	b21a      	sxth	r2, r3
 8004684:	4b2f      	ldr	r3, [pc, #188]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004686:	79db      	ldrb	r3, [r3, #7]
 8004688:	b21b      	sxth	r3, r3
 800468a:	4313      	orrs	r3, r2
 800468c:	b21a      	sxth	r2, r3
 800468e:	4b2e      	ldr	r3, [pc, #184]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004690:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
			IMU.Calibration_Data.offset.mag.y = (int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9]);
 8004694:	4b2b      	ldr	r3, [pc, #172]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004696:	7a9b      	ldrb	r3, [r3, #10]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	b21a      	sxth	r2, r3
 800469c:	4b29      	ldr	r3, [pc, #164]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 800469e:	7a5b      	ldrb	r3, [r3, #9]
 80046a0:	b21b      	sxth	r3, r3
 80046a2:	4313      	orrs	r3, r2
 80046a4:	b21a      	sxth	r2, r3
 80046a6:	4b28      	ldr	r3, [pc, #160]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 80046a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
			IMU.Calibration_Data.offset.mag.z = (int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11]);
 80046ac:	4b25      	ldr	r3, [pc, #148]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80046ae:	7b1b      	ldrb	r3, [r3, #12]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	b21a      	sxth	r2, r3
 80046b4:	4b23      	ldr	r3, [pc, #140]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80046b6:	7adb      	ldrb	r3, [r3, #11]
 80046b8:	b21b      	sxth	r3, r3
 80046ba:	4313      	orrs	r3, r2
 80046bc:	b21a      	sxth	r2, r3
 80046be:	4b22      	ldr	r3, [pc, #136]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 80046c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
			IMU.Calibration_Data.offset.gyro.x = (int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13]);
 80046c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80046c6:	7b9b      	ldrb	r3, [r3, #14]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	b21a      	sxth	r2, r3
 80046cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80046ce:	7b5b      	ldrb	r3, [r3, #13]
 80046d0:	b21b      	sxth	r3, r3
 80046d2:	4313      	orrs	r3, r2
 80046d4:	b21a      	sxth	r2, r3
 80046d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 80046d8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
			IMU.Calibration_Data.offset.gyro.y = (int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15]);
 80046dc:	4b19      	ldr	r3, [pc, #100]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80046de:	7c1b      	ldrb	r3, [r3, #16]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	b21a      	sxth	r2, r3
 80046e4:	4b17      	ldr	r3, [pc, #92]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80046e6:	7bdb      	ldrb	r3, [r3, #15]
 80046e8:	b21b      	sxth	r3, r3
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b21a      	sxth	r2, r3
 80046ee:	4b16      	ldr	r3, [pc, #88]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 80046f0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
			IMU.Calibration_Data.offset.gyro.z = (int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17]);
 80046f4:	4b13      	ldr	r3, [pc, #76]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80046f6:	7c9b      	ldrb	r3, [r3, #18]
 80046f8:	021b      	lsls	r3, r3, #8
 80046fa:	b21a      	sxth	r2, r3
 80046fc:	4b11      	ldr	r3, [pc, #68]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 80046fe:	7c5b      	ldrb	r3, [r3, #17]
 8004700:	b21b      	sxth	r3, r3
 8004702:	4313      	orrs	r3, r2
 8004704:	b21a      	sxth	r2, r3
 8004706:	4b10      	ldr	r3, [pc, #64]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004708:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
			IMU.Calibration_Data.radius.accel = (uint16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19]);
 800470c:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 800470e:	7d1b      	ldrb	r3, [r3, #20]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	b21a      	sxth	r2, r3
 8004714:	4b0b      	ldr	r3, [pc, #44]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004716:	7cdb      	ldrb	r3, [r3, #19]
 8004718:	b21b      	sxth	r3, r3
 800471a:	4313      	orrs	r3, r2
 800471c:	b21b      	sxth	r3, r3
 800471e:	b29a      	uxth	r2, r3
 8004720:	4b09      	ldr	r3, [pc, #36]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 8004722:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
			IMU.Calibration_Data.radius.mag   = (uint16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21]);
 8004726:	4b07      	ldr	r3, [pc, #28]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004728:	7d9b      	ldrb	r3, [r3, #22]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	b21a      	sxth	r2, r3
 800472e:	4b05      	ldr	r3, [pc, #20]	@ (8004744 <BNO_Page0Adress+0x2a0>)
 8004730:	7d5b      	ldrb	r3, [r3, #21]
 8004732:	b21b      	sxth	r3, r3
 8004734:	4313      	orrs	r3, r2
 8004736:	b21b      	sxth	r3, r3
 8004738:	b29a      	uxth	r2, r3
 800473a:	4b03      	ldr	r3, [pc, #12]	@ (8004748 <BNO_Page0Adress+0x2a4>)
 800473c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
			break;
 8004740:	e101      	b.n	8004946 <BNO_Page0Adress+0x4a2>
 8004742:	bf00      	nop
 8004744:	24001518 	.word	0x24001518
 8004748:	24001620 	.word	0x24001620
 800474c:	24001619 	.word	0x24001619
			IMU.ACC.x = ((float)((int16_t)((BNO_RxBuffer[2] << 8) | BNO_RxBuffer[1])))/100;
 8004750:	4b7f      	ldr	r3, [pc, #508]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 8004752:	789b      	ldrb	r3, [r3, #2]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	b21a      	sxth	r2, r3
 8004758:	4b7d      	ldr	r3, [pc, #500]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 800475a:	785b      	ldrb	r3, [r3, #1]
 800475c:	b21b      	sxth	r3, r3
 800475e:	4313      	orrs	r3, r2
 8004760:	b21b      	sxth	r3, r3
 8004762:	ee07 3a90 	vmov	s15, r3
 8004766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800476a:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004954 <BNO_Page0Adress+0x4b0>
 800476e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004772:	4b79      	ldr	r3, [pc, #484]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 8004774:	edc3 7a02 	vstr	s15, [r3, #8]
			IMU.ACC.y = ((float)((int16_t)((BNO_RxBuffer[4] << 8) | BNO_RxBuffer[3])))/100;
 8004778:	4b75      	ldr	r3, [pc, #468]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 800477a:	791b      	ldrb	r3, [r3, #4]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	b21a      	sxth	r2, r3
 8004780:	4b73      	ldr	r3, [pc, #460]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 8004782:	78db      	ldrb	r3, [r3, #3]
 8004784:	b21b      	sxth	r3, r3
 8004786:	4313      	orrs	r3, r2
 8004788:	b21b      	sxth	r3, r3
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004792:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004954 <BNO_Page0Adress+0x4b0>
 8004796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800479a:	4b6f      	ldr	r3, [pc, #444]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 800479c:	edc3 7a03 	vstr	s15, [r3, #12]
			IMU.ACC.z = ((float)((int16_t)((BNO_RxBuffer[6] << 8) | BNO_RxBuffer[5])))/100;
 80047a0:	4b6b      	ldr	r3, [pc, #428]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 80047a2:	799b      	ldrb	r3, [r3, #6]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	b21a      	sxth	r2, r3
 80047a8:	4b69      	ldr	r3, [pc, #420]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 80047aa:	795b      	ldrb	r3, [r3, #5]
 80047ac:	b21b      	sxth	r3, r3
 80047ae:	4313      	orrs	r3, r2
 80047b0:	b21b      	sxth	r3, r3
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047ba:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8004954 <BNO_Page0Adress+0x4b0>
 80047be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047c2:	4b65      	ldr	r3, [pc, #404]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 80047c4:	edc3 7a04 	vstr	s15, [r3, #16]
			IMU.MAG.x = ((float)((int16_t)((BNO_RxBuffer[8] << 8) | BNO_RxBuffer[7])))/16;
 80047c8:	4b61      	ldr	r3, [pc, #388]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 80047ca:	7a1b      	ldrb	r3, [r3, #8]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	b21a      	sxth	r2, r3
 80047d0:	4b5f      	ldr	r3, [pc, #380]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 80047d2:	79db      	ldrb	r3, [r3, #7]
 80047d4:	b21b      	sxth	r3, r3
 80047d6:	4313      	orrs	r3, r2
 80047d8:	b21b      	sxth	r3, r3
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047e2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80047e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 80047ec:	edc3 7a06 	vstr	s15, [r3, #24]
			IMU.MAG.y = ((float)((int16_t)((BNO_RxBuffer[10] << 8) | BNO_RxBuffer[9])))/16;
 80047f0:	4b57      	ldr	r3, [pc, #348]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 80047f2:	7a9b      	ldrb	r3, [r3, #10]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	b21a      	sxth	r2, r3
 80047f8:	4b55      	ldr	r3, [pc, #340]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 80047fa:	7a5b      	ldrb	r3, [r3, #9]
 80047fc:	b21b      	sxth	r3, r3
 80047fe:	4313      	orrs	r3, r2
 8004800:	b21b      	sxth	r3, r3
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800480a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800480e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004812:	4b51      	ldr	r3, [pc, #324]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 8004814:	edc3 7a07 	vstr	s15, [r3, #28]
			IMU.MAG.z = ((float)((int16_t)((BNO_RxBuffer[12] << 8) | BNO_RxBuffer[11])))/16;
 8004818:	4b4d      	ldr	r3, [pc, #308]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 800481a:	7b1b      	ldrb	r3, [r3, #12]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	b21a      	sxth	r2, r3
 8004820:	4b4b      	ldr	r3, [pc, #300]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 8004822:	7adb      	ldrb	r3, [r3, #11]
 8004824:	b21b      	sxth	r3, r3
 8004826:	4313      	orrs	r3, r2
 8004828:	b21b      	sxth	r3, r3
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004832:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004836:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800483a:	4b47      	ldr	r3, [pc, #284]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 800483c:	edc3 7a08 	vstr	s15, [r3, #32]
			IMU.GYR.x = ((float)((int16_t)((BNO_RxBuffer[14] << 8) | BNO_RxBuffer[13])))/16;
 8004840:	4b43      	ldr	r3, [pc, #268]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 8004842:	7b9b      	ldrb	r3, [r3, #14]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	b21a      	sxth	r2, r3
 8004848:	4b41      	ldr	r3, [pc, #260]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 800484a:	7b5b      	ldrb	r3, [r3, #13]
 800484c:	b21b      	sxth	r3, r3
 800484e:	4313      	orrs	r3, r2
 8004850:	b21b      	sxth	r3, r3
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800485a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800485e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004862:	4b3d      	ldr	r3, [pc, #244]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 8004864:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			IMU.GYR.y = -((float)((int16_t)((BNO_RxBuffer[16] << 8) | BNO_RxBuffer[15])))/16;
 8004868:	4b39      	ldr	r3, [pc, #228]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 800486a:	7c1b      	ldrb	r3, [r3, #16]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	b21a      	sxth	r2, r3
 8004870:	4b37      	ldr	r3, [pc, #220]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 8004872:	7bdb      	ldrb	r3, [r3, #15]
 8004874:	b21b      	sxth	r3, r3
 8004876:	4313      	orrs	r3, r2
 8004878:	b21b      	sxth	r3, r3
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004882:	eeb1 7a67 	vneg.f32	s14, s15
 8004886:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800488a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800488e:	4b32      	ldr	r3, [pc, #200]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 8004890:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			IMU.GYR.z = -((float)((int16_t)((BNO_RxBuffer[18] << 8) | BNO_RxBuffer[17])))/16;
 8004894:	4b2e      	ldr	r3, [pc, #184]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 8004896:	7c9b      	ldrb	r3, [r3, #18]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	b21a      	sxth	r2, r3
 800489c:	4b2c      	ldr	r3, [pc, #176]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 800489e:	7c5b      	ldrb	r3, [r3, #17]
 80048a0:	b21b      	sxth	r3, r3
 80048a2:	4313      	orrs	r3, r2
 80048a4:	b21b      	sxth	r3, r3
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ae:	eeb1 7a67 	vneg.f32	s14, s15
 80048b2:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80048b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048ba:	4b27      	ldr	r3, [pc, #156]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 80048bc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			IMU.Heading = ((float)((int16_t)((BNO_RxBuffer[20] << 8) | BNO_RxBuffer[19])))/16;
 80048c0:	4b23      	ldr	r3, [pc, #140]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 80048c2:	7d1b      	ldrb	r3, [r3, #20]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	b21a      	sxth	r2, r3
 80048c8:	4b21      	ldr	r3, [pc, #132]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 80048ca:	7cdb      	ldrb	r3, [r3, #19]
 80048cc:	b21b      	sxth	r3, r3
 80048ce:	4313      	orrs	r3, r2
 80048d0:	b21b      	sxth	r3, r3
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048da:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80048de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 80048e4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
			IMU.Pitch = ((float)((int16_t)((BNO_RxBuffer[22] << 8) | BNO_RxBuffer[21])))/16;
 80048e8:	4b19      	ldr	r3, [pc, #100]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 80048ea:	7d9b      	ldrb	r3, [r3, #22]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	b21a      	sxth	r2, r3
 80048f0:	4b17      	ldr	r3, [pc, #92]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 80048f2:	7d5b      	ldrb	r3, [r3, #21]
 80048f4:	b21b      	sxth	r3, r3
 80048f6:	4313      	orrs	r3, r2
 80048f8:	b21b      	sxth	r3, r3
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004902:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8004906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490a:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 800490c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			IMU.Roll = ((float)((int16_t)((BNO_RxBuffer[24] << 8) | BNO_RxBuffer[23])))/16;
 8004910:	4b0f      	ldr	r3, [pc, #60]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 8004912:	7e1b      	ldrb	r3, [r3, #24]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	b21a      	sxth	r2, r3
 8004918:	4b0d      	ldr	r3, [pc, #52]	@ (8004950 <BNO_Page0Adress+0x4ac>)
 800491a:	7ddb      	ldrb	r3, [r3, #23]
 800491c:	b21b      	sxth	r3, r3
 800491e:	4313      	orrs	r3, r2
 8004920:	b21b      	sxth	r3, r3
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800492a:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800492e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004932:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <BNO_Page0Adress+0x4b4>)
 8004934:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			BNO_ErrorHandler = ReadSucces;
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <BNO_Page0Adress+0x4b8>)
 800493a:	220b      	movs	r2, #11
 800493c:	701a      	strb	r2, [r3, #0]
			break;
 800493e:	e002      	b.n	8004946 <BNO_Page0Adress+0x4a2>
			break;
 8004940:	bf00      	nop
 8004942:	e000      	b.n	8004946 <BNO_Page0Adress+0x4a2>
			if(BNO_RxBuffer[1] != 160) return;
 8004944:	bf00      	nop
	}
}
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	24001518 	.word	0x24001518
 8004954:	42c80000 	.word	0x42c80000
 8004958:	24001620 	.word	0x24001620
 800495c:	24001619 	.word	0x24001619

08004960 <BNO_Page1Adress>:

void BNO_Page1Adress(void){
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
	switch (BNO_RxBuffer[0]) {
 8004964:	4b09      	ldr	r3, [pc, #36]	@ (800498c <BNO_Page1Adress+0x2c>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b07      	cmp	r3, #7
 800496a:	d108      	bne.n	800497e <BNO_Page1Adress+0x1e>
		case BNO055_PAGE_ID:
			IMU.Page = BNO_RxBuffer[1];
 800496c:	4b07      	ldr	r3, [pc, #28]	@ (800498c <BNO_Page1Adress+0x2c>)
 800496e:	785a      	ldrb	r2, [r3, #1]
 8004970:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <BNO_Page1Adress+0x30>)
 8004972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
			BNO_ErrorHandler = ReadSucces;
 8004976:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <BNO_Page1Adress+0x34>)
 8004978:	220b      	movs	r2, #11
 800497a:	701a      	strb	r2, [r3, #0]
			break;
 800497c:	e000      	b.n	8004980 <BNO_Page1Adress+0x20>

		default:
			break;
 800497e:	bf00      	nop
	}
}
 8004980:	bf00      	nop
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	24001518 	.word	0x24001518
 8004990:	24001620 	.word	0x24001620
 8004994:	24001619 	.word	0x24001619

08004998 <BNO_EmptyingBuffer>:

void BNO_EmptyingBuffer(void){
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
	switch (IMU.Page) {
 800499c:	4b0a      	ldr	r3, [pc, #40]	@ (80049c8 <BNO_EmptyingBuffer+0x30>)
 800499e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <BNO_EmptyingBuffer+0x14>
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d003      	beq.n	80049b2 <BNO_EmptyingBuffer+0x1a>
			break;
		case 1:
			BNO_Page1Adress();
			break;
		default:
			break;
 80049aa:	e005      	b.n	80049b8 <BNO_EmptyingBuffer+0x20>
			BNO_Page0Adress();
 80049ac:	f7ff fd7a 	bl	80044a4 <BNO_Page0Adress>
			break;
 80049b0:	e002      	b.n	80049b8 <BNO_EmptyingBuffer+0x20>
			BNO_Page1Adress();
 80049b2:	f7ff ffd5 	bl	8004960 <BNO_Page1Adress>
			break;
 80049b6:	bf00      	nop
	}
	memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 80049b8:	22ff      	movs	r2, #255	@ 0xff
 80049ba:	2100      	movs	r1, #0
 80049bc:	4803      	ldr	r0, [pc, #12]	@ (80049cc <BNO_EmptyingBuffer+0x34>)
 80049be:	f012 fb5a 	bl	8017076 <memset>
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	24001620 	.word	0x24001620
 80049cc:	24001518 	.word	0x24001518

080049d0 <BNO_SWReset>:
		default:
			break;
	}
}

void BNO_SWReset(void){
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
	BNO_Write(BNO055_SYS_TRIGGER,0x20);
 80049d4:	2120      	movs	r1, #32
 80049d6:	203f      	movs	r0, #63	@ 0x3f
 80049d8:	f7ff fcd0 	bl	800437c <BNO_Write>
	bno055_delay(70);
 80049dc:	2046      	movs	r0, #70	@ 0x46
 80049de:	f7ff fc93 	bl	8004308 <bno055_delay>
	IMU.ID = 0x00;
 80049e2:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <BNO_SWReset+0x24>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
	BNO_CurrentState = Configuration;
 80049e8:	4b03      	ldr	r3, [pc, #12]	@ (80049f8 <BNO_SWReset+0x28>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	701a      	strb	r2, [r3, #0]
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	24001620 	.word	0x24001620
 80049f8:	2400161c 	.word	0x2400161c

080049fc <bno055_setOperationMode>:

void bno055_setOperationMode(bno055_opmode_t mode) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	71fb      	strb	r3, [r7, #7]
  BNO_Write(BNO055_OPR_MODE, mode);
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	203d      	movs	r0, #61	@ 0x3d
 8004a0c:	f7ff fcb6 	bl	800437c <BNO_Write>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d103      	bne.n	8004a1e <bno055_setOperationMode+0x22>
    bno055_delay(5);
 8004a16:	2005      	movs	r0, #5
 8004a18:	f7ff fc76 	bl	8004308 <bno055_delay>
  } else {
    bno055_delay(3);
  }
}
 8004a1c:	e002      	b.n	8004a24 <bno055_setOperationMode+0x28>
    bno055_delay(3);
 8004a1e:	2003      	movs	r0, #3
 8004a20:	f7ff fc72 	bl	8004308 <bno055_delay>
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8004a30:	2000      	movs	r0, #0
 8004a32:	f7ff ffe3 	bl	80049fc <bno055_setOperationMode>
}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8004a3e:	200c      	movs	r0, #12
 8004a40:	f7ff ffdc 	bl	80049fc <bno055_setOperationMode>
}
 8004a44:	bf00      	nop
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <BNO_GetCalibrationData>:

void BNO_GetCalibrationData(void){
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_OFFSET_X_LSB, 22);
 8004a4c:	2116      	movs	r1, #22
 8004a4e:	2055      	movs	r0, #85	@ 0x55
 8004a50:	f7ff fc6e 	bl	8004330 <BNO_Read>
}
 8004a54:	bf00      	nop
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <BNO_SetCalibrationData>:

void BNO_SetCalibrationData(void){
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
	uint8_t buffer[22];

	  memcpy(&IMU.Calibration_Data.offset.accel, buffer, 6);
 8004a5e:	463b      	mov	r3, r7
 8004a60:	2206      	movs	r2, #6
 8004a62:	4619      	mov	r1, r3
 8004a64:	4814      	ldr	r0, [pc, #80]	@ (8004ab8 <BNO_SetCalibrationData+0x60>)
 8004a66:	f012 fba0 	bl	80171aa <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.mag, buffer + 6, 6);
 8004a6a:	463b      	mov	r3, r7
 8004a6c:	3306      	adds	r3, #6
 8004a6e:	2206      	movs	r2, #6
 8004a70:	4619      	mov	r1, r3
 8004a72:	4812      	ldr	r0, [pc, #72]	@ (8004abc <BNO_SetCalibrationData+0x64>)
 8004a74:	f012 fb99 	bl	80171aa <memcpy>
	  memcpy(&IMU.Calibration_Data.offset.gyro, buffer + 12, 6);
 8004a78:	463b      	mov	r3, r7
 8004a7a:	330c      	adds	r3, #12
 8004a7c:	2206      	movs	r2, #6
 8004a7e:	4619      	mov	r1, r3
 8004a80:	480f      	ldr	r0, [pc, #60]	@ (8004ac0 <BNO_SetCalibrationData+0x68>)
 8004a82:	f012 fb92 	bl	80171aa <memcpy>
	  memcpy(&IMU.Calibration_Data.radius.accel, buffer + 18, 2);
 8004a86:	463b      	mov	r3, r7
 8004a88:	3312      	adds	r3, #18
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac4 <BNO_SetCalibrationData+0x6c>)
 8004a90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memcpy(&IMU.Calibration_Data.radius.mag, buffer + 20, 2);
 8004a94:	463b      	mov	r3, r7
 8004a96:	3314      	adds	r3, #20
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ac4 <BNO_SetCalibrationData+0x6c>)
 8004a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	BNO_Write_MB(BNO055_ACC_OFFSET_X_LSB, 22, buffer);
 8004aa2:	463b      	mov	r3, r7
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2116      	movs	r1, #22
 8004aa8:	2055      	movs	r0, #85	@ 0x55
 8004aaa:	f7ff fc89 	bl	80043c0 <BNO_Write_MB>
}
 8004aae:	bf00      	nop
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	24001676 	.word	0x24001676
 8004abc:	24001670 	.word	0x24001670
 8004ac0:	2400166a 	.word	0x2400166a
 8004ac4:	24001620 	.word	0x24001620

08004ac8 <BNO_Init>:

void BNO_Init(void){
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(IMU_RST_GPIO_Port, IMU_RST_Pin, SET);
 8004acc:	2201      	movs	r2, #1
 8004ace:	2104      	movs	r1, #4
 8004ad0:	4808      	ldr	r0, [pc, #32]	@ (8004af4 <BNO_Init+0x2c>)
 8004ad2:	f004 fe57 	bl	8009784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IMU_BOOT_GPIO_Port, IMU_BOOT_Pin, SET);
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004adc:	4806      	ldr	r0, [pc, #24]	@ (8004af8 <BNO_Init+0x30>)
 8004ade:	f004 fe51 	bl	8009784 <HAL_GPIO_WritePin>

	bno055_delay(100);
 8004ae2:	2064      	movs	r0, #100	@ 0x64
 8004ae4:	f7ff fc10 	bl	8004308 <bno055_delay>

	BNO_CurrentState = Reset;
 8004ae8:	4b04      	ldr	r3, [pc, #16]	@ (8004afc <BNO_Init+0x34>)
 8004aea:	2204      	movs	r2, #4
 8004aec:	701a      	strb	r2, [r3, #0]
}
 8004aee:	bf00      	nop
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	58020c00 	.word	0x58020c00
 8004af8:	58020400 	.word	0x58020400
 8004afc:	2400161c 	.word	0x2400161c

08004b00 <BNO_Config>:

void BNO_Config(void){
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
	static uint8_t ConfigFlag = 0;

	switch (ConfigFlag) {
 8004b04:	4b20      	ldr	r3, [pc, #128]	@ (8004b88 <BNO_Config+0x88>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d839      	bhi.n	8004b80 <BNO_Config+0x80>
 8004b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <BNO_Config+0x14>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b35 	.word	0x08004b35
 8004b1c:	08004b41 	.word	0x08004b41
 8004b20:	08004b63 	.word	0x08004b63
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8004b24:	2100      	movs	r1, #0
 8004b26:	203f      	movs	r0, #63	@ 0x3f
 8004b28:	f7ff fc28 	bl	800437c <BNO_Write>
			ConfigFlag = 1;
 8004b2c:	4b16      	ldr	r3, [pc, #88]	@ (8004b88 <BNO_Config+0x88>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
			break;
 8004b32:	e026      	b.n	8004b82 <BNO_Config+0x82>
		case 1:
			bno055_setOperationModeConfig();
 8004b34:	f7ff ff7a 	bl	8004a2c <bno055_setOperationModeConfig>
			ConfigFlag = 2;
 8004b38:	4b13      	ldr	r3, [pc, #76]	@ (8004b88 <BNO_Config+0x88>)
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	701a      	strb	r2, [r3, #0]
			break;
 8004b3e:	e020      	b.n	8004b82 <BNO_Config+0x82>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004b40:	2101      	movs	r1, #1
 8004b42:	203d      	movs	r0, #61	@ 0x3d
 8004b44:	f7ff fbf4 	bl	8004330 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8004b48:	4b10      	ldr	r3, [pc, #64]	@ (8004b8c <BNO_Config+0x8c>)
 8004b4a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <BNO_Config+0x5a>
				ConfigFlag = 3;
 8004b52:	4b0d      	ldr	r3, [pc, #52]	@ (8004b88 <BNO_Config+0x88>)
 8004b54:	2203      	movs	r2, #3
 8004b56:	701a      	strb	r2, [r3, #0]
			}
			else ConfigFlag = 1;
			break;
 8004b58:	e013      	b.n	8004b82 <BNO_Config+0x82>
			else ConfigFlag = 1;
 8004b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b88 <BNO_Config+0x88>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
			break;
 8004b60:	e00f      	b.n	8004b82 <BNO_Config+0x82>
		case 3:
			BNO_Read(BNO055_CHIP_ID, 4);
 8004b62:	2104      	movs	r1, #4
 8004b64:	2000      	movs	r0, #0
 8004b66:	f7ff fbe3 	bl	8004330 <BNO_Read>

			if(IMU.ID == BNO055_ID){
 8004b6a:	4b08      	ldr	r3, [pc, #32]	@ (8004b8c <BNO_Config+0x8c>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b70:	d102      	bne.n	8004b78 <BNO_Config+0x78>
				BNO_CurrentState = Calibration;
 8004b72:	4b07      	ldr	r3, [pc, #28]	@ (8004b90 <BNO_Config+0x90>)
 8004b74:	2202      	movs	r2, #2
 8004b76:	701a      	strb	r2, [r3, #0]
			}
			ConfigFlag = 0;
 8004b78:	4b03      	ldr	r3, [pc, #12]	@ (8004b88 <BNO_Config+0x88>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
			break;
 8004b7e:	e000      	b.n	8004b82 <BNO_Config+0x82>
		default:
			break;
 8004b80:	bf00      	nop
	}

}
 8004b82:	bf00      	nop
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	24001680 	.word	0x24001680
 8004b8c:	24001620 	.word	0x24001620
 8004b90:	2400161c 	.word	0x2400161c

08004b94 <BNO_CalibrationStatus>:

void BNO_CalibrationStatus(void){
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
	static uint8_t CalibrationFlag = 0;
	static uint8_t Calibrated = 1;

	switch (CalibrationFlag) {
 8004b98:	4b3d      	ldr	r3, [pc, #244]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b07      	cmp	r3, #7
 8004b9e:	d870      	bhi.n	8004c82 <BNO_CalibrationStatus+0xee>
 8004ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <BNO_CalibrationStatus+0x14>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bc9 	.word	0x08004bc9
 8004bac:	08004bd9 	.word	0x08004bd9
 8004bb0:	08004be5 	.word	0x08004be5
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004c37 	.word	0x08004c37
 8004bbc:	08004c43 	.word	0x08004c43
 8004bc0:	08004c65 	.word	0x08004c65
 8004bc4:	08004c77 	.word	0x08004c77
		case 0:
			BNO_Write(BNO055_SYS_TRIGGER,0x00);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	203f      	movs	r0, #63	@ 0x3f
 8004bcc:	f7ff fbd6 	bl	800437c <BNO_Write>
			CalibrationFlag = 1;
 8004bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
			break;
 8004bd6:	e059      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
		case 1:
			bno055_setOperationModeNDOF();
 8004bd8:	f7ff ff2f 	bl	8004a3a <bno055_setOperationModeNDOF>
			CalibrationFlag = 2;
 8004bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004bde:	2202      	movs	r2, #2
 8004be0:	701a      	strb	r2, [r3, #0]
			break;
 8004be2:	e053      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
		case 2:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004be4:	2101      	movs	r1, #1
 8004be6:	203d      	movs	r0, #61	@ 0x3d
 8004be8:	f7ff fba2 	bl	8004330 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_NDOF){
 8004bec:	4b29      	ldr	r3, [pc, #164]	@ (8004c94 <BNO_CalibrationStatus+0x100>)
 8004bee:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004bf2:	2b0c      	cmp	r3, #12
 8004bf4:	d10e      	bne.n	8004c14 <BNO_CalibrationStatus+0x80>
				if(Calibrated){
 8004bf6:	4b28      	ldr	r3, [pc, #160]	@ (8004c98 <BNO_CalibrationStatus+0x104>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <BNO_CalibrationStatus+0x78>
					CalibrationFlag = 0;
 8004bfe:	4b24      	ldr	r3, [pc, #144]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
					BNO_CurrentState = Operation;
 8004c04:	4b25      	ldr	r3, [pc, #148]	@ (8004c9c <BNO_CalibrationStatus+0x108>)
 8004c06:	2203      	movs	r2, #3
 8004c08:	701a      	strb	r2, [r3, #0]
				}
				else CalibrationFlag = 3;
			}
			else CalibrationFlag = 1;
			break;
 8004c0a:	e03f      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
				else CalibrationFlag = 3;
 8004c0c:	4b20      	ldr	r3, [pc, #128]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004c0e:	2203      	movs	r2, #3
 8004c10:	701a      	strb	r2, [r3, #0]
			break;
 8004c12:	e03b      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 1;
 8004c14:	4b1e      	ldr	r3, [pc, #120]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
			break;
 8004c1a:	e037      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
		case 3:
			BNO_Read(BNO055_CALIB_STAT, 1);
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	2035      	movs	r0, #53	@ 0x35
 8004c20:	f7ff fb86 	bl	8004330 <BNO_Read>
			if(IMU.CalSatus.Full == 0xFF){
 8004c24:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <BNO_CalibrationStatus+0x100>)
 8004c26:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004c2a:	2bff      	cmp	r3, #255	@ 0xff
 8004c2c:	d12d      	bne.n	8004c8a <BNO_CalibrationStatus+0xf6>
				CalibrationFlag = 4;
 8004c2e:	4b18      	ldr	r3, [pc, #96]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004c30:	2204      	movs	r2, #4
 8004c32:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004c34:	e029      	b.n	8004c8a <BNO_CalibrationStatus+0xf6>
		case 4:
			bno055_setOperationModeConfig();
 8004c36:	f7ff fef9 	bl	8004a2c <bno055_setOperationModeConfig>
			CalibrationFlag = 5;
 8004c3a:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004c3c:	2205      	movs	r2, #5
 8004c3e:	701a      	strb	r2, [r3, #0]
			break;
 8004c40:	e024      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
		case 5:
			BNO_Read(BNO055_OPR_MODE, 1);
 8004c42:	2101      	movs	r1, #1
 8004c44:	203d      	movs	r0, #61	@ 0x3d
 8004c46:	f7ff fb73 	bl	8004330 <BNO_Read>
			if(IMU.Op_Mode == BNO055_OPERATION_MODE_CONFIG){
 8004c4a:	4b12      	ldr	r3, [pc, #72]	@ (8004c94 <BNO_CalibrationStatus+0x100>)
 8004c4c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d103      	bne.n	8004c5c <BNO_CalibrationStatus+0xc8>
				CalibrationFlag = 6;
 8004c54:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004c56:	2206      	movs	r2, #6
 8004c58:	701a      	strb	r2, [r3, #0]

			}
			else CalibrationFlag = 4;
			break;
 8004c5a:	e017      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
			else CalibrationFlag = 4;
 8004c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004c5e:	2204      	movs	r2, #4
 8004c60:	701a      	strb	r2, [r3, #0]
			break;
 8004c62:	e013      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
		case 6:
			BNO_GetCalibrationData();
 8004c64:	f7ff fef0 	bl	8004a48 <BNO_GetCalibrationData>
			Calibrated = 1;
 8004c68:	4b0b      	ldr	r3, [pc, #44]	@ (8004c98 <BNO_CalibrationStatus+0x104>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]
			CalibrationFlag = 1;
 8004c6e:	4b08      	ldr	r3, [pc, #32]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	701a      	strb	r2, [r3, #0]
			break;
 8004c74:	e00a      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
		case 7:
			BNO_SetCalibrationData();
 8004c76:	f7ff feef 	bl	8004a58 <BNO_SetCalibrationData>
			CalibrationFlag = 1;
 8004c7a:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	701a      	strb	r2, [r3, #0]
			break;
 8004c80:	e004      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
		default:
			CalibrationFlag = 0;
 8004c82:	4b03      	ldr	r3, [pc, #12]	@ (8004c90 <BNO_CalibrationStatus+0xfc>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]
			break;
 8004c88:	e000      	b.n	8004c8c <BNO_CalibrationStatus+0xf8>
			break;
 8004c8a:	bf00      	nop
    	BNO_CurrentState = Operation;
    }
    else bno055_setOperationModeNDOF();
    */

}
 8004c8c:	bf00      	nop
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	24001681 	.word	0x24001681
 8004c94:	24001620 	.word	0x24001620
 8004c98:	24000008 	.word	0x24000008
 8004c9c:	2400161c 	.word	0x2400161c

08004ca0 <BNO_GetData>:

void BNO_GetData(void){
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	af00      	add	r7, sp, #0
	BNO_Read(BNO055_ACC_DATA_X_LSB,24);
 8004ca4:	2118      	movs	r1, #24
 8004ca6:	2008      	movs	r0, #8
 8004ca8:	f7ff fb42 	bl	8004330 <BNO_Read>
}
 8004cac:	bf00      	nop
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <BNO_Receive>:

void BNO_Receive(uint8_t Buffer){
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	71fb      	strb	r3, [r7, #7]
	static uint8_t MsgSize = 0;
	static uint8_t Counter = 0;

	BNO_ComsCounter = 0;
 8004cba:	4b2c      	ldr	r3, [pc, #176]	@ (8004d6c <BNO_Receive+0xbc>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]

	switch (BNO_Rx_Status) {
 8004cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004d70 <BNO_Receive+0xc0>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2bff      	cmp	r3, #255	@ 0xff
 8004cc6:	d027      	beq.n	8004d18 <BNO_Receive+0x68>
 8004cc8:	2bff      	cmp	r3, #255	@ 0xff
 8004cca:	dc46      	bgt.n	8004d5a <BNO_Receive+0xaa>
 8004ccc:	2bee      	cmp	r3, #238	@ 0xee
 8004cce:	d017      	beq.n	8004d00 <BNO_Receive+0x50>
 8004cd0:	2bee      	cmp	r3, #238	@ 0xee
 8004cd2:	dc42      	bgt.n	8004d5a <BNO_Receive+0xaa>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <BNO_Receive+0x2e>
 8004cd8:	2bbb      	cmp	r3, #187	@ 0xbb
 8004cda:	d00a      	beq.n	8004cf2 <BNO_Receive+0x42>
				BNO_EmptyingBuffer();
			}

			break;
		default:
			break;
 8004cdc:	e03d      	b.n	8004d5a <BNO_Receive+0xaa>
			if(Buffer == Read_Response || Buffer == Header) BNO_Rx_Status = Buffer;
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	2bbb      	cmp	r3, #187	@ 0xbb
 8004ce2:	d002      	beq.n	8004cea <BNO_Receive+0x3a>
 8004ce4:	79fb      	ldrb	r3, [r7, #7]
 8004ce6:	2bee      	cmp	r3, #238	@ 0xee
 8004ce8:	d139      	bne.n	8004d5e <BNO_Receive+0xae>
 8004cea:	4a21      	ldr	r2, [pc, #132]	@ (8004d70 <BNO_Receive+0xc0>)
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	7013      	strb	r3, [r2, #0]
			break;
 8004cf0:	e035      	b.n	8004d5e <BNO_Receive+0xae>
			MsgSize = Buffer;
 8004cf2:	4a20      	ldr	r2, [pc, #128]	@ (8004d74 <BNO_Receive+0xc4>)
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = Emptying_Buffer;
 8004cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d70 <BNO_Receive+0xc0>)
 8004cfa:	22ff      	movs	r2, #255	@ 0xff
 8004cfc:	701a      	strb	r2, [r3, #0]
			break;
 8004cfe:	e031      	b.n	8004d64 <BNO_Receive+0xb4>
			BNO_ErrorHandler = Buffer;
 8004d00:	4a1d      	ldr	r2, [pc, #116]	@ (8004d78 <BNO_Receive+0xc8>)
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	7013      	strb	r3, [r2, #0]
			BNO_Rx_Status = AwaitingMsg;
 8004d06:	4b1a      	ldr	r3, [pc, #104]	@ (8004d70 <BNO_Receive+0xc0>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
			memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8004d0c:	22ff      	movs	r2, #255	@ 0xff
 8004d0e:	2100      	movs	r1, #0
 8004d10:	481a      	ldr	r0, [pc, #104]	@ (8004d7c <BNO_Receive+0xcc>)
 8004d12:	f012 f9b0 	bl	8017076 <memset>
			break;
 8004d16:	e025      	b.n	8004d64 <BNO_Receive+0xb4>
			BNO_RxBuffer[Counter + 1] = Buffer;
 8004d18:	4b19      	ldr	r3, [pc, #100]	@ (8004d80 <BNO_Receive+0xd0>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	4917      	ldr	r1, [pc, #92]	@ (8004d7c <BNO_Receive+0xcc>)
 8004d20:	79fa      	ldrb	r2, [r7, #7]
 8004d22:	54ca      	strb	r2, [r1, r3]
			Counter++;
 8004d24:	4b16      	ldr	r3, [pc, #88]	@ (8004d80 <BNO_Receive+0xd0>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <BNO_Receive+0xd0>)
 8004d2e:	701a      	strb	r2, [r3, #0]
			if(Counter == MsgSize){
 8004d30:	4b13      	ldr	r3, [pc, #76]	@ (8004d80 <BNO_Receive+0xd0>)
 8004d32:	781a      	ldrb	r2, [r3, #0]
 8004d34:	4b0f      	ldr	r3, [pc, #60]	@ (8004d74 <BNO_Receive+0xc4>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d112      	bne.n	8004d62 <BNO_Receive+0xb2>
				Counter = 0;
 8004d3c:	4b10      	ldr	r3, [pc, #64]	@ (8004d80 <BNO_Receive+0xd0>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]
				MsgSize = 0;
 8004d42:	4b0c      	ldr	r3, [pc, #48]	@ (8004d74 <BNO_Receive+0xc4>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
				BNO_Rx_Status = AwaitingMsg;
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <BNO_Receive+0xc0>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	701a      	strb	r2, [r3, #0]
				BNO_ErrorHandler = ReadSucces;
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d78 <BNO_Receive+0xc8>)
 8004d50:	220b      	movs	r2, #11
 8004d52:	701a      	strb	r2, [r3, #0]
				BNO_EmptyingBuffer();
 8004d54:	f7ff fe20 	bl	8004998 <BNO_EmptyingBuffer>
			break;
 8004d58:	e003      	b.n	8004d62 <BNO_Receive+0xb2>
			break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <BNO_Receive+0xb4>
			break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <BNO_Receive+0xb4>
			break;
 8004d62:	bf00      	nop
	}
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	2400161a 	.word	0x2400161a
 8004d70:	24001618 	.word	0x24001618
 8004d74:	24001682 	.word	0x24001682
 8004d78:	24001619 	.word	0x24001619
 8004d7c:	24001518 	.word	0x24001518
 8004d80:	24001683 	.word	0x24001683

08004d84 <BNO_FaultManager>:

void BNO_FaultManager(void){
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
	if(BNO_ComsCounter > 3){
 8004d8a:	4b13      	ldr	r3, [pc, #76]	@ (8004dd8 <BNO_FaultManager+0x54>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d90f      	bls.n	8004db2 <BNO_FaultManager+0x2e>
		Reset_UART(&huart3);
 8004d92:	4812      	ldr	r0, [pc, #72]	@ (8004ddc <BNO_FaultManager+0x58>)
 8004d94:	f7fe fd7c 	bl	8003890 <Reset_UART>
		BNO_Rx_Status = AwaitingMsg;
 8004d98:	4b11      	ldr	r3, [pc, #68]	@ (8004de0 <BNO_FaultManager+0x5c>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&huart3, &BNO_BufferByte,1);
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4910      	ldr	r1, [pc, #64]	@ (8004de4 <BNO_FaultManager+0x60>)
 8004da2:	480e      	ldr	r0, [pc, #56]	@ (8004ddc <BNO_FaultManager+0x58>)
 8004da4:	f00a f882 	bl	800eeac <HAL_UART_Receive_DMA>
		memset(BNO_RxBuffer, 0, sizeof(BNO_RxBuffer));
 8004da8:	22ff      	movs	r2, #255	@ 0xff
 8004daa:	2100      	movs	r1, #0
 8004dac:	480e      	ldr	r0, [pc, #56]	@ (8004de8 <BNO_FaultManager+0x64>)
 8004dae:	f012 f962 	bl	8017076 <memset>
	}
	if(BNO_ErrorHandler == WRONG_START_BYTE){
 8004db2:	4b0e      	ldr	r3, [pc, #56]	@ (8004dec <BNO_FaultManager+0x68>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b06      	cmp	r3, #6
 8004db8:	d10a      	bne.n	8004dd0 <BNO_FaultManager+0x4c>
		uint8_t Buffer = 0x00;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	71fb      	strb	r3, [r7, #7]

		HAL_UART_Transmit_IT(&huart3, &Buffer, 1);
 8004dbe:	1dfb      	adds	r3, r7, #7
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4805      	ldr	r0, [pc, #20]	@ (8004ddc <BNO_FaultManager+0x58>)
 8004dc6:	f009 ff91 	bl	800ecec <HAL_UART_Transmit_IT>
		BNO_ErrorHandler = 0;
 8004dca:	4b08      	ldr	r3, [pc, #32]	@ (8004dec <BNO_FaultManager+0x68>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
	}
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	2400161a 	.word	0x2400161a
 8004ddc:	24001250 	.word	0x24001250
 8004de0:	24001618 	.word	0x24001618
 8004de4:	24001617 	.word	0x24001617
 8004de8:	24001518 	.word	0x24001518
 8004dec:	24001619 	.word	0x24001619

08004df0 <BNO_Tasks>:

void BNO_Tasks(void){
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
	if(BNO_DelayCounter == 0){
 8004df4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e64 <BNO_Tasks+0x74>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d128      	bne.n	8004e4e <BNO_Tasks+0x5e>
		switch (BNO_CurrentState) {
 8004dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e68 <BNO_Tasks+0x78>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d81c      	bhi.n	8004e3e <BNO_Tasks+0x4e>
 8004e04:	a201      	add	r2, pc, #4	@ (adr r2, 8004e0c <BNO_Tasks+0x1c>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e21 	.word	0x08004e21
 8004e10:	08004e2d 	.word	0x08004e2d
 8004e14:	08004e33 	.word	0x08004e33
 8004e18:	08004e39 	.word	0x08004e39
 8004e1c:	08004e27 	.word	0x08004e27
			case Init:
				BNO_Init();
 8004e20:	f7ff fe52 	bl	8004ac8 <BNO_Init>
				break;
 8004e24:	e00c      	b.n	8004e40 <BNO_Tasks+0x50>
			case Reset:
				BNO_SWReset();
 8004e26:	f7ff fdd3 	bl	80049d0 <BNO_SWReset>
			break;
 8004e2a:	e009      	b.n	8004e40 <BNO_Tasks+0x50>
			case Configuration:
				BNO_Config();
 8004e2c:	f7ff fe68 	bl	8004b00 <BNO_Config>
				break;
 8004e30:	e006      	b.n	8004e40 <BNO_Tasks+0x50>
			case Calibration:
				BNO_CalibrationStatus();
 8004e32:	f7ff feaf 	bl	8004b94 <BNO_CalibrationStatus>
				break;
 8004e36:	e003      	b.n	8004e40 <BNO_Tasks+0x50>
			case Operation:
				BNO_GetData();
 8004e38:	f7ff ff32 	bl	8004ca0 <BNO_GetData>
				break;
 8004e3c:	e000      	b.n	8004e40 <BNO_Tasks+0x50>

			default:
				break;
 8004e3e:	bf00      	nop
		}
		++BNO_ComsCounter;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <BNO_Tasks+0x7c>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	4b08      	ldr	r3, [pc, #32]	@ (8004e6c <BNO_Tasks+0x7c>)
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	e005      	b.n	8004e5a <BNO_Tasks+0x6a>
	}
	else{
		--BNO_DelayCounter;
 8004e4e:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <BNO_Tasks+0x74>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4b03      	ldr	r3, [pc, #12]	@ (8004e64 <BNO_Tasks+0x74>)
 8004e58:	701a      	strb	r2, [r3, #0]
	}
	BNO_FaultManager();
 8004e5a:	f7ff ff93 	bl	8004d84 <BNO_FaultManager>
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	2400161b 	.word	0x2400161b
 8004e68:	2400161c 	.word	0x2400161c
 8004e6c:	2400161a 	.word	0x2400161a

08004e70 <LED_blink>:

		.G_LED.LED_GPIO_GPIOx = LED_5_GPIO_Port,
		.G_LED.LED_GPIO_Pin   = LED_5_Pin
};

LED_config_t LED_blink(LED_config_t LED){
 8004e70:	b084      	sub	sp, #16
 8004e72:	b590      	push	{r4, r7, lr}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	f107 001c 	add.w	r0, r7, #28
 8004e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

		switch (LED.Blink_status) {
 8004e82:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <LED_blink+0x20>
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d010      	beq.n	8004eb0 <LED_blink+0x40>
 8004e8e:	e01f      	b.n	8004ed0 <LED_blink+0x60>
			case 0x00:
				if(LED.count >= LED.Time_Off){
 8004e90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004e92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d31f      	bcc.n	8004ed8 <LED_blink+0x68>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	8c39      	ldrh	r1, [r7, #32]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f004 fc70 	bl	8009784 <HAL_GPIO_WritePin>
					LED.Blink_status = 1;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8004eae:	e013      	b.n	8004ed8 <LED_blink+0x68>
			case 0x01:
				if(LED.count >= LED.Time_On){
 8004eb0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004eb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d311      	bcc.n	8004edc <LED_blink+0x6c>
					HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	8c39      	ldrh	r1, [r7, #32]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f004 fc60 	bl	8009784 <HAL_GPIO_WritePin>
					LED.Blink_status = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
					LED.count = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	853b      	strh	r3, [r7, #40]	@ 0x28
				}
				break;
 8004ece:	e005      	b.n	8004edc <LED_blink+0x6c>
			default:
				LED.Blink_status = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				break;
 8004ed6:	e002      	b.n	8004ede <LED_blink+0x6e>
				break;
 8004ed8:	bf00      	nop
 8004eda:	e000      	b.n	8004ede <LED_blink+0x6e>
				break;
 8004edc:	bf00      	nop
		}

	LED.count++;
 8004ede:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	853b      	strh	r3, [r7, #40]	@ 0x28
	return LED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	461c      	mov	r4, r3
 8004eea:	f107 031c 	add.w	r3, r7, #28
 8004eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004efe:	b004      	add	sp, #16
 8004f00:	4770      	bx	lr

08004f02 <LED_Rutine>:

LED_config_t LED_Rutine(LED_config_t LED){
 8004f02:	b084      	sub	sp, #16
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	f107 001c 	add.w	r0, r7, #28
 8004f10:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(LED.LED_status == 1){
 8004f14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d117      	bne.n	8004f4c <LED_Rutine+0x4a>
		switch (LED.Sequence) {
 8004f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <LED_Rutine+0x28>
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d007      	beq.n	8004f38 <LED_Rutine+0x36>
				break;
			case Blink:
				LED = LED_blink(LED);
				break;
			default:
				break;
 8004f28:	e018      	b.n	8004f5c <LED_Rutine+0x5a>
				HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, SET);
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	8c39      	ldrh	r1, [r7, #32]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f004 fc27 	bl	8009784 <HAL_GPIO_WritePin>
				break;
 8004f36:	e011      	b.n	8004f5c <LED_Rutine+0x5a>
				LED = LED_blink(LED);
 8004f38:	f107 001c 	add.w	r0, r7, #28
 8004f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	f107 031c 	add.w	r3, r7, #28
 8004f44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f46:	f7ff ff93 	bl	8004e70 <LED_blink>
				break;
 8004f4a:	e007      	b.n	8004f5c <LED_Rutine+0x5a>
		}
	}
	else{
		HAL_GPIO_WritePin(LED.LED_GPIO_GPIOx, LED.LED_GPIO_Pin, RESET);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	8c39      	ldrh	r1, [r7, #32]
 8004f50:	2200      	movs	r2, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f004 fc16 	bl	8009784 <HAL_GPIO_WritePin>
		LED.count = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	return LED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	461c      	mov	r4, r3
 8004f60:	f107 031c 	add.w	r3, r7, #28
 8004f64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004f74:	b004      	add	sp, #16
 8004f76:	4770      	bx	lr

08004f78 <LED_Tasks>:

void LED_Tasks (void){
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af02      	add	r7, sp, #8
	LED_Info.R_LED = LED_Rutine(LED_Info.R_LED);
 8004f7e:	4c24      	ldr	r4, [pc, #144]	@ (8005010 <LED_Tasks+0x98>)
 8004f80:	4638      	mov	r0, r7
 8004f82:	4b23      	ldr	r3, [pc, #140]	@ (8005010 <LED_Tasks+0x98>)
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	9200      	str	r2, [sp, #0]
 8004f88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f8a:	f7ff ffba 	bl	8004f02 <LED_Rutine>
 8004f8e:	463b      	mov	r3, r7
 8004f90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED1 = LED_Rutine(LED_Info.B_LED1);
 8004f96:	4c1e      	ldr	r4, [pc, #120]	@ (8005010 <LED_Tasks+0x98>)
 8004f98:	4638      	mov	r0, r7
 8004f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005010 <LED_Tasks+0x98>)
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	9200      	str	r2, [sp, #0]
 8004fa0:	3310      	adds	r3, #16
 8004fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fa4:	f7ff ffad 	bl	8004f02 <LED_Rutine>
 8004fa8:	3410      	adds	r4, #16
 8004faa:	463b      	mov	r3, r7
 8004fac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED2 = LED_Rutine(LED_Info.B_LED2);
 8004fb2:	4c17      	ldr	r4, [pc, #92]	@ (8005010 <LED_Tasks+0x98>)
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	4b16      	ldr	r3, [pc, #88]	@ (8005010 <LED_Tasks+0x98>)
 8004fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fba:	9200      	str	r2, [sp, #0]
 8004fbc:	3320      	adds	r3, #32
 8004fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fc0:	f7ff ff9f 	bl	8004f02 <LED_Rutine>
 8004fc4:	3420      	adds	r4, #32
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.B_LED3 = LED_Rutine(LED_Info.B_LED3);
 8004fce:	4c10      	ldr	r4, [pc, #64]	@ (8005010 <LED_Tasks+0x98>)
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8005010 <LED_Tasks+0x98>)
 8004fd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fd6:	9200      	str	r2, [sp, #0]
 8004fd8:	3330      	adds	r3, #48	@ 0x30
 8004fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fdc:	f7ff ff91 	bl	8004f02 <LED_Rutine>
 8004fe0:	3430      	adds	r4, #48	@ 0x30
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004fe6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LED_Info.G_LED = LED_Rutine(LED_Info.G_LED);
 8004fea:	4c09      	ldr	r4, [pc, #36]	@ (8005010 <LED_Tasks+0x98>)
 8004fec:	4638      	mov	r0, r7
 8004fee:	4b08      	ldr	r3, [pc, #32]	@ (8005010 <LED_Tasks+0x98>)
 8004ff0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ff2:	9200      	str	r2, [sp, #0]
 8004ff4:	3340      	adds	r3, #64	@ 0x40
 8004ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ff8:	f7ff ff83 	bl	8004f02 <LED_Rutine>
 8004ffc:	3440      	adds	r4, #64	@ 0x40
 8004ffe:	463b      	mov	r3, r7
 8005000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	bd90      	pop	{r4, r7, pc}
 800500e:	bf00      	nop
 8005010:	2400000c 	.word	0x2400000c

08005014 <LR03_AT>:

uint8_t LR03_RxBuffer[256] = {0};

uint8_t Test_1;

void LR03_AT(void){
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0

	HAL_UART_Transmit_IT(&huart6, (uint8_t*)"+++\r\n", 5);
 8005018:	2205      	movs	r2, #5
 800501a:	4903      	ldr	r1, [pc, #12]	@ (8005028 <LR03_AT+0x14>)
 800501c:	4803      	ldr	r0, [pc, #12]	@ (800502c <LR03_AT+0x18>)
 800501e:	f009 fe65 	bl	800ecec <HAL_UART_Transmit_IT>
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	08019168 	.word	0x08019168
 800502c:	240012e4 	.word	0x240012e4

08005030 <LR03_Level>:

void LR03_Level(uint8_t Level){
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	71fb      	strb	r3, [r7, #7]
	static uint8_t Level_Command[] = {"AT+LEVEL7\r\n"};
	if(Level > 7) Level = 7;
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	2b07      	cmp	r3, #7
 800503e:	d901      	bls.n	8005044 <LR03_Level+0x14>
 8005040:	2307      	movs	r3, #7
 8005042:	71fb      	strb	r3, [r7, #7]
	if(Level < 1) Level = 1;
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <LR03_Level+0x1e>
 800504a:	2301      	movs	r3, #1
 800504c:	71fb      	strb	r3, [r7, #7]
	Level_Command[8] = Level + 48;
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	3330      	adds	r3, #48	@ 0x30
 8005052:	b2da      	uxtb	r2, r3
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <LR03_Level+0x3c>)
 8005056:	721a      	strb	r2, [r3, #8]
	HAL_UART_Transmit_IT(&huart6, Level_Command, 11);
 8005058:	220b      	movs	r2, #11
 800505a:	4904      	ldr	r1, [pc, #16]	@ (800506c <LR03_Level+0x3c>)
 800505c:	4804      	ldr	r0, [pc, #16]	@ (8005070 <LR03_Level+0x40>)
 800505e:	f009 fe45 	bl	800ecec <HAL_UART_Transmit_IT>
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	2400005c 	.word	0x2400005c
 8005070:	240012e4 	.word	0x240012e4

08005074 <LR03_Receive>:

void LR03_Receive(uint8_t Data){
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	71fb      	strb	r3, [r7, #7]
	static uint8_t DataPointer = 0;
	LR03_RxBuffer[DataPointer] = Data;
 800507e:	4b09      	ldr	r3, [pc, #36]	@ (80050a4 <LR03_Receive+0x30>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	4619      	mov	r1, r3
 8005084:	4a08      	ldr	r2, [pc, #32]	@ (80050a8 <LR03_Receive+0x34>)
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	5453      	strb	r3, [r2, r1]
	DataPointer++;
 800508a:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <LR03_Receive+0x30>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	3301      	adds	r3, #1
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b04      	ldr	r3, [pc, #16]	@ (80050a4 <LR03_Receive+0x30>)
 8005094:	701a      	strb	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	24001785 	.word	0x24001785
 80050a8:	24001684 	.word	0x24001684

080050ac <LR03_StateMachine>:

void LR03_StateMachine(void){
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0

	switch (Test_1) {
 80050b0:	4b09      	ldr	r3, [pc, #36]	@ (80050d8 <LR03_StateMachine+0x2c>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d002      	beq.n	80050be <LR03_StateMachine+0x12>
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d003      	beq.n	80050c4 <LR03_StateMachine+0x18>
			break;
		case 2:
			LR03_Level(7);
			break;
		default:
			break;
 80050bc:	e006      	b.n	80050cc <LR03_StateMachine+0x20>
			LR03_AT();
 80050be:	f7ff ffa9 	bl	8005014 <LR03_AT>
			break;
 80050c2:	e003      	b.n	80050cc <LR03_StateMachine+0x20>
			LR03_Level(7);
 80050c4:	2007      	movs	r0, #7
 80050c6:	f7ff ffb3 	bl	8005030 <LR03_Level>
			break;
 80050ca:	bf00      	nop
	}
	Test_1 = 0;
 80050cc:	4b02      	ldr	r3, [pc, #8]	@ (80050d8 <LR03_StateMachine+0x2c>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
}
 80050d2:	bf00      	nop
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	24001784 	.word	0x24001784

080050dc <PWM_Assign>:
Servo_mgmt_s PWM_Output = {
	    .S = {1500, 1500, 1500, 1500, 1500,
	          1500, 1500, 1500, 1500, 1500}
	};

void PWM_Assign(void) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
    // Timer 2 (Canales 1, 2, 10, 9)
    TIM2->CCR1 = PWM_Output.S[0];  // Canal_1 (S[0])
 80050e0:	4b2a      	ldr	r3, [pc, #168]	@ (800518c <PWM_Assign+0xb0>)
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80050e8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = PWM_Output.S[1];  // Canal_2 (S[1])
 80050ea:	4b28      	ldr	r3, [pc, #160]	@ (800518c <PWM_Assign+0xb0>)
 80050ec:	885a      	ldrh	r2, [r3, #2]
 80050ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80050f2:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = PWM_Output.S[9];  // Canal_10 (S[9])
 80050f4:	4b25      	ldr	r3, [pc, #148]	@ (800518c <PWM_Assign+0xb0>)
 80050f6:	8a5a      	ldrh	r2, [r3, #18]
 80050f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80050fc:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2->CCR4 = PWM_Output.S[8];  // Canal_9 (S[8])
 80050fe:	4b23      	ldr	r3, [pc, #140]	@ (800518c <PWM_Assign+0xb0>)
 8005100:	8a1a      	ldrh	r2, [r3, #16]
 8005102:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005106:	641a      	str	r2, [r3, #64]	@ 0x40

    // Timer 3 (Canales 3, 4)
    TIM3->CCR1 = PWM_Output.S[2];  // Canal_3 (S[2])
 8005108:	4b20      	ldr	r3, [pc, #128]	@ (800518c <PWM_Assign+0xb0>)
 800510a:	889a      	ldrh	r2, [r3, #4]
 800510c:	4b20      	ldr	r3, [pc, #128]	@ (8005190 <PWM_Assign+0xb4>)
 800510e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = PWM_Output.S[3];  // Canal_4 (S[3])
 8005110:	4b1e      	ldr	r3, [pc, #120]	@ (800518c <PWM_Assign+0xb0>)
 8005112:	88da      	ldrh	r2, [r3, #6]
 8005114:	4b1e      	ldr	r3, [pc, #120]	@ (8005190 <PWM_Assign+0xb4>)
 8005116:	639a      	str	r2, [r3, #56]	@ 0x38

    // Timer 4 (Canales 5-8)
    TIM4->CCR1 = PWM_Output.S[4];  // Canal_5 (S[4])
 8005118:	4b1c      	ldr	r3, [pc, #112]	@ (800518c <PWM_Assign+0xb0>)
 800511a:	891a      	ldrh	r2, [r3, #8]
 800511c:	4b1d      	ldr	r3, [pc, #116]	@ (8005194 <PWM_Assign+0xb8>)
 800511e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = PWM_Output.S[5];  // Canal_6 (S[5])
 8005120:	4b1a      	ldr	r3, [pc, #104]	@ (800518c <PWM_Assign+0xb0>)
 8005122:	895a      	ldrh	r2, [r3, #10]
 8005124:	4b1b      	ldr	r3, [pc, #108]	@ (8005194 <PWM_Assign+0xb8>)
 8005126:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR3 = PWM_Output.S[6];  // Canal_7 (S[6])
 8005128:	4b18      	ldr	r3, [pc, #96]	@ (800518c <PWM_Assign+0xb0>)
 800512a:	899a      	ldrh	r2, [r3, #12]
 800512c:	4b19      	ldr	r3, [pc, #100]	@ (8005194 <PWM_Assign+0xb8>)
 800512e:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM4->CCR4 = PWM_Output.S[7];  // Canal_8 (S[7])
 8005130:	4b16      	ldr	r3, [pc, #88]	@ (800518c <PWM_Assign+0xb0>)
 8005132:	89da      	ldrh	r2, [r3, #14]
 8005134:	4b17      	ldr	r3, [pc, #92]	@ (8005194 <PWM_Assign+0xb8>)
 8005136:	641a      	str	r2, [r3, #64]	@ 0x40

    // Iniciar PWM (igual que antes)
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005138:	2100      	movs	r1, #0
 800513a:	4817      	ldr	r0, [pc, #92]	@ (8005198 <PWM_Assign+0xbc>)
 800513c:	f008 fd58 	bl	800dbf0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005140:	2104      	movs	r1, #4
 8005142:	4815      	ldr	r0, [pc, #84]	@ (8005198 <PWM_Assign+0xbc>)
 8005144:	f008 fd54 	bl	800dbf0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8005148:	2108      	movs	r1, #8
 800514a:	4813      	ldr	r0, [pc, #76]	@ (8005198 <PWM_Assign+0xbc>)
 800514c:	f008 fd50 	bl	800dbf0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8005150:	210c      	movs	r1, #12
 8005152:	4811      	ldr	r0, [pc, #68]	@ (8005198 <PWM_Assign+0xbc>)
 8005154:	f008 fd4c 	bl	800dbf0 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005158:	2100      	movs	r1, #0
 800515a:	4810      	ldr	r0, [pc, #64]	@ (800519c <PWM_Assign+0xc0>)
 800515c:	f008 fd48 	bl	800dbf0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005160:	2104      	movs	r1, #4
 8005162:	480e      	ldr	r0, [pc, #56]	@ (800519c <PWM_Assign+0xc0>)
 8005164:	f008 fd44 	bl	800dbf0 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005168:	2100      	movs	r1, #0
 800516a:	480d      	ldr	r0, [pc, #52]	@ (80051a0 <PWM_Assign+0xc4>)
 800516c:	f008 fd40 	bl	800dbf0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005170:	2104      	movs	r1, #4
 8005172:	480b      	ldr	r0, [pc, #44]	@ (80051a0 <PWM_Assign+0xc4>)
 8005174:	f008 fd3c 	bl	800dbf0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005178:	2108      	movs	r1, #8
 800517a:	4809      	ldr	r0, [pc, #36]	@ (80051a0 <PWM_Assign+0xc4>)
 800517c:	f008 fd38 	bl	800dbf0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8005180:	210c      	movs	r1, #12
 8005182:	4807      	ldr	r0, [pc, #28]	@ (80051a0 <PWM_Assign+0xc4>)
 8005184:	f008 fd34 	bl	800dbf0 <HAL_TIM_PWM_Start>
}
 8005188:	bf00      	nop
 800518a:	bd80      	pop	{r7, pc}
 800518c:	24000068 	.word	0x24000068
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	24000ff8 	.word	0x24000ff8
 800519c:	24001044 	.word	0x24001044
 80051a0:	24001090 	.word	0x24001090

080051a4 <SBUS_init>:

extern UART_HandleTypeDef huart1;
#define SBUS_UART_handler &huart1


void SBUS_init(void){
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(SBUS_UART_handler, &SBUS_RxBuffer, 1);
 80051a8:	2201      	movs	r2, #1
 80051aa:	4903      	ldr	r1, [pc, #12]	@ (80051b8 <SBUS_init+0x14>)
 80051ac:	4803      	ldr	r0, [pc, #12]	@ (80051bc <SBUS_init+0x18>)
 80051ae:	f009 fe7d 	bl	800eeac <HAL_UART_Receive_DMA>

}
 80051b2:	bf00      	nop
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	240017a1 	.word	0x240017a1
 80051bc:	240011bc 	.word	0x240011bc

080051c0 <SBUS_Receive>:

void SBUS_Receive(uint8_t SBUS_RxBuffer){
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	71fb      	strb	r3, [r7, #7]
	static uint8_t Actual_status = 0;
	static uint8_t RxCount;

	switch (Actual_status) {
 80051ca:	4b20      	ldr	r3, [pc, #128]	@ (800524c <SBUS_Receive+0x8c>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <SBUS_Receive+0x18>
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d017      	beq.n	8005206 <SBUS_Receive+0x46>
 80051d6:	e02f      	b.n	8005238 <SBUS_Receive+0x78>
		case 0:
			if(SBUS_RxBuffer == 0x0F){
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	2b0f      	cmp	r3, #15
 80051dc:	d10f      	bne.n	80051fe <SBUS_Receive+0x3e>
				SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 80051de:	4b1c      	ldr	r3, [pc, #112]	@ (8005250 <SBUS_Receive+0x90>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	4619      	mov	r1, r3
 80051e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005254 <SBUS_Receive+0x94>)
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	5453      	strb	r3, [r2, r1]
				Actual_status = 1;
 80051ea:	4b18      	ldr	r3, [pc, #96]	@ (800524c <SBUS_Receive+0x8c>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	701a      	strb	r2, [r3, #0]
				RxCount++;
 80051f0:	4b17      	ldr	r3, [pc, #92]	@ (8005250 <SBUS_Receive+0x90>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	4b15      	ldr	r3, [pc, #84]	@ (8005250 <SBUS_Receive+0x90>)
 80051fa:	701a      	strb	r2, [r3, #0]
			}
			else{
				RxCount = 0;
			}
			break;
 80051fc:	e021      	b.n	8005242 <SBUS_Receive+0x82>
				RxCount = 0;
 80051fe:	4b14      	ldr	r3, [pc, #80]	@ (8005250 <SBUS_Receive+0x90>)
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]
			break;
 8005204:	e01d      	b.n	8005242 <SBUS_Receive+0x82>
		case 1:
			SBUS_UART_Rx[RxCount] = SBUS_RxBuffer;
 8005206:	4b12      	ldr	r3, [pc, #72]	@ (8005250 <SBUS_Receive+0x90>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	4619      	mov	r1, r3
 800520c:	4a11      	ldr	r2, [pc, #68]	@ (8005254 <SBUS_Receive+0x94>)
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	5453      	strb	r3, [r2, r1]
			RxCount++;
 8005212:	4b0f      	ldr	r3, [pc, #60]	@ (8005250 <SBUS_Receive+0x90>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4b0d      	ldr	r3, [pc, #52]	@ (8005250 <SBUS_Receive+0x90>)
 800521c:	701a      	strb	r2, [r3, #0]
			if(RxCount == 24){
 800521e:	4b0c      	ldr	r3, [pc, #48]	@ (8005250 <SBUS_Receive+0x90>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b18      	cmp	r3, #24
 8005224:	d10c      	bne.n	8005240 <SBUS_Receive+0x80>
				RxCount = 0;
 8005226:	4b0a      	ldr	r3, [pc, #40]	@ (8005250 <SBUS_Receive+0x90>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
				Actual_status = 0;
 800522c:	4b07      	ldr	r3, [pc, #28]	@ (800524c <SBUS_Receive+0x8c>)
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
				SBUS_getData();
 8005232:	f000 f811 	bl	8005258 <SBUS_getData>
			}
			break;
 8005236:	e003      	b.n	8005240 <SBUS_Receive+0x80>
		default:
			Actual_status = 0;
 8005238:	4b04      	ldr	r3, [pc, #16]	@ (800524c <SBUS_Receive+0x8c>)
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
			break;
 800523e:	e000      	b.n	8005242 <SBUS_Receive+0x82>
			break;
 8005240:	bf00      	nop
	}
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	240017a2 	.word	0x240017a2
 8005250:	240017a3 	.word	0x240017a3
 8005254:	24001788 	.word	0x24001788

08005258 <SBUS_getData>:


void SBUS_getData(void){
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
	//Se hace el corrimiento de bits para dar la estructura de los 16 canales, donde cada canal esta compuesto por 11 bits
	//pero cada paquete es de 1 byte. Para cada canal se utilizan los 8 bits (O los que correspondan) de el byte 1
	//(O el que corresponda) como los bits menos significativos del canal 1, y los tres bits faltantes se toman los 3 bits
	// menos significativos (O los que correspondan) del byte 2 y se colocan como los 3 bits más significativos del canal 1.
	Radio_input.Canal_1 = ((SBUS_UART_Rx[1] | SBUS_UART_Rx[2] << 8) & 0x07FF);
 800525c:	4b95      	ldr	r3, [pc, #596]	@ (80054b4 <SBUS_getData+0x25c>)
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	b21a      	sxth	r2, r3
 8005262:	4b94      	ldr	r3, [pc, #592]	@ (80054b4 <SBUS_getData+0x25c>)
 8005264:	789b      	ldrb	r3, [r3, #2]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	b21b      	sxth	r3, r3
 800526a:	4313      	orrs	r3, r2
 800526c:	b21b      	sxth	r3, r3
 800526e:	b29b      	uxth	r3, r3
 8005270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005274:	b29a      	uxth	r2, r3
 8005276:	4b90      	ldr	r3, [pc, #576]	@ (80054b8 <SBUS_getData+0x260>)
 8005278:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = ((SBUS_UART_Rx[2] >> 3 | SBUS_UART_Rx[3] << 5) & 0x07FF);
 800527a:	4b8e      	ldr	r3, [pc, #568]	@ (80054b4 <SBUS_getData+0x25c>)
 800527c:	789b      	ldrb	r3, [r3, #2]
 800527e:	08db      	lsrs	r3, r3, #3
 8005280:	b2db      	uxtb	r3, r3
 8005282:	b21a      	sxth	r2, r3
 8005284:	4b8b      	ldr	r3, [pc, #556]	@ (80054b4 <SBUS_getData+0x25c>)
 8005286:	78db      	ldrb	r3, [r3, #3]
 8005288:	015b      	lsls	r3, r3, #5
 800528a:	b21b      	sxth	r3, r3
 800528c:	4313      	orrs	r3, r2
 800528e:	b21b      	sxth	r3, r3
 8005290:	b29b      	uxth	r3, r3
 8005292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005296:	b29a      	uxth	r2, r3
 8005298:	4b87      	ldr	r3, [pc, #540]	@ (80054b8 <SBUS_getData+0x260>)
 800529a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = ((SBUS_UART_Rx[3] >> 6 | SBUS_UART_Rx[4] << 2 | SBUS_UART_Rx[5] << 10) & 0x07FF);
 800529c:	4b85      	ldr	r3, [pc, #532]	@ (80054b4 <SBUS_getData+0x25c>)
 800529e:	78db      	ldrb	r3, [r3, #3]
 80052a0:	099b      	lsrs	r3, r3, #6
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	b21a      	sxth	r2, r3
 80052a6:	4b83      	ldr	r3, [pc, #524]	@ (80054b4 <SBUS_getData+0x25c>)
 80052a8:	791b      	ldrb	r3, [r3, #4]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	b21b      	sxth	r3, r3
 80052ae:	4313      	orrs	r3, r2
 80052b0:	b21a      	sxth	r2, r3
 80052b2:	4b80      	ldr	r3, [pc, #512]	@ (80054b4 <SBUS_getData+0x25c>)
 80052b4:	795b      	ldrb	r3, [r3, #5]
 80052b6:	029b      	lsls	r3, r3, #10
 80052b8:	b21b      	sxth	r3, r3
 80052ba:	4313      	orrs	r3, r2
 80052bc:	b21b      	sxth	r3, r3
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	4b7c      	ldr	r3, [pc, #496]	@ (80054b8 <SBUS_getData+0x260>)
 80052c8:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = ((SBUS_UART_Rx[5] >> 1 | SBUS_UART_Rx[6] << 7) & 0x07FF);
 80052ca:	4b7a      	ldr	r3, [pc, #488]	@ (80054b4 <SBUS_getData+0x25c>)
 80052cc:	795b      	ldrb	r3, [r3, #5]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	b21a      	sxth	r2, r3
 80052d4:	4b77      	ldr	r3, [pc, #476]	@ (80054b4 <SBUS_getData+0x25c>)
 80052d6:	799b      	ldrb	r3, [r3, #6]
 80052d8:	01db      	lsls	r3, r3, #7
 80052da:	b21b      	sxth	r3, r3
 80052dc:	4313      	orrs	r3, r2
 80052de:	b21b      	sxth	r3, r3
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	4b73      	ldr	r3, [pc, #460]	@ (80054b8 <SBUS_getData+0x260>)
 80052ea:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = ((SBUS_UART_Rx[6] >> 4 | SBUS_UART_Rx[7] << 4) & 0x07FF);
 80052ec:	4b71      	ldr	r3, [pc, #452]	@ (80054b4 <SBUS_getData+0x25c>)
 80052ee:	799b      	ldrb	r3, [r3, #6]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	b21a      	sxth	r2, r3
 80052f6:	4b6f      	ldr	r3, [pc, #444]	@ (80054b4 <SBUS_getData+0x25c>)
 80052f8:	79db      	ldrb	r3, [r3, #7]
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	b21b      	sxth	r3, r3
 80052fe:	4313      	orrs	r3, r2
 8005300:	b21b      	sxth	r3, r3
 8005302:	b29b      	uxth	r3, r3
 8005304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005308:	b29a      	uxth	r2, r3
 800530a:	4b6b      	ldr	r3, [pc, #428]	@ (80054b8 <SBUS_getData+0x260>)
 800530c:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = ((SBUS_UART_Rx[7] >> 7 | SBUS_UART_Rx[8] << 1 | SBUS_UART_Rx[9] << 9) & 0x07FF);
 800530e:	4b69      	ldr	r3, [pc, #420]	@ (80054b4 <SBUS_getData+0x25c>)
 8005310:	79db      	ldrb	r3, [r3, #7]
 8005312:	09db      	lsrs	r3, r3, #7
 8005314:	b2db      	uxtb	r3, r3
 8005316:	b21a      	sxth	r2, r3
 8005318:	4b66      	ldr	r3, [pc, #408]	@ (80054b4 <SBUS_getData+0x25c>)
 800531a:	7a1b      	ldrb	r3, [r3, #8]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	b21b      	sxth	r3, r3
 8005320:	4313      	orrs	r3, r2
 8005322:	b21a      	sxth	r2, r3
 8005324:	4b63      	ldr	r3, [pc, #396]	@ (80054b4 <SBUS_getData+0x25c>)
 8005326:	7a5b      	ldrb	r3, [r3, #9]
 8005328:	025b      	lsls	r3, r3, #9
 800532a:	b21b      	sxth	r3, r3
 800532c:	4313      	orrs	r3, r2
 800532e:	b21b      	sxth	r3, r3
 8005330:	b29b      	uxth	r3, r3
 8005332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005336:	b29a      	uxth	r2, r3
 8005338:	4b5f      	ldr	r3, [pc, #380]	@ (80054b8 <SBUS_getData+0x260>)
 800533a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = ((SBUS_UART_Rx[9] >> 2 | SBUS_UART_Rx[10] << 6) & 0x07FF);
 800533c:	4b5d      	ldr	r3, [pc, #372]	@ (80054b4 <SBUS_getData+0x25c>)
 800533e:	7a5b      	ldrb	r3, [r3, #9]
 8005340:	089b      	lsrs	r3, r3, #2
 8005342:	b2db      	uxtb	r3, r3
 8005344:	b21a      	sxth	r2, r3
 8005346:	4b5b      	ldr	r3, [pc, #364]	@ (80054b4 <SBUS_getData+0x25c>)
 8005348:	7a9b      	ldrb	r3, [r3, #10]
 800534a:	019b      	lsls	r3, r3, #6
 800534c:	b21b      	sxth	r3, r3
 800534e:	4313      	orrs	r3, r2
 8005350:	b21b      	sxth	r3, r3
 8005352:	b29b      	uxth	r3, r3
 8005354:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005358:	b29a      	uxth	r2, r3
 800535a:	4b57      	ldr	r3, [pc, #348]	@ (80054b8 <SBUS_getData+0x260>)
 800535c:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = ((SBUS_UART_Rx[10] >> 5 | SBUS_UART_Rx[11] << 3) & 0x07FF);
 800535e:	4b55      	ldr	r3, [pc, #340]	@ (80054b4 <SBUS_getData+0x25c>)
 8005360:	7a9b      	ldrb	r3, [r3, #10]
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	b2db      	uxtb	r3, r3
 8005366:	b21a      	sxth	r2, r3
 8005368:	4b52      	ldr	r3, [pc, #328]	@ (80054b4 <SBUS_getData+0x25c>)
 800536a:	7adb      	ldrb	r3, [r3, #11]
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	b21b      	sxth	r3, r3
 8005370:	4313      	orrs	r3, r2
 8005372:	b21b      	sxth	r3, r3
 8005374:	b29b      	uxth	r3, r3
 8005376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800537a:	b29a      	uxth	r2, r3
 800537c:	4b4e      	ldr	r3, [pc, #312]	@ (80054b8 <SBUS_getData+0x260>)
 800537e:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = ((SBUS_UART_Rx[12] | SBUS_UART_Rx[13] << 8) & 0x07FF);
 8005380:	4b4c      	ldr	r3, [pc, #304]	@ (80054b4 <SBUS_getData+0x25c>)
 8005382:	7b1b      	ldrb	r3, [r3, #12]
 8005384:	b21a      	sxth	r2, r3
 8005386:	4b4b      	ldr	r3, [pc, #300]	@ (80054b4 <SBUS_getData+0x25c>)
 8005388:	7b5b      	ldrb	r3, [r3, #13]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	b21b      	sxth	r3, r3
 800538e:	4313      	orrs	r3, r2
 8005390:	b21b      	sxth	r3, r3
 8005392:	b29b      	uxth	r3, r3
 8005394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005398:	b29a      	uxth	r2, r3
 800539a:	4b47      	ldr	r3, [pc, #284]	@ (80054b8 <SBUS_getData+0x260>)
 800539c:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = ((SBUS_UART_Rx[13] >> 3 | SBUS_UART_Rx[14] << 5) & 0x07FF);
 800539e:	4b45      	ldr	r3, [pc, #276]	@ (80054b4 <SBUS_getData+0x25c>)
 80053a0:	7b5b      	ldrb	r3, [r3, #13]
 80053a2:	08db      	lsrs	r3, r3, #3
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	b21a      	sxth	r2, r3
 80053a8:	4b42      	ldr	r3, [pc, #264]	@ (80054b4 <SBUS_getData+0x25c>)
 80053aa:	7b9b      	ldrb	r3, [r3, #14]
 80053ac:	015b      	lsls	r3, r3, #5
 80053ae:	b21b      	sxth	r3, r3
 80053b0:	4313      	orrs	r3, r2
 80053b2:	b21b      	sxth	r3, r3
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	4b3e      	ldr	r3, [pc, #248]	@ (80054b8 <SBUS_getData+0x260>)
 80053be:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = ((SBUS_UART_Rx[14] >> 6 | SBUS_UART_Rx[15] << 2 | SBUS_UART_Rx[16] << 10) & 0x07FF);
 80053c0:	4b3c      	ldr	r3, [pc, #240]	@ (80054b4 <SBUS_getData+0x25c>)
 80053c2:	7b9b      	ldrb	r3, [r3, #14]
 80053c4:	099b      	lsrs	r3, r3, #6
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	b21a      	sxth	r2, r3
 80053ca:	4b3a      	ldr	r3, [pc, #232]	@ (80054b4 <SBUS_getData+0x25c>)
 80053cc:	7bdb      	ldrb	r3, [r3, #15]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b21a      	sxth	r2, r3
 80053d6:	4b37      	ldr	r3, [pc, #220]	@ (80054b4 <SBUS_getData+0x25c>)
 80053d8:	7c1b      	ldrb	r3, [r3, #16]
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	b21b      	sxth	r3, r3
 80053de:	4313      	orrs	r3, r2
 80053e0:	b21b      	sxth	r3, r3
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	4b33      	ldr	r3, [pc, #204]	@ (80054b8 <SBUS_getData+0x260>)
 80053ec:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = ((SBUS_UART_Rx[16] >> 1 | SBUS_UART_Rx[17] << 7) & 0x07FF);
 80053ee:	4b31      	ldr	r3, [pc, #196]	@ (80054b4 <SBUS_getData+0x25c>)
 80053f0:	7c1b      	ldrb	r3, [r3, #16]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	b21a      	sxth	r2, r3
 80053f8:	4b2e      	ldr	r3, [pc, #184]	@ (80054b4 <SBUS_getData+0x25c>)
 80053fa:	7c5b      	ldrb	r3, [r3, #17]
 80053fc:	01db      	lsls	r3, r3, #7
 80053fe:	b21b      	sxth	r3, r3
 8005400:	4313      	orrs	r3, r2
 8005402:	b21b      	sxth	r3, r3
 8005404:	b29b      	uxth	r3, r3
 8005406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800540a:	b29a      	uxth	r2, r3
 800540c:	4b2a      	ldr	r3, [pc, #168]	@ (80054b8 <SBUS_getData+0x260>)
 800540e:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = ((SBUS_UART_Rx[17] >> 4 | SBUS_UART_Rx[18] << 4) & 0x07FF);
 8005410:	4b28      	ldr	r3, [pc, #160]	@ (80054b4 <SBUS_getData+0x25c>)
 8005412:	7c5b      	ldrb	r3, [r3, #17]
 8005414:	091b      	lsrs	r3, r3, #4
 8005416:	b2db      	uxtb	r3, r3
 8005418:	b21a      	sxth	r2, r3
 800541a:	4b26      	ldr	r3, [pc, #152]	@ (80054b4 <SBUS_getData+0x25c>)
 800541c:	7c9b      	ldrb	r3, [r3, #18]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	b21b      	sxth	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b21b      	sxth	r3, r3
 8005426:	b29b      	uxth	r3, r3
 8005428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800542c:	b29a      	uxth	r2, r3
 800542e:	4b22      	ldr	r3, [pc, #136]	@ (80054b8 <SBUS_getData+0x260>)
 8005430:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = ((SBUS_UART_Rx[18] >> 7 | SBUS_UART_Rx[19] << 1 | SBUS_UART_Rx[20] << 9) & 0x07FF);
 8005432:	4b20      	ldr	r3, [pc, #128]	@ (80054b4 <SBUS_getData+0x25c>)
 8005434:	7c9b      	ldrb	r3, [r3, #18]
 8005436:	09db      	lsrs	r3, r3, #7
 8005438:	b2db      	uxtb	r3, r3
 800543a:	b21a      	sxth	r2, r3
 800543c:	4b1d      	ldr	r3, [pc, #116]	@ (80054b4 <SBUS_getData+0x25c>)
 800543e:	7cdb      	ldrb	r3, [r3, #19]
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	b21b      	sxth	r3, r3
 8005444:	4313      	orrs	r3, r2
 8005446:	b21a      	sxth	r2, r3
 8005448:	4b1a      	ldr	r3, [pc, #104]	@ (80054b4 <SBUS_getData+0x25c>)
 800544a:	7d1b      	ldrb	r3, [r3, #20]
 800544c:	025b      	lsls	r3, r3, #9
 800544e:	b21b      	sxth	r3, r3
 8005450:	4313      	orrs	r3, r2
 8005452:	b21b      	sxth	r3, r3
 8005454:	b29b      	uxth	r3, r3
 8005456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800545a:	b29a      	uxth	r2, r3
 800545c:	4b16      	ldr	r3, [pc, #88]	@ (80054b8 <SBUS_getData+0x260>)
 800545e:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = ((SBUS_UART_Rx[20] >> 2 | SBUS_UART_Rx[21] << 6) & 0x07FF);
 8005460:	4b14      	ldr	r3, [pc, #80]	@ (80054b4 <SBUS_getData+0x25c>)
 8005462:	7d1b      	ldrb	r3, [r3, #20]
 8005464:	089b      	lsrs	r3, r3, #2
 8005466:	b2db      	uxtb	r3, r3
 8005468:	b21a      	sxth	r2, r3
 800546a:	4b12      	ldr	r3, [pc, #72]	@ (80054b4 <SBUS_getData+0x25c>)
 800546c:	7d5b      	ldrb	r3, [r3, #21]
 800546e:	019b      	lsls	r3, r3, #6
 8005470:	b21b      	sxth	r3, r3
 8005472:	4313      	orrs	r3, r2
 8005474:	b21b      	sxth	r3, r3
 8005476:	b29b      	uxth	r3, r3
 8005478:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800547c:	b29a      	uxth	r2, r3
 800547e:	4b0e      	ldr	r3, [pc, #56]	@ (80054b8 <SBUS_getData+0x260>)
 8005480:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = ((SBUS_UART_Rx[21] >> 5 | SBUS_UART_Rx[22] << 3) & 0x07FF);
 8005482:	4b0c      	ldr	r3, [pc, #48]	@ (80054b4 <SBUS_getData+0x25c>)
 8005484:	7d5b      	ldrb	r3, [r3, #21]
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	b2db      	uxtb	r3, r3
 800548a:	b21a      	sxth	r2, r3
 800548c:	4b09      	ldr	r3, [pc, #36]	@ (80054b4 <SBUS_getData+0x25c>)
 800548e:	7d9b      	ldrb	r3, [r3, #22]
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	b21b      	sxth	r3, r3
 8005494:	4313      	orrs	r3, r2
 8005496:	b21b      	sxth	r3, r3
 8005498:	b29b      	uxth	r3, r3
 800549a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800549e:	b29a      	uxth	r2, r3
 80054a0:	4b05      	ldr	r3, [pc, #20]	@ (80054b8 <SBUS_getData+0x260>)
 80054a2:	841a      	strh	r2, [r3, #32]

	Radio_input.Canal_1 = (uint16_t)((((float)Radio_input.Canal_1 - 352) /1344 ) * 1000) + 1000;
 80054a4:	4b04      	ldr	r3, [pc, #16]	@ (80054b8 <SBUS_getData+0x260>)
 80054a6:	885b      	ldrh	r3, [r3, #2]
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b0:	e00a      	b.n	80054c8 <SBUS_getData+0x270>
 80054b2:	bf00      	nop
 80054b4:	24001788 	.word	0x24001788
 80054b8:	2400007c 	.word	0x2400007c
 80054bc:	43b00000 	.word	0x43b00000
 80054c0:	44a80000 	.word	0x44a80000
 80054c4:	447a0000 	.word	0x447a0000
 80054c8:	ed1f 7a04 	vldr	s14, [pc, #-16]	@ 80054bc <SBUS_getData+0x264>
 80054cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80054d0:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 80054c0 <SBUS_getData+0x268>
 80054d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054d8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80054c4 <SBUS_getData+0x26c>
 80054dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80054e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054e4:	ee17 3a90 	vmov	r3, s15
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	4bd1      	ldr	r3, [pc, #836]	@ (8005838 <SBUS_getData+0x5e0>)
 80054f2:	805a      	strh	r2, [r3, #2]
	Radio_input.Canal_2 = (uint16_t)((((float)Radio_input.Canal_2 - 352) /1344 ) * 1000) + 1000;
 80054f4:	4bd0      	ldr	r3, [pc, #832]	@ (8005838 <SBUS_getData+0x5e0>)
 80054f6:	889b      	ldrh	r3, [r3, #4]
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005500:	ed9f 7ace 	vldr	s14, [pc, #824]	@ 800583c <SBUS_getData+0x5e4>
 8005504:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005508:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8005840 <SBUS_getData+0x5e8>
 800550c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005510:	ed9f 7acc 	vldr	s14, [pc, #816]	@ 8005844 <SBUS_getData+0x5ec>
 8005514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800551c:	ee17 3a90 	vmov	r3, s15
 8005520:	b29b      	uxth	r3, r3
 8005522:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005526:	b29a      	uxth	r2, r3
 8005528:	4bc3      	ldr	r3, [pc, #780]	@ (8005838 <SBUS_getData+0x5e0>)
 800552a:	809a      	strh	r2, [r3, #4]
	Radio_input.Canal_3 = (uint16_t)((((float)Radio_input.Canal_3 - 352) /1344 ) * 1000) + 1000;
 800552c:	4bc2      	ldr	r3, [pc, #776]	@ (8005838 <SBUS_getData+0x5e0>)
 800552e:	88db      	ldrh	r3, [r3, #6]
 8005530:	ee07 3a90 	vmov	s15, r3
 8005534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005538:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 800583c <SBUS_getData+0x5e4>
 800553c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005540:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8005840 <SBUS_getData+0x5e8>
 8005544:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005548:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 8005844 <SBUS_getData+0x5ec>
 800554c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005554:	ee17 3a90 	vmov	r3, s15
 8005558:	b29b      	uxth	r3, r3
 800555a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800555e:	b29a      	uxth	r2, r3
 8005560:	4bb5      	ldr	r3, [pc, #724]	@ (8005838 <SBUS_getData+0x5e0>)
 8005562:	80da      	strh	r2, [r3, #6]
	Radio_input.Canal_4 = (uint16_t)((((float)Radio_input.Canal_4 - 352) /1344 ) * 1000) + 1000;
 8005564:	4bb4      	ldr	r3, [pc, #720]	@ (8005838 <SBUS_getData+0x5e0>)
 8005566:	891b      	ldrh	r3, [r3, #8]
 8005568:	ee07 3a90 	vmov	s15, r3
 800556c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005570:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 800583c <SBUS_getData+0x5e4>
 8005574:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005578:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8005840 <SBUS_getData+0x5e8>
 800557c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005580:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8005844 <SBUS_getData+0x5ec>
 8005584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800558c:	ee17 3a90 	vmov	r3, s15
 8005590:	b29b      	uxth	r3, r3
 8005592:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005596:	b29a      	uxth	r2, r3
 8005598:	4ba7      	ldr	r3, [pc, #668]	@ (8005838 <SBUS_getData+0x5e0>)
 800559a:	811a      	strh	r2, [r3, #8]
	Radio_input.Canal_5 = (uint16_t)((((float)Radio_input.Canal_5 - 352) /1344 ) * 1000) + 1000;
 800559c:	4ba6      	ldr	r3, [pc, #664]	@ (8005838 <SBUS_getData+0x5e0>)
 800559e:	895b      	ldrh	r3, [r3, #10]
 80055a0:	ee07 3a90 	vmov	s15, r3
 80055a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a8:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 800583c <SBUS_getData+0x5e4>
 80055ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80055b0:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8005840 <SBUS_getData+0x5e8>
 80055b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055b8:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8005844 <SBUS_getData+0x5ec>
 80055bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055c4:	ee17 3a90 	vmov	r3, s15
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	4b99      	ldr	r3, [pc, #612]	@ (8005838 <SBUS_getData+0x5e0>)
 80055d2:	815a      	strh	r2, [r3, #10]
	Radio_input.Canal_6 = (uint16_t)((((float)Radio_input.Canal_6 - 352) /1344 ) * 1000) + 1000;
 80055d4:	4b98      	ldr	r3, [pc, #608]	@ (8005838 <SBUS_getData+0x5e0>)
 80055d6:	899b      	ldrh	r3, [r3, #12]
 80055d8:	ee07 3a90 	vmov	s15, r3
 80055dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e0:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800583c <SBUS_getData+0x5e4>
 80055e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80055e8:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8005840 <SBUS_getData+0x5e8>
 80055ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055f0:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8005844 <SBUS_getData+0x5ec>
 80055f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055fc:	ee17 3a90 	vmov	r3, s15
 8005600:	b29b      	uxth	r3, r3
 8005602:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005606:	b29a      	uxth	r2, r3
 8005608:	4b8b      	ldr	r3, [pc, #556]	@ (8005838 <SBUS_getData+0x5e0>)
 800560a:	819a      	strh	r2, [r3, #12]
	Radio_input.Canal_7 = (uint16_t)((((float)Radio_input.Canal_7 - 352) /1344 ) * 1000) + 1000;
 800560c:	4b8a      	ldr	r3, [pc, #552]	@ (8005838 <SBUS_getData+0x5e0>)
 800560e:	89db      	ldrh	r3, [r3, #14]
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005618:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800583c <SBUS_getData+0x5e4>
 800561c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005620:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8005840 <SBUS_getData+0x5e8>
 8005624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005628:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8005844 <SBUS_getData+0x5ec>
 800562c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005634:	ee17 3a90 	vmov	r3, s15
 8005638:	b29b      	uxth	r3, r3
 800563a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800563e:	b29a      	uxth	r2, r3
 8005640:	4b7d      	ldr	r3, [pc, #500]	@ (8005838 <SBUS_getData+0x5e0>)
 8005642:	81da      	strh	r2, [r3, #14]
	Radio_input.Canal_8 = (uint16_t)((((float)Radio_input.Canal_8 - 352) /1344 ) * 1000) + 1000;
 8005644:	4b7c      	ldr	r3, [pc, #496]	@ (8005838 <SBUS_getData+0x5e0>)
 8005646:	8a1b      	ldrh	r3, [r3, #16]
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005650:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800583c <SBUS_getData+0x5e4>
 8005654:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005658:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8005840 <SBUS_getData+0x5e8>
 800565c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005660:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8005844 <SBUS_getData+0x5ec>
 8005664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800566c:	ee17 3a90 	vmov	r3, s15
 8005670:	b29b      	uxth	r3, r3
 8005672:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005676:	b29a      	uxth	r2, r3
 8005678:	4b6f      	ldr	r3, [pc, #444]	@ (8005838 <SBUS_getData+0x5e0>)
 800567a:	821a      	strh	r2, [r3, #16]
	Radio_input.Canal_9 = (uint16_t)((((float)Radio_input.Canal_9 - 352) /1344 ) * 1000) + 1000;
 800567c:	4b6e      	ldr	r3, [pc, #440]	@ (8005838 <SBUS_getData+0x5e0>)
 800567e:	8a5b      	ldrh	r3, [r3, #18]
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005688:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800583c <SBUS_getData+0x5e4>
 800568c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005690:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8005840 <SBUS_getData+0x5e8>
 8005694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005698:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8005844 <SBUS_getData+0x5ec>
 800569c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a4:	ee17 3a90 	vmov	r3, s15
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	4b61      	ldr	r3, [pc, #388]	@ (8005838 <SBUS_getData+0x5e0>)
 80056b2:	825a      	strh	r2, [r3, #18]
	Radio_input.Canal_10 = (uint16_t)((((float)Radio_input.Canal_10 - 352) /1344 ) * 1000) + 1000;
 80056b4:	4b60      	ldr	r3, [pc, #384]	@ (8005838 <SBUS_getData+0x5e0>)
 80056b6:	8a9b      	ldrh	r3, [r3, #20]
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c0:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 800583c <SBUS_getData+0x5e4>
 80056c4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80056c8:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8005840 <SBUS_getData+0x5e8>
 80056cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056d0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8005844 <SBUS_getData+0x5ec>
 80056d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056dc:	ee17 3a90 	vmov	r3, s15
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	4b53      	ldr	r3, [pc, #332]	@ (8005838 <SBUS_getData+0x5e0>)
 80056ea:	829a      	strh	r2, [r3, #20]
	Radio_input.Canal_11 = (uint16_t)((((float)Radio_input.Canal_11 - 352) /1344 ) * 1000) + 1000;
 80056ec:	4b52      	ldr	r3, [pc, #328]	@ (8005838 <SBUS_getData+0x5e0>)
 80056ee:	8adb      	ldrh	r3, [r3, #22]
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f8:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800583c <SBUS_getData+0x5e4>
 80056fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005700:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005840 <SBUS_getData+0x5e8>
 8005704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005708:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8005844 <SBUS_getData+0x5ec>
 800570c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005714:	ee17 3a90 	vmov	r3, s15
 8005718:	b29b      	uxth	r3, r3
 800571a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800571e:	b29a      	uxth	r2, r3
 8005720:	4b45      	ldr	r3, [pc, #276]	@ (8005838 <SBUS_getData+0x5e0>)
 8005722:	82da      	strh	r2, [r3, #22]
	Radio_input.Canal_12 = (uint16_t)((((float)Radio_input.Canal_12 - 352) /1344 ) * 1000) + 1000;
 8005724:	4b44      	ldr	r3, [pc, #272]	@ (8005838 <SBUS_getData+0x5e0>)
 8005726:	8b1b      	ldrh	r3, [r3, #24]
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005730:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800583c <SBUS_getData+0x5e4>
 8005734:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005738:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8005840 <SBUS_getData+0x5e8>
 800573c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005740:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8005844 <SBUS_getData+0x5ec>
 8005744:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574c:	ee17 3a90 	vmov	r3, s15
 8005750:	b29b      	uxth	r3, r3
 8005752:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005756:	b29a      	uxth	r2, r3
 8005758:	4b37      	ldr	r3, [pc, #220]	@ (8005838 <SBUS_getData+0x5e0>)
 800575a:	831a      	strh	r2, [r3, #24]
	Radio_input.Canal_13 = (uint16_t)((((float)Radio_input.Canal_13 - 352) /1344 ) * 1000) + 1000;
 800575c:	4b36      	ldr	r3, [pc, #216]	@ (8005838 <SBUS_getData+0x5e0>)
 800575e:	8b5b      	ldrh	r3, [r3, #26]
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005768:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800583c <SBUS_getData+0x5e4>
 800576c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005770:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8005840 <SBUS_getData+0x5e8>
 8005774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005778:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8005844 <SBUS_getData+0x5ec>
 800577c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005784:	ee17 3a90 	vmov	r3, s15
 8005788:	b29b      	uxth	r3, r3
 800578a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800578e:	b29a      	uxth	r2, r3
 8005790:	4b29      	ldr	r3, [pc, #164]	@ (8005838 <SBUS_getData+0x5e0>)
 8005792:	835a      	strh	r2, [r3, #26]
	Radio_input.Canal_14 = (uint16_t)((((float)Radio_input.Canal_14 - 352) /1344 ) * 1000) + 1000;
 8005794:	4b28      	ldr	r3, [pc, #160]	@ (8005838 <SBUS_getData+0x5e0>)
 8005796:	8b9b      	ldrh	r3, [r3, #28]
 8005798:	ee07 3a90 	vmov	s15, r3
 800579c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800583c <SBUS_getData+0x5e4>
 80057a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80057a8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8005840 <SBUS_getData+0x5e8>
 80057ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057b0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005844 <SBUS_getData+0x5ec>
 80057b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057bc:	ee17 3a90 	vmov	r3, s15
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005838 <SBUS_getData+0x5e0>)
 80057ca:	839a      	strh	r2, [r3, #28]
	Radio_input.Canal_15 = (uint16_t)((((float)Radio_input.Canal_15 - 352) /1344 ) * 1000) + 1000;
 80057cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005838 <SBUS_getData+0x5e0>)
 80057ce:	8bdb      	ldrh	r3, [r3, #30]
 80057d0:	ee07 3a90 	vmov	s15, r3
 80057d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800583c <SBUS_getData+0x5e4>
 80057dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80057e0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8005840 <SBUS_getData+0x5e8>
 80057e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057e8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005844 <SBUS_getData+0x5ec>
 80057ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057f4:	ee17 3a90 	vmov	r3, s15
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80057fe:	b29a      	uxth	r2, r3
 8005800:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <SBUS_getData+0x5e0>)
 8005802:	83da      	strh	r2, [r3, #30]
	Radio_input.Canal_16 = (uint16_t)((((float)Radio_input.Canal_16 - 352) /1344 ) * 1000) + 1000;
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <SBUS_getData+0x5e0>)
 8005806:	8c1b      	ldrh	r3, [r3, #32]
 8005808:	ee07 3a90 	vmov	s15, r3
 800580c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005810:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800583c <SBUS_getData+0x5e4>
 8005814:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005818:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005840 <SBUS_getData+0x5e8>
 800581c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005820:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8005844 <SBUS_getData+0x5ec>
 8005824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800582c:	ee17 3a90 	vmov	r3, s15
 8005830:	b29b      	uxth	r3, r3
 8005832:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8005836:	e007      	b.n	8005848 <SBUS_getData+0x5f0>
 8005838:	2400007c 	.word	0x2400007c
 800583c:	43b00000 	.word	0x43b00000
 8005840:	44a80000 	.word	0x44a80000
 8005844:	447a0000 	.word	0x447a0000
 8005848:	b29a      	uxth	r2, r3
 800584a:	4b2a      	ldr	r3, [pc, #168]	@ (80058f4 <SBUS_getData+0x69c>)
 800584c:	841a      	strh	r2, [r3, #32]

	//En el caso del byte 24, el primer bit menos significativo corresponde al canal 17, el segundo al canal 18, el tercero a el fail safe y
	//el cuarto a la perdida de paquetes. Los 4 restantes no se utilizan.

	Radio_input.Banderas = SBUS_UART_Rx[23];
 800584e:	4b2a      	ldr	r3, [pc, #168]	@ (80058f8 <SBUS_getData+0x6a0>)
 8005850:	7dda      	ldrb	r2, [r3, #23]
 8005852:	4b28      	ldr	r3, [pc, #160]	@ (80058f4 <SBUS_getData+0x69c>)
 8005854:	701a      	strb	r2, [r3, #0]
	if(SBUS_UART_Rx[23]>=8){
 8005856:	4b28      	ldr	r3, [pc, #160]	@ (80058f8 <SBUS_getData+0x6a0>)
 8005858:	7ddb      	ldrb	r3, [r3, #23]
 800585a:	2b07      	cmp	r3, #7
 800585c:	d90a      	bls.n	8005874 <SBUS_getData+0x61c>
		SBUS_UART_Rx[23]-=8;
 800585e:	4b26      	ldr	r3, [pc, #152]	@ (80058f8 <SBUS_getData+0x6a0>)
 8005860:	7ddb      	ldrb	r3, [r3, #23]
 8005862:	3b08      	subs	r3, #8
 8005864:	b2da      	uxtb	r2, r3
 8005866:	4b24      	ldr	r3, [pc, #144]	@ (80058f8 <SBUS_getData+0x6a0>)
 8005868:	75da      	strb	r2, [r3, #23]
		Radio_input.fail_safe = FailSafe;
 800586a:	4b22      	ldr	r3, [pc, #136]	@ (80058f4 <SBUS_getData+0x69c>)
 800586c:	2235      	movs	r2, #53	@ 0x35
 800586e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 8005872:	e003      	b.n	800587c <SBUS_getData+0x624>
	}else Radio_input.fail_safe= Ok;
 8005874:	4b1f      	ldr	r3, [pc, #124]	@ (80058f4 <SBUS_getData+0x69c>)
 8005876:	22aa      	movs	r2, #170	@ 0xaa
 8005878:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	if(SBUS_UART_Rx[23]>=4){
 800587c:	4b1e      	ldr	r3, [pc, #120]	@ (80058f8 <SBUS_getData+0x6a0>)
 800587e:	7ddb      	ldrb	r3, [r3, #23]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d90a      	bls.n	800589a <SBUS_getData+0x642>
		SBUS_UART_Rx[23]-=4;
 8005884:	4b1c      	ldr	r3, [pc, #112]	@ (80058f8 <SBUS_getData+0x6a0>)
 8005886:	7ddb      	ldrb	r3, [r3, #23]
 8005888:	3b04      	subs	r3, #4
 800588a:	b2da      	uxtb	r2, r3
 800588c:	4b1a      	ldr	r3, [pc, #104]	@ (80058f8 <SBUS_getData+0x6a0>)
 800588e:	75da      	strb	r2, [r3, #23]
		Radio_input.pkg_lost = Pkg_Lost;
 8005890:	4b18      	ldr	r3, [pc, #96]	@ (80058f4 <SBUS_getData+0x69c>)
 8005892:	2210      	movs	r2, #16
 8005894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005898:	e003      	b.n	80058a2 <SBUS_getData+0x64a>
	}else Radio_input.pkg_lost=Ok;
 800589a:	4b16      	ldr	r3, [pc, #88]	@ (80058f4 <SBUS_getData+0x69c>)
 800589c:	22aa      	movs	r2, #170	@ 0xaa
 800589e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(SBUS_UART_Rx[23]>=2){
 80058a2:	4b15      	ldr	r3, [pc, #84]	@ (80058f8 <SBUS_getData+0x6a0>)
 80058a4:	7ddb      	ldrb	r3, [r3, #23]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d90a      	bls.n	80058c0 <SBUS_getData+0x668>
		SBUS_UART_Rx[23]-=2;
 80058aa:	4b13      	ldr	r3, [pc, #76]	@ (80058f8 <SBUS_getData+0x6a0>)
 80058ac:	7ddb      	ldrb	r3, [r3, #23]
 80058ae:	3b02      	subs	r3, #2
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	4b11      	ldr	r3, [pc, #68]	@ (80058f8 <SBUS_getData+0x6a0>)
 80058b4:	75da      	strb	r2, [r3, #23]
		Radio_input.Interruptor_2=ON;
 80058b6:	4b0f      	ldr	r3, [pc, #60]	@ (80058f4 <SBUS_getData+0x69c>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 80058be:	e003      	b.n	80058c8 <SBUS_getData+0x670>
	}else Radio_input.Interruptor_2=OFF;
 80058c0:	4b0c      	ldr	r3, [pc, #48]	@ (80058f4 <SBUS_getData+0x69c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	if(SBUS_UART_Rx[23]){
 80058c8:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <SBUS_getData+0x6a0>)
 80058ca:	7ddb      	ldrb	r3, [r3, #23]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <SBUS_getData+0x682>
		Radio_input.Interruptor_1=ON;
 80058d0:	4b08      	ldr	r3, [pc, #32]	@ (80058f4 <SBUS_getData+0x69c>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80058d8:	e003      	b.n	80058e2 <SBUS_getData+0x68a>
	}else Radio_input.Interruptor_1=OFF;
 80058da:	4b06      	ldr	r3, [pc, #24]	@ (80058f4 <SBUS_getData+0x69c>)
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22


	Radio_input.Uart_Counter = 0;
 80058e2:	4b04      	ldr	r3, [pc, #16]	@ (80058f4 <SBUS_getData+0x69c>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

}
 80058ea:	bf00      	nop
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	2400007c 	.word	0x2400007c
 80058f8:	24001788 	.word	0x24001788

080058fc <SBUS_IntegrityVerification>:

void SBUS_IntegrityVerification(void){
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0

	if(Radio_input.Uart_Counter != 255){
 8005900:	4b0f      	ldr	r3, [pc, #60]	@ (8005940 <SBUS_IntegrityVerification+0x44>)
 8005902:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005906:	2bff      	cmp	r3, #255	@ 0xff
 8005908:	d00c      	beq.n	8005924 <SBUS_IntegrityVerification+0x28>
		Radio_input.Uart_Counter++;
 800590a:	4b0d      	ldr	r3, [pc, #52]	@ (8005940 <SBUS_IntegrityVerification+0x44>)
 800590c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8005910:	3301      	adds	r3, #1
 8005912:	b2da      	uxtb	r2, r3
 8005914:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <SBUS_IntegrityVerification+0x44>)
 8005916:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		Radio_input.uart_error = Ok;
 800591a:	4b09      	ldr	r3, [pc, #36]	@ (8005940 <SBUS_IntegrityVerification+0x44>)
 800591c:	22aa      	movs	r2, #170	@ 0xaa
 800591e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	}
	else{
		Radio_input.uart_error = Uart_Error;
		Radio_input.fail_safe = FailSafe;
	}
}
 8005922:	e007      	b.n	8005934 <SBUS_IntegrityVerification+0x38>
		Radio_input.uart_error = Uart_Error;
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <SBUS_IntegrityVerification+0x44>)
 8005926:	2220      	movs	r2, #32
 8005928:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		Radio_input.fail_safe = FailSafe;
 800592c:	4b04      	ldr	r3, [pc, #16]	@ (8005940 <SBUS_IntegrityVerification+0x44>)
 800592e:	2235      	movs	r2, #53	@ 0x35
 8005930:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	2400007c 	.word	0x2400007c

08005944 <SD_blackbox_refresh>:
void SD_blackbox_init(void){

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_refresh(void){
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0

	blackbox_data.Time = TimeOn_Counter;
 8005948:	4b58      	ldr	r3, [pc, #352]	@ (8005aac <SD_blackbox_refresh+0x168>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a58      	ldr	r2, [pc, #352]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 800594e:	6353      	str	r3, [r2, #52]	@ 0x34

	blackbox_data.Ax = IMU.ACC.x;
 8005950:	4b58      	ldr	r3, [pc, #352]	@ (8005ab4 <SD_blackbox_refresh+0x170>)
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	4a56      	ldr	r2, [pc, #344]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005956:	6013      	str	r3, [r2, #0]
	blackbox_data.Ay = IMU.ACC.y;
 8005958:	4b56      	ldr	r3, [pc, #344]	@ (8005ab4 <SD_blackbox_refresh+0x170>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a54      	ldr	r2, [pc, #336]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 800595e:	6053      	str	r3, [r2, #4]
	blackbox_data.Az = IMU.ACC.z;
 8005960:	4b54      	ldr	r3, [pc, #336]	@ (8005ab4 <SD_blackbox_refresh+0x170>)
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	4a52      	ldr	r2, [pc, #328]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005966:	6093      	str	r3, [r2, #8]

	blackbox_data.Gx = IMU.GYR.x;
 8005968:	4b52      	ldr	r3, [pc, #328]	@ (8005ab4 <SD_blackbox_refresh+0x170>)
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	4a50      	ldr	r2, [pc, #320]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 800596e:	60d3      	str	r3, [r2, #12]
	blackbox_data.Gy = IMU.GYR.y;
 8005970:	4b50      	ldr	r3, [pc, #320]	@ (8005ab4 <SD_blackbox_refresh+0x170>)
 8005972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005974:	4a4e      	ldr	r2, [pc, #312]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005976:	6113      	str	r3, [r2, #16]
	blackbox_data.Gz = IMU.GYR.z;
 8005978:	4b4e      	ldr	r3, [pc, #312]	@ (8005ab4 <SD_blackbox_refresh+0x170>)
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	4a4c      	ldr	r2, [pc, #304]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 800597e:	6153      	str	r3, [r2, #20]

	blackbox_data.Gfx = 0;
 8005980:	4b4b      	ldr	r3, [pc, #300]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005982:	f04f 0200 	mov.w	r2, #0
 8005986:	619a      	str	r2, [r3, #24]
	blackbox_data.Gfy = 0;
 8005988:	4b49      	ldr	r3, [pc, #292]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	61da      	str	r2, [r3, #28]
	blackbox_data.Gfz = 0;
 8005990:	4b47      	ldr	r3, [pc, #284]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	621a      	str	r2, [r3, #32]

	blackbox_data.Roll    = IMU.Roll;
 8005998:	4b46      	ldr	r3, [pc, #280]	@ (8005ab4 <SD_blackbox_refresh+0x170>)
 800599a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599c:	4a44      	ldr	r2, [pc, #272]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 800599e:	6253      	str	r3, [r2, #36]	@ 0x24
	blackbox_data.Pitch   = IMU.Pitch;
 80059a0:	4b44      	ldr	r3, [pc, #272]	@ (8005ab4 <SD_blackbox_refresh+0x170>)
 80059a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a4:	4a42      	ldr	r2, [pc, #264]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059a6:	6293      	str	r3, [r2, #40]	@ 0x28
	blackbox_data.Heading = IMU.Heading;
 80059a8:	4b42      	ldr	r3, [pc, #264]	@ (8005ab4 <SD_blackbox_refresh+0x170>)
 80059aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ac:	4a40      	ldr	r2, [pc, #256]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

	blackbox_data.Alt = BMP280.Barometric_Altitude;
 80059b0:	4b41      	ldr	r3, [pc, #260]	@ (8005ab8 <SD_blackbox_refresh+0x174>)
 80059b2:	8a1a      	ldrh	r2, [r3, #16]
 80059b4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	blackbox_data.Latitude = 0;
 80059ba:	4b3d      	ldr	r3, [pc, #244]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059bc:	2200      	movs	r2, #0
 80059be:	639a      	str	r2, [r3, #56]	@ 0x38
	blackbox_data.Longitude= 0;
 80059c0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	63da      	str	r2, [r3, #60]	@ 0x3c

	blackbox_data.ARSP = 0;
 80059c6:	4b3a      	ldr	r3, [pc, #232]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

	blackbox_data.Pressure = BMP280.Pressure;
 80059ce:	4b3a      	ldr	r3, [pc, #232]	@ (8005ab8 <SD_blackbox_refresh+0x174>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	4a37      	ldr	r2, [pc, #220]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059d4:	6413      	str	r3, [r2, #64]	@ 0x40

	blackbox_data.SBUS_Flags = Radio_input.Banderas;
 80059d6:	4b39      	ldr	r3, [pc, #228]	@ (8005abc <SD_blackbox_refresh+0x178>)
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	4b35      	ldr	r3, [pc, #212]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059dc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	blackbox_data.Flight_Mode = 0;
 80059e0:	4b33      	ldr	r3, [pc, #204]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

	blackbox_data.Canal_1 = Radio_input.Canal_1;
 80059e8:	4b34      	ldr	r3, [pc, #208]	@ (8005abc <SD_blackbox_refresh+0x178>)
 80059ea:	885a      	ldrh	r2, [r3, #2]
 80059ec:	4b30      	ldr	r3, [pc, #192]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059ee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	blackbox_data.Canal_2 = Radio_input.Canal_2;
 80059f2:	4b32      	ldr	r3, [pc, #200]	@ (8005abc <SD_blackbox_refresh+0x178>)
 80059f4:	889a      	ldrh	r2, [r3, #4]
 80059f6:	4b2e      	ldr	r3, [pc, #184]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 80059f8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	blackbox_data.Canal_3 = Radio_input.Canal_3;
 80059fc:	4b2f      	ldr	r3, [pc, #188]	@ (8005abc <SD_blackbox_refresh+0x178>)
 80059fe:	88da      	ldrh	r2, [r3, #6]
 8005a00:	4b2b      	ldr	r3, [pc, #172]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a02:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	blackbox_data.Canal_4 = Radio_input.Canal_4;
 8005a06:	4b2d      	ldr	r3, [pc, #180]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a08:	891a      	ldrh	r2, [r3, #8]
 8005a0a:	4b29      	ldr	r3, [pc, #164]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a0c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	blackbox_data.Canal_5 = Radio_input.Canal_5;
 8005a10:	4b2a      	ldr	r3, [pc, #168]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a12:	895a      	ldrh	r2, [r3, #10]
 8005a14:	4b26      	ldr	r3, [pc, #152]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a16:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
	blackbox_data.Canal_6 = Radio_input.Canal_6;
 8005a1a:	4b28      	ldr	r3, [pc, #160]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a1c:	899a      	ldrh	r2, [r3, #12]
 8005a1e:	4b24      	ldr	r3, [pc, #144]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a20:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
	blackbox_data.Canal_7 = Radio_input.Canal_7;
 8005a24:	4b25      	ldr	r3, [pc, #148]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a26:	89da      	ldrh	r2, [r3, #14]
 8005a28:	4b21      	ldr	r3, [pc, #132]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a2a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	blackbox_data.Canal_8 = Radio_input.Canal_8;
 8005a2e:	4b23      	ldr	r3, [pc, #140]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a30:	8a1a      	ldrh	r2, [r3, #16]
 8005a32:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	blackbox_data.Canal_9 = Radio_input.Canal_9;
 8005a38:	4b20      	ldr	r3, [pc, #128]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a3a:	8a5a      	ldrh	r2, [r3, #18]
 8005a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a3e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	blackbox_data.Canal_10 = Radio_input.Canal_10;
 8005a42:	4b1e      	ldr	r3, [pc, #120]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a44:	8a9a      	ldrh	r2, [r3, #20]
 8005a46:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
	blackbox_data.Canal_11 = Radio_input.Canal_11;
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a4e:	8ada      	ldrh	r2, [r3, #22]
 8005a50:	4b17      	ldr	r3, [pc, #92]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a52:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	blackbox_data.Canal_12 = Radio_input.Canal_12;
 8005a56:	4b19      	ldr	r3, [pc, #100]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a58:	8b1a      	ldrh	r2, [r3, #24]
 8005a5a:	4b15      	ldr	r3, [pc, #84]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	blackbox_data.Canal_13 = Radio_input.Canal_13;
 8005a60:	4b16      	ldr	r3, [pc, #88]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a62:	8b5a      	ldrh	r2, [r3, #26]
 8005a64:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	blackbox_data.Canal_14 = Radio_input.Canal_14;
 8005a6a:	4b14      	ldr	r3, [pc, #80]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a6c:	8b9a      	ldrh	r2, [r3, #28]
 8005a6e:	4b10      	ldr	r3, [pc, #64]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	blackbox_data.Canal_15 = Radio_input.Canal_15;
 8005a74:	4b11      	ldr	r3, [pc, #68]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a76:	8bda      	ldrh	r2, [r3, #30]
 8005a78:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a7a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	blackbox_data.Canal_16 = Radio_input.Canal_16;
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a80:	8c1a      	ldrh	r2, [r3, #32]
 8005a82:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a84:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

	blackbox_data.Interruptor_1 = Radio_input.Interruptor_1;
 8005a88:	4b0c      	ldr	r3, [pc, #48]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a8a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8005a8e:	4b08      	ldr	r3, [pc, #32]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a90:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
	blackbox_data.Interruptor_2 = Radio_input.Interruptor_2;
 8005a94:	4b09      	ldr	r3, [pc, #36]	@ (8005abc <SD_blackbox_refresh+0x178>)
 8005a96:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8005a9a:	4b05      	ldr	r3, [pc, #20]	@ (8005ab0 <SD_blackbox_refresh+0x16c>)
 8005a9c:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
//	blackbox_data.OUT6  = PWM_Output.Canal_6;
//	blackbox_data.OUT7  = PWM_Output.Canal_7;
//	blackbox_data.OUT8  = PWM_Output.Canal_8;
//	blackbox_data.OUT9  = PWM_Output.Canal_9;
//	blackbox_data.OUT10 = PWM_Output.Canal_10;
}
 8005aa0:	bf00      	nop
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	24000e94 	.word	0x24000e94
 8005ab0:	240029cc 	.word	0x240029cc
 8005ab4:	24001620 	.word	0x24001620
 8005ab8:	240014e0 	.word	0x240014e0
 8005abc:	2400007c 	.word	0x2400007c

08005ac0 <SD_blackbox_write>:
	BlackBoxFile[4] = ActualFile[4];

	f_open(&BlackBox, BlackBoxFile, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
}

void SD_blackbox_write(void){
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
	static uint8_t NewFileCount = 0;
	static uint32_t DataCount = 0;
	static uint16_t WriteCount = 0;

	SD_blackbox_refresh();
 8005ac6:	f7ff ff3d 	bl	8005944 <SD_blackbox_refresh>

	blackbox_data.Nmsg = DataCount;
 8005aca:	4b26      	ldr	r3, [pc, #152]	@ (8005b64 <SD_blackbox_write+0xa4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a26      	ldr	r2, [pc, #152]	@ (8005b68 <SD_blackbox_write+0xa8>)
 8005ad0:	6313      	str	r3, [r2, #48]	@ 0x30
	memcpy(&BlackBoxBuffer[WriteCount],&blackbox_data,sizeof(blackbox_data));
 8005ad2:	4b26      	ldr	r3, [pc, #152]	@ (8005b6c <SD_blackbox_write+0xac>)
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4613      	mov	r3, r2
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	4a24      	ldr	r2, [pc, #144]	@ (8005b70 <SD_blackbox_write+0xb0>)
 8005ae0:	4413      	add	r3, r2
 8005ae2:	2280      	movs	r2, #128	@ 0x80
 8005ae4:	4920      	ldr	r1, [pc, #128]	@ (8005b68 <SD_blackbox_write+0xa8>)
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f011 fb5f 	bl	80171aa <memcpy>

	if(WriteCount == 15){
 8005aec:	4b1f      	ldr	r3, [pc, #124]	@ (8005b6c <SD_blackbox_write+0xac>)
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	2b0f      	cmp	r3, #15
 8005af2:	d129      	bne.n	8005b48 <SD_blackbox_write+0x88>
		for (uint8_t n = 0; n < 16; ++n) {
 8005af4:	2300      	movs	r3, #0
 8005af6:	71fb      	strb	r3, [r7, #7]
 8005af8:	e00d      	b.n	8005b16 <SD_blackbox_write+0x56>
			f_write(&BlackBox, &BlackBoxBuffer[n], sizeof(blackbox_data), &bw);
 8005afa:	79fa      	ldrb	r2, [r7, #7]
 8005afc:	4613      	mov	r3, r2
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	4a1b      	ldr	r2, [pc, #108]	@ (8005b70 <SD_blackbox_write+0xb0>)
 8005b04:	1899      	adds	r1, r3, r2
 8005b06:	4b1b      	ldr	r3, [pc, #108]	@ (8005b74 <SD_blackbox_write+0xb4>)
 8005b08:	2280      	movs	r2, #128	@ 0x80
 8005b0a:	481b      	ldr	r0, [pc, #108]	@ (8005b78 <SD_blackbox_write+0xb8>)
 8005b0c:	f00d fe67 	bl	80137de <f_write>
		for (uint8_t n = 0; n < 16; ++n) {
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	3301      	adds	r3, #1
 8005b14:	71fb      	strb	r3, [r7, #7]
 8005b16:	79fb      	ldrb	r3, [r7, #7]
 8005b18:	2b0f      	cmp	r3, #15
 8005b1a:	d9ee      	bls.n	8005afa <SD_blackbox_write+0x3a>
		}
		fresult = f_sync(&BlackBox);
 8005b1c:	4816      	ldr	r0, [pc, #88]	@ (8005b78 <SD_blackbox_write+0xb8>)
 8005b1e:	f00e f802 	bl	8013b26 <f_sync>
 8005b22:	4603      	mov	r3, r0
 8005b24:	461a      	mov	r2, r3
 8005b26:	4b15      	ldr	r3, [pc, #84]	@ (8005b7c <SD_blackbox_write+0xbc>)
 8005b28:	701a      	strb	r2, [r3, #0]
		WriteCount = 0;
 8005b2a:	4b10      	ldr	r3, [pc, #64]	@ (8005b6c <SD_blackbox_write+0xac>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	801a      	strh	r2, [r3, #0]
		++NewFileCount;
 8005b30:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <SD_blackbox_write+0xc0>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	3301      	adds	r3, #1
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	4b11      	ldr	r3, [pc, #68]	@ (8005b80 <SD_blackbox_write+0xc0>)
 8005b3a:	701a      	strb	r2, [r3, #0]
		++DataCount;
 8005b3c:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <SD_blackbox_write+0xa4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3301      	adds	r3, #1
 8005b42:	4a08      	ldr	r2, [pc, #32]	@ (8005b64 <SD_blackbox_write+0xa4>)
 8005b44:	6013      	str	r3, [r2, #0]
		return;
 8005b46:	e00a      	b.n	8005b5e <SD_blackbox_write+0x9e>
	}
	++WriteCount;
 8005b48:	4b08      	ldr	r3, [pc, #32]	@ (8005b6c <SD_blackbox_write+0xac>)
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	4b06      	ldr	r3, [pc, #24]	@ (8005b6c <SD_blackbox_write+0xac>)
 8005b52:	801a      	strh	r2, [r3, #0]
	++DataCount;
 8005b54:	4b03      	ldr	r3, [pc, #12]	@ (8005b64 <SD_blackbox_write+0xa4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	4a02      	ldr	r2, [pc, #8]	@ (8005b64 <SD_blackbox_write+0xa4>)
 8005b5c:	6013      	str	r3, [r2, #0]
}
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	24002a4c 	.word	0x24002a4c
 8005b68:	240029cc 	.word	0x240029cc
 8005b6c:	24002a50 	.word	0x24002a50
 8005b70:	240019dc 	.word	0x240019dc
 8005b74:	240019d8 	.word	0x240019d8
 8005b78:	240017a4 	.word	0x240017a4
 8005b7c:	240019d4 	.word	0x240019d4
 8005b80:	24002a52 	.word	0x24002a52

08005b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005bbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005b88:	f7fd f828 	bl	8002bdc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b8c:	480c      	ldr	r0, [pc, #48]	@ (8005bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b8e:	490d      	ldr	r1, [pc, #52]	@ (8005bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b90:	4a0d      	ldr	r2, [pc, #52]	@ (8005bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b94:	e002      	b.n	8005b9c <LoopCopyDataInit>

08005b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b9a:	3304      	adds	r3, #4

08005b9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8005b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ba0:	d3f9      	bcc.n	8005b96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005ba4:	4c0a      	ldr	r4, [pc, #40]	@ (8005bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ba8:	e001      	b.n	8005bae <LoopFillZerobss>

08005baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005bac:	3204      	adds	r2, #4

08005bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005bb0:	d3fb      	bcc.n	8005baa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005bb2:	f011 fad3 	bl	801715c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005bb6:	f7fc fbab 	bl	8002310 <main>
  bx  lr
 8005bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005bbc:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8005bc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005bc4:	24000290 	.word	0x24000290
  ldr r2, =_sidata
 8005bc8:	08019e60 	.word	0x08019e60
  ldr r2, =_sbss
 8005bcc:	24000290 	.word	0x24000290
  ldr r4, =_ebss
 8005bd0:	24006914 	.word	0x24006914

08005bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005bd4:	e7fe      	b.n	8005bd4 <ADC_IRQHandler>
	...

08005bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bde:	2003      	movs	r0, #3
 8005be0:	f000 f927 	bl	8005e32 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005be4:	f004 fd3e 	bl	800a664 <HAL_RCC_GetSysClockFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b15      	ldr	r3, [pc, #84]	@ (8005c40 <HAL_Init+0x68>)
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	4913      	ldr	r1, [pc, #76]	@ (8005c44 <HAL_Init+0x6c>)
 8005bf6:	5ccb      	ldrb	r3, [r1, r3]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005c00:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005c02:	4b0f      	ldr	r3, [pc, #60]	@ (8005c40 <HAL_Init+0x68>)
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8005c44 <HAL_Init+0x6c>)
 8005c0c:	5cd3      	ldrb	r3, [r2, r3]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	4a0b      	ldr	r2, [pc, #44]	@ (8005c48 <HAL_Init+0x70>)
 8005c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8005c4c <HAL_Init+0x74>)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005c22:	200f      	movs	r0, #15
 8005c24:	f7fc fe44 	bl	80028b0 <HAL_InitTick>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e002      	b.n	8005c38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005c32:	f7fc fe1f 	bl	8002874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	58024400 	.word	0x58024400
 8005c44:	080191c4 	.word	0x080191c4
 8005c48:	24000004 	.word	0x24000004
 8005c4c:	24000000 	.word	0x24000000

08005c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c54:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <HAL_IncTick+0x20>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <HAL_IncTick+0x24>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4413      	add	r3, r2
 8005c60:	4a04      	ldr	r2, [pc, #16]	@ (8005c74 <HAL_IncTick+0x24>)
 8005c62:	6013      	str	r3, [r2, #0]
}
 8005c64:	bf00      	nop
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	240000a8 	.word	0x240000a8
 8005c74:	24002a54 	.word	0x24002a54

08005c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8005c7c:	4b03      	ldr	r3, [pc, #12]	@ (8005c8c <HAL_GetTick+0x14>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	24002a54 	.word	0x24002a54

08005c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c98:	f7ff ffee 	bl	8005c78 <HAL_GetTick>
 8005c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca8:	d005      	beq.n	8005cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005caa:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd4 <HAL_Delay+0x44>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005cb6:	bf00      	nop
 8005cb8:	f7ff ffde 	bl	8005c78 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d8f7      	bhi.n	8005cb8 <HAL_Delay+0x28>
  {
  }
}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	240000a8 	.word	0x240000a8

08005cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <__NVIC_SetPriorityGrouping+0x40>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d00:	4b06      	ldr	r3, [pc, #24]	@ (8005d1c <__NVIC_SetPriorityGrouping+0x44>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d06:	4a04      	ldr	r2, [pc, #16]	@ (8005d18 <__NVIC_SetPriorityGrouping+0x40>)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	60d3      	str	r3, [r2, #12]
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	e000ed00 	.word	0xe000ed00
 8005d1c:	05fa0000 	.word	0x05fa0000

08005d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d24:	4b04      	ldr	r3, [pc, #16]	@ (8005d38 <__NVIC_GetPriorityGrouping+0x18>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	f003 0307 	and.w	r3, r3, #7
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	e000ed00 	.word	0xe000ed00

08005d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	db0b      	blt.n	8005d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	f003 021f 	and.w	r2, r3, #31
 8005d54:	4907      	ldr	r1, [pc, #28]	@ (8005d74 <__NVIC_EnableIRQ+0x38>)
 8005d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	e000e100 	.word	0xe000e100

08005d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	6039      	str	r1, [r7, #0]
 8005d82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	db0a      	blt.n	8005da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	490c      	ldr	r1, [pc, #48]	@ (8005dc4 <__NVIC_SetPriority+0x4c>)
 8005d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d96:	0112      	lsls	r2, r2, #4
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005da0:	e00a      	b.n	8005db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	4908      	ldr	r1, [pc, #32]	@ (8005dc8 <__NVIC_SetPriority+0x50>)
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	3b04      	subs	r3, #4
 8005db0:	0112      	lsls	r2, r2, #4
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	440b      	add	r3, r1
 8005db6:	761a      	strb	r2, [r3, #24]
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	e000e100 	.word	0xe000e100
 8005dc8:	e000ed00 	.word	0xe000ed00

08005dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b089      	sub	sp, #36	@ 0x24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f1c3 0307 	rsb	r3, r3, #7
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	bf28      	it	cs
 8005dea:	2304      	movcs	r3, #4
 8005dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	3304      	adds	r3, #4
 8005df2:	2b06      	cmp	r3, #6
 8005df4:	d902      	bls.n	8005dfc <NVIC_EncodePriority+0x30>
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3b03      	subs	r3, #3
 8005dfa:	e000      	b.n	8005dfe <NVIC_EncodePriority+0x32>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e00:	f04f 32ff 	mov.w	r2, #4294967295
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	43da      	mvns	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	401a      	ands	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e14:	f04f 31ff 	mov.w	r1, #4294967295
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1e:	43d9      	mvns	r1, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e24:	4313      	orrs	r3, r2
         );
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3724      	adds	r7, #36	@ 0x24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b082      	sub	sp, #8
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff ff4c 	bl	8005cd8 <__NVIC_SetPriorityGrouping>
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	4603      	mov	r3, r0
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e56:	f7ff ff63 	bl	8005d20 <__NVIC_GetPriorityGrouping>
 8005e5a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	6978      	ldr	r0, [r7, #20]
 8005e62:	f7ff ffb3 	bl	8005dcc <NVIC_EncodePriority>
 8005e66:	4602      	mov	r2, r0
 8005e68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff ff82 	bl	8005d78 <__NVIC_SetPriority>
}
 8005e74:	bf00      	nop
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff ff56 	bl	8005d3c <__NVIC_EnableIRQ>
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005e9c:	f3bf 8f5f 	dmb	sy
}
 8005ea0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005ea2:	4b07      	ldr	r3, [pc, #28]	@ (8005ec0 <HAL_MPU_Disable+0x28>)
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea6:	4a06      	ldr	r2, [pc, #24]	@ (8005ec0 <HAL_MPU_Disable+0x28>)
 8005ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005eae:	4b05      	ldr	r3, [pc, #20]	@ (8005ec4 <HAL_MPU_Disable+0x2c>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	605a      	str	r2, [r3, #4]
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	e000ed00 	.word	0xe000ed00
 8005ec4:	e000ed90 	.word	0xe000ed90

08005ec8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8005f00 <HAL_MPU_Enable+0x38>)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005eda:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <HAL_MPU_Enable+0x3c>)
 8005edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ede:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <HAL_MPU_Enable+0x3c>)
 8005ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005ee6:	f3bf 8f4f 	dsb	sy
}
 8005eea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005eec:	f3bf 8f6f 	isb	sy
}
 8005ef0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	e000ed90 	.word	0xe000ed90
 8005f04:	e000ed00 	.word	0xe000ed00

08005f08 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	785a      	ldrb	r2, [r3, #1]
 8005f14:	4b1b      	ldr	r3, [pc, #108]	@ (8005f84 <HAL_MPU_ConfigRegion+0x7c>)
 8005f16:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8005f18:	4b1a      	ldr	r3, [pc, #104]	@ (8005f84 <HAL_MPU_ConfigRegion+0x7c>)
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	@ (8005f84 <HAL_MPU_ConfigRegion+0x7c>)
 8005f1e:	f023 0301 	bic.w	r3, r3, #1
 8005f22:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8005f24:	4a17      	ldr	r2, [pc, #92]	@ (8005f84 <HAL_MPU_ConfigRegion+0x7c>)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	7b1b      	ldrb	r3, [r3, #12]
 8005f30:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	7adb      	ldrb	r3, [r3, #11]
 8005f36:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	7a9b      	ldrb	r3, [r3, #10]
 8005f3e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005f40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	7b5b      	ldrb	r3, [r3, #13]
 8005f46:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005f48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	7b9b      	ldrb	r3, [r3, #14]
 8005f4e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8005f50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	7bdb      	ldrb	r3, [r3, #15]
 8005f56:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005f58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	7a5b      	ldrb	r3, [r3, #9]
 8005f5e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8005f60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	7a1b      	ldrb	r3, [r3, #8]
 8005f66:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005f68:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	7812      	ldrb	r2, [r2, #0]
 8005f6e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f70:	4a04      	ldr	r2, [pc, #16]	@ (8005f84 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005f72:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005f74:	6113      	str	r3, [r2, #16]
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	e000ed90 	.word	0xe000ed90

08005f88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005f90:	f7ff fe72 	bl	8005c78 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e37d      	b.n	800669c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a66      	ldr	r2, [pc, #408]	@ (8006140 <HAL_DMA_Init+0x1b8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d04a      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a65      	ldr	r2, [pc, #404]	@ (8006144 <HAL_DMA_Init+0x1bc>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d045      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a63      	ldr	r2, [pc, #396]	@ (8006148 <HAL_DMA_Init+0x1c0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d040      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a62      	ldr	r2, [pc, #392]	@ (800614c <HAL_DMA_Init+0x1c4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d03b      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a60      	ldr	r2, [pc, #384]	@ (8006150 <HAL_DMA_Init+0x1c8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d036      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a5f      	ldr	r2, [pc, #380]	@ (8006154 <HAL_DMA_Init+0x1cc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d031      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8006158 <HAL_DMA_Init+0x1d0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d02c      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a5c      	ldr	r2, [pc, #368]	@ (800615c <HAL_DMA_Init+0x1d4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d027      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a5a      	ldr	r2, [pc, #360]	@ (8006160 <HAL_DMA_Init+0x1d8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d022      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a59      	ldr	r2, [pc, #356]	@ (8006164 <HAL_DMA_Init+0x1dc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d01d      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a57      	ldr	r2, [pc, #348]	@ (8006168 <HAL_DMA_Init+0x1e0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d018      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a56      	ldr	r2, [pc, #344]	@ (800616c <HAL_DMA_Init+0x1e4>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d013      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a54      	ldr	r2, [pc, #336]	@ (8006170 <HAL_DMA_Init+0x1e8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00e      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a53      	ldr	r2, [pc, #332]	@ (8006174 <HAL_DMA_Init+0x1ec>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d009      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a51      	ldr	r2, [pc, #324]	@ (8006178 <HAL_DMA_Init+0x1f0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d004      	beq.n	8006040 <HAL_DMA_Init+0xb8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a50      	ldr	r2, [pc, #320]	@ (800617c <HAL_DMA_Init+0x1f4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d101      	bne.n	8006044 <HAL_DMA_Init+0xbc>
 8006040:	2301      	movs	r3, #1
 8006042:	e000      	b.n	8006046 <HAL_DMA_Init+0xbe>
 8006044:	2300      	movs	r3, #0
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 813c 	beq.w	80062c4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a37      	ldr	r2, [pc, #220]	@ (8006140 <HAL_DMA_Init+0x1b8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d04a      	beq.n	80060fc <HAL_DMA_Init+0x174>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a36      	ldr	r2, [pc, #216]	@ (8006144 <HAL_DMA_Init+0x1bc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d045      	beq.n	80060fc <HAL_DMA_Init+0x174>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a34      	ldr	r2, [pc, #208]	@ (8006148 <HAL_DMA_Init+0x1c0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d040      	beq.n	80060fc <HAL_DMA_Init+0x174>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a33      	ldr	r2, [pc, #204]	@ (800614c <HAL_DMA_Init+0x1c4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d03b      	beq.n	80060fc <HAL_DMA_Init+0x174>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a31      	ldr	r2, [pc, #196]	@ (8006150 <HAL_DMA_Init+0x1c8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d036      	beq.n	80060fc <HAL_DMA_Init+0x174>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a30      	ldr	r2, [pc, #192]	@ (8006154 <HAL_DMA_Init+0x1cc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d031      	beq.n	80060fc <HAL_DMA_Init+0x174>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a2e      	ldr	r2, [pc, #184]	@ (8006158 <HAL_DMA_Init+0x1d0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d02c      	beq.n	80060fc <HAL_DMA_Init+0x174>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2d      	ldr	r2, [pc, #180]	@ (800615c <HAL_DMA_Init+0x1d4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d027      	beq.n	80060fc <HAL_DMA_Init+0x174>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006160 <HAL_DMA_Init+0x1d8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d022      	beq.n	80060fc <HAL_DMA_Init+0x174>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006164 <HAL_DMA_Init+0x1dc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d01d      	beq.n	80060fc <HAL_DMA_Init+0x174>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a28      	ldr	r2, [pc, #160]	@ (8006168 <HAL_DMA_Init+0x1e0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d018      	beq.n	80060fc <HAL_DMA_Init+0x174>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a27      	ldr	r2, [pc, #156]	@ (800616c <HAL_DMA_Init+0x1e4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d013      	beq.n	80060fc <HAL_DMA_Init+0x174>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a25      	ldr	r2, [pc, #148]	@ (8006170 <HAL_DMA_Init+0x1e8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00e      	beq.n	80060fc <HAL_DMA_Init+0x174>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a24      	ldr	r2, [pc, #144]	@ (8006174 <HAL_DMA_Init+0x1ec>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d009      	beq.n	80060fc <HAL_DMA_Init+0x174>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a22      	ldr	r2, [pc, #136]	@ (8006178 <HAL_DMA_Init+0x1f0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d004      	beq.n	80060fc <HAL_DMA_Init+0x174>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a21      	ldr	r2, [pc, #132]	@ (800617c <HAL_DMA_Init+0x1f4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d108      	bne.n	800610e <HAL_DMA_Init+0x186>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	e007      	b.n	800611e <HAL_DMA_Init+0x196>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 0201 	bic.w	r2, r2, #1
 800611c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800611e:	e02f      	b.n	8006180 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006120:	f7ff fdaa 	bl	8005c78 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b05      	cmp	r3, #5
 800612c:	d928      	bls.n	8006180 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2203      	movs	r2, #3
 8006138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e2ad      	b.n	800669c <HAL_DMA_Init+0x714>
 8006140:	40020010 	.word	0x40020010
 8006144:	40020028 	.word	0x40020028
 8006148:	40020040 	.word	0x40020040
 800614c:	40020058 	.word	0x40020058
 8006150:	40020070 	.word	0x40020070
 8006154:	40020088 	.word	0x40020088
 8006158:	400200a0 	.word	0x400200a0
 800615c:	400200b8 	.word	0x400200b8
 8006160:	40020410 	.word	0x40020410
 8006164:	40020428 	.word	0x40020428
 8006168:	40020440 	.word	0x40020440
 800616c:	40020458 	.word	0x40020458
 8006170:	40020470 	.word	0x40020470
 8006174:	40020488 	.word	0x40020488
 8006178:	400204a0 	.word	0x400204a0
 800617c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1c8      	bne.n	8006120 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4b73      	ldr	r3, [pc, #460]	@ (8006368 <HAL_DMA_Init+0x3e0>)
 800619a:	4013      	ands	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80061a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80061be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d107      	bne.n	80061e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061dc:	4313      	orrs	r3, r2
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b28      	cmp	r3, #40	@ 0x28
 80061ea:	d903      	bls.n	80061f4 <HAL_DMA_Init+0x26c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80061f2:	d91f      	bls.n	8006234 <HAL_DMA_Init+0x2ac>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80061fa:	d903      	bls.n	8006204 <HAL_DMA_Init+0x27c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b42      	cmp	r3, #66	@ 0x42
 8006202:	d917      	bls.n	8006234 <HAL_DMA_Init+0x2ac>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b46      	cmp	r3, #70	@ 0x46
 800620a:	d903      	bls.n	8006214 <HAL_DMA_Init+0x28c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b48      	cmp	r3, #72	@ 0x48
 8006212:	d90f      	bls.n	8006234 <HAL_DMA_Init+0x2ac>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b4e      	cmp	r3, #78	@ 0x4e
 800621a:	d903      	bls.n	8006224 <HAL_DMA_Init+0x29c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	2b52      	cmp	r3, #82	@ 0x52
 8006222:	d907      	bls.n	8006234 <HAL_DMA_Init+0x2ac>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b73      	cmp	r3, #115	@ 0x73
 800622a:	d905      	bls.n	8006238 <HAL_DMA_Init+0x2b0>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b77      	cmp	r3, #119	@ 0x77
 8006232:	d801      	bhi.n	8006238 <HAL_DMA_Init+0x2b0>
 8006234:	2301      	movs	r3, #1
 8006236:	e000      	b.n	800623a <HAL_DMA_Init+0x2b2>
 8006238:	2300      	movs	r3, #0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006244:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f023 0307 	bic.w	r3, r3, #7
 800625c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626c:	2b04      	cmp	r3, #4
 800626e:	d117      	bne.n	80062a0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00e      	beq.n	80062a0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f002 fbe0 	bl	8008a48 <DMA_CheckFifoParam>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d008      	beq.n	80062a0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2240      	movs	r2, #64	@ 0x40
 8006292:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e1fd      	b.n	800669c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f002 fb1b 	bl	80088e4 <DMA_CalcBaseAndBitshift>
 80062ae:	4603      	mov	r3, r0
 80062b0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b6:	f003 031f 	and.w	r3, r3, #31
 80062ba:	223f      	movs	r2, #63	@ 0x3f
 80062bc:	409a      	lsls	r2, r3
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	609a      	str	r2, [r3, #8]
 80062c2:	e0fd      	b.n	80064c0 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a28      	ldr	r2, [pc, #160]	@ (800636c <HAL_DMA_Init+0x3e4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d04a      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a27      	ldr	r2, [pc, #156]	@ (8006370 <HAL_DMA_Init+0x3e8>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d045      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a25      	ldr	r2, [pc, #148]	@ (8006374 <HAL_DMA_Init+0x3ec>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d040      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a24      	ldr	r2, [pc, #144]	@ (8006378 <HAL_DMA_Init+0x3f0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d03b      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a22      	ldr	r2, [pc, #136]	@ (800637c <HAL_DMA_Init+0x3f4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d036      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a21      	ldr	r2, [pc, #132]	@ (8006380 <HAL_DMA_Init+0x3f8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d031      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a1f      	ldr	r2, [pc, #124]	@ (8006384 <HAL_DMA_Init+0x3fc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d02c      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1e      	ldr	r2, [pc, #120]	@ (8006388 <HAL_DMA_Init+0x400>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d027      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1c      	ldr	r2, [pc, #112]	@ (800638c <HAL_DMA_Init+0x404>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d022      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1b      	ldr	r2, [pc, #108]	@ (8006390 <HAL_DMA_Init+0x408>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d01d      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a19      	ldr	r2, [pc, #100]	@ (8006394 <HAL_DMA_Init+0x40c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d018      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a18      	ldr	r2, [pc, #96]	@ (8006398 <HAL_DMA_Init+0x410>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a16      	ldr	r2, [pc, #88]	@ (800639c <HAL_DMA_Init+0x414>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00e      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a15      	ldr	r2, [pc, #84]	@ (80063a0 <HAL_DMA_Init+0x418>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d009      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a13      	ldr	r2, [pc, #76]	@ (80063a4 <HAL_DMA_Init+0x41c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <HAL_DMA_Init+0x3dc>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a12      	ldr	r2, [pc, #72]	@ (80063a8 <HAL_DMA_Init+0x420>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d123      	bne.n	80063ac <HAL_DMA_Init+0x424>
 8006364:	2301      	movs	r3, #1
 8006366:	e022      	b.n	80063ae <HAL_DMA_Init+0x426>
 8006368:	fe10803f 	.word	0xfe10803f
 800636c:	48022c08 	.word	0x48022c08
 8006370:	48022c1c 	.word	0x48022c1c
 8006374:	48022c30 	.word	0x48022c30
 8006378:	48022c44 	.word	0x48022c44
 800637c:	48022c58 	.word	0x48022c58
 8006380:	48022c6c 	.word	0x48022c6c
 8006384:	48022c80 	.word	0x48022c80
 8006388:	48022c94 	.word	0x48022c94
 800638c:	58025408 	.word	0x58025408
 8006390:	5802541c 	.word	0x5802541c
 8006394:	58025430 	.word	0x58025430
 8006398:	58025444 	.word	0x58025444
 800639c:	58025458 	.word	0x58025458
 80063a0:	5802546c 	.word	0x5802546c
 80063a4:	58025480 	.word	0x58025480
 80063a8:	58025494 	.word	0x58025494
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d07d      	beq.n	80064ae <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a7f      	ldr	r2, [pc, #508]	@ (80065b4 <HAL_DMA_Init+0x62c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d021      	beq.n	8006400 <HAL_DMA_Init+0x478>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a7d      	ldr	r2, [pc, #500]	@ (80065b8 <HAL_DMA_Init+0x630>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01c      	beq.n	8006400 <HAL_DMA_Init+0x478>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a7c      	ldr	r2, [pc, #496]	@ (80065bc <HAL_DMA_Init+0x634>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d017      	beq.n	8006400 <HAL_DMA_Init+0x478>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a7a      	ldr	r2, [pc, #488]	@ (80065c0 <HAL_DMA_Init+0x638>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d012      	beq.n	8006400 <HAL_DMA_Init+0x478>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a79      	ldr	r2, [pc, #484]	@ (80065c4 <HAL_DMA_Init+0x63c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00d      	beq.n	8006400 <HAL_DMA_Init+0x478>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a77      	ldr	r2, [pc, #476]	@ (80065c8 <HAL_DMA_Init+0x640>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d008      	beq.n	8006400 <HAL_DMA_Init+0x478>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a76      	ldr	r2, [pc, #472]	@ (80065cc <HAL_DMA_Init+0x644>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <HAL_DMA_Init+0x478>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a74      	ldr	r2, [pc, #464]	@ (80065d0 <HAL_DMA_Init+0x648>)
 80063fe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4b6e      	ldr	r3, [pc, #440]	@ (80065d4 <HAL_DMA_Init+0x64c>)
 800641c:	4013      	ands	r3, r2
 800641e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	2b40      	cmp	r3, #64	@ 0x40
 8006426:	d008      	beq.n	800643a <HAL_DMA_Init+0x4b2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b80      	cmp	r3, #128	@ 0x80
 800642e:	d102      	bne.n	8006436 <HAL_DMA_Init+0x4ae>
 8006430:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006434:	e002      	b.n	800643c <HAL_DMA_Init+0x4b4>
 8006436:	2300      	movs	r3, #0
 8006438:	e000      	b.n	800643c <HAL_DMA_Init+0x4b4>
 800643a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	68d2      	ldr	r2, [r2, #12]
 8006440:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006442:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800644a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006452:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800645a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006462:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800646a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	4b55      	ldr	r3, [pc, #340]	@ (80065d8 <HAL_DMA_Init+0x650>)
 8006482:	4413      	add	r3, r2
 8006484:	4a55      	ldr	r2, [pc, #340]	@ (80065dc <HAL_DMA_Init+0x654>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	009a      	lsls	r2, r3, #2
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f002 fa26 	bl	80088e4 <DMA_CalcBaseAndBitshift>
 8006498:	4603      	mov	r3, r0
 800649a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	2201      	movs	r2, #1
 80064a6:	409a      	lsls	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	605a      	str	r2, [r3, #4]
 80064ac:	e008      	b.n	80064c0 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2240      	movs	r2, #64	@ 0x40
 80064b2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2203      	movs	r2, #3
 80064b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e0ed      	b.n	800669c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a46      	ldr	r2, [pc, #280]	@ (80065e0 <HAL_DMA_Init+0x658>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d072      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a45      	ldr	r2, [pc, #276]	@ (80065e4 <HAL_DMA_Init+0x65c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d06d      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a43      	ldr	r2, [pc, #268]	@ (80065e8 <HAL_DMA_Init+0x660>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d068      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a42      	ldr	r2, [pc, #264]	@ (80065ec <HAL_DMA_Init+0x664>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d063      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a40      	ldr	r2, [pc, #256]	@ (80065f0 <HAL_DMA_Init+0x668>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d05e      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a3f      	ldr	r2, [pc, #252]	@ (80065f4 <HAL_DMA_Init+0x66c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d059      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a3d      	ldr	r2, [pc, #244]	@ (80065f8 <HAL_DMA_Init+0x670>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d054      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a3c      	ldr	r2, [pc, #240]	@ (80065fc <HAL_DMA_Init+0x674>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d04f      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a3a      	ldr	r2, [pc, #232]	@ (8006600 <HAL_DMA_Init+0x678>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d04a      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a39      	ldr	r2, [pc, #228]	@ (8006604 <HAL_DMA_Init+0x67c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d045      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a37      	ldr	r2, [pc, #220]	@ (8006608 <HAL_DMA_Init+0x680>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d040      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a36      	ldr	r2, [pc, #216]	@ (800660c <HAL_DMA_Init+0x684>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d03b      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a34      	ldr	r2, [pc, #208]	@ (8006610 <HAL_DMA_Init+0x688>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d036      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a33      	ldr	r2, [pc, #204]	@ (8006614 <HAL_DMA_Init+0x68c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d031      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a31      	ldr	r2, [pc, #196]	@ (8006618 <HAL_DMA_Init+0x690>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d02c      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a30      	ldr	r2, [pc, #192]	@ (800661c <HAL_DMA_Init+0x694>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d027      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a13      	ldr	r2, [pc, #76]	@ (80065b4 <HAL_DMA_Init+0x62c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d022      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a12      	ldr	r2, [pc, #72]	@ (80065b8 <HAL_DMA_Init+0x630>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d01d      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a10      	ldr	r2, [pc, #64]	@ (80065bc <HAL_DMA_Init+0x634>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d018      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a0f      	ldr	r2, [pc, #60]	@ (80065c0 <HAL_DMA_Init+0x638>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d013      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a0d      	ldr	r2, [pc, #52]	@ (80065c4 <HAL_DMA_Init+0x63c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a0c      	ldr	r2, [pc, #48]	@ (80065c8 <HAL_DMA_Init+0x640>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a0a      	ldr	r2, [pc, #40]	@ (80065cc <HAL_DMA_Init+0x644>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_DMA_Init+0x628>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a09      	ldr	r2, [pc, #36]	@ (80065d0 <HAL_DMA_Init+0x648>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d137      	bne.n	8006620 <HAL_DMA_Init+0x698>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e036      	b.n	8006622 <HAL_DMA_Init+0x69a>
 80065b4:	58025408 	.word	0x58025408
 80065b8:	5802541c 	.word	0x5802541c
 80065bc:	58025430 	.word	0x58025430
 80065c0:	58025444 	.word	0x58025444
 80065c4:	58025458 	.word	0x58025458
 80065c8:	5802546c 	.word	0x5802546c
 80065cc:	58025480 	.word	0x58025480
 80065d0:	58025494 	.word	0x58025494
 80065d4:	fffe000f 	.word	0xfffe000f
 80065d8:	a7fdabf8 	.word	0xa7fdabf8
 80065dc:	cccccccd 	.word	0xcccccccd
 80065e0:	40020010 	.word	0x40020010
 80065e4:	40020028 	.word	0x40020028
 80065e8:	40020040 	.word	0x40020040
 80065ec:	40020058 	.word	0x40020058
 80065f0:	40020070 	.word	0x40020070
 80065f4:	40020088 	.word	0x40020088
 80065f8:	400200a0 	.word	0x400200a0
 80065fc:	400200b8 	.word	0x400200b8
 8006600:	40020410 	.word	0x40020410
 8006604:	40020428 	.word	0x40020428
 8006608:	40020440 	.word	0x40020440
 800660c:	40020458 	.word	0x40020458
 8006610:	40020470 	.word	0x40020470
 8006614:	40020488 	.word	0x40020488
 8006618:	400204a0 	.word	0x400204a0
 800661c:	400204b8 	.word	0x400204b8
 8006620:	2300      	movs	r3, #0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d032      	beq.n	800668c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f002 fa8a 	bl	8008b40 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b80      	cmp	r3, #128	@ 0x80
 8006632:	d102      	bne.n	800663a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800664e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d010      	beq.n	800667a <HAL_DMA_Init+0x6f2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d80c      	bhi.n	800667a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f002 fb07 	bl	8008c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006676:	605a      	str	r2, [r3, #4]
 8006678:	e008      	b.n	800668c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3718      	adds	r7, #24
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e226      	b.n	8006b0e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d101      	bne.n	80066ce <HAL_DMA_Start_IT+0x2a>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e21f      	b.n	8006b0e <HAL_DMA_Start_IT+0x46a>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	f040 820a 	bne.w	8006af8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a68      	ldr	r2, [pc, #416]	@ (8006898 <HAL_DMA_Start_IT+0x1f4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d04a      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a66      	ldr	r2, [pc, #408]	@ (800689c <HAL_DMA_Start_IT+0x1f8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d045      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a65      	ldr	r2, [pc, #404]	@ (80068a0 <HAL_DMA_Start_IT+0x1fc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d040      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a63      	ldr	r2, [pc, #396]	@ (80068a4 <HAL_DMA_Start_IT+0x200>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d03b      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a62      	ldr	r2, [pc, #392]	@ (80068a8 <HAL_DMA_Start_IT+0x204>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d036      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a60      	ldr	r2, [pc, #384]	@ (80068ac <HAL_DMA_Start_IT+0x208>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d031      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a5f      	ldr	r2, [pc, #380]	@ (80068b0 <HAL_DMA_Start_IT+0x20c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d02c      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a5d      	ldr	r2, [pc, #372]	@ (80068b4 <HAL_DMA_Start_IT+0x210>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d027      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a5c      	ldr	r2, [pc, #368]	@ (80068b8 <HAL_DMA_Start_IT+0x214>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d022      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a5a      	ldr	r2, [pc, #360]	@ (80068bc <HAL_DMA_Start_IT+0x218>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d01d      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a59      	ldr	r2, [pc, #356]	@ (80068c0 <HAL_DMA_Start_IT+0x21c>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d018      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a57      	ldr	r2, [pc, #348]	@ (80068c4 <HAL_DMA_Start_IT+0x220>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d013      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a56      	ldr	r2, [pc, #344]	@ (80068c8 <HAL_DMA_Start_IT+0x224>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00e      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a54      	ldr	r2, [pc, #336]	@ (80068cc <HAL_DMA_Start_IT+0x228>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d009      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a53      	ldr	r2, [pc, #332]	@ (80068d0 <HAL_DMA_Start_IT+0x22c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d004      	beq.n	8006792 <HAL_DMA_Start_IT+0xee>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a51      	ldr	r2, [pc, #324]	@ (80068d4 <HAL_DMA_Start_IT+0x230>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d108      	bne.n	80067a4 <HAL_DMA_Start_IT+0x100>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0201 	bic.w	r2, r2, #1
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	e007      	b.n	80067b4 <HAL_DMA_Start_IT+0x110>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0201 	bic.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f001 feae 	bl	800851c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a34      	ldr	r2, [pc, #208]	@ (8006898 <HAL_DMA_Start_IT+0x1f4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d04a      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a33      	ldr	r2, [pc, #204]	@ (800689c <HAL_DMA_Start_IT+0x1f8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d045      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a31      	ldr	r2, [pc, #196]	@ (80068a0 <HAL_DMA_Start_IT+0x1fc>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d040      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a30      	ldr	r2, [pc, #192]	@ (80068a4 <HAL_DMA_Start_IT+0x200>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d03b      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a2e      	ldr	r2, [pc, #184]	@ (80068a8 <HAL_DMA_Start_IT+0x204>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d036      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a2d      	ldr	r2, [pc, #180]	@ (80068ac <HAL_DMA_Start_IT+0x208>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d031      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a2b      	ldr	r2, [pc, #172]	@ (80068b0 <HAL_DMA_Start_IT+0x20c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02c      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2a      	ldr	r2, [pc, #168]	@ (80068b4 <HAL_DMA_Start_IT+0x210>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d027      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a28      	ldr	r2, [pc, #160]	@ (80068b8 <HAL_DMA_Start_IT+0x214>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d022      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a27      	ldr	r2, [pc, #156]	@ (80068bc <HAL_DMA_Start_IT+0x218>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d01d      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a25      	ldr	r2, [pc, #148]	@ (80068c0 <HAL_DMA_Start_IT+0x21c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a24      	ldr	r2, [pc, #144]	@ (80068c4 <HAL_DMA_Start_IT+0x220>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a22      	ldr	r2, [pc, #136]	@ (80068c8 <HAL_DMA_Start_IT+0x224>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a21      	ldr	r2, [pc, #132]	@ (80068cc <HAL_DMA_Start_IT+0x228>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1f      	ldr	r2, [pc, #124]	@ (80068d0 <HAL_DMA_Start_IT+0x22c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_DMA_Start_IT+0x1bc>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1e      	ldr	r2, [pc, #120]	@ (80068d4 <HAL_DMA_Start_IT+0x230>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d101      	bne.n	8006864 <HAL_DMA_Start_IT+0x1c0>
 8006860:	2301      	movs	r3, #1
 8006862:	e000      	b.n	8006866 <HAL_DMA_Start_IT+0x1c2>
 8006864:	2300      	movs	r3, #0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d036      	beq.n	80068d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f023 021e 	bic.w	r2, r3, #30
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0216 	orr.w	r2, r2, #22
 800687c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d03e      	beq.n	8006904 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f042 0208 	orr.w	r2, r2, #8
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	e035      	b.n	8006904 <HAL_DMA_Start_IT+0x260>
 8006898:	40020010 	.word	0x40020010
 800689c:	40020028 	.word	0x40020028
 80068a0:	40020040 	.word	0x40020040
 80068a4:	40020058 	.word	0x40020058
 80068a8:	40020070 	.word	0x40020070
 80068ac:	40020088 	.word	0x40020088
 80068b0:	400200a0 	.word	0x400200a0
 80068b4:	400200b8 	.word	0x400200b8
 80068b8:	40020410 	.word	0x40020410
 80068bc:	40020428 	.word	0x40020428
 80068c0:	40020440 	.word	0x40020440
 80068c4:	40020458 	.word	0x40020458
 80068c8:	40020470 	.word	0x40020470
 80068cc:	40020488 	.word	0x40020488
 80068d0:	400204a0 	.word	0x400204a0
 80068d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f023 020e 	bic.w	r2, r3, #14
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 020a 	orr.w	r2, r2, #10
 80068ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0204 	orr.w	r2, r2, #4
 8006902:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a83      	ldr	r2, [pc, #524]	@ (8006b18 <HAL_DMA_Start_IT+0x474>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d072      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a82      	ldr	r2, [pc, #520]	@ (8006b1c <HAL_DMA_Start_IT+0x478>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d06d      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a80      	ldr	r2, [pc, #512]	@ (8006b20 <HAL_DMA_Start_IT+0x47c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d068      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a7f      	ldr	r2, [pc, #508]	@ (8006b24 <HAL_DMA_Start_IT+0x480>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d063      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a7d      	ldr	r2, [pc, #500]	@ (8006b28 <HAL_DMA_Start_IT+0x484>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d05e      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a7c      	ldr	r2, [pc, #496]	@ (8006b2c <HAL_DMA_Start_IT+0x488>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d059      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a7a      	ldr	r2, [pc, #488]	@ (8006b30 <HAL_DMA_Start_IT+0x48c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d054      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a79      	ldr	r2, [pc, #484]	@ (8006b34 <HAL_DMA_Start_IT+0x490>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d04f      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a77      	ldr	r2, [pc, #476]	@ (8006b38 <HAL_DMA_Start_IT+0x494>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d04a      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a76      	ldr	r2, [pc, #472]	@ (8006b3c <HAL_DMA_Start_IT+0x498>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d045      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a74      	ldr	r2, [pc, #464]	@ (8006b40 <HAL_DMA_Start_IT+0x49c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d040      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a73      	ldr	r2, [pc, #460]	@ (8006b44 <HAL_DMA_Start_IT+0x4a0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d03b      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a71      	ldr	r2, [pc, #452]	@ (8006b48 <HAL_DMA_Start_IT+0x4a4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d036      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a70      	ldr	r2, [pc, #448]	@ (8006b4c <HAL_DMA_Start_IT+0x4a8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d031      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a6e      	ldr	r2, [pc, #440]	@ (8006b50 <HAL_DMA_Start_IT+0x4ac>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d02c      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a6d      	ldr	r2, [pc, #436]	@ (8006b54 <HAL_DMA_Start_IT+0x4b0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d027      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a6b      	ldr	r2, [pc, #428]	@ (8006b58 <HAL_DMA_Start_IT+0x4b4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d022      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a6a      	ldr	r2, [pc, #424]	@ (8006b5c <HAL_DMA_Start_IT+0x4b8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d01d      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a68      	ldr	r2, [pc, #416]	@ (8006b60 <HAL_DMA_Start_IT+0x4bc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a67      	ldr	r2, [pc, #412]	@ (8006b64 <HAL_DMA_Start_IT+0x4c0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a65      	ldr	r2, [pc, #404]	@ (8006b68 <HAL_DMA_Start_IT+0x4c4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a64      	ldr	r2, [pc, #400]	@ (8006b6c <HAL_DMA_Start_IT+0x4c8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a62      	ldr	r2, [pc, #392]	@ (8006b70 <HAL_DMA_Start_IT+0x4cc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_DMA_Start_IT+0x350>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a61      	ldr	r2, [pc, #388]	@ (8006b74 <HAL_DMA_Start_IT+0x4d0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d101      	bne.n	80069f8 <HAL_DMA_Start_IT+0x354>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e000      	b.n	80069fa <HAL_DMA_Start_IT+0x356>
 80069f8:	2300      	movs	r3, #0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d01a      	beq.n	8006a34 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d007      	beq.n	8006a1c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a1a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a32:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a37      	ldr	r2, [pc, #220]	@ (8006b18 <HAL_DMA_Start_IT+0x474>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d04a      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a36      	ldr	r2, [pc, #216]	@ (8006b1c <HAL_DMA_Start_IT+0x478>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d045      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a34      	ldr	r2, [pc, #208]	@ (8006b20 <HAL_DMA_Start_IT+0x47c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d040      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a33      	ldr	r2, [pc, #204]	@ (8006b24 <HAL_DMA_Start_IT+0x480>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d03b      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a31      	ldr	r2, [pc, #196]	@ (8006b28 <HAL_DMA_Start_IT+0x484>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d036      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a30      	ldr	r2, [pc, #192]	@ (8006b2c <HAL_DMA_Start_IT+0x488>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d031      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a2e      	ldr	r2, [pc, #184]	@ (8006b30 <HAL_DMA_Start_IT+0x48c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d02c      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8006b34 <HAL_DMA_Start_IT+0x490>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d027      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a2b      	ldr	r2, [pc, #172]	@ (8006b38 <HAL_DMA_Start_IT+0x494>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d022      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2a      	ldr	r2, [pc, #168]	@ (8006b3c <HAL_DMA_Start_IT+0x498>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d01d      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a28      	ldr	r2, [pc, #160]	@ (8006b40 <HAL_DMA_Start_IT+0x49c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d018      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a27      	ldr	r2, [pc, #156]	@ (8006b44 <HAL_DMA_Start_IT+0x4a0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d013      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a25      	ldr	r2, [pc, #148]	@ (8006b48 <HAL_DMA_Start_IT+0x4a4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00e      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a24      	ldr	r2, [pc, #144]	@ (8006b4c <HAL_DMA_Start_IT+0x4a8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d009      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a22      	ldr	r2, [pc, #136]	@ (8006b50 <HAL_DMA_Start_IT+0x4ac>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_DMA_Start_IT+0x430>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a21      	ldr	r2, [pc, #132]	@ (8006b54 <HAL_DMA_Start_IT+0x4b0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d108      	bne.n	8006ae6 <HAL_DMA_Start_IT+0x442>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0201 	orr.w	r2, r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e012      	b.n	8006b0c <HAL_DMA_Start_IT+0x468>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0201 	orr.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e009      	b.n	8006b0c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006afe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	40020010 	.word	0x40020010
 8006b1c:	40020028 	.word	0x40020028
 8006b20:	40020040 	.word	0x40020040
 8006b24:	40020058 	.word	0x40020058
 8006b28:	40020070 	.word	0x40020070
 8006b2c:	40020088 	.word	0x40020088
 8006b30:	400200a0 	.word	0x400200a0
 8006b34:	400200b8 	.word	0x400200b8
 8006b38:	40020410 	.word	0x40020410
 8006b3c:	40020428 	.word	0x40020428
 8006b40:	40020440 	.word	0x40020440
 8006b44:	40020458 	.word	0x40020458
 8006b48:	40020470 	.word	0x40020470
 8006b4c:	40020488 	.word	0x40020488
 8006b50:	400204a0 	.word	0x400204a0
 8006b54:	400204b8 	.word	0x400204b8
 8006b58:	58025408 	.word	0x58025408
 8006b5c:	5802541c 	.word	0x5802541c
 8006b60:	58025430 	.word	0x58025430
 8006b64:	58025444 	.word	0x58025444
 8006b68:	58025458 	.word	0x58025458
 8006b6c:	5802546c 	.word	0x5802546c
 8006b70:	58025480 	.word	0x58025480
 8006b74:	58025494 	.word	0x58025494

08006b78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006b80:	f7ff f87a 	bl	8005c78 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e2dc      	b.n	800714a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d008      	beq.n	8006bae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2280      	movs	r2, #128	@ 0x80
 8006ba0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e2cd      	b.n	800714a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a76      	ldr	r2, [pc, #472]	@ (8006d8c <HAL_DMA_Abort+0x214>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d04a      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a74      	ldr	r2, [pc, #464]	@ (8006d90 <HAL_DMA_Abort+0x218>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d045      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a73      	ldr	r2, [pc, #460]	@ (8006d94 <HAL_DMA_Abort+0x21c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d040      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a71      	ldr	r2, [pc, #452]	@ (8006d98 <HAL_DMA_Abort+0x220>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d03b      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a70      	ldr	r2, [pc, #448]	@ (8006d9c <HAL_DMA_Abort+0x224>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d036      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a6e      	ldr	r2, [pc, #440]	@ (8006da0 <HAL_DMA_Abort+0x228>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d031      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a6d      	ldr	r2, [pc, #436]	@ (8006da4 <HAL_DMA_Abort+0x22c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d02c      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a6b      	ldr	r2, [pc, #428]	@ (8006da8 <HAL_DMA_Abort+0x230>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d027      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a6a      	ldr	r2, [pc, #424]	@ (8006dac <HAL_DMA_Abort+0x234>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d022      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a68      	ldr	r2, [pc, #416]	@ (8006db0 <HAL_DMA_Abort+0x238>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d01d      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a67      	ldr	r2, [pc, #412]	@ (8006db4 <HAL_DMA_Abort+0x23c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d018      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a65      	ldr	r2, [pc, #404]	@ (8006db8 <HAL_DMA_Abort+0x240>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d013      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a64      	ldr	r2, [pc, #400]	@ (8006dbc <HAL_DMA_Abort+0x244>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d00e      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a62      	ldr	r2, [pc, #392]	@ (8006dc0 <HAL_DMA_Abort+0x248>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d009      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a61      	ldr	r2, [pc, #388]	@ (8006dc4 <HAL_DMA_Abort+0x24c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d004      	beq.n	8006c4e <HAL_DMA_Abort+0xd6>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a5f      	ldr	r2, [pc, #380]	@ (8006dc8 <HAL_DMA_Abort+0x250>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d101      	bne.n	8006c52 <HAL_DMA_Abort+0xda>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <HAL_DMA_Abort+0xdc>
 8006c52:	2300      	movs	r3, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d013      	beq.n	8006c80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 021e 	bic.w	r2, r2, #30
 8006c66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695a      	ldr	r2, [r3, #20]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	e00a      	b.n	8006c96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 020e 	bic.w	r2, r2, #14
 8006c8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a3c      	ldr	r2, [pc, #240]	@ (8006d8c <HAL_DMA_Abort+0x214>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d072      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8006d90 <HAL_DMA_Abort+0x218>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d06d      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a39      	ldr	r2, [pc, #228]	@ (8006d94 <HAL_DMA_Abort+0x21c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d068      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a37      	ldr	r2, [pc, #220]	@ (8006d98 <HAL_DMA_Abort+0x220>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d063      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a36      	ldr	r2, [pc, #216]	@ (8006d9c <HAL_DMA_Abort+0x224>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d05e      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a34      	ldr	r2, [pc, #208]	@ (8006da0 <HAL_DMA_Abort+0x228>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d059      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a33      	ldr	r2, [pc, #204]	@ (8006da4 <HAL_DMA_Abort+0x22c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d054      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a31      	ldr	r2, [pc, #196]	@ (8006da8 <HAL_DMA_Abort+0x230>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d04f      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a30      	ldr	r2, [pc, #192]	@ (8006dac <HAL_DMA_Abort+0x234>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d04a      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8006db0 <HAL_DMA_Abort+0x238>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d045      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8006db4 <HAL_DMA_Abort+0x23c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d040      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a2b      	ldr	r2, [pc, #172]	@ (8006db8 <HAL_DMA_Abort+0x240>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d03b      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a2a      	ldr	r2, [pc, #168]	@ (8006dbc <HAL_DMA_Abort+0x244>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d036      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a28      	ldr	r2, [pc, #160]	@ (8006dc0 <HAL_DMA_Abort+0x248>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d031      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a27      	ldr	r2, [pc, #156]	@ (8006dc4 <HAL_DMA_Abort+0x24c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d02c      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a25      	ldr	r2, [pc, #148]	@ (8006dc8 <HAL_DMA_Abort+0x250>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d027      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a24      	ldr	r2, [pc, #144]	@ (8006dcc <HAL_DMA_Abort+0x254>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d022      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a22      	ldr	r2, [pc, #136]	@ (8006dd0 <HAL_DMA_Abort+0x258>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d01d      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a21      	ldr	r2, [pc, #132]	@ (8006dd4 <HAL_DMA_Abort+0x25c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d018      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd8 <HAL_DMA_Abort+0x260>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a1e      	ldr	r2, [pc, #120]	@ (8006ddc <HAL_DMA_Abort+0x264>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00e      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006de0 <HAL_DMA_Abort+0x268>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d009      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1b      	ldr	r2, [pc, #108]	@ (8006de4 <HAL_DMA_Abort+0x26c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d004      	beq.n	8006d86 <HAL_DMA_Abort+0x20e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a19      	ldr	r2, [pc, #100]	@ (8006de8 <HAL_DMA_Abort+0x270>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d132      	bne.n	8006dec <HAL_DMA_Abort+0x274>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e031      	b.n	8006dee <HAL_DMA_Abort+0x276>
 8006d8a:	bf00      	nop
 8006d8c:	40020010 	.word	0x40020010
 8006d90:	40020028 	.word	0x40020028
 8006d94:	40020040 	.word	0x40020040
 8006d98:	40020058 	.word	0x40020058
 8006d9c:	40020070 	.word	0x40020070
 8006da0:	40020088 	.word	0x40020088
 8006da4:	400200a0 	.word	0x400200a0
 8006da8:	400200b8 	.word	0x400200b8
 8006dac:	40020410 	.word	0x40020410
 8006db0:	40020428 	.word	0x40020428
 8006db4:	40020440 	.word	0x40020440
 8006db8:	40020458 	.word	0x40020458
 8006dbc:	40020470 	.word	0x40020470
 8006dc0:	40020488 	.word	0x40020488
 8006dc4:	400204a0 	.word	0x400204a0
 8006dc8:	400204b8 	.word	0x400204b8
 8006dcc:	58025408 	.word	0x58025408
 8006dd0:	5802541c 	.word	0x5802541c
 8006dd4:	58025430 	.word	0x58025430
 8006dd8:	58025444 	.word	0x58025444
 8006ddc:	58025458 	.word	0x58025458
 8006de0:	5802546c 	.word	0x5802546c
 8006de4:	58025480 	.word	0x58025480
 8006de8:	58025494 	.word	0x58025494
 8006dec:	2300      	movs	r3, #0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d007      	beq.n	8006e02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a6d      	ldr	r2, [pc, #436]	@ (8006fbc <HAL_DMA_Abort+0x444>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d04a      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a6b      	ldr	r2, [pc, #428]	@ (8006fc0 <HAL_DMA_Abort+0x448>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d045      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8006fc4 <HAL_DMA_Abort+0x44c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d040      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a68      	ldr	r2, [pc, #416]	@ (8006fc8 <HAL_DMA_Abort+0x450>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d03b      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a67      	ldr	r2, [pc, #412]	@ (8006fcc <HAL_DMA_Abort+0x454>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d036      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a65      	ldr	r2, [pc, #404]	@ (8006fd0 <HAL_DMA_Abort+0x458>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d031      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a64      	ldr	r2, [pc, #400]	@ (8006fd4 <HAL_DMA_Abort+0x45c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d02c      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a62      	ldr	r2, [pc, #392]	@ (8006fd8 <HAL_DMA_Abort+0x460>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d027      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a61      	ldr	r2, [pc, #388]	@ (8006fdc <HAL_DMA_Abort+0x464>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d022      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a5f      	ldr	r2, [pc, #380]	@ (8006fe0 <HAL_DMA_Abort+0x468>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d01d      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a5e      	ldr	r2, [pc, #376]	@ (8006fe4 <HAL_DMA_Abort+0x46c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d018      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a5c      	ldr	r2, [pc, #368]	@ (8006fe8 <HAL_DMA_Abort+0x470>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d013      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a5b      	ldr	r2, [pc, #364]	@ (8006fec <HAL_DMA_Abort+0x474>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00e      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a59      	ldr	r2, [pc, #356]	@ (8006ff0 <HAL_DMA_Abort+0x478>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d009      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a58      	ldr	r2, [pc, #352]	@ (8006ff4 <HAL_DMA_Abort+0x47c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d004      	beq.n	8006ea2 <HAL_DMA_Abort+0x32a>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a56      	ldr	r2, [pc, #344]	@ (8006ff8 <HAL_DMA_Abort+0x480>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d108      	bne.n	8006eb4 <HAL_DMA_Abort+0x33c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0201 	bic.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	e007      	b.n	8006ec4 <HAL_DMA_Abort+0x34c>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0201 	bic.w	r2, r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006ec4:	e013      	b.n	8006eee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ec6:	f7fe fed7 	bl	8005c78 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b05      	cmp	r3, #5
 8006ed2:	d90c      	bls.n	8006eee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2203      	movs	r2, #3
 8006ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e12d      	b.n	800714a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e5      	bne.n	8006ec6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a2f      	ldr	r2, [pc, #188]	@ (8006fbc <HAL_DMA_Abort+0x444>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d04a      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a2d      	ldr	r2, [pc, #180]	@ (8006fc0 <HAL_DMA_Abort+0x448>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d045      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a2c      	ldr	r2, [pc, #176]	@ (8006fc4 <HAL_DMA_Abort+0x44c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d040      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc8 <HAL_DMA_Abort+0x450>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d03b      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a29      	ldr	r2, [pc, #164]	@ (8006fcc <HAL_DMA_Abort+0x454>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d036      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a27      	ldr	r2, [pc, #156]	@ (8006fd0 <HAL_DMA_Abort+0x458>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d031      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a26      	ldr	r2, [pc, #152]	@ (8006fd4 <HAL_DMA_Abort+0x45c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d02c      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a24      	ldr	r2, [pc, #144]	@ (8006fd8 <HAL_DMA_Abort+0x460>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d027      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a23      	ldr	r2, [pc, #140]	@ (8006fdc <HAL_DMA_Abort+0x464>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d022      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a21      	ldr	r2, [pc, #132]	@ (8006fe0 <HAL_DMA_Abort+0x468>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d01d      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a20      	ldr	r2, [pc, #128]	@ (8006fe4 <HAL_DMA_Abort+0x46c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d018      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8006fe8 <HAL_DMA_Abort+0x470>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d013      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1d      	ldr	r2, [pc, #116]	@ (8006fec <HAL_DMA_Abort+0x474>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00e      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff0 <HAL_DMA_Abort+0x478>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d009      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ff4 <HAL_DMA_Abort+0x47c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d004      	beq.n	8006f9a <HAL_DMA_Abort+0x422>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a18      	ldr	r2, [pc, #96]	@ (8006ff8 <HAL_DMA_Abort+0x480>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d101      	bne.n	8006f9e <HAL_DMA_Abort+0x426>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <HAL_DMA_Abort+0x428>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d02b      	beq.n	8006ffc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fa8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fae:	f003 031f 	and.w	r3, r3, #31
 8006fb2:	223f      	movs	r2, #63	@ 0x3f
 8006fb4:	409a      	lsls	r2, r3
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	609a      	str	r2, [r3, #8]
 8006fba:	e02a      	b.n	8007012 <HAL_DMA_Abort+0x49a>
 8006fbc:	40020010 	.word	0x40020010
 8006fc0:	40020028 	.word	0x40020028
 8006fc4:	40020040 	.word	0x40020040
 8006fc8:	40020058 	.word	0x40020058
 8006fcc:	40020070 	.word	0x40020070
 8006fd0:	40020088 	.word	0x40020088
 8006fd4:	400200a0 	.word	0x400200a0
 8006fd8:	400200b8 	.word	0x400200b8
 8006fdc:	40020410 	.word	0x40020410
 8006fe0:	40020428 	.word	0x40020428
 8006fe4:	40020440 	.word	0x40020440
 8006fe8:	40020458 	.word	0x40020458
 8006fec:	40020470 	.word	0x40020470
 8006ff0:	40020488 	.word	0x40020488
 8006ff4:	400204a0 	.word	0x400204a0
 8006ff8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007000:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	2201      	movs	r2, #1
 800700c:	409a      	lsls	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a4f      	ldr	r2, [pc, #316]	@ (8007154 <HAL_DMA_Abort+0x5dc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d072      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a4d      	ldr	r2, [pc, #308]	@ (8007158 <HAL_DMA_Abort+0x5e0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d06d      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a4c      	ldr	r2, [pc, #304]	@ (800715c <HAL_DMA_Abort+0x5e4>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d068      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a4a      	ldr	r2, [pc, #296]	@ (8007160 <HAL_DMA_Abort+0x5e8>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d063      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a49      	ldr	r2, [pc, #292]	@ (8007164 <HAL_DMA_Abort+0x5ec>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d05e      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a47      	ldr	r2, [pc, #284]	@ (8007168 <HAL_DMA_Abort+0x5f0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d059      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a46      	ldr	r2, [pc, #280]	@ (800716c <HAL_DMA_Abort+0x5f4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d054      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a44      	ldr	r2, [pc, #272]	@ (8007170 <HAL_DMA_Abort+0x5f8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d04f      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a43      	ldr	r2, [pc, #268]	@ (8007174 <HAL_DMA_Abort+0x5fc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d04a      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a41      	ldr	r2, [pc, #260]	@ (8007178 <HAL_DMA_Abort+0x600>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d045      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a40      	ldr	r2, [pc, #256]	@ (800717c <HAL_DMA_Abort+0x604>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d040      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a3e      	ldr	r2, [pc, #248]	@ (8007180 <HAL_DMA_Abort+0x608>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d03b      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a3d      	ldr	r2, [pc, #244]	@ (8007184 <HAL_DMA_Abort+0x60c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d036      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a3b      	ldr	r2, [pc, #236]	@ (8007188 <HAL_DMA_Abort+0x610>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d031      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a3a      	ldr	r2, [pc, #232]	@ (800718c <HAL_DMA_Abort+0x614>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d02c      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a38      	ldr	r2, [pc, #224]	@ (8007190 <HAL_DMA_Abort+0x618>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d027      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a37      	ldr	r2, [pc, #220]	@ (8007194 <HAL_DMA_Abort+0x61c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d022      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a35      	ldr	r2, [pc, #212]	@ (8007198 <HAL_DMA_Abort+0x620>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d01d      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a34      	ldr	r2, [pc, #208]	@ (800719c <HAL_DMA_Abort+0x624>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d018      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a32      	ldr	r2, [pc, #200]	@ (80071a0 <HAL_DMA_Abort+0x628>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d013      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a31      	ldr	r2, [pc, #196]	@ (80071a4 <HAL_DMA_Abort+0x62c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d00e      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a2f      	ldr	r2, [pc, #188]	@ (80071a8 <HAL_DMA_Abort+0x630>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d009      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a2e      	ldr	r2, [pc, #184]	@ (80071ac <HAL_DMA_Abort+0x634>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d004      	beq.n	8007102 <HAL_DMA_Abort+0x58a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a2c      	ldr	r2, [pc, #176]	@ (80071b0 <HAL_DMA_Abort+0x638>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d101      	bne.n	8007106 <HAL_DMA_Abort+0x58e>
 8007102:	2301      	movs	r3, #1
 8007104:	e000      	b.n	8007108 <HAL_DMA_Abort+0x590>
 8007106:	2300      	movs	r3, #0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d015      	beq.n	8007138 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007114:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007128:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800712c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007136:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40020010 	.word	0x40020010
 8007158:	40020028 	.word	0x40020028
 800715c:	40020040 	.word	0x40020040
 8007160:	40020058 	.word	0x40020058
 8007164:	40020070 	.word	0x40020070
 8007168:	40020088 	.word	0x40020088
 800716c:	400200a0 	.word	0x400200a0
 8007170:	400200b8 	.word	0x400200b8
 8007174:	40020410 	.word	0x40020410
 8007178:	40020428 	.word	0x40020428
 800717c:	40020440 	.word	0x40020440
 8007180:	40020458 	.word	0x40020458
 8007184:	40020470 	.word	0x40020470
 8007188:	40020488 	.word	0x40020488
 800718c:	400204a0 	.word	0x400204a0
 8007190:	400204b8 	.word	0x400204b8
 8007194:	58025408 	.word	0x58025408
 8007198:	5802541c 	.word	0x5802541c
 800719c:	58025430 	.word	0x58025430
 80071a0:	58025444 	.word	0x58025444
 80071a4:	58025458 	.word	0x58025458
 80071a8:	5802546c 	.word	0x5802546c
 80071ac:	58025480 	.word	0x58025480
 80071b0:	58025494 	.word	0x58025494

080071b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e237      	b.n	8007636 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d004      	beq.n	80071dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2280      	movs	r2, #128	@ 0x80
 80071d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e22c      	b.n	8007636 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a5c      	ldr	r2, [pc, #368]	@ (8007354 <HAL_DMA_Abort_IT+0x1a0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d04a      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a5b      	ldr	r2, [pc, #364]	@ (8007358 <HAL_DMA_Abort_IT+0x1a4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d045      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a59      	ldr	r2, [pc, #356]	@ (800735c <HAL_DMA_Abort_IT+0x1a8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d040      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a58      	ldr	r2, [pc, #352]	@ (8007360 <HAL_DMA_Abort_IT+0x1ac>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d03b      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a56      	ldr	r2, [pc, #344]	@ (8007364 <HAL_DMA_Abort_IT+0x1b0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d036      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a55      	ldr	r2, [pc, #340]	@ (8007368 <HAL_DMA_Abort_IT+0x1b4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d031      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a53      	ldr	r2, [pc, #332]	@ (800736c <HAL_DMA_Abort_IT+0x1b8>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d02c      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a52      	ldr	r2, [pc, #328]	@ (8007370 <HAL_DMA_Abort_IT+0x1bc>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d027      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a50      	ldr	r2, [pc, #320]	@ (8007374 <HAL_DMA_Abort_IT+0x1c0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d022      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a4f      	ldr	r2, [pc, #316]	@ (8007378 <HAL_DMA_Abort_IT+0x1c4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d01d      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a4d      	ldr	r2, [pc, #308]	@ (800737c <HAL_DMA_Abort_IT+0x1c8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d018      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a4c      	ldr	r2, [pc, #304]	@ (8007380 <HAL_DMA_Abort_IT+0x1cc>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d013      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a4a      	ldr	r2, [pc, #296]	@ (8007384 <HAL_DMA_Abort_IT+0x1d0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d00e      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a49      	ldr	r2, [pc, #292]	@ (8007388 <HAL_DMA_Abort_IT+0x1d4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d009      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a47      	ldr	r2, [pc, #284]	@ (800738c <HAL_DMA_Abort_IT+0x1d8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <HAL_DMA_Abort_IT+0xc8>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a46      	ldr	r2, [pc, #280]	@ (8007390 <HAL_DMA_Abort_IT+0x1dc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d101      	bne.n	8007280 <HAL_DMA_Abort_IT+0xcc>
 800727c:	2301      	movs	r3, #1
 800727e:	e000      	b.n	8007282 <HAL_DMA_Abort_IT+0xce>
 8007280:	2300      	movs	r3, #0
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 8086 	beq.w	8007394 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2204      	movs	r2, #4
 800728c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a2f      	ldr	r2, [pc, #188]	@ (8007354 <HAL_DMA_Abort_IT+0x1a0>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d04a      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a2e      	ldr	r2, [pc, #184]	@ (8007358 <HAL_DMA_Abort_IT+0x1a4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d045      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a2c      	ldr	r2, [pc, #176]	@ (800735c <HAL_DMA_Abort_IT+0x1a8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d040      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a2b      	ldr	r2, [pc, #172]	@ (8007360 <HAL_DMA_Abort_IT+0x1ac>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d03b      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a29      	ldr	r2, [pc, #164]	@ (8007364 <HAL_DMA_Abort_IT+0x1b0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d036      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a28      	ldr	r2, [pc, #160]	@ (8007368 <HAL_DMA_Abort_IT+0x1b4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d031      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a26      	ldr	r2, [pc, #152]	@ (800736c <HAL_DMA_Abort_IT+0x1b8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d02c      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a25      	ldr	r2, [pc, #148]	@ (8007370 <HAL_DMA_Abort_IT+0x1bc>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d027      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a23      	ldr	r2, [pc, #140]	@ (8007374 <HAL_DMA_Abort_IT+0x1c0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d022      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a22      	ldr	r2, [pc, #136]	@ (8007378 <HAL_DMA_Abort_IT+0x1c4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d01d      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a20      	ldr	r2, [pc, #128]	@ (800737c <HAL_DMA_Abort_IT+0x1c8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d018      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a1f      	ldr	r2, [pc, #124]	@ (8007380 <HAL_DMA_Abort_IT+0x1cc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d013      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1d      	ldr	r2, [pc, #116]	@ (8007384 <HAL_DMA_Abort_IT+0x1d0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00e      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1c      	ldr	r2, [pc, #112]	@ (8007388 <HAL_DMA_Abort_IT+0x1d4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d009      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1a      	ldr	r2, [pc, #104]	@ (800738c <HAL_DMA_Abort_IT+0x1d8>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <HAL_DMA_Abort_IT+0x17c>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a19      	ldr	r2, [pc, #100]	@ (8007390 <HAL_DMA_Abort_IT+0x1dc>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d108      	bne.n	8007342 <HAL_DMA_Abort_IT+0x18e>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	e178      	b.n	8007634 <HAL_DMA_Abort_IT+0x480>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0201 	bic.w	r2, r2, #1
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e16f      	b.n	8007634 <HAL_DMA_Abort_IT+0x480>
 8007354:	40020010 	.word	0x40020010
 8007358:	40020028 	.word	0x40020028
 800735c:	40020040 	.word	0x40020040
 8007360:	40020058 	.word	0x40020058
 8007364:	40020070 	.word	0x40020070
 8007368:	40020088 	.word	0x40020088
 800736c:	400200a0 	.word	0x400200a0
 8007370:	400200b8 	.word	0x400200b8
 8007374:	40020410 	.word	0x40020410
 8007378:	40020428 	.word	0x40020428
 800737c:	40020440 	.word	0x40020440
 8007380:	40020458 	.word	0x40020458
 8007384:	40020470 	.word	0x40020470
 8007388:	40020488 	.word	0x40020488
 800738c:	400204a0 	.word	0x400204a0
 8007390:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 020e 	bic.w	r2, r2, #14
 80073a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a6c      	ldr	r2, [pc, #432]	@ (800755c <HAL_DMA_Abort_IT+0x3a8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d04a      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a6b      	ldr	r2, [pc, #428]	@ (8007560 <HAL_DMA_Abort_IT+0x3ac>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d045      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a69      	ldr	r2, [pc, #420]	@ (8007564 <HAL_DMA_Abort_IT+0x3b0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d040      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a68      	ldr	r2, [pc, #416]	@ (8007568 <HAL_DMA_Abort_IT+0x3b4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d03b      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a66      	ldr	r2, [pc, #408]	@ (800756c <HAL_DMA_Abort_IT+0x3b8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d036      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a65      	ldr	r2, [pc, #404]	@ (8007570 <HAL_DMA_Abort_IT+0x3bc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d031      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a63      	ldr	r2, [pc, #396]	@ (8007574 <HAL_DMA_Abort_IT+0x3c0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d02c      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a62      	ldr	r2, [pc, #392]	@ (8007578 <HAL_DMA_Abort_IT+0x3c4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d027      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a60      	ldr	r2, [pc, #384]	@ (800757c <HAL_DMA_Abort_IT+0x3c8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d022      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a5f      	ldr	r2, [pc, #380]	@ (8007580 <HAL_DMA_Abort_IT+0x3cc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d01d      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a5d      	ldr	r2, [pc, #372]	@ (8007584 <HAL_DMA_Abort_IT+0x3d0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d018      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a5c      	ldr	r2, [pc, #368]	@ (8007588 <HAL_DMA_Abort_IT+0x3d4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a5a      	ldr	r2, [pc, #360]	@ (800758c <HAL_DMA_Abort_IT+0x3d8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00e      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a59      	ldr	r2, [pc, #356]	@ (8007590 <HAL_DMA_Abort_IT+0x3dc>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a57      	ldr	r2, [pc, #348]	@ (8007594 <HAL_DMA_Abort_IT+0x3e0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_DMA_Abort_IT+0x290>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a56      	ldr	r2, [pc, #344]	@ (8007598 <HAL_DMA_Abort_IT+0x3e4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d108      	bne.n	8007456 <HAL_DMA_Abort_IT+0x2a2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0201 	bic.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e007      	b.n	8007466 <HAL_DMA_Abort_IT+0x2b2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0201 	bic.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a3c      	ldr	r2, [pc, #240]	@ (800755c <HAL_DMA_Abort_IT+0x3a8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d072      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a3a      	ldr	r2, [pc, #232]	@ (8007560 <HAL_DMA_Abort_IT+0x3ac>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d06d      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a39      	ldr	r2, [pc, #228]	@ (8007564 <HAL_DMA_Abort_IT+0x3b0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d068      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a37      	ldr	r2, [pc, #220]	@ (8007568 <HAL_DMA_Abort_IT+0x3b4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d063      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a36      	ldr	r2, [pc, #216]	@ (800756c <HAL_DMA_Abort_IT+0x3b8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d05e      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a34      	ldr	r2, [pc, #208]	@ (8007570 <HAL_DMA_Abort_IT+0x3bc>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d059      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a33      	ldr	r2, [pc, #204]	@ (8007574 <HAL_DMA_Abort_IT+0x3c0>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d054      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a31      	ldr	r2, [pc, #196]	@ (8007578 <HAL_DMA_Abort_IT+0x3c4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d04f      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a30      	ldr	r2, [pc, #192]	@ (800757c <HAL_DMA_Abort_IT+0x3c8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d04a      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a2e      	ldr	r2, [pc, #184]	@ (8007580 <HAL_DMA_Abort_IT+0x3cc>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d045      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007584 <HAL_DMA_Abort_IT+0x3d0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d040      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007588 <HAL_DMA_Abort_IT+0x3d4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d03b      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a2a      	ldr	r2, [pc, #168]	@ (800758c <HAL_DMA_Abort_IT+0x3d8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d036      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a28      	ldr	r2, [pc, #160]	@ (8007590 <HAL_DMA_Abort_IT+0x3dc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d031      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a27      	ldr	r2, [pc, #156]	@ (8007594 <HAL_DMA_Abort_IT+0x3e0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d02c      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a25      	ldr	r2, [pc, #148]	@ (8007598 <HAL_DMA_Abort_IT+0x3e4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d027      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a24      	ldr	r2, [pc, #144]	@ (800759c <HAL_DMA_Abort_IT+0x3e8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d022      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a22      	ldr	r2, [pc, #136]	@ (80075a0 <HAL_DMA_Abort_IT+0x3ec>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d01d      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a21      	ldr	r2, [pc, #132]	@ (80075a4 <HAL_DMA_Abort_IT+0x3f0>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d018      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a1f      	ldr	r2, [pc, #124]	@ (80075a8 <HAL_DMA_Abort_IT+0x3f4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d013      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a1e      	ldr	r2, [pc, #120]	@ (80075ac <HAL_DMA_Abort_IT+0x3f8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00e      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a1c      	ldr	r2, [pc, #112]	@ (80075b0 <HAL_DMA_Abort_IT+0x3fc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d009      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a1b      	ldr	r2, [pc, #108]	@ (80075b4 <HAL_DMA_Abort_IT+0x400>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <HAL_DMA_Abort_IT+0x3a2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a19      	ldr	r2, [pc, #100]	@ (80075b8 <HAL_DMA_Abort_IT+0x404>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d132      	bne.n	80075bc <HAL_DMA_Abort_IT+0x408>
 8007556:	2301      	movs	r3, #1
 8007558:	e031      	b.n	80075be <HAL_DMA_Abort_IT+0x40a>
 800755a:	bf00      	nop
 800755c:	40020010 	.word	0x40020010
 8007560:	40020028 	.word	0x40020028
 8007564:	40020040 	.word	0x40020040
 8007568:	40020058 	.word	0x40020058
 800756c:	40020070 	.word	0x40020070
 8007570:	40020088 	.word	0x40020088
 8007574:	400200a0 	.word	0x400200a0
 8007578:	400200b8 	.word	0x400200b8
 800757c:	40020410 	.word	0x40020410
 8007580:	40020428 	.word	0x40020428
 8007584:	40020440 	.word	0x40020440
 8007588:	40020458 	.word	0x40020458
 800758c:	40020470 	.word	0x40020470
 8007590:	40020488 	.word	0x40020488
 8007594:	400204a0 	.word	0x400204a0
 8007598:	400204b8 	.word	0x400204b8
 800759c:	58025408 	.word	0x58025408
 80075a0:	5802541c 	.word	0x5802541c
 80075a4:	58025430 	.word	0x58025430
 80075a8:	58025444 	.word	0x58025444
 80075ac:	58025458 	.word	0x58025458
 80075b0:	5802546c 	.word	0x5802546c
 80075b4:	58025480 	.word	0x58025480
 80075b8:	58025494 	.word	0x58025494
 80075bc:	2300      	movs	r3, #0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d028      	beq.n	8007614 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075dc:	f003 031f 	and.w	r3, r3, #31
 80075e0:	2201      	movs	r2, #1
 80075e2:	409a      	lsls	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80075f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00c      	beq.n	8007614 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007604:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007608:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007612:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop

08007640 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08a      	sub	sp, #40	@ 0x28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800764c:	4b67      	ldr	r3, [pc, #412]	@ (80077ec <HAL_DMA_IRQHandler+0x1ac>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a67      	ldr	r2, [pc, #412]	@ (80077f0 <HAL_DMA_IRQHandler+0x1b0>)
 8007652:	fba2 2303 	umull	r2, r3, r2, r3
 8007656:	0a9b      	lsrs	r3, r3, #10
 8007658:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007664:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a5f      	ldr	r2, [pc, #380]	@ (80077f4 <HAL_DMA_IRQHandler+0x1b4>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d04a      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a5d      	ldr	r2, [pc, #372]	@ (80077f8 <HAL_DMA_IRQHandler+0x1b8>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d045      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a5c      	ldr	r2, [pc, #368]	@ (80077fc <HAL_DMA_IRQHandler+0x1bc>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d040      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a5a      	ldr	r2, [pc, #360]	@ (8007800 <HAL_DMA_IRQHandler+0x1c0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d03b      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a59      	ldr	r2, [pc, #356]	@ (8007804 <HAL_DMA_IRQHandler+0x1c4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d036      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a57      	ldr	r2, [pc, #348]	@ (8007808 <HAL_DMA_IRQHandler+0x1c8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d031      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a56      	ldr	r2, [pc, #344]	@ (800780c <HAL_DMA_IRQHandler+0x1cc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d02c      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a54      	ldr	r2, [pc, #336]	@ (8007810 <HAL_DMA_IRQHandler+0x1d0>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d027      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a53      	ldr	r2, [pc, #332]	@ (8007814 <HAL_DMA_IRQHandler+0x1d4>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d022      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a51      	ldr	r2, [pc, #324]	@ (8007818 <HAL_DMA_IRQHandler+0x1d8>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d01d      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a50      	ldr	r2, [pc, #320]	@ (800781c <HAL_DMA_IRQHandler+0x1dc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d018      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a4e      	ldr	r2, [pc, #312]	@ (8007820 <HAL_DMA_IRQHandler+0x1e0>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d013      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a4d      	ldr	r2, [pc, #308]	@ (8007824 <HAL_DMA_IRQHandler+0x1e4>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00e      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a4b      	ldr	r2, [pc, #300]	@ (8007828 <HAL_DMA_IRQHandler+0x1e8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d009      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a4a      	ldr	r2, [pc, #296]	@ (800782c <HAL_DMA_IRQHandler+0x1ec>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d004      	beq.n	8007712 <HAL_DMA_IRQHandler+0xd2>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a48      	ldr	r2, [pc, #288]	@ (8007830 <HAL_DMA_IRQHandler+0x1f0>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d101      	bne.n	8007716 <HAL_DMA_IRQHandler+0xd6>
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <HAL_DMA_IRQHandler+0xd8>
 8007716:	2300      	movs	r3, #0
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 842b 	beq.w	8007f74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	2208      	movs	r2, #8
 8007728:	409a      	lsls	r2, r3
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	4013      	ands	r3, r2
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 80a2 	beq.w	8007878 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a2e      	ldr	r2, [pc, #184]	@ (80077f4 <HAL_DMA_IRQHandler+0x1b4>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d04a      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a2d      	ldr	r2, [pc, #180]	@ (80077f8 <HAL_DMA_IRQHandler+0x1b8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d045      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a2b      	ldr	r2, [pc, #172]	@ (80077fc <HAL_DMA_IRQHandler+0x1bc>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d040      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a2a      	ldr	r2, [pc, #168]	@ (8007800 <HAL_DMA_IRQHandler+0x1c0>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d03b      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a28      	ldr	r2, [pc, #160]	@ (8007804 <HAL_DMA_IRQHandler+0x1c4>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d036      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a27      	ldr	r2, [pc, #156]	@ (8007808 <HAL_DMA_IRQHandler+0x1c8>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d031      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a25      	ldr	r2, [pc, #148]	@ (800780c <HAL_DMA_IRQHandler+0x1cc>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d02c      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a24      	ldr	r2, [pc, #144]	@ (8007810 <HAL_DMA_IRQHandler+0x1d0>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d027      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a22      	ldr	r2, [pc, #136]	@ (8007814 <HAL_DMA_IRQHandler+0x1d4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d022      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a21      	ldr	r2, [pc, #132]	@ (8007818 <HAL_DMA_IRQHandler+0x1d8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d01d      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a1f      	ldr	r2, [pc, #124]	@ (800781c <HAL_DMA_IRQHandler+0x1dc>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d018      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007820 <HAL_DMA_IRQHandler+0x1e0>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d013      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007824 <HAL_DMA_IRQHandler+0x1e4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00e      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007828 <HAL_DMA_IRQHandler+0x1e8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d009      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a19      	ldr	r2, [pc, #100]	@ (800782c <HAL_DMA_IRQHandler+0x1ec>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d004      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x194>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a18      	ldr	r2, [pc, #96]	@ (8007830 <HAL_DMA_IRQHandler+0x1f0>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d12f      	bne.n	8007834 <HAL_DMA_IRQHandler+0x1f4>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bf14      	ite	ne
 80077e2:	2301      	movne	r3, #1
 80077e4:	2300      	moveq	r3, #0
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	e02e      	b.n	8007848 <HAL_DMA_IRQHandler+0x208>
 80077ea:	bf00      	nop
 80077ec:	24000000 	.word	0x24000000
 80077f0:	1b4e81b5 	.word	0x1b4e81b5
 80077f4:	40020010 	.word	0x40020010
 80077f8:	40020028 	.word	0x40020028
 80077fc:	40020040 	.word	0x40020040
 8007800:	40020058 	.word	0x40020058
 8007804:	40020070 	.word	0x40020070
 8007808:	40020088 	.word	0x40020088
 800780c:	400200a0 	.word	0x400200a0
 8007810:	400200b8 	.word	0x400200b8
 8007814:	40020410 	.word	0x40020410
 8007818:	40020428 	.word	0x40020428
 800781c:	40020440 	.word	0x40020440
 8007820:	40020458 	.word	0x40020458
 8007824:	40020470 	.word	0x40020470
 8007828:	40020488 	.word	0x40020488
 800782c:	400204a0 	.word	0x400204a0
 8007830:	400204b8 	.word	0x400204b8
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b00      	cmp	r3, #0
 8007840:	bf14      	ite	ne
 8007842:	2301      	movne	r3, #1
 8007844:	2300      	moveq	r3, #0
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d015      	beq.n	8007878 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0204 	bic.w	r2, r2, #4
 800785a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	2208      	movs	r2, #8
 8007866:	409a      	lsls	r2, r3
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007870:	f043 0201 	orr.w	r2, r3, #1
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	fa22 f303 	lsr.w	r3, r2, r3
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d06e      	beq.n	800796c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a69      	ldr	r2, [pc, #420]	@ (8007a38 <HAL_DMA_IRQHandler+0x3f8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d04a      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a67      	ldr	r2, [pc, #412]	@ (8007a3c <HAL_DMA_IRQHandler+0x3fc>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d045      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a66      	ldr	r2, [pc, #408]	@ (8007a40 <HAL_DMA_IRQHandler+0x400>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d040      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a64      	ldr	r2, [pc, #400]	@ (8007a44 <HAL_DMA_IRQHandler+0x404>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d03b      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a63      	ldr	r2, [pc, #396]	@ (8007a48 <HAL_DMA_IRQHandler+0x408>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d036      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a61      	ldr	r2, [pc, #388]	@ (8007a4c <HAL_DMA_IRQHandler+0x40c>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d031      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a60      	ldr	r2, [pc, #384]	@ (8007a50 <HAL_DMA_IRQHandler+0x410>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d02c      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a5e      	ldr	r2, [pc, #376]	@ (8007a54 <HAL_DMA_IRQHandler+0x414>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d027      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a5d      	ldr	r2, [pc, #372]	@ (8007a58 <HAL_DMA_IRQHandler+0x418>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d022      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a5b      	ldr	r2, [pc, #364]	@ (8007a5c <HAL_DMA_IRQHandler+0x41c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d01d      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a5a      	ldr	r2, [pc, #360]	@ (8007a60 <HAL_DMA_IRQHandler+0x420>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d018      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a58      	ldr	r2, [pc, #352]	@ (8007a64 <HAL_DMA_IRQHandler+0x424>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d013      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a57      	ldr	r2, [pc, #348]	@ (8007a68 <HAL_DMA_IRQHandler+0x428>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d00e      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a55      	ldr	r2, [pc, #340]	@ (8007a6c <HAL_DMA_IRQHandler+0x42c>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d009      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a54      	ldr	r2, [pc, #336]	@ (8007a70 <HAL_DMA_IRQHandler+0x430>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d004      	beq.n	800792e <HAL_DMA_IRQHandler+0x2ee>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a52      	ldr	r2, [pc, #328]	@ (8007a74 <HAL_DMA_IRQHandler+0x434>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d10a      	bne.n	8007944 <HAL_DMA_IRQHandler+0x304>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007938:	2b00      	cmp	r3, #0
 800793a:	bf14      	ite	ne
 800793c:	2301      	movne	r3, #1
 800793e:	2300      	moveq	r3, #0
 8007940:	b2db      	uxtb	r3, r3
 8007942:	e003      	b.n	800794c <HAL_DMA_IRQHandler+0x30c>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2300      	movs	r3, #0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00d      	beq.n	800796c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007954:	f003 031f 	and.w	r3, r3, #31
 8007958:	2201      	movs	r2, #1
 800795a:	409a      	lsls	r2, r3
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007964:	f043 0202 	orr.w	r2, r3, #2
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007970:	f003 031f 	and.w	r3, r3, #31
 8007974:	2204      	movs	r2, #4
 8007976:	409a      	lsls	r2, r3
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	4013      	ands	r3, r2
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 808f 	beq.w	8007aa0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a2c      	ldr	r2, [pc, #176]	@ (8007a38 <HAL_DMA_IRQHandler+0x3f8>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d04a      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a2a      	ldr	r2, [pc, #168]	@ (8007a3c <HAL_DMA_IRQHandler+0x3fc>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d045      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a29      	ldr	r2, [pc, #164]	@ (8007a40 <HAL_DMA_IRQHandler+0x400>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d040      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a27      	ldr	r2, [pc, #156]	@ (8007a44 <HAL_DMA_IRQHandler+0x404>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d03b      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a26      	ldr	r2, [pc, #152]	@ (8007a48 <HAL_DMA_IRQHandler+0x408>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d036      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a24      	ldr	r2, [pc, #144]	@ (8007a4c <HAL_DMA_IRQHandler+0x40c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d031      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a23      	ldr	r2, [pc, #140]	@ (8007a50 <HAL_DMA_IRQHandler+0x410>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d02c      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a21      	ldr	r2, [pc, #132]	@ (8007a54 <HAL_DMA_IRQHandler+0x414>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d027      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a20      	ldr	r2, [pc, #128]	@ (8007a58 <HAL_DMA_IRQHandler+0x418>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d022      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1e      	ldr	r2, [pc, #120]	@ (8007a5c <HAL_DMA_IRQHandler+0x41c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01d      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007a60 <HAL_DMA_IRQHandler+0x420>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d018      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1b      	ldr	r2, [pc, #108]	@ (8007a64 <HAL_DMA_IRQHandler+0x424>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d013      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1a      	ldr	r2, [pc, #104]	@ (8007a68 <HAL_DMA_IRQHandler+0x428>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00e      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a18      	ldr	r2, [pc, #96]	@ (8007a6c <HAL_DMA_IRQHandler+0x42c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d009      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a17      	ldr	r2, [pc, #92]	@ (8007a70 <HAL_DMA_IRQHandler+0x430>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d004      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x3e2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a15      	ldr	r2, [pc, #84]	@ (8007a74 <HAL_DMA_IRQHandler+0x434>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d12a      	bne.n	8007a78 <HAL_DMA_IRQHandler+0x438>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bf14      	ite	ne
 8007a30:	2301      	movne	r3, #1
 8007a32:	2300      	moveq	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	e023      	b.n	8007a80 <HAL_DMA_IRQHandler+0x440>
 8007a38:	40020010 	.word	0x40020010
 8007a3c:	40020028 	.word	0x40020028
 8007a40:	40020040 	.word	0x40020040
 8007a44:	40020058 	.word	0x40020058
 8007a48:	40020070 	.word	0x40020070
 8007a4c:	40020088 	.word	0x40020088
 8007a50:	400200a0 	.word	0x400200a0
 8007a54:	400200b8 	.word	0x400200b8
 8007a58:	40020410 	.word	0x40020410
 8007a5c:	40020428 	.word	0x40020428
 8007a60:	40020440 	.word	0x40020440
 8007a64:	40020458 	.word	0x40020458
 8007a68:	40020470 	.word	0x40020470
 8007a6c:	40020488 	.word	0x40020488
 8007a70:	400204a0 	.word	0x400204a0
 8007a74:	400204b8 	.word	0x400204b8
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00d      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a88:	f003 031f 	and.w	r3, r3, #31
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	409a      	lsls	r2, r3
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a98:	f043 0204 	orr.w	r2, r3, #4
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aa4:	f003 031f 	and.w	r3, r3, #31
 8007aa8:	2210      	movs	r2, #16
 8007aaa:	409a      	lsls	r2, r3
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	4013      	ands	r3, r2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 80a6 	beq.w	8007c02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a85      	ldr	r2, [pc, #532]	@ (8007cd0 <HAL_DMA_IRQHandler+0x690>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d04a      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a83      	ldr	r2, [pc, #524]	@ (8007cd4 <HAL_DMA_IRQHandler+0x694>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d045      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a82      	ldr	r2, [pc, #520]	@ (8007cd8 <HAL_DMA_IRQHandler+0x698>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d040      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a80      	ldr	r2, [pc, #512]	@ (8007cdc <HAL_DMA_IRQHandler+0x69c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d03b      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a7f      	ldr	r2, [pc, #508]	@ (8007ce0 <HAL_DMA_IRQHandler+0x6a0>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d036      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a7d      	ldr	r2, [pc, #500]	@ (8007ce4 <HAL_DMA_IRQHandler+0x6a4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d031      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a7c      	ldr	r2, [pc, #496]	@ (8007ce8 <HAL_DMA_IRQHandler+0x6a8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d02c      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a7a      	ldr	r2, [pc, #488]	@ (8007cec <HAL_DMA_IRQHandler+0x6ac>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d027      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a79      	ldr	r2, [pc, #484]	@ (8007cf0 <HAL_DMA_IRQHandler+0x6b0>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d022      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a77      	ldr	r2, [pc, #476]	@ (8007cf4 <HAL_DMA_IRQHandler+0x6b4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d01d      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a76      	ldr	r2, [pc, #472]	@ (8007cf8 <HAL_DMA_IRQHandler+0x6b8>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d018      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a74      	ldr	r2, [pc, #464]	@ (8007cfc <HAL_DMA_IRQHandler+0x6bc>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d013      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a73      	ldr	r2, [pc, #460]	@ (8007d00 <HAL_DMA_IRQHandler+0x6c0>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00e      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a71      	ldr	r2, [pc, #452]	@ (8007d04 <HAL_DMA_IRQHandler+0x6c4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d009      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a70      	ldr	r2, [pc, #448]	@ (8007d08 <HAL_DMA_IRQHandler+0x6c8>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d004      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x516>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a6e      	ldr	r2, [pc, #440]	@ (8007d0c <HAL_DMA_IRQHandler+0x6cc>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d10a      	bne.n	8007b6c <HAL_DMA_IRQHandler+0x52c>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bf14      	ite	ne
 8007b64:	2301      	movne	r3, #1
 8007b66:	2300      	moveq	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	e009      	b.n	8007b80 <HAL_DMA_IRQHandler+0x540>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf14      	ite	ne
 8007b7a:	2301      	movne	r3, #1
 8007b7c:	2300      	moveq	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d03e      	beq.n	8007c02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	2210      	movs	r2, #16
 8007b8e:	409a      	lsls	r2, r3
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d018      	beq.n	8007bd4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d108      	bne.n	8007bc2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d024      	beq.n	8007c02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4798      	blx	r3
 8007bc0:	e01f      	b.n	8007c02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d01b      	beq.n	8007c02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
 8007bd2:	e016      	b.n	8007c02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d107      	bne.n	8007bf2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0208 	bic.w	r2, r2, #8
 8007bf0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	409a      	lsls	r2, r3
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8110 	beq.w	8007e38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8007cd0 <HAL_DMA_IRQHandler+0x690>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d04a      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a2b      	ldr	r2, [pc, #172]	@ (8007cd4 <HAL_DMA_IRQHandler+0x694>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d045      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a29      	ldr	r2, [pc, #164]	@ (8007cd8 <HAL_DMA_IRQHandler+0x698>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d040      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a28      	ldr	r2, [pc, #160]	@ (8007cdc <HAL_DMA_IRQHandler+0x69c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d03b      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a26      	ldr	r2, [pc, #152]	@ (8007ce0 <HAL_DMA_IRQHandler+0x6a0>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d036      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a25      	ldr	r2, [pc, #148]	@ (8007ce4 <HAL_DMA_IRQHandler+0x6a4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d031      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a23      	ldr	r2, [pc, #140]	@ (8007ce8 <HAL_DMA_IRQHandler+0x6a8>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d02c      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a22      	ldr	r2, [pc, #136]	@ (8007cec <HAL_DMA_IRQHandler+0x6ac>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d027      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a20      	ldr	r2, [pc, #128]	@ (8007cf0 <HAL_DMA_IRQHandler+0x6b0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d022      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a1f      	ldr	r2, [pc, #124]	@ (8007cf4 <HAL_DMA_IRQHandler+0x6b4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d01d      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf8 <HAL_DMA_IRQHandler+0x6b8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d018      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8007cfc <HAL_DMA_IRQHandler+0x6bc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d013      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a1a      	ldr	r2, [pc, #104]	@ (8007d00 <HAL_DMA_IRQHandler+0x6c0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00e      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a19      	ldr	r2, [pc, #100]	@ (8007d04 <HAL_DMA_IRQHandler+0x6c4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d009      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a17      	ldr	r2, [pc, #92]	@ (8007d08 <HAL_DMA_IRQHandler+0x6c8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x678>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a16      	ldr	r2, [pc, #88]	@ (8007d0c <HAL_DMA_IRQHandler+0x6cc>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d12b      	bne.n	8007d10 <HAL_DMA_IRQHandler+0x6d0>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0310 	and.w	r3, r3, #16
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bf14      	ite	ne
 8007cc6:	2301      	movne	r3, #1
 8007cc8:	2300      	moveq	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	e02a      	b.n	8007d24 <HAL_DMA_IRQHandler+0x6e4>
 8007cce:	bf00      	nop
 8007cd0:	40020010 	.word	0x40020010
 8007cd4:	40020028 	.word	0x40020028
 8007cd8:	40020040 	.word	0x40020040
 8007cdc:	40020058 	.word	0x40020058
 8007ce0:	40020070 	.word	0x40020070
 8007ce4:	40020088 	.word	0x40020088
 8007ce8:	400200a0 	.word	0x400200a0
 8007cec:	400200b8 	.word	0x400200b8
 8007cf0:	40020410 	.word	0x40020410
 8007cf4:	40020428 	.word	0x40020428
 8007cf8:	40020440 	.word	0x40020440
 8007cfc:	40020458 	.word	0x40020458
 8007d00:	40020470 	.word	0x40020470
 8007d04:	40020488 	.word	0x40020488
 8007d08:	400204a0 	.word	0x400204a0
 8007d0c:	400204b8 	.word	0x400204b8
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bf14      	ite	ne
 8007d1e:	2301      	movne	r3, #1
 8007d20:	2300      	moveq	r3, #0
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 8087 	beq.w	8007e38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	2220      	movs	r2, #32
 8007d34:	409a      	lsls	r2, r3
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d139      	bne.n	8007dba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0216 	bic.w	r2, r2, #22
 8007d54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	695a      	ldr	r2, [r3, #20]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d103      	bne.n	8007d76 <HAL_DMA_IRQHandler+0x736>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0208 	bic.w	r2, r2, #8
 8007d84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d8a:	f003 031f 	and.w	r3, r3, #31
 8007d8e:	223f      	movs	r2, #63	@ 0x3f
 8007d90:	409a      	lsls	r2, r3
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 8382 	beq.w	80084b4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	4798      	blx	r3
          }
          return;
 8007db8:	e37c      	b.n	80084b4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d018      	beq.n	8007dfa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d108      	bne.n	8007de8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d02c      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
 8007de6:	e027      	b.n	8007e38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d023      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	4798      	blx	r3
 8007df8:	e01e      	b.n	8007e38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10f      	bne.n	8007e28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f022 0210 	bic.w	r2, r2, #16
 8007e16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d003      	beq.n	8007e38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 833e 	beq.w	80084be <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 8088 	beq.w	8007f60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2204      	movs	r2, #4
 8007e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a89      	ldr	r2, [pc, #548]	@ (8008084 <HAL_DMA_IRQHandler+0xa44>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d04a      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a88      	ldr	r2, [pc, #544]	@ (8008088 <HAL_DMA_IRQHandler+0xa48>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d045      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a86      	ldr	r2, [pc, #536]	@ (800808c <HAL_DMA_IRQHandler+0xa4c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d040      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a85      	ldr	r2, [pc, #532]	@ (8008090 <HAL_DMA_IRQHandler+0xa50>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d03b      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a83      	ldr	r2, [pc, #524]	@ (8008094 <HAL_DMA_IRQHandler+0xa54>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d036      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a82      	ldr	r2, [pc, #520]	@ (8008098 <HAL_DMA_IRQHandler+0xa58>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d031      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a80      	ldr	r2, [pc, #512]	@ (800809c <HAL_DMA_IRQHandler+0xa5c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d02c      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a7f      	ldr	r2, [pc, #508]	@ (80080a0 <HAL_DMA_IRQHandler+0xa60>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d027      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a7d      	ldr	r2, [pc, #500]	@ (80080a4 <HAL_DMA_IRQHandler+0xa64>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d022      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a7c      	ldr	r2, [pc, #496]	@ (80080a8 <HAL_DMA_IRQHandler+0xa68>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d01d      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a7a      	ldr	r2, [pc, #488]	@ (80080ac <HAL_DMA_IRQHandler+0xa6c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d018      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a79      	ldr	r2, [pc, #484]	@ (80080b0 <HAL_DMA_IRQHandler+0xa70>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d013      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a77      	ldr	r2, [pc, #476]	@ (80080b4 <HAL_DMA_IRQHandler+0xa74>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00e      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a76      	ldr	r2, [pc, #472]	@ (80080b8 <HAL_DMA_IRQHandler+0xa78>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d009      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a74      	ldr	r2, [pc, #464]	@ (80080bc <HAL_DMA_IRQHandler+0xa7c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d004      	beq.n	8007ef8 <HAL_DMA_IRQHandler+0x8b8>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a73      	ldr	r2, [pc, #460]	@ (80080c0 <HAL_DMA_IRQHandler+0xa80>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d108      	bne.n	8007f0a <HAL_DMA_IRQHandler+0x8ca>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0201 	bic.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	e007      	b.n	8007f1a <HAL_DMA_IRQHandler+0x8da>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0201 	bic.w	r2, r2, #1
 8007f18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d307      	bcc.n	8007f36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1f2      	bne.n	8007f1a <HAL_DMA_IRQHandler+0x8da>
 8007f34:	e000      	b.n	8007f38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007f36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2203      	movs	r2, #3
 8007f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007f4e:	e003      	b.n	8007f58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 82aa 	beq.w	80084be <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
 8007f72:	e2a4      	b.n	80084be <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a52      	ldr	r2, [pc, #328]	@ (80080c4 <HAL_DMA_IRQHandler+0xa84>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d04a      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a51      	ldr	r2, [pc, #324]	@ (80080c8 <HAL_DMA_IRQHandler+0xa88>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d045      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a4f      	ldr	r2, [pc, #316]	@ (80080cc <HAL_DMA_IRQHandler+0xa8c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d040      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a4e      	ldr	r2, [pc, #312]	@ (80080d0 <HAL_DMA_IRQHandler+0xa90>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d03b      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80080d4 <HAL_DMA_IRQHandler+0xa94>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d036      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a4b      	ldr	r2, [pc, #300]	@ (80080d8 <HAL_DMA_IRQHandler+0xa98>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d031      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a49      	ldr	r2, [pc, #292]	@ (80080dc <HAL_DMA_IRQHandler+0xa9c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d02c      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a48      	ldr	r2, [pc, #288]	@ (80080e0 <HAL_DMA_IRQHandler+0xaa0>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d027      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a46      	ldr	r2, [pc, #280]	@ (80080e4 <HAL_DMA_IRQHandler+0xaa4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d022      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a45      	ldr	r2, [pc, #276]	@ (80080e8 <HAL_DMA_IRQHandler+0xaa8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d01d      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a43      	ldr	r2, [pc, #268]	@ (80080ec <HAL_DMA_IRQHandler+0xaac>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d018      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a42      	ldr	r2, [pc, #264]	@ (80080f0 <HAL_DMA_IRQHandler+0xab0>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d013      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a40      	ldr	r2, [pc, #256]	@ (80080f4 <HAL_DMA_IRQHandler+0xab4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00e      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80080f8 <HAL_DMA_IRQHandler+0xab8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d009      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a3d      	ldr	r2, [pc, #244]	@ (80080fc <HAL_DMA_IRQHandler+0xabc>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d004      	beq.n	8008014 <HAL_DMA_IRQHandler+0x9d4>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a3c      	ldr	r2, [pc, #240]	@ (8008100 <HAL_DMA_IRQHandler+0xac0>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d101      	bne.n	8008018 <HAL_DMA_IRQHandler+0x9d8>
 8008014:	2301      	movs	r3, #1
 8008016:	e000      	b.n	800801a <HAL_DMA_IRQHandler+0x9da>
 8008018:	2300      	movs	r3, #0
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 824f 	beq.w	80084be <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800802c:	f003 031f 	and.w	r3, r3, #31
 8008030:	2204      	movs	r2, #4
 8008032:	409a      	lsls	r2, r3
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	4013      	ands	r3, r2
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 80dd 	beq.w	80081f8 <HAL_DMA_IRQHandler+0xbb8>
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	f000 80d7 	beq.w	80081f8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800804e:	f003 031f 	and.w	r3, r3, #31
 8008052:	2204      	movs	r2, #4
 8008054:	409a      	lsls	r2, r3
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d059      	beq.n	8008118 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d14a      	bne.n	8008104 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8220 	beq.w	80084b8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008080:	e21a      	b.n	80084b8 <HAL_DMA_IRQHandler+0xe78>
 8008082:	bf00      	nop
 8008084:	40020010 	.word	0x40020010
 8008088:	40020028 	.word	0x40020028
 800808c:	40020040 	.word	0x40020040
 8008090:	40020058 	.word	0x40020058
 8008094:	40020070 	.word	0x40020070
 8008098:	40020088 	.word	0x40020088
 800809c:	400200a0 	.word	0x400200a0
 80080a0:	400200b8 	.word	0x400200b8
 80080a4:	40020410 	.word	0x40020410
 80080a8:	40020428 	.word	0x40020428
 80080ac:	40020440 	.word	0x40020440
 80080b0:	40020458 	.word	0x40020458
 80080b4:	40020470 	.word	0x40020470
 80080b8:	40020488 	.word	0x40020488
 80080bc:	400204a0 	.word	0x400204a0
 80080c0:	400204b8 	.word	0x400204b8
 80080c4:	48022c08 	.word	0x48022c08
 80080c8:	48022c1c 	.word	0x48022c1c
 80080cc:	48022c30 	.word	0x48022c30
 80080d0:	48022c44 	.word	0x48022c44
 80080d4:	48022c58 	.word	0x48022c58
 80080d8:	48022c6c 	.word	0x48022c6c
 80080dc:	48022c80 	.word	0x48022c80
 80080e0:	48022c94 	.word	0x48022c94
 80080e4:	58025408 	.word	0x58025408
 80080e8:	5802541c 	.word	0x5802541c
 80080ec:	58025430 	.word	0x58025430
 80080f0:	58025444 	.word	0x58025444
 80080f4:	58025458 	.word	0x58025458
 80080f8:	5802546c 	.word	0x5802546c
 80080fc:	58025480 	.word	0x58025480
 8008100:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 81d5 	beq.w	80084b8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008116:	e1cf      	b.n	80084b8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f003 0320 	and.w	r3, r3, #32
 800811e:	2b00      	cmp	r3, #0
 8008120:	d160      	bne.n	80081e4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a7f      	ldr	r2, [pc, #508]	@ (8008324 <HAL_DMA_IRQHandler+0xce4>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d04a      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a7d      	ldr	r2, [pc, #500]	@ (8008328 <HAL_DMA_IRQHandler+0xce8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d045      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a7c      	ldr	r2, [pc, #496]	@ (800832c <HAL_DMA_IRQHandler+0xcec>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d040      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a7a      	ldr	r2, [pc, #488]	@ (8008330 <HAL_DMA_IRQHandler+0xcf0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d03b      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a79      	ldr	r2, [pc, #484]	@ (8008334 <HAL_DMA_IRQHandler+0xcf4>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d036      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a77      	ldr	r2, [pc, #476]	@ (8008338 <HAL_DMA_IRQHandler+0xcf8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d031      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a76      	ldr	r2, [pc, #472]	@ (800833c <HAL_DMA_IRQHandler+0xcfc>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d02c      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a74      	ldr	r2, [pc, #464]	@ (8008340 <HAL_DMA_IRQHandler+0xd00>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d027      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a73      	ldr	r2, [pc, #460]	@ (8008344 <HAL_DMA_IRQHandler+0xd04>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d022      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a71      	ldr	r2, [pc, #452]	@ (8008348 <HAL_DMA_IRQHandler+0xd08>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d01d      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a70      	ldr	r2, [pc, #448]	@ (800834c <HAL_DMA_IRQHandler+0xd0c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d018      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a6e      	ldr	r2, [pc, #440]	@ (8008350 <HAL_DMA_IRQHandler+0xd10>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a6d      	ldr	r2, [pc, #436]	@ (8008354 <HAL_DMA_IRQHandler+0xd14>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00e      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a6b      	ldr	r2, [pc, #428]	@ (8008358 <HAL_DMA_IRQHandler+0xd18>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d009      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a6a      	ldr	r2, [pc, #424]	@ (800835c <HAL_DMA_IRQHandler+0xd1c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_DMA_IRQHandler+0xb82>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a68      	ldr	r2, [pc, #416]	@ (8008360 <HAL_DMA_IRQHandler+0xd20>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d108      	bne.n	80081d4 <HAL_DMA_IRQHandler+0xb94>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0208 	bic.w	r2, r2, #8
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	e007      	b.n	80081e4 <HAL_DMA_IRQHandler+0xba4>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0204 	bic.w	r2, r2, #4
 80081e2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 8165 	beq.w	80084b8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081f6:	e15f      	b.n	80084b8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081fc:	f003 031f 	and.w	r3, r3, #31
 8008200:	2202      	movs	r2, #2
 8008202:	409a      	lsls	r2, r3
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	4013      	ands	r3, r2
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80c5 	beq.w	8008398 <HAL_DMA_IRQHandler+0xd58>
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 80bf 	beq.w	8008398 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	2202      	movs	r2, #2
 8008224:	409a      	lsls	r2, r3
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d018      	beq.n	8008266 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 813a 	beq.w	80084bc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008250:	e134      	b.n	80084bc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008256:	2b00      	cmp	r3, #0
 8008258:	f000 8130 	beq.w	80084bc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008264:	e12a      	b.n	80084bc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f003 0320 	and.w	r3, r3, #32
 800826c:	2b00      	cmp	r3, #0
 800826e:	f040 8089 	bne.w	8008384 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a2b      	ldr	r2, [pc, #172]	@ (8008324 <HAL_DMA_IRQHandler+0xce4>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d04a      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a29      	ldr	r2, [pc, #164]	@ (8008328 <HAL_DMA_IRQHandler+0xce8>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d045      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a28      	ldr	r2, [pc, #160]	@ (800832c <HAL_DMA_IRQHandler+0xcec>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d040      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a26      	ldr	r2, [pc, #152]	@ (8008330 <HAL_DMA_IRQHandler+0xcf0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d03b      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a25      	ldr	r2, [pc, #148]	@ (8008334 <HAL_DMA_IRQHandler+0xcf4>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d036      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a23      	ldr	r2, [pc, #140]	@ (8008338 <HAL_DMA_IRQHandler+0xcf8>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d031      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a22      	ldr	r2, [pc, #136]	@ (800833c <HAL_DMA_IRQHandler+0xcfc>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d02c      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a20      	ldr	r2, [pc, #128]	@ (8008340 <HAL_DMA_IRQHandler+0xd00>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d027      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008344 <HAL_DMA_IRQHandler+0xd04>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d022      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008348 <HAL_DMA_IRQHandler+0xd08>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d01d      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1c      	ldr	r2, [pc, #112]	@ (800834c <HAL_DMA_IRQHandler+0xd0c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d018      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008350 <HAL_DMA_IRQHandler+0xd10>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d013      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a19      	ldr	r2, [pc, #100]	@ (8008354 <HAL_DMA_IRQHandler+0xd14>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00e      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a17      	ldr	r2, [pc, #92]	@ (8008358 <HAL_DMA_IRQHandler+0xd18>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d009      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a16      	ldr	r2, [pc, #88]	@ (800835c <HAL_DMA_IRQHandler+0xd1c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <HAL_DMA_IRQHandler+0xcd2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a14      	ldr	r2, [pc, #80]	@ (8008360 <HAL_DMA_IRQHandler+0xd20>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d128      	bne.n	8008364 <HAL_DMA_IRQHandler+0xd24>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0214 	bic.w	r2, r2, #20
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	e027      	b.n	8008374 <HAL_DMA_IRQHandler+0xd34>
 8008324:	40020010 	.word	0x40020010
 8008328:	40020028 	.word	0x40020028
 800832c:	40020040 	.word	0x40020040
 8008330:	40020058 	.word	0x40020058
 8008334:	40020070 	.word	0x40020070
 8008338:	40020088 	.word	0x40020088
 800833c:	400200a0 	.word	0x400200a0
 8008340:	400200b8 	.word	0x400200b8
 8008344:	40020410 	.word	0x40020410
 8008348:	40020428 	.word	0x40020428
 800834c:	40020440 	.word	0x40020440
 8008350:	40020458 	.word	0x40020458
 8008354:	40020470 	.word	0x40020470
 8008358:	40020488 	.word	0x40020488
 800835c:	400204a0 	.word	0x400204a0
 8008360:	400204b8 	.word	0x400204b8
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 020a 	bic.w	r2, r2, #10
 8008372:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8097 	beq.w	80084bc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008396:	e091      	b.n	80084bc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	2208      	movs	r2, #8
 80083a2:	409a      	lsls	r2, r3
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	4013      	ands	r3, r2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8088 	beq.w	80084be <HAL_DMA_IRQHandler+0xe7e>
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f003 0308 	and.w	r3, r3, #8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 8082 	beq.w	80084be <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a41      	ldr	r2, [pc, #260]	@ (80084c4 <HAL_DMA_IRQHandler+0xe84>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d04a      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a3f      	ldr	r2, [pc, #252]	@ (80084c8 <HAL_DMA_IRQHandler+0xe88>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d045      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a3e      	ldr	r2, [pc, #248]	@ (80084cc <HAL_DMA_IRQHandler+0xe8c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d040      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a3c      	ldr	r2, [pc, #240]	@ (80084d0 <HAL_DMA_IRQHandler+0xe90>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d03b      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a3b      	ldr	r2, [pc, #236]	@ (80084d4 <HAL_DMA_IRQHandler+0xe94>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d036      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a39      	ldr	r2, [pc, #228]	@ (80084d8 <HAL_DMA_IRQHandler+0xe98>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d031      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a38      	ldr	r2, [pc, #224]	@ (80084dc <HAL_DMA_IRQHandler+0xe9c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d02c      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a36      	ldr	r2, [pc, #216]	@ (80084e0 <HAL_DMA_IRQHandler+0xea0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d027      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a35      	ldr	r2, [pc, #212]	@ (80084e4 <HAL_DMA_IRQHandler+0xea4>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d022      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a33      	ldr	r2, [pc, #204]	@ (80084e8 <HAL_DMA_IRQHandler+0xea8>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01d      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a32      	ldr	r2, [pc, #200]	@ (80084ec <HAL_DMA_IRQHandler+0xeac>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d018      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a30      	ldr	r2, [pc, #192]	@ (80084f0 <HAL_DMA_IRQHandler+0xeb0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d013      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a2f      	ldr	r2, [pc, #188]	@ (80084f4 <HAL_DMA_IRQHandler+0xeb4>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d00e      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a2d      	ldr	r2, [pc, #180]	@ (80084f8 <HAL_DMA_IRQHandler+0xeb8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d009      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a2c      	ldr	r2, [pc, #176]	@ (80084fc <HAL_DMA_IRQHandler+0xebc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d004      	beq.n	800845a <HAL_DMA_IRQHandler+0xe1a>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a2a      	ldr	r2, [pc, #168]	@ (8008500 <HAL_DMA_IRQHandler+0xec0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d108      	bne.n	800846c <HAL_DMA_IRQHandler+0xe2c>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 021c 	bic.w	r2, r2, #28
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	e007      	b.n	800847c <HAL_DMA_IRQHandler+0xe3c>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 020e 	bic.w	r2, r2, #14
 800847a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008480:	f003 031f 	and.w	r3, r3, #31
 8008484:	2201      	movs	r2, #1
 8008486:	409a      	lsls	r2, r3
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d009      	beq.n	80084be <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
 80084b2:	e004      	b.n	80084be <HAL_DMA_IRQHandler+0xe7e>
          return;
 80084b4:	bf00      	nop
 80084b6:	e002      	b.n	80084be <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084b8:	bf00      	nop
 80084ba:	e000      	b.n	80084be <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80084be:	3728      	adds	r7, #40	@ 0x28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	40020010 	.word	0x40020010
 80084c8:	40020028 	.word	0x40020028
 80084cc:	40020040 	.word	0x40020040
 80084d0:	40020058 	.word	0x40020058
 80084d4:	40020070 	.word	0x40020070
 80084d8:	40020088 	.word	0x40020088
 80084dc:	400200a0 	.word	0x400200a0
 80084e0:	400200b8 	.word	0x400200b8
 80084e4:	40020410 	.word	0x40020410
 80084e8:	40020428 	.word	0x40020428
 80084ec:	40020440 	.word	0x40020440
 80084f0:	40020458 	.word	0x40020458
 80084f4:	40020470 	.word	0x40020470
 80084f8:	40020488 	.word	0x40020488
 80084fc:	400204a0 	.word	0x400204a0
 8008500:	400204b8 	.word	0x400204b8

08008504 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800852e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008534:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a7f      	ldr	r2, [pc, #508]	@ (8008738 <DMA_SetConfig+0x21c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d072      	beq.n	8008626 <DMA_SetConfig+0x10a>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a7d      	ldr	r2, [pc, #500]	@ (800873c <DMA_SetConfig+0x220>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d06d      	beq.n	8008626 <DMA_SetConfig+0x10a>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a7c      	ldr	r2, [pc, #496]	@ (8008740 <DMA_SetConfig+0x224>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d068      	beq.n	8008626 <DMA_SetConfig+0x10a>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a7a      	ldr	r2, [pc, #488]	@ (8008744 <DMA_SetConfig+0x228>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d063      	beq.n	8008626 <DMA_SetConfig+0x10a>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a79      	ldr	r2, [pc, #484]	@ (8008748 <DMA_SetConfig+0x22c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d05e      	beq.n	8008626 <DMA_SetConfig+0x10a>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a77      	ldr	r2, [pc, #476]	@ (800874c <DMA_SetConfig+0x230>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d059      	beq.n	8008626 <DMA_SetConfig+0x10a>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a76      	ldr	r2, [pc, #472]	@ (8008750 <DMA_SetConfig+0x234>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d054      	beq.n	8008626 <DMA_SetConfig+0x10a>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a74      	ldr	r2, [pc, #464]	@ (8008754 <DMA_SetConfig+0x238>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d04f      	beq.n	8008626 <DMA_SetConfig+0x10a>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a73      	ldr	r2, [pc, #460]	@ (8008758 <DMA_SetConfig+0x23c>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d04a      	beq.n	8008626 <DMA_SetConfig+0x10a>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a71      	ldr	r2, [pc, #452]	@ (800875c <DMA_SetConfig+0x240>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d045      	beq.n	8008626 <DMA_SetConfig+0x10a>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a70      	ldr	r2, [pc, #448]	@ (8008760 <DMA_SetConfig+0x244>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d040      	beq.n	8008626 <DMA_SetConfig+0x10a>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a6e      	ldr	r2, [pc, #440]	@ (8008764 <DMA_SetConfig+0x248>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d03b      	beq.n	8008626 <DMA_SetConfig+0x10a>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a6d      	ldr	r2, [pc, #436]	@ (8008768 <DMA_SetConfig+0x24c>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d036      	beq.n	8008626 <DMA_SetConfig+0x10a>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a6b      	ldr	r2, [pc, #428]	@ (800876c <DMA_SetConfig+0x250>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d031      	beq.n	8008626 <DMA_SetConfig+0x10a>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a6a      	ldr	r2, [pc, #424]	@ (8008770 <DMA_SetConfig+0x254>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d02c      	beq.n	8008626 <DMA_SetConfig+0x10a>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a68      	ldr	r2, [pc, #416]	@ (8008774 <DMA_SetConfig+0x258>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d027      	beq.n	8008626 <DMA_SetConfig+0x10a>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a67      	ldr	r2, [pc, #412]	@ (8008778 <DMA_SetConfig+0x25c>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d022      	beq.n	8008626 <DMA_SetConfig+0x10a>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a65      	ldr	r2, [pc, #404]	@ (800877c <DMA_SetConfig+0x260>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d01d      	beq.n	8008626 <DMA_SetConfig+0x10a>
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a64      	ldr	r2, [pc, #400]	@ (8008780 <DMA_SetConfig+0x264>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d018      	beq.n	8008626 <DMA_SetConfig+0x10a>
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a62      	ldr	r2, [pc, #392]	@ (8008784 <DMA_SetConfig+0x268>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d013      	beq.n	8008626 <DMA_SetConfig+0x10a>
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a61      	ldr	r2, [pc, #388]	@ (8008788 <DMA_SetConfig+0x26c>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d00e      	beq.n	8008626 <DMA_SetConfig+0x10a>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a5f      	ldr	r2, [pc, #380]	@ (800878c <DMA_SetConfig+0x270>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d009      	beq.n	8008626 <DMA_SetConfig+0x10a>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a5e      	ldr	r2, [pc, #376]	@ (8008790 <DMA_SetConfig+0x274>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d004      	beq.n	8008626 <DMA_SetConfig+0x10a>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a5c      	ldr	r2, [pc, #368]	@ (8008794 <DMA_SetConfig+0x278>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d101      	bne.n	800862a <DMA_SetConfig+0x10e>
 8008626:	2301      	movs	r3, #1
 8008628:	e000      	b.n	800862c <DMA_SetConfig+0x110>
 800862a:	2300      	movs	r3, #0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00d      	beq.n	800864c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008638:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d004      	beq.n	800864c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800864a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a39      	ldr	r2, [pc, #228]	@ (8008738 <DMA_SetConfig+0x21c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d04a      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a38      	ldr	r2, [pc, #224]	@ (800873c <DMA_SetConfig+0x220>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d045      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a36      	ldr	r2, [pc, #216]	@ (8008740 <DMA_SetConfig+0x224>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d040      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a35      	ldr	r2, [pc, #212]	@ (8008744 <DMA_SetConfig+0x228>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d03b      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a33      	ldr	r2, [pc, #204]	@ (8008748 <DMA_SetConfig+0x22c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d036      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a32      	ldr	r2, [pc, #200]	@ (800874c <DMA_SetConfig+0x230>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d031      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a30      	ldr	r2, [pc, #192]	@ (8008750 <DMA_SetConfig+0x234>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d02c      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a2f      	ldr	r2, [pc, #188]	@ (8008754 <DMA_SetConfig+0x238>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d027      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a2d      	ldr	r2, [pc, #180]	@ (8008758 <DMA_SetConfig+0x23c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d022      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a2c      	ldr	r2, [pc, #176]	@ (800875c <DMA_SetConfig+0x240>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d01d      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a2a      	ldr	r2, [pc, #168]	@ (8008760 <DMA_SetConfig+0x244>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d018      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a29      	ldr	r2, [pc, #164]	@ (8008764 <DMA_SetConfig+0x248>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d013      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a27      	ldr	r2, [pc, #156]	@ (8008768 <DMA_SetConfig+0x24c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00e      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a26      	ldr	r2, [pc, #152]	@ (800876c <DMA_SetConfig+0x250>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d009      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a24      	ldr	r2, [pc, #144]	@ (8008770 <DMA_SetConfig+0x254>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d004      	beq.n	80086ec <DMA_SetConfig+0x1d0>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a23      	ldr	r2, [pc, #140]	@ (8008774 <DMA_SetConfig+0x258>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d101      	bne.n	80086f0 <DMA_SetConfig+0x1d4>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <DMA_SetConfig+0x1d6>
 80086f0:	2300      	movs	r3, #0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d059      	beq.n	80087aa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086fa:	f003 031f 	and.w	r3, r3, #31
 80086fe:	223f      	movs	r2, #63	@ 0x3f
 8008700:	409a      	lsls	r2, r3
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008714:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	2b40      	cmp	r3, #64	@ 0x40
 8008724:	d138      	bne.n	8008798 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008736:	e0ae      	b.n	8008896 <DMA_SetConfig+0x37a>
 8008738:	40020010 	.word	0x40020010
 800873c:	40020028 	.word	0x40020028
 8008740:	40020040 	.word	0x40020040
 8008744:	40020058 	.word	0x40020058
 8008748:	40020070 	.word	0x40020070
 800874c:	40020088 	.word	0x40020088
 8008750:	400200a0 	.word	0x400200a0
 8008754:	400200b8 	.word	0x400200b8
 8008758:	40020410 	.word	0x40020410
 800875c:	40020428 	.word	0x40020428
 8008760:	40020440 	.word	0x40020440
 8008764:	40020458 	.word	0x40020458
 8008768:	40020470 	.word	0x40020470
 800876c:	40020488 	.word	0x40020488
 8008770:	400204a0 	.word	0x400204a0
 8008774:	400204b8 	.word	0x400204b8
 8008778:	58025408 	.word	0x58025408
 800877c:	5802541c 	.word	0x5802541c
 8008780:	58025430 	.word	0x58025430
 8008784:	58025444 	.word	0x58025444
 8008788:	58025458 	.word	0x58025458
 800878c:	5802546c 	.word	0x5802546c
 8008790:	58025480 	.word	0x58025480
 8008794:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	60da      	str	r2, [r3, #12]
}
 80087a8:	e075      	b.n	8008896 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a3d      	ldr	r2, [pc, #244]	@ (80088a4 <DMA_SetConfig+0x388>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d04a      	beq.n	800884a <DMA_SetConfig+0x32e>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a3b      	ldr	r2, [pc, #236]	@ (80088a8 <DMA_SetConfig+0x38c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d045      	beq.n	800884a <DMA_SetConfig+0x32e>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a3a      	ldr	r2, [pc, #232]	@ (80088ac <DMA_SetConfig+0x390>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d040      	beq.n	800884a <DMA_SetConfig+0x32e>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a38      	ldr	r2, [pc, #224]	@ (80088b0 <DMA_SetConfig+0x394>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d03b      	beq.n	800884a <DMA_SetConfig+0x32e>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a37      	ldr	r2, [pc, #220]	@ (80088b4 <DMA_SetConfig+0x398>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d036      	beq.n	800884a <DMA_SetConfig+0x32e>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a35      	ldr	r2, [pc, #212]	@ (80088b8 <DMA_SetConfig+0x39c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d031      	beq.n	800884a <DMA_SetConfig+0x32e>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a34      	ldr	r2, [pc, #208]	@ (80088bc <DMA_SetConfig+0x3a0>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d02c      	beq.n	800884a <DMA_SetConfig+0x32e>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a32      	ldr	r2, [pc, #200]	@ (80088c0 <DMA_SetConfig+0x3a4>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d027      	beq.n	800884a <DMA_SetConfig+0x32e>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a31      	ldr	r2, [pc, #196]	@ (80088c4 <DMA_SetConfig+0x3a8>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d022      	beq.n	800884a <DMA_SetConfig+0x32e>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a2f      	ldr	r2, [pc, #188]	@ (80088c8 <DMA_SetConfig+0x3ac>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d01d      	beq.n	800884a <DMA_SetConfig+0x32e>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a2e      	ldr	r2, [pc, #184]	@ (80088cc <DMA_SetConfig+0x3b0>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d018      	beq.n	800884a <DMA_SetConfig+0x32e>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a2c      	ldr	r2, [pc, #176]	@ (80088d0 <DMA_SetConfig+0x3b4>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d013      	beq.n	800884a <DMA_SetConfig+0x32e>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a2b      	ldr	r2, [pc, #172]	@ (80088d4 <DMA_SetConfig+0x3b8>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00e      	beq.n	800884a <DMA_SetConfig+0x32e>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a29      	ldr	r2, [pc, #164]	@ (80088d8 <DMA_SetConfig+0x3bc>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d009      	beq.n	800884a <DMA_SetConfig+0x32e>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a28      	ldr	r2, [pc, #160]	@ (80088dc <DMA_SetConfig+0x3c0>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d004      	beq.n	800884a <DMA_SetConfig+0x32e>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a26      	ldr	r2, [pc, #152]	@ (80088e0 <DMA_SetConfig+0x3c4>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d101      	bne.n	800884e <DMA_SetConfig+0x332>
 800884a:	2301      	movs	r3, #1
 800884c:	e000      	b.n	8008850 <DMA_SetConfig+0x334>
 800884e:	2300      	movs	r3, #0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d020      	beq.n	8008896 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008858:	f003 031f 	and.w	r3, r3, #31
 800885c:	2201      	movs	r2, #1
 800885e:	409a      	lsls	r2, r3
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	2b40      	cmp	r3, #64	@ 0x40
 8008872:	d108      	bne.n	8008886 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	60da      	str	r2, [r3, #12]
}
 8008884:	e007      	b.n	8008896 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	60da      	str	r2, [r3, #12]
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	48022c08 	.word	0x48022c08
 80088a8:	48022c1c 	.word	0x48022c1c
 80088ac:	48022c30 	.word	0x48022c30
 80088b0:	48022c44 	.word	0x48022c44
 80088b4:	48022c58 	.word	0x48022c58
 80088b8:	48022c6c 	.word	0x48022c6c
 80088bc:	48022c80 	.word	0x48022c80
 80088c0:	48022c94 	.word	0x48022c94
 80088c4:	58025408 	.word	0x58025408
 80088c8:	5802541c 	.word	0x5802541c
 80088cc:	58025430 	.word	0x58025430
 80088d0:	58025444 	.word	0x58025444
 80088d4:	58025458 	.word	0x58025458
 80088d8:	5802546c 	.word	0x5802546c
 80088dc:	58025480 	.word	0x58025480
 80088e0:	58025494 	.word	0x58025494

080088e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a42      	ldr	r2, [pc, #264]	@ (80089fc <DMA_CalcBaseAndBitshift+0x118>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d04a      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a41      	ldr	r2, [pc, #260]	@ (8008a00 <DMA_CalcBaseAndBitshift+0x11c>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d045      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a3f      	ldr	r2, [pc, #252]	@ (8008a04 <DMA_CalcBaseAndBitshift+0x120>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d040      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a3e      	ldr	r2, [pc, #248]	@ (8008a08 <DMA_CalcBaseAndBitshift+0x124>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d03b      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a3c      	ldr	r2, [pc, #240]	@ (8008a0c <DMA_CalcBaseAndBitshift+0x128>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d036      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a3b      	ldr	r2, [pc, #236]	@ (8008a10 <DMA_CalcBaseAndBitshift+0x12c>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d031      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a39      	ldr	r2, [pc, #228]	@ (8008a14 <DMA_CalcBaseAndBitshift+0x130>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d02c      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a38      	ldr	r2, [pc, #224]	@ (8008a18 <DMA_CalcBaseAndBitshift+0x134>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d027      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a36      	ldr	r2, [pc, #216]	@ (8008a1c <DMA_CalcBaseAndBitshift+0x138>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d022      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a35      	ldr	r2, [pc, #212]	@ (8008a20 <DMA_CalcBaseAndBitshift+0x13c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d01d      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a33      	ldr	r2, [pc, #204]	@ (8008a24 <DMA_CalcBaseAndBitshift+0x140>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d018      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a32      	ldr	r2, [pc, #200]	@ (8008a28 <DMA_CalcBaseAndBitshift+0x144>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d013      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a30      	ldr	r2, [pc, #192]	@ (8008a2c <DMA_CalcBaseAndBitshift+0x148>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d00e      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a2f      	ldr	r2, [pc, #188]	@ (8008a30 <DMA_CalcBaseAndBitshift+0x14c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d009      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a2d      	ldr	r2, [pc, #180]	@ (8008a34 <DMA_CalcBaseAndBitshift+0x150>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d004      	beq.n	800898c <DMA_CalcBaseAndBitshift+0xa8>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a2c      	ldr	r2, [pc, #176]	@ (8008a38 <DMA_CalcBaseAndBitshift+0x154>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d101      	bne.n	8008990 <DMA_CalcBaseAndBitshift+0xac>
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <DMA_CalcBaseAndBitshift+0xae>
 8008990:	2300      	movs	r3, #0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d024      	beq.n	80089e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	3b10      	subs	r3, #16
 800899e:	4a27      	ldr	r2, [pc, #156]	@ (8008a3c <DMA_CalcBaseAndBitshift+0x158>)
 80089a0:	fba2 2303 	umull	r2, r3, r2, r3
 80089a4:	091b      	lsrs	r3, r3, #4
 80089a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f003 0307 	and.w	r3, r3, #7
 80089ae:	4a24      	ldr	r2, [pc, #144]	@ (8008a40 <DMA_CalcBaseAndBitshift+0x15c>)
 80089b0:	5cd3      	ldrb	r3, [r2, r3]
 80089b2:	461a      	mov	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d908      	bls.n	80089d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	4b1f      	ldr	r3, [pc, #124]	@ (8008a44 <DMA_CalcBaseAndBitshift+0x160>)
 80089c6:	4013      	ands	r3, r2
 80089c8:	1d1a      	adds	r2, r3, #4
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80089ce:	e00d      	b.n	80089ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a44 <DMA_CalcBaseAndBitshift+0x160>)
 80089d8:	4013      	ands	r3, r2
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80089de:	e005      	b.n	80089ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	40020010 	.word	0x40020010
 8008a00:	40020028 	.word	0x40020028
 8008a04:	40020040 	.word	0x40020040
 8008a08:	40020058 	.word	0x40020058
 8008a0c:	40020070 	.word	0x40020070
 8008a10:	40020088 	.word	0x40020088
 8008a14:	400200a0 	.word	0x400200a0
 8008a18:	400200b8 	.word	0x400200b8
 8008a1c:	40020410 	.word	0x40020410
 8008a20:	40020428 	.word	0x40020428
 8008a24:	40020440 	.word	0x40020440
 8008a28:	40020458 	.word	0x40020458
 8008a2c:	40020470 	.word	0x40020470
 8008a30:	40020488 	.word	0x40020488
 8008a34:	400204a0 	.word	0x400204a0
 8008a38:	400204b8 	.word	0x400204b8
 8008a3c:	aaaaaaab 	.word	0xaaaaaaab
 8008a40:	080191d4 	.word	0x080191d4
 8008a44:	fffffc00 	.word	0xfffffc00

08008a48 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d120      	bne.n	8008a9e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d858      	bhi.n	8008b16 <DMA_CheckFifoParam+0xce>
 8008a64:	a201      	add	r2, pc, #4	@ (adr r2, 8008a6c <DMA_CheckFifoParam+0x24>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008a7d 	.word	0x08008a7d
 8008a70:	08008a8f 	.word	0x08008a8f
 8008a74:	08008a7d 	.word	0x08008a7d
 8008a78:	08008b17 	.word	0x08008b17
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d048      	beq.n	8008b1a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a8c:	e045      	b.n	8008b1a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008a96:	d142      	bne.n	8008b1e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a9c:	e03f      	b.n	8008b1e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008aa6:	d123      	bne.n	8008af0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d838      	bhi.n	8008b22 <DMA_CheckFifoParam+0xda>
 8008ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab8 <DMA_CheckFifoParam+0x70>)
 8008ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	08008ac9 	.word	0x08008ac9
 8008abc:	08008acf 	.word	0x08008acf
 8008ac0:	08008ac9 	.word	0x08008ac9
 8008ac4:	08008ae1 	.word	0x08008ae1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	73fb      	strb	r3, [r7, #15]
        break;
 8008acc:	e030      	b.n	8008b30 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d025      	beq.n	8008b26 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008ade:	e022      	b.n	8008b26 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008ae8:	d11f      	bne.n	8008b2a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008aee:	e01c      	b.n	8008b2a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d902      	bls.n	8008afe <DMA_CheckFifoParam+0xb6>
 8008af8:	2b03      	cmp	r3, #3
 8008afa:	d003      	beq.n	8008b04 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008afc:	e018      	b.n	8008b30 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	73fb      	strb	r3, [r7, #15]
        break;
 8008b02:	e015      	b.n	8008b30 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00e      	beq.n	8008b2e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	73fb      	strb	r3, [r7, #15]
    break;
 8008b14:	e00b      	b.n	8008b2e <DMA_CheckFifoParam+0xe6>
        break;
 8008b16:	bf00      	nop
 8008b18:	e00a      	b.n	8008b30 <DMA_CheckFifoParam+0xe8>
        break;
 8008b1a:	bf00      	nop
 8008b1c:	e008      	b.n	8008b30 <DMA_CheckFifoParam+0xe8>
        break;
 8008b1e:	bf00      	nop
 8008b20:	e006      	b.n	8008b30 <DMA_CheckFifoParam+0xe8>
        break;
 8008b22:	bf00      	nop
 8008b24:	e004      	b.n	8008b30 <DMA_CheckFifoParam+0xe8>
        break;
 8008b26:	bf00      	nop
 8008b28:	e002      	b.n	8008b30 <DMA_CheckFifoParam+0xe8>
        break;
 8008b2a:	bf00      	nop
 8008b2c:	e000      	b.n	8008b30 <DMA_CheckFifoParam+0xe8>
    break;
 8008b2e:	bf00      	nop
    }
  }

  return status;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop

08008b40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a38      	ldr	r2, [pc, #224]	@ (8008c34 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d022      	beq.n	8008b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a36      	ldr	r2, [pc, #216]	@ (8008c38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d01d      	beq.n	8008b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a35      	ldr	r2, [pc, #212]	@ (8008c3c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d018      	beq.n	8008b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a33      	ldr	r2, [pc, #204]	@ (8008c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d013      	beq.n	8008b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a32      	ldr	r2, [pc, #200]	@ (8008c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d00e      	beq.n	8008b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a30      	ldr	r2, [pc, #192]	@ (8008c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d009      	beq.n	8008b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8008c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d004      	beq.n	8008b9e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a2d      	ldr	r2, [pc, #180]	@ (8008c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d101      	bne.n	8008ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e000      	b.n	8008ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d01a      	beq.n	8008bde <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	3b08      	subs	r3, #8
 8008bb0:	4a28      	ldr	r2, [pc, #160]	@ (8008c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb6:	091b      	lsrs	r3, r3, #4
 8008bb8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	4b26      	ldr	r3, [pc, #152]	@ (8008c58 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a24      	ldr	r2, [pc, #144]	@ (8008c5c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008bcc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f003 031f 	and.w	r3, r3, #31
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	409a      	lsls	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008bdc:	e024      	b.n	8008c28 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	3b10      	subs	r3, #16
 8008be6:	4a1e      	ldr	r2, [pc, #120]	@ (8008c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008be8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bec:	091b      	lsrs	r3, r3, #4
 8008bee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8008c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d806      	bhi.n	8008c06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8008c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d902      	bls.n	8008c06 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3308      	adds	r3, #8
 8008c04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	4b18      	ldr	r3, [pc, #96]	@ (8008c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a16      	ldr	r2, [pc, #88]	@ (8008c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008c18:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f003 031f 	and.w	r3, r3, #31
 8008c20:	2201      	movs	r2, #1
 8008c22:	409a      	lsls	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008c28:	bf00      	nop
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	58025408 	.word	0x58025408
 8008c38:	5802541c 	.word	0x5802541c
 8008c3c:	58025430 	.word	0x58025430
 8008c40:	58025444 	.word	0x58025444
 8008c44:	58025458 	.word	0x58025458
 8008c48:	5802546c 	.word	0x5802546c
 8008c4c:	58025480 	.word	0x58025480
 8008c50:	58025494 	.word	0x58025494
 8008c54:	cccccccd 	.word	0xcccccccd
 8008c58:	16009600 	.word	0x16009600
 8008c5c:	58025880 	.word	0x58025880
 8008c60:	aaaaaaab 	.word	0xaaaaaaab
 8008c64:	400204b8 	.word	0x400204b8
 8008c68:	4002040f 	.word	0x4002040f
 8008c6c:	10008200 	.word	0x10008200
 8008c70:	40020880 	.word	0x40020880

08008c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d04a      	beq.n	8008d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d847      	bhi.n	8008d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a25      	ldr	r2, [pc, #148]	@ (8008d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d022      	beq.n	8008ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a24      	ldr	r2, [pc, #144]	@ (8008d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d01d      	beq.n	8008ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a22      	ldr	r2, [pc, #136]	@ (8008d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d018      	beq.n	8008ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a21      	ldr	r2, [pc, #132]	@ (8008d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d013      	beq.n	8008ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8008d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00e      	beq.n	8008ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d009      	beq.n	8008ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8008d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d004      	beq.n	8008ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a1b      	ldr	r2, [pc, #108]	@ (8008d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d101      	bne.n	8008ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e000      	b.n	8008ce6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	4b17      	ldr	r3, [pc, #92]	@ (8008d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008cee:	4413      	add	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a15      	ldr	r2, [pc, #84]	@ (8008d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008cfc:	671a      	str	r2, [r3, #112]	@ 0x70
 8008cfe:	e009      	b.n	8008d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4b14      	ldr	r3, [pc, #80]	@ (8008d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	461a      	mov	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a11      	ldr	r2, [pc, #68]	@ (8008d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008d12:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	2201      	movs	r2, #1
 8008d1a:	409a      	lsls	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008d20:	bf00      	nop
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr
 8008d2c:	58025408 	.word	0x58025408
 8008d30:	5802541c 	.word	0x5802541c
 8008d34:	58025430 	.word	0x58025430
 8008d38:	58025444 	.word	0x58025444
 8008d3c:	58025458 	.word	0x58025458
 8008d40:	5802546c 	.word	0x5802546c
 8008d44:	58025480 	.word	0x58025480
 8008d48:	58025494 	.word	0x58025494
 8008d4c:	1600963f 	.word	0x1600963f
 8008d50:	58025940 	.word	0x58025940
 8008d54:	1000823f 	.word	0x1000823f
 8008d58:	40020940 	.word	0x40020940

08008d5c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b098      	sub	sp, #96	@ 0x60
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008d64:	4a84      	ldr	r2, [pc, #528]	@ (8008f78 <HAL_FDCAN_Init+0x21c>)
 8008d66:	f107 030c 	add.w	r3, r7, #12
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	224c      	movs	r2, #76	@ 0x4c
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f00e fa1b 	bl	80171aa <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e1c6      	b.n	800910c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a7e      	ldr	r2, [pc, #504]	@ (8008f7c <HAL_FDCAN_Init+0x220>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d106      	bne.n	8008d96 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008d90:	461a      	mov	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7f8 fac8 	bl	8001340 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699a      	ldr	r2, [r3, #24]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0210 	bic.w	r2, r2, #16
 8008dbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008dc0:	f7fc ff5a 	bl	8005c78 <HAL_GetTick>
 8008dc4:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008dc6:	e014      	b.n	8008df2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008dc8:	f7fc ff56 	bl	8005c78 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b0a      	cmp	r3, #10
 8008dd4:	d90d      	bls.n	8008df2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ddc:	f043 0201 	orr.w	r2, r3, #1
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2203      	movs	r2, #3
 8008dea:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e18c      	b.n	800910c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	f003 0308 	and.w	r3, r3, #8
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	d0e3      	beq.n	8008dc8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f042 0201 	orr.w	r2, r2, #1
 8008e0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e10:	f7fc ff32 	bl	8005c78 <HAL_GetTick>
 8008e14:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008e16:	e014      	b.n	8008e42 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008e18:	f7fc ff2e 	bl	8005c78 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	2b0a      	cmp	r3, #10
 8008e24:	d90d      	bls.n	8008e42 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e2c:	f043 0201 	orr.w	r2, r3, #1
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2203      	movs	r2, #3
 8008e3a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e164      	b.n	800910c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d0e3      	beq.n	8008e18 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699a      	ldr	r2, [r3, #24]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f042 0202 	orr.w	r2, r2, #2
 8008e5e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	7c1b      	ldrb	r3, [r3, #16]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d108      	bne.n	8008e7a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699a      	ldr	r2, [r3, #24]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e76:	619a      	str	r2, [r3, #24]
 8008e78:	e007      	b.n	8008e8a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	699a      	ldr	r2, [r3, #24]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e88:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7c5b      	ldrb	r3, [r3, #17]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d108      	bne.n	8008ea4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	699a      	ldr	r2, [r3, #24]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ea0:	619a      	str	r2, [r3, #24]
 8008ea2:	e007      	b.n	8008eb4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	699a      	ldr	r2, [r3, #24]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008eb2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	7c9b      	ldrb	r3, [r3, #18]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d108      	bne.n	8008ece <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008eca:	619a      	str	r2, [r3, #24]
 8008ecc:	e007      	b.n	8008ede <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	699a      	ldr	r2, [r3, #24]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008edc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	430a      	orrs	r2, r1
 8008ef2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	699a      	ldr	r2, [r3, #24]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8008f02:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	691a      	ldr	r2, [r3, #16]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0210 	bic.w	r2, r2, #16
 8008f12:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d108      	bne.n	8008f2e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f042 0204 	orr.w	r2, r2, #4
 8008f2a:	619a      	str	r2, [r3, #24]
 8008f2c:	e030      	b.n	8008f90 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d02c      	beq.n	8008f90 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d020      	beq.n	8008f80 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008f4c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	691a      	ldr	r2, [r3, #16]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f042 0210 	orr.w	r2, r2, #16
 8008f5c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d114      	bne.n	8008f90 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699a      	ldr	r2, [r3, #24]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 0220 	orr.w	r2, r2, #32
 8008f74:	619a      	str	r2, [r3, #24]
 8008f76:	e00b      	b.n	8008f90 <HAL_FDCAN_Init+0x234>
 8008f78:	08019170 	.word	0x08019170
 8008f7c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	699a      	ldr	r2, [r3, #24]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f042 0220 	orr.w	r2, r2, #32
 8008f8e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008fa0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008fa8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008fb8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008fba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fc4:	d115      	bne.n	8008ff2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008fd4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008fde:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008fee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008ff0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	430a      	orrs	r2, r1
 800900c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009018:	4413      	add	r3, r2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d011      	beq.n	8009042 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009026:	f023 0107 	bic.w	r1, r3, #7
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	3360      	adds	r3, #96	@ 0x60
 8009032:	443b      	add	r3, r7
 8009034:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d011      	beq.n	800906e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009052:	f023 0107 	bic.w	r1, r3, #7
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	3360      	adds	r3, #96	@ 0x60
 800905e:	443b      	add	r3, r7
 8009060:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009072:	2b00      	cmp	r3, #0
 8009074:	d012      	beq.n	800909c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800907e:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	3360      	adds	r3, #96	@ 0x60
 800908a:	443b      	add	r3, r7
 800908c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009090:	011a      	lsls	r2, r3, #4
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	430a      	orrs	r2, r1
 8009098:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d012      	beq.n	80090ca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80090ac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	3360      	adds	r3, #96	@ 0x60
 80090b8:	443b      	add	r3, r7
 80090ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80090be:	021a      	lsls	r2, r3, #8
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	430a      	orrs	r2, r1
 80090c6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a11      	ldr	r2, [pc, #68]	@ (8009114 <HAL_FDCAN_Init+0x3b8>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d107      	bne.n	80090e4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	f022 0203 	bic.w	r2, r2, #3
 80090e2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f80b 	bl	8009118 <FDCAN_CalcultateRamBlockAddresses>
 8009102:	4603      	mov	r3, r0
 8009104:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8009108:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 800910c:	4618      	mov	r0, r3
 800910e:	3760      	adds	r7, #96	@ 0x60
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	4000a000 	.word	0x4000a000

08009118 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009124:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800912e:	4ba7      	ldr	r3, [pc, #668]	@ (80093cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009130:	4013      	ands	r3, r2
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	0091      	lsls	r1, r2, #2
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	6812      	ldr	r2, [r2, #0]
 800913a:	430b      	orrs	r3, r1
 800913c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009148:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009150:	041a      	lsls	r2, r3, #16
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	4413      	add	r3, r2
 8009164:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800916e:	4b97      	ldr	r3, [pc, #604]	@ (80093cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009170:	4013      	ands	r3, r2
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	0091      	lsls	r1, r2, #2
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6812      	ldr	r2, [r2, #0]
 800917a:	430b      	orrs	r3, r1
 800917c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009188:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009190:	041a      	lsls	r2, r3, #16
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	430a      	orrs	r2, r1
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	4413      	add	r3, r2
 80091a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80091b0:	4b86      	ldr	r3, [pc, #536]	@ (80093cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80091b2:	4013      	ands	r3, r2
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	0091      	lsls	r1, r2, #2
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6812      	ldr	r2, [r2, #0]
 80091bc:	430b      	orrs	r3, r1
 80091be:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80091ca:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d2:	041a      	lsls	r2, r3, #16
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80091e6:	fb02 f303 	mul.w	r3, r2, r3
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	4413      	add	r3, r2
 80091ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80091f8:	4b74      	ldr	r3, [pc, #464]	@ (80093cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80091fa:	4013      	ands	r3, r2
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	0091      	lsls	r1, r2, #2
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	6812      	ldr	r2, [r2, #0]
 8009204:	430b      	orrs	r3, r1
 8009206:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009212:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800921a:	041a      	lsls	r2, r3, #16
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800922e:	fb02 f303 	mul.w	r3, r2, r3
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	4413      	add	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8009240:	4b62      	ldr	r3, [pc, #392]	@ (80093cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009242:	4013      	ands	r3, r2
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	0091      	lsls	r1, r2, #2
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	6812      	ldr	r2, [r2, #0]
 800924c:	430b      	orrs	r3, r1
 800924e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800925a:	fb02 f303 	mul.w	r3, r2, r3
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	4413      	add	r3, r2
 8009262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800926c:	4b57      	ldr	r3, [pc, #348]	@ (80093cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800926e:	4013      	ands	r3, r2
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	0091      	lsls	r1, r2, #2
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6812      	ldr	r2, [r2, #0]
 8009278:	430b      	orrs	r3, r1
 800927a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009286:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800928e:	041a      	lsls	r2, r3, #16
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	4413      	add	r3, r2
 80092a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80092ae:	4b47      	ldr	r3, [pc, #284]	@ (80093cc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80092b0:	4013      	ands	r3, r2
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	0091      	lsls	r1, r2, #2
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	430b      	orrs	r3, r1
 80092bc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80092c8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092d0:	041a      	lsls	r2, r3, #16
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80092e4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092ec:	061a      	lsls	r2, r3, #24
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092fc:	4b34      	ldr	r3, [pc, #208]	@ (80093d0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80092fe:	4413      	add	r3, r2
 8009300:	009a      	lsls	r2, r3, #2
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	441a      	add	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800931e:	00db      	lsls	r3, r3, #3
 8009320:	441a      	add	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932e:	6879      	ldr	r1, [r7, #4]
 8009330:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8009332:	fb01 f303 	mul.w	r3, r1, r3
 8009336:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8009338:	441a      	add	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009346:	6879      	ldr	r1, [r7, #4]
 8009348:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800934a:	fb01 f303 	mul.w	r3, r1, r3
 800934e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8009350:	441a      	add	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8009362:	fb01 f303 	mul.w	r3, r1, r3
 8009366:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8009368:	441a      	add	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800937a:	00db      	lsls	r3, r3, #3
 800937c:	441a      	add	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800938e:	6879      	ldr	r1, [r7, #4]
 8009390:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8009392:	fb01 f303 	mul.w	r3, r1, r3
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	441a      	add	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80093ae:	fb01 f303 	mul.w	r3, r1, r3
 80093b2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80093b4:	441a      	add	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c2:	4a04      	ldr	r2, [pc, #16]	@ (80093d4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d915      	bls.n	80093f4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80093c8:	e006      	b.n	80093d8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80093ca:	bf00      	nop
 80093cc:	ffff0003 	.word	0xffff0003
 80093d0:	10002b00 	.word	0x10002b00
 80093d4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093de:	f043 0220 	orr.w	r2, r3, #32
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2203      	movs	r2, #3
 80093ec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e010      	b.n	8009416 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093f8:	60fb      	str	r3, [r7, #12]
 80093fa:	e005      	b.n	8009408 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3304      	adds	r3, #4
 8009406:	60fb      	str	r3, [r7, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	429a      	cmp	r2, r3
 8009412:	d3f3      	bcc.n	80093fc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop

08009424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009424:	b480      	push	{r7}
 8009426:	b089      	sub	sp, #36	@ 0x24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800942e:	2300      	movs	r3, #0
 8009430:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009432:	4b89      	ldr	r3, [pc, #548]	@ (8009658 <HAL_GPIO_Init+0x234>)
 8009434:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009436:	e194      	b.n	8009762 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	2101      	movs	r1, #1
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	fa01 f303 	lsl.w	r3, r1, r3
 8009444:	4013      	ands	r3, r2
 8009446:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 8186 	beq.w	800975c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	f003 0303 	and.w	r3, r3, #3
 8009458:	2b01      	cmp	r3, #1
 800945a:	d005      	beq.n	8009468 <HAL_GPIO_Init+0x44>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	2b02      	cmp	r3, #2
 8009466:	d130      	bne.n	80094ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	2203      	movs	r2, #3
 8009474:	fa02 f303 	lsl.w	r3, r2, r3
 8009478:	43db      	mvns	r3, r3
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	4013      	ands	r3, r2
 800947e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	fa02 f303 	lsl.w	r3, r2, r3
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	4313      	orrs	r3, r2
 8009490:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	69ba      	ldr	r2, [r7, #24]
 8009496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800949e:	2201      	movs	r2, #1
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	fa02 f303 	lsl.w	r3, r2, r3
 80094a6:	43db      	mvns	r3, r3
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	4013      	ands	r3, r2
 80094ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	091b      	lsrs	r3, r3, #4
 80094b4:	f003 0201 	and.w	r2, r3, #1
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	fa02 f303 	lsl.w	r3, r2, r3
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	69ba      	ldr	r2, [r7, #24]
 80094c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d017      	beq.n	8009506 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	2203      	movs	r2, #3
 80094e2:	fa02 f303 	lsl.w	r3, r2, r3
 80094e6:	43db      	mvns	r3, r3
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	4013      	ands	r3, r2
 80094ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	689a      	ldr	r2, [r3, #8]
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f003 0303 	and.w	r3, r3, #3
 800950e:	2b02      	cmp	r3, #2
 8009510:	d123      	bne.n	800955a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	08da      	lsrs	r2, r3, #3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3208      	adds	r2, #8
 800951a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	220f      	movs	r2, #15
 800952a:	fa02 f303 	lsl.w	r3, r2, r3
 800952e:	43db      	mvns	r3, r3
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	4013      	ands	r3, r2
 8009534:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	691a      	ldr	r2, [r3, #16]
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	f003 0307 	and.w	r3, r3, #7
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	fa02 f303 	lsl.w	r3, r2, r3
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	4313      	orrs	r3, r2
 800954a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	08da      	lsrs	r2, r3, #3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3208      	adds	r2, #8
 8009554:	69b9      	ldr	r1, [r7, #24]
 8009556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	2203      	movs	r2, #3
 8009566:	fa02 f303 	lsl.w	r3, r2, r3
 800956a:	43db      	mvns	r3, r3
 800956c:	69ba      	ldr	r2, [r7, #24]
 800956e:	4013      	ands	r3, r2
 8009570:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f003 0203 	and.w	r2, r3, #3
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	fa02 f303 	lsl.w	r3, r2, r3
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	4313      	orrs	r3, r2
 8009586:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 80e0 	beq.w	800975c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800959c:	4b2f      	ldr	r3, [pc, #188]	@ (800965c <HAL_GPIO_Init+0x238>)
 800959e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80095a2:	4a2e      	ldr	r2, [pc, #184]	@ (800965c <HAL_GPIO_Init+0x238>)
 80095a4:	f043 0302 	orr.w	r3, r3, #2
 80095a8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80095ac:	4b2b      	ldr	r3, [pc, #172]	@ (800965c <HAL_GPIO_Init+0x238>)
 80095ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80095b2:	f003 0302 	and.w	r3, r3, #2
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80095ba:	4a29      	ldr	r2, [pc, #164]	@ (8009660 <HAL_GPIO_Init+0x23c>)
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	089b      	lsrs	r3, r3, #2
 80095c0:	3302      	adds	r3, #2
 80095c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	220f      	movs	r2, #15
 80095d2:	fa02 f303 	lsl.w	r3, r2, r3
 80095d6:	43db      	mvns	r3, r3
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	4013      	ands	r3, r2
 80095dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a20      	ldr	r2, [pc, #128]	@ (8009664 <HAL_GPIO_Init+0x240>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d052      	beq.n	800968c <HAL_GPIO_Init+0x268>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a1f      	ldr	r2, [pc, #124]	@ (8009668 <HAL_GPIO_Init+0x244>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d031      	beq.n	8009652 <HAL_GPIO_Init+0x22e>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a1e      	ldr	r2, [pc, #120]	@ (800966c <HAL_GPIO_Init+0x248>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d02b      	beq.n	800964e <HAL_GPIO_Init+0x22a>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009670 <HAL_GPIO_Init+0x24c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d025      	beq.n	800964a <HAL_GPIO_Init+0x226>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a1c      	ldr	r2, [pc, #112]	@ (8009674 <HAL_GPIO_Init+0x250>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d01f      	beq.n	8009646 <HAL_GPIO_Init+0x222>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a1b      	ldr	r2, [pc, #108]	@ (8009678 <HAL_GPIO_Init+0x254>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d019      	beq.n	8009642 <HAL_GPIO_Init+0x21e>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a1a      	ldr	r2, [pc, #104]	@ (800967c <HAL_GPIO_Init+0x258>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d013      	beq.n	800963e <HAL_GPIO_Init+0x21a>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a19      	ldr	r2, [pc, #100]	@ (8009680 <HAL_GPIO_Init+0x25c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d00d      	beq.n	800963a <HAL_GPIO_Init+0x216>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a18      	ldr	r2, [pc, #96]	@ (8009684 <HAL_GPIO_Init+0x260>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d007      	beq.n	8009636 <HAL_GPIO_Init+0x212>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a17      	ldr	r2, [pc, #92]	@ (8009688 <HAL_GPIO_Init+0x264>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d101      	bne.n	8009632 <HAL_GPIO_Init+0x20e>
 800962e:	2309      	movs	r3, #9
 8009630:	e02d      	b.n	800968e <HAL_GPIO_Init+0x26a>
 8009632:	230a      	movs	r3, #10
 8009634:	e02b      	b.n	800968e <HAL_GPIO_Init+0x26a>
 8009636:	2308      	movs	r3, #8
 8009638:	e029      	b.n	800968e <HAL_GPIO_Init+0x26a>
 800963a:	2307      	movs	r3, #7
 800963c:	e027      	b.n	800968e <HAL_GPIO_Init+0x26a>
 800963e:	2306      	movs	r3, #6
 8009640:	e025      	b.n	800968e <HAL_GPIO_Init+0x26a>
 8009642:	2305      	movs	r3, #5
 8009644:	e023      	b.n	800968e <HAL_GPIO_Init+0x26a>
 8009646:	2304      	movs	r3, #4
 8009648:	e021      	b.n	800968e <HAL_GPIO_Init+0x26a>
 800964a:	2303      	movs	r3, #3
 800964c:	e01f      	b.n	800968e <HAL_GPIO_Init+0x26a>
 800964e:	2302      	movs	r3, #2
 8009650:	e01d      	b.n	800968e <HAL_GPIO_Init+0x26a>
 8009652:	2301      	movs	r3, #1
 8009654:	e01b      	b.n	800968e <HAL_GPIO_Init+0x26a>
 8009656:	bf00      	nop
 8009658:	58000080 	.word	0x58000080
 800965c:	58024400 	.word	0x58024400
 8009660:	58000400 	.word	0x58000400
 8009664:	58020000 	.word	0x58020000
 8009668:	58020400 	.word	0x58020400
 800966c:	58020800 	.word	0x58020800
 8009670:	58020c00 	.word	0x58020c00
 8009674:	58021000 	.word	0x58021000
 8009678:	58021400 	.word	0x58021400
 800967c:	58021800 	.word	0x58021800
 8009680:	58021c00 	.word	0x58021c00
 8009684:	58022000 	.word	0x58022000
 8009688:	58022400 	.word	0x58022400
 800968c:	2300      	movs	r3, #0
 800968e:	69fa      	ldr	r2, [r7, #28]
 8009690:	f002 0203 	and.w	r2, r2, #3
 8009694:	0092      	lsls	r2, r2, #2
 8009696:	4093      	lsls	r3, r2
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	4313      	orrs	r3, r2
 800969c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800969e:	4938      	ldr	r1, [pc, #224]	@ (8009780 <HAL_GPIO_Init+0x35c>)
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	089b      	lsrs	r3, r3, #2
 80096a4:	3302      	adds	r3, #2
 80096a6:	69ba      	ldr	r2, [r7, #24]
 80096a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80096ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	43db      	mvns	r3, r3
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	4013      	ands	r3, r2
 80096bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d003      	beq.n	80096d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80096d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80096da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	43db      	mvns	r3, r3
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	4013      	ands	r3, r2
 80096ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d003      	beq.n	8009700 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80096f8:	69ba      	ldr	r2, [r7, #24]
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009700:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	43db      	mvns	r3, r3
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	4013      	ands	r3, r2
 8009716:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d003      	beq.n	800972c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	4313      	orrs	r3, r2
 800972a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	69ba      	ldr	r2, [r7, #24]
 8009730:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	43db      	mvns	r3, r3
 800973c:	69ba      	ldr	r2, [r7, #24]
 800973e:	4013      	ands	r3, r2
 8009740:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d003      	beq.n	8009756 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800974e:	69ba      	ldr	r2, [r7, #24]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4313      	orrs	r3, r2
 8009754:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	69ba      	ldr	r2, [r7, #24]
 800975a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	3301      	adds	r3, #1
 8009760:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	fa22 f303 	lsr.w	r3, r2, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	f47f ae63 	bne.w	8009438 <HAL_GPIO_Init+0x14>
  }
}
 8009772:	bf00      	nop
 8009774:	bf00      	nop
 8009776:	3724      	adds	r7, #36	@ 0x24
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr
 8009780:	58000400 	.word	0x58000400

08009784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	807b      	strh	r3, [r7, #2]
 8009790:	4613      	mov	r3, r2
 8009792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009794:	787b      	ldrb	r3, [r7, #1]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800979a:	887a      	ldrh	r2, [r7, #2]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80097a0:	e003      	b.n	80097aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80097a2:	887b      	ldrh	r3, [r7, #2]
 80097a4:	041a      	lsls	r2, r3, #16
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	619a      	str	r2, [r3, #24]
}
 80097aa:	bf00      	nop
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
	...

080097b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e08b      	b.n	80098e2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d106      	bne.n	80097e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7f8 f8b8 	bl	8001954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2224      	movs	r2, #36	@ 0x24
 80097e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0201 	bic.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009808:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009818:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d107      	bne.n	8009832 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	689a      	ldr	r2, [r3, #8]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800982e:	609a      	str	r2, [r3, #8]
 8009830:	e006      	b.n	8009840 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689a      	ldr	r2, [r3, #8]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800983e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	2b02      	cmp	r3, #2
 8009846:	d108      	bne.n	800985a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009856:	605a      	str	r2, [r3, #4]
 8009858:	e007      	b.n	800986a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009868:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6859      	ldr	r1, [r3, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	4b1d      	ldr	r3, [pc, #116]	@ (80098ec <HAL_I2C_Init+0x134>)
 8009876:	430b      	orrs	r3, r1
 8009878:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68da      	ldr	r2, [r3, #12]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009888:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691a      	ldr	r2, [r3, #16]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	430a      	orrs	r2, r1
 80098a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	69d9      	ldr	r1, [r3, #28]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1a      	ldr	r2, [r3, #32]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f042 0201 	orr.w	r2, r2, #1
 80098c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2220      	movs	r2, #32
 80098ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	02008000 	.word	0x02008000

080098f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b20      	cmp	r3, #32
 8009904:	d138      	bne.n	8009978 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800990c:	2b01      	cmp	r3, #1
 800990e:	d101      	bne.n	8009914 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009910:	2302      	movs	r3, #2
 8009912:	e032      	b.n	800997a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2224      	movs	r2, #36	@ 0x24
 8009920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f022 0201 	bic.w	r2, r2, #1
 8009932:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009942:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6819      	ldr	r1, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0201 	orr.w	r2, r2, #1
 8009962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2220      	movs	r2, #32
 8009968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	e000      	b.n	800997a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009978:	2302      	movs	r3, #2
  }
}
 800997a:	4618      	mov	r0, r3
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b20      	cmp	r3, #32
 800999a:	d139      	bne.n	8009a10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d101      	bne.n	80099aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80099a6:	2302      	movs	r3, #2
 80099a8:	e033      	b.n	8009a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2224      	movs	r2, #36	@ 0x24
 80099b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 0201 	bic.w	r2, r2, #1
 80099c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80099d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	021b      	lsls	r3, r3, #8
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f042 0201 	orr.w	r2, r2, #1
 80099fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2220      	movs	r2, #32
 8009a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	e000      	b.n	8009a12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009a10:	2302      	movs	r3, #2
  }
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
	...

08009a20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009a28:	4b19      	ldr	r3, [pc, #100]	@ (8009a90 <HAL_PWREx_ConfigSupply+0x70>)
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d00a      	beq.n	8009a4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009a34:	4b16      	ldr	r3, [pc, #88]	@ (8009a90 <HAL_PWREx_ConfigSupply+0x70>)
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d001      	beq.n	8009a46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e01f      	b.n	8009a86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	e01d      	b.n	8009a86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009a4a:	4b11      	ldr	r3, [pc, #68]	@ (8009a90 <HAL_PWREx_ConfigSupply+0x70>)
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f023 0207 	bic.w	r2, r3, #7
 8009a52:	490f      	ldr	r1, [pc, #60]	@ (8009a90 <HAL_PWREx_ConfigSupply+0x70>)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009a5a:	f7fc f90d 	bl	8005c78 <HAL_GetTick>
 8009a5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a60:	e009      	b.n	8009a76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a62:	f7fc f909 	bl	8005c78 <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a70:	d901      	bls.n	8009a76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e007      	b.n	8009a86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a76:	4b06      	ldr	r3, [pc, #24]	@ (8009a90 <HAL_PWREx_ConfigSupply+0x70>)
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a82:	d1ee      	bne.n	8009a62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	58024800 	.word	0x58024800

08009a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08c      	sub	sp, #48	@ 0x30
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f000 bc1f 	b.w	800a2e6 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 80b3 	beq.w	8009c1c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ab6:	4b95      	ldr	r3, [pc, #596]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ac0:	4b92      	ldr	r3, [pc, #584]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac8:	2b10      	cmp	r3, #16
 8009aca:	d007      	beq.n	8009adc <HAL_RCC_OscConfig+0x48>
 8009acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ace:	2b18      	cmp	r3, #24
 8009ad0:	d112      	bne.n	8009af8 <HAL_RCC_OscConfig+0x64>
 8009ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad4:	f003 0303 	and.w	r3, r3, #3
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d10d      	bne.n	8009af8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009adc:	4b8b      	ldr	r3, [pc, #556]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 8098 	beq.w	8009c1a <HAL_RCC_OscConfig+0x186>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f040 8093 	bne.w	8009c1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e3f6      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b00:	d106      	bne.n	8009b10 <HAL_RCC_OscConfig+0x7c>
 8009b02:	4b82      	ldr	r3, [pc, #520]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a81      	ldr	r2, [pc, #516]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	e058      	b.n	8009bc2 <HAL_RCC_OscConfig+0x12e>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d112      	bne.n	8009b3e <HAL_RCC_OscConfig+0xaa>
 8009b18:	4b7c      	ldr	r3, [pc, #496]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a7b      	ldr	r2, [pc, #492]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	4b79      	ldr	r3, [pc, #484]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a78      	ldr	r2, [pc, #480]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b2a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	4b76      	ldr	r3, [pc, #472]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a75      	ldr	r2, [pc, #468]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	e041      	b.n	8009bc2 <HAL_RCC_OscConfig+0x12e>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009b46:	d112      	bne.n	8009b6e <HAL_RCC_OscConfig+0xda>
 8009b48:	4b70      	ldr	r3, [pc, #448]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a6f      	ldr	r2, [pc, #444]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	4b6d      	ldr	r3, [pc, #436]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a6c      	ldr	r2, [pc, #432]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b5a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	4b6a      	ldr	r3, [pc, #424]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a69      	ldr	r2, [pc, #420]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b6a:	6013      	str	r3, [r2, #0]
 8009b6c:	e029      	b.n	8009bc2 <HAL_RCC_OscConfig+0x12e>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8009b76:	d112      	bne.n	8009b9e <HAL_RCC_OscConfig+0x10a>
 8009b78:	4b64      	ldr	r3, [pc, #400]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a63      	ldr	r2, [pc, #396]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	4b61      	ldr	r3, [pc, #388]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a60      	ldr	r2, [pc, #384]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b8e:	6013      	str	r3, [r2, #0]
 8009b90:	4b5e      	ldr	r3, [pc, #376]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a5d      	ldr	r2, [pc, #372]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	e011      	b.n	8009bc2 <HAL_RCC_OscConfig+0x12e>
 8009b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a5a      	ldr	r2, [pc, #360]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	4b58      	ldr	r3, [pc, #352]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a57      	ldr	r2, [pc, #348]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009bb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009bb4:	6013      	str	r3, [r2, #0]
 8009bb6:	4b55      	ldr	r3, [pc, #340]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a54      	ldr	r2, [pc, #336]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009bbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009bc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d013      	beq.n	8009bf2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bca:	f7fc f855 	bl	8005c78 <HAL_GetTick>
 8009bce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009bd0:	e008      	b.n	8009be4 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bd2:	f7fc f851 	bl	8005c78 <HAL_GetTick>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	2b64      	cmp	r3, #100	@ 0x64
 8009bde:	d901      	bls.n	8009be4 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8009be0:	2303      	movs	r3, #3
 8009be2:	e380      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009be4:	4b49      	ldr	r3, [pc, #292]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0f0      	beq.n	8009bd2 <HAL_RCC_OscConfig+0x13e>
 8009bf0:	e014      	b.n	8009c1c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf2:	f7fc f841 	bl	8005c78 <HAL_GetTick>
 8009bf6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009bf8:	e008      	b.n	8009c0c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009bfa:	f7fc f83d 	bl	8005c78 <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	2b64      	cmp	r3, #100	@ 0x64
 8009c06:	d901      	bls.n	8009c0c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e36c      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009c0c:	4b3f      	ldr	r3, [pc, #252]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1f0      	bne.n	8009bfa <HAL_RCC_OscConfig+0x166>
 8009c18:	e000      	b.n	8009c1c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0302 	and.w	r3, r3, #2
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 808c 	beq.w	8009d42 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c2a:	4b38      	ldr	r3, [pc, #224]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009c32:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c34:	4b35      	ldr	r3, [pc, #212]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c38:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d007      	beq.n	8009c50 <HAL_RCC_OscConfig+0x1bc>
 8009c40:	6a3b      	ldr	r3, [r7, #32]
 8009c42:	2b18      	cmp	r3, #24
 8009c44:	d137      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x222>
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	f003 0303 	and.w	r3, r3, #3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d132      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c50:	4b2e      	ldr	r3, [pc, #184]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0304 	and.w	r3, r3, #4
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d005      	beq.n	8009c68 <HAL_RCC_OscConfig+0x1d4>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	e33e      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c68:	4b28      	ldr	r3, [pc, #160]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f023 0219 	bic.w	r2, r3, #25
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	4925      	ldr	r1, [pc, #148]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c7a:	f7fb fffd 	bl	8005c78 <HAL_GetTick>
 8009c7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c80:	e008      	b.n	8009c94 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c82:	f7fb fff9 	bl	8005c78 <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d901      	bls.n	8009c94 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e328      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c94:	4b1d      	ldr	r3, [pc, #116]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0304 	and.w	r3, r3, #4
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0f0      	beq.n	8009c82 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	061b      	lsls	r3, r3, #24
 8009cae:	4917      	ldr	r1, [pc, #92]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cb4:	e045      	b.n	8009d42 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d028      	beq.n	8009d10 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009cbe:	4b13      	ldr	r3, [pc, #76]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f023 0219 	bic.w	r2, r3, #25
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	4910      	ldr	r1, [pc, #64]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cd0:	f7fb ffd2 	bl	8005c78 <HAL_GetTick>
 8009cd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cd6:	e008      	b.n	8009cea <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cd8:	f7fb ffce 	bl	8005c78 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d901      	bls.n	8009cea <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e2fd      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cea:	4b08      	ldr	r3, [pc, #32]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 0304 	and.w	r3, r3, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0f0      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cf6:	4b05      	ldr	r3, [pc, #20]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	061b      	lsls	r3, r3, #24
 8009d04:	4901      	ldr	r1, [pc, #4]	@ (8009d0c <HAL_RCC_OscConfig+0x278>)
 8009d06:	4313      	orrs	r3, r2
 8009d08:	604b      	str	r3, [r1, #4]
 8009d0a:	e01a      	b.n	8009d42 <HAL_RCC_OscConfig+0x2ae>
 8009d0c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d10:	4b97      	ldr	r3, [pc, #604]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a96      	ldr	r2, [pc, #600]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009d16:	f023 0301 	bic.w	r3, r3, #1
 8009d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d1c:	f7fb ffac 	bl	8005c78 <HAL_GetTick>
 8009d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d22:	e008      	b.n	8009d36 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d24:	f7fb ffa8 	bl	8005c78 <HAL_GetTick>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2c:	1ad3      	subs	r3, r2, r3
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d901      	bls.n	8009d36 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e2d7      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d36:	4b8e      	ldr	r3, [pc, #568]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0304 	and.w	r3, r3, #4
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1f0      	bne.n	8009d24 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0310 	and.w	r3, r3, #16
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d06a      	beq.n	8009e24 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d4e:	4b88      	ldr	r3, [pc, #544]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d58:	4b85      	ldr	r3, [pc, #532]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	2b08      	cmp	r3, #8
 8009d62:	d007      	beq.n	8009d74 <HAL_RCC_OscConfig+0x2e0>
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	2b18      	cmp	r3, #24
 8009d68:	d11b      	bne.n	8009da2 <HAL_RCC_OscConfig+0x30e>
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f003 0303 	and.w	r3, r3, #3
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d116      	bne.n	8009da2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d74:	4b7e      	ldr	r3, [pc, #504]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <HAL_RCC_OscConfig+0x2f8>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	69db      	ldr	r3, [r3, #28]
 8009d84:	2b80      	cmp	r3, #128	@ 0x80
 8009d86:	d001      	beq.n	8009d8c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e2ac      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d8c:	4b78      	ldr	r3, [pc, #480]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a1b      	ldr	r3, [r3, #32]
 8009d98:	061b      	lsls	r3, r3, #24
 8009d9a:	4975      	ldr	r1, [pc, #468]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009da0:	e040      	b.n	8009e24 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d023      	beq.n	8009df2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009daa:	4b71      	ldr	r3, [pc, #452]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a70      	ldr	r2, [pc, #448]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db6:	f7fb ff5f 	bl	8005c78 <HAL_GetTick>
 8009dba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009dbc:	e008      	b.n	8009dd0 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009dbe:	f7fb ff5b 	bl	8005c78 <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d901      	bls.n	8009dd0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8009dcc:	2303      	movs	r3, #3
 8009dce:	e28a      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009dd0:	4b67      	ldr	r3, [pc, #412]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0f0      	beq.n	8009dbe <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ddc:	4b64      	ldr	r3, [pc, #400]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a1b      	ldr	r3, [r3, #32]
 8009de8:	061b      	lsls	r3, r3, #24
 8009dea:	4961      	ldr	r1, [pc, #388]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	60cb      	str	r3, [r1, #12]
 8009df0:	e018      	b.n	8009e24 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009df2:	4b5f      	ldr	r3, [pc, #380]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a5e      	ldr	r2, [pc, #376]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009df8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dfe:	f7fb ff3b 	bl	8005c78 <HAL_GetTick>
 8009e02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e04:	e008      	b.n	8009e18 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e06:	f7fb ff37 	bl	8005c78 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d901      	bls.n	8009e18 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e266      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e18:	4b55      	ldr	r3, [pc, #340]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1f0      	bne.n	8009e06 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 0308 	and.w	r3, r3, #8
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d036      	beq.n	8009e9e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d019      	beq.n	8009e6c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e38:	4b4d      	ldr	r3, [pc, #308]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e3c:	4a4c      	ldr	r2, [pc, #304]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009e3e:	f043 0301 	orr.w	r3, r3, #1
 8009e42:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e44:	f7fb ff18 	bl	8005c78 <HAL_GetTick>
 8009e48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e4a:	e008      	b.n	8009e5e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e4c:	f7fb ff14 	bl	8005c78 <HAL_GetTick>
 8009e50:	4602      	mov	r2, r0
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	d901      	bls.n	8009e5e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e243      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009e5e:	4b44      	ldr	r3, [pc, #272]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e62:	f003 0302 	and.w	r3, r3, #2
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0f0      	beq.n	8009e4c <HAL_RCC_OscConfig+0x3b8>
 8009e6a:	e018      	b.n	8009e9e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e6c:	4b40      	ldr	r3, [pc, #256]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e70:	4a3f      	ldr	r2, [pc, #252]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009e72:	f023 0301 	bic.w	r3, r3, #1
 8009e76:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e78:	f7fb fefe 	bl	8005c78 <HAL_GetTick>
 8009e7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e7e:	e008      	b.n	8009e92 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e80:	f7fb fefa 	bl	8005c78 <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d901      	bls.n	8009e92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e229      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e92:	4b37      	ldr	r3, [pc, #220]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009e94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e96:	f003 0302 	and.w	r3, r3, #2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1f0      	bne.n	8009e80 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0320 	and.w	r3, r3, #32
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d036      	beq.n	8009f18 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d019      	beq.n	8009ee6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009eb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009ebc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ebe:	f7fb fedb 	bl	8005c78 <HAL_GetTick>
 8009ec2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ec4:	e008      	b.n	8009ed8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ec6:	f7fb fed7 	bl	8005c78 <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d901      	bls.n	8009ed8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	e206      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ed8:	4b25      	ldr	r3, [pc, #148]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0f0      	beq.n	8009ec6 <HAL_RCC_OscConfig+0x432>
 8009ee4:	e018      	b.n	8009f18 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009ee6:	4b22      	ldr	r3, [pc, #136]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a21      	ldr	r2, [pc, #132]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009eec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ef0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009ef2:	f7fb fec1 	bl	8005c78 <HAL_GetTick>
 8009ef6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ef8:	e008      	b.n	8009f0c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009efa:	f7fb febd 	bl	8005c78 <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d901      	bls.n	8009f0c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e1ec      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f0c:	4b18      	ldr	r3, [pc, #96]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1f0      	bne.n	8009efa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f003 0304 	and.w	r3, r3, #4
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 80af 	beq.w	800a084 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009f26:	4b13      	ldr	r3, [pc, #76]	@ (8009f74 <HAL_RCC_OscConfig+0x4e0>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a12      	ldr	r2, [pc, #72]	@ (8009f74 <HAL_RCC_OscConfig+0x4e0>)
 8009f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f32:	f7fb fea1 	bl	8005c78 <HAL_GetTick>
 8009f36:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f38:	e008      	b.n	8009f4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f3a:	f7fb fe9d 	bl	8005c78 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	2b64      	cmp	r3, #100	@ 0x64
 8009f46:	d901      	bls.n	8009f4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e1cc      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f4c:	4b09      	ldr	r3, [pc, #36]	@ (8009f74 <HAL_RCC_OscConfig+0x4e0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0f0      	beq.n	8009f3a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d10b      	bne.n	8009f78 <HAL_RCC_OscConfig+0x4e4>
 8009f60:	4b03      	ldr	r3, [pc, #12]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f64:	4a02      	ldr	r2, [pc, #8]	@ (8009f70 <HAL_RCC_OscConfig+0x4dc>)
 8009f66:	f043 0301 	orr.w	r3, r3, #1
 8009f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f6c:	e05b      	b.n	800a026 <HAL_RCC_OscConfig+0x592>
 8009f6e:	bf00      	nop
 8009f70:	58024400 	.word	0x58024400
 8009f74:	58024800 	.word	0x58024800
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d112      	bne.n	8009fa6 <HAL_RCC_OscConfig+0x512>
 8009f80:	4b9d      	ldr	r3, [pc, #628]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f84:	4a9c      	ldr	r2, [pc, #624]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009f86:	f023 0301 	bic.w	r3, r3, #1
 8009f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f8c:	4b9a      	ldr	r3, [pc, #616]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f90:	4a99      	ldr	r2, [pc, #612]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8009f98:	4b97      	ldr	r3, [pc, #604]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f9c:	4a96      	ldr	r2, [pc, #600]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009f9e:	f023 0304 	bic.w	r3, r3, #4
 8009fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fa4:	e03f      	b.n	800a026 <HAL_RCC_OscConfig+0x592>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	2b05      	cmp	r3, #5
 8009fac:	d112      	bne.n	8009fd4 <HAL_RCC_OscConfig+0x540>
 8009fae:	4b92      	ldr	r3, [pc, #584]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fb2:	4a91      	ldr	r2, [pc, #580]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009fb4:	f043 0304 	orr.w	r3, r3, #4
 8009fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fba:	4b8f      	ldr	r3, [pc, #572]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fbe:	4a8e      	ldr	r2, [pc, #568]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009fc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fc6:	4b8c      	ldr	r3, [pc, #560]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fca:	4a8b      	ldr	r2, [pc, #556]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009fcc:	f043 0301 	orr.w	r3, r3, #1
 8009fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fd2:	e028      	b.n	800a026 <HAL_RCC_OscConfig+0x592>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	2b85      	cmp	r3, #133	@ 0x85
 8009fda:	d112      	bne.n	800a002 <HAL_RCC_OscConfig+0x56e>
 8009fdc:	4b86      	ldr	r3, [pc, #536]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fe0:	4a85      	ldr	r2, [pc, #532]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009fe2:	f043 0304 	orr.w	r3, r3, #4
 8009fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8009fe8:	4b83      	ldr	r3, [pc, #524]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009fec:	4a82      	ldr	r2, [pc, #520]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009ff4:	4b80      	ldr	r3, [pc, #512]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009ff6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ff8:	4a7f      	ldr	r2, [pc, #508]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 8009ffa:	f043 0301 	orr.w	r3, r3, #1
 8009ffe:	6713      	str	r3, [r2, #112]	@ 0x70
 800a000:	e011      	b.n	800a026 <HAL_RCC_OscConfig+0x592>
 800a002:	4b7d      	ldr	r3, [pc, #500]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a006:	4a7c      	ldr	r2, [pc, #496]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a008:	f023 0301 	bic.w	r3, r3, #1
 800a00c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a00e:	4b7a      	ldr	r3, [pc, #488]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a012:	4a79      	ldr	r2, [pc, #484]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a014:	f023 0304 	bic.w	r3, r3, #4
 800a018:	6713      	str	r3, [r2, #112]	@ 0x70
 800a01a:	4b77      	ldr	r3, [pc, #476]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a01c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a01e:	4a76      	ldr	r2, [pc, #472]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a024:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d015      	beq.n	800a05a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a02e:	f7fb fe23 	bl	8005c78 <HAL_GetTick>
 800a032:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a034:	e00a      	b.n	800a04c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a036:	f7fb fe1f 	bl	8005c78 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a044:	4293      	cmp	r3, r2
 800a046:	d901      	bls.n	800a04c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e14c      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a04c:	4b6a      	ldr	r3, [pc, #424]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a04e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a050:	f003 0302 	and.w	r3, r3, #2
 800a054:	2b00      	cmp	r3, #0
 800a056:	d0ee      	beq.n	800a036 <HAL_RCC_OscConfig+0x5a2>
 800a058:	e014      	b.n	800a084 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a05a:	f7fb fe0d 	bl	8005c78 <HAL_GetTick>
 800a05e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a060:	e00a      	b.n	800a078 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a062:	f7fb fe09 	bl	8005c78 <HAL_GetTick>
 800a066:	4602      	mov	r2, r0
 800a068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06a:	1ad3      	subs	r3, r2, r3
 800a06c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a070:	4293      	cmp	r3, r2
 800a072:	d901      	bls.n	800a078 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800a074:	2303      	movs	r3, #3
 800a076:	e136      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a078:	4b5f      	ldr	r3, [pc, #380]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a07a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a07c:	f003 0302 	and.w	r3, r3, #2
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1ee      	bne.n	800a062 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 812b 	beq.w	800a2e4 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a08e:	4b5a      	ldr	r3, [pc, #360]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a096:	2b18      	cmp	r3, #24
 800a098:	f000 80bb 	beq.w	800a212 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	f040 8095 	bne.w	800a1d0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0a6:	4b54      	ldr	r3, [pc, #336]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a53      	ldr	r2, [pc, #332]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a0ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a0b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b2:	f7fb fde1 	bl	8005c78 <HAL_GetTick>
 800a0b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0b8:	e008      	b.n	800a0cc <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0ba:	f7fb fddd 	bl	8005c78 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d901      	bls.n	800a0cc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e10c      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0cc:	4b4a      	ldr	r3, [pc, #296]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1f0      	bne.n	800a0ba <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0d8:	4b47      	ldr	r3, [pc, #284]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a0da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0dc:	4b47      	ldr	r3, [pc, #284]	@ (800a1fc <HAL_RCC_OscConfig+0x768>)
 800a0de:	4013      	ands	r3, r2
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a0e8:	0112      	lsls	r2, r2, #4
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	4942      	ldr	r1, [pc, #264]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	628b      	str	r3, [r1, #40]	@ 0x28
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a100:	3b01      	subs	r3, #1
 800a102:	025b      	lsls	r3, r3, #9
 800a104:	b29b      	uxth	r3, r3
 800a106:	431a      	orrs	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a10c:	3b01      	subs	r3, #1
 800a10e:	041b      	lsls	r3, r3, #16
 800a110:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a114:	431a      	orrs	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a11a:	3b01      	subs	r3, #1
 800a11c:	061b      	lsls	r3, r3, #24
 800a11e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a122:	4935      	ldr	r1, [pc, #212]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a124:	4313      	orrs	r3, r2
 800a126:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a128:	4b33      	ldr	r3, [pc, #204]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a12a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12c:	4a32      	ldr	r2, [pc, #200]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a12e:	f023 0301 	bic.w	r3, r3, #1
 800a132:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a134:	4b30      	ldr	r3, [pc, #192]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a138:	4b31      	ldr	r3, [pc, #196]	@ (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a13a:	4013      	ands	r3, r2
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a140:	00d2      	lsls	r2, r2, #3
 800a142:	492d      	ldr	r1, [pc, #180]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a144:	4313      	orrs	r3, r2
 800a146:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a148:	4b2b      	ldr	r3, [pc, #172]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a14a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14c:	f023 020c 	bic.w	r2, r3, #12
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a154:	4928      	ldr	r1, [pc, #160]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a156:	4313      	orrs	r3, r2
 800a158:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a15a:	4b27      	ldr	r3, [pc, #156]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15e:	f023 0202 	bic.w	r2, r3, #2
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a166:	4924      	ldr	r1, [pc, #144]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a16c:	4b22      	ldr	r3, [pc, #136]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a170:	4a21      	ldr	r2, [pc, #132]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a178:	4b1f      	ldr	r3, [pc, #124]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a17c:	4a1e      	ldr	r2, [pc, #120]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a17e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a182:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a184:	4b1c      	ldr	r3, [pc, #112]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a188:	4a1b      	ldr	r2, [pc, #108]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a18a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a18e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a190:	4b19      	ldr	r3, [pc, #100]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a194:	4a18      	ldr	r2, [pc, #96]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a196:	f043 0301 	orr.w	r3, r3, #1
 800a19a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a19c:	4b16      	ldr	r3, [pc, #88]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a15      	ldr	r2, [pc, #84]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a1a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a1a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1a8:	f7fb fd66 	bl	8005c78 <HAL_GetTick>
 800a1ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1ae:	e008      	b.n	800a1c2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1b0:	f7fb fd62 	bl	8005c78 <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d901      	bls.n	800a1c2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e091      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0f0      	beq.n	800a1b0 <HAL_RCC_OscConfig+0x71c>
 800a1ce:	e089      	b.n	800a2e4 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1d0:	4b09      	ldr	r3, [pc, #36]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a08      	ldr	r2, [pc, #32]	@ (800a1f8 <HAL_RCC_OscConfig+0x764>)
 800a1d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1dc:	f7fb fd4c 	bl	8005c78 <HAL_GetTick>
 800a1e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1e2:	e00f      	b.n	800a204 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1e4:	f7fb fd48 	bl	8005c78 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d908      	bls.n	800a204 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e077      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
 800a1f6:	bf00      	nop
 800a1f8:	58024400 	.word	0x58024400
 800a1fc:	fffffc0c 	.word	0xfffffc0c
 800a200:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a204:	4b3a      	ldr	r3, [pc, #232]	@ (800a2f0 <HAL_RCC_OscConfig+0x85c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d1e9      	bne.n	800a1e4 <HAL_RCC_OscConfig+0x750>
 800a210:	e068      	b.n	800a2e4 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a212:	4b37      	ldr	r3, [pc, #220]	@ (800a2f0 <HAL_RCC_OscConfig+0x85c>)
 800a214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a216:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a218:	4b35      	ldr	r3, [pc, #212]	@ (800a2f0 <HAL_RCC_OscConfig+0x85c>)
 800a21a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a21c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a222:	2b01      	cmp	r3, #1
 800a224:	d031      	beq.n	800a28a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f003 0203 	and.w	r2, r3, #3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a230:	429a      	cmp	r2, r3
 800a232:	d12a      	bne.n	800a28a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	091b      	lsrs	r3, r3, #4
 800a238:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a240:	429a      	cmp	r2, r3
 800a242:	d122      	bne.n	800a28a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a24e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a250:	429a      	cmp	r2, r3
 800a252:	d11a      	bne.n	800a28a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	0a5b      	lsrs	r3, r3, #9
 800a258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a260:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a262:	429a      	cmp	r2, r3
 800a264:	d111      	bne.n	800a28a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	0c1b      	lsrs	r3, r3, #16
 800a26a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a272:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a274:	429a      	cmp	r2, r3
 800a276:	d108      	bne.n	800a28a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	0e1b      	lsrs	r3, r3, #24
 800a27c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a284:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a286:	429a      	cmp	r2, r3
 800a288:	d001      	beq.n	800a28e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e02b      	b.n	800a2e6 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a28e:	4b18      	ldr	r3, [pc, #96]	@ (800a2f0 <HAL_RCC_OscConfig+0x85c>)
 800a290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a292:	08db      	lsrs	r3, r3, #3
 800a294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a298:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d01f      	beq.n	800a2e4 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a2a4:	4b12      	ldr	r3, [pc, #72]	@ (800a2f0 <HAL_RCC_OscConfig+0x85c>)
 800a2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a8:	4a11      	ldr	r2, [pc, #68]	@ (800a2f0 <HAL_RCC_OscConfig+0x85c>)
 800a2aa:	f023 0301 	bic.w	r3, r3, #1
 800a2ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a2b0:	f7fb fce2 	bl	8005c78 <HAL_GetTick>
 800a2b4:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a2b6:	bf00      	nop
 800a2b8:	f7fb fcde 	bl	8005c78 <HAL_GetTick>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d0f9      	beq.n	800a2b8 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f0 <HAL_RCC_OscConfig+0x85c>)
 800a2c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f4 <HAL_RCC_OscConfig+0x860>)
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a2d0:	00d2      	lsls	r2, r2, #3
 800a2d2:	4907      	ldr	r1, [pc, #28]	@ (800a2f0 <HAL_RCC_OscConfig+0x85c>)
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a2d8:	4b05      	ldr	r3, [pc, #20]	@ (800a2f0 <HAL_RCC_OscConfig+0x85c>)
 800a2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2dc:	4a04      	ldr	r2, [pc, #16]	@ (800a2f0 <HAL_RCC_OscConfig+0x85c>)
 800a2de:	f043 0301 	orr.w	r3, r3, #1
 800a2e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3730      	adds	r7, #48	@ 0x30
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	58024400 	.word	0x58024400
 800a2f4:	ffff0007 	.word	0xffff0007

0800a2f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e19c      	b.n	800a646 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a30c:	4b8a      	ldr	r3, [pc, #552]	@ (800a538 <HAL_RCC_ClockConfig+0x240>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 030f 	and.w	r3, r3, #15
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d910      	bls.n	800a33c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a31a:	4b87      	ldr	r3, [pc, #540]	@ (800a538 <HAL_RCC_ClockConfig+0x240>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f023 020f 	bic.w	r2, r3, #15
 800a322:	4985      	ldr	r1, [pc, #532]	@ (800a538 <HAL_RCC_ClockConfig+0x240>)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	4313      	orrs	r3, r2
 800a328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a32a:	4b83      	ldr	r3, [pc, #524]	@ (800a538 <HAL_RCC_ClockConfig+0x240>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 030f 	and.w	r3, r3, #15
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	429a      	cmp	r2, r3
 800a336:	d001      	beq.n	800a33c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e184      	b.n	800a646 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b00      	cmp	r3, #0
 800a346:	d010      	beq.n	800a36a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691a      	ldr	r2, [r3, #16]
 800a34c:	4b7b      	ldr	r3, [pc, #492]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a354:	429a      	cmp	r2, r3
 800a356:	d908      	bls.n	800a36a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a358:	4b78      	ldr	r3, [pc, #480]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	4975      	ldr	r1, [pc, #468]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a366:	4313      	orrs	r3, r2
 800a368:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0308 	and.w	r3, r3, #8
 800a372:	2b00      	cmp	r3, #0
 800a374:	d010      	beq.n	800a398 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695a      	ldr	r2, [r3, #20]
 800a37a:	4b70      	ldr	r3, [pc, #448]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a382:	429a      	cmp	r2, r3
 800a384:	d908      	bls.n	800a398 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a386:	4b6d      	ldr	r3, [pc, #436]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a388:	69db      	ldr	r3, [r3, #28]
 800a38a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	496a      	ldr	r1, [pc, #424]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a394:	4313      	orrs	r3, r2
 800a396:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0310 	and.w	r3, r3, #16
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d010      	beq.n	800a3c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	699a      	ldr	r2, [r3, #24]
 800a3a8:	4b64      	ldr	r3, [pc, #400]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a3aa:	69db      	ldr	r3, [r3, #28]
 800a3ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d908      	bls.n	800a3c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3b4:	4b61      	ldr	r3, [pc, #388]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	495e      	ldr	r1, [pc, #376]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f003 0320 	and.w	r3, r3, #32
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d010      	beq.n	800a3f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69da      	ldr	r2, [r3, #28]
 800a3d6:	4b59      	ldr	r3, [pc, #356]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d908      	bls.n	800a3f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a3e2:	4b56      	ldr	r3, [pc, #344]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	69db      	ldr	r3, [r3, #28]
 800a3ee:	4953      	ldr	r1, [pc, #332]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d010      	beq.n	800a422 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	4b4d      	ldr	r3, [pc, #308]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	f003 030f 	and.w	r3, r3, #15
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d908      	bls.n	800a422 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a410:	4b4a      	ldr	r3, [pc, #296]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	f023 020f 	bic.w	r2, r3, #15
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	4947      	ldr	r1, [pc, #284]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d055      	beq.n	800a4da <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a42e:	4b43      	ldr	r3, [pc, #268]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	4940      	ldr	r1, [pc, #256]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a43c:	4313      	orrs	r3, r2
 800a43e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	2b02      	cmp	r3, #2
 800a446:	d107      	bne.n	800a458 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a448:	4b3c      	ldr	r3, [pc, #240]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a450:	2b00      	cmp	r3, #0
 800a452:	d121      	bne.n	800a498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e0f6      	b.n	800a646 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	d107      	bne.n	800a470 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a460:	4b36      	ldr	r3, [pc, #216]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d115      	bne.n	800a498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e0ea      	b.n	800a646 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d107      	bne.n	800a488 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a478:	4b30      	ldr	r3, [pc, #192]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a480:	2b00      	cmp	r3, #0
 800a482:	d109      	bne.n	800a498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e0de      	b.n	800a646 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a488:	4b2c      	ldr	r3, [pc, #176]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 0304 	and.w	r3, r3, #4
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e0d6      	b.n	800a646 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a498:	4b28      	ldr	r3, [pc, #160]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	f023 0207 	bic.w	r2, r3, #7
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	4925      	ldr	r1, [pc, #148]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4aa:	f7fb fbe5 	bl	8005c78 <HAL_GetTick>
 800a4ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4b0:	e00a      	b.n	800a4c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4b2:	f7fb fbe1 	bl	8005c78 <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d901      	bls.n	800a4c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e0be      	b.n	800a646 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4c8:	4b1c      	ldr	r3, [pc, #112]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d1eb      	bne.n	800a4b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 0302 	and.w	r3, r3, #2
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d010      	beq.n	800a508 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68da      	ldr	r2, [r3, #12]
 800a4ea:	4b14      	ldr	r3, [pc, #80]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d208      	bcs.n	800a508 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4f6:	4b11      	ldr	r3, [pc, #68]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	f023 020f 	bic.w	r2, r3, #15
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	490e      	ldr	r1, [pc, #56]	@ (800a53c <HAL_RCC_ClockConfig+0x244>)
 800a504:	4313      	orrs	r3, r2
 800a506:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a508:	4b0b      	ldr	r3, [pc, #44]	@ (800a538 <HAL_RCC_ClockConfig+0x240>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f003 030f 	and.w	r3, r3, #15
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	d214      	bcs.n	800a540 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a516:	4b08      	ldr	r3, [pc, #32]	@ (800a538 <HAL_RCC_ClockConfig+0x240>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f023 020f 	bic.w	r2, r3, #15
 800a51e:	4906      	ldr	r1, [pc, #24]	@ (800a538 <HAL_RCC_ClockConfig+0x240>)
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	4313      	orrs	r3, r2
 800a524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a526:	4b04      	ldr	r3, [pc, #16]	@ (800a538 <HAL_RCC_ClockConfig+0x240>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 030f 	and.w	r3, r3, #15
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d005      	beq.n	800a540 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e086      	b.n	800a646 <HAL_RCC_ClockConfig+0x34e>
 800a538:	52002000 	.word	0x52002000
 800a53c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d010      	beq.n	800a56e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	691a      	ldr	r2, [r3, #16]
 800a550:	4b3f      	ldr	r3, [pc, #252]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a558:	429a      	cmp	r2, r3
 800a55a:	d208      	bcs.n	800a56e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a55c:	4b3c      	ldr	r3, [pc, #240]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	4939      	ldr	r1, [pc, #228]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a56a:	4313      	orrs	r3, r2
 800a56c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 0308 	and.w	r3, r3, #8
 800a576:	2b00      	cmp	r3, #0
 800a578:	d010      	beq.n	800a59c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	695a      	ldr	r2, [r3, #20]
 800a57e:	4b34      	ldr	r3, [pc, #208]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a580:	69db      	ldr	r3, [r3, #28]
 800a582:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a586:	429a      	cmp	r2, r3
 800a588:	d208      	bcs.n	800a59c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a58a:	4b31      	ldr	r3, [pc, #196]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	492e      	ldr	r1, [pc, #184]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0310 	and.w	r3, r3, #16
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d010      	beq.n	800a5ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	699a      	ldr	r2, [r3, #24]
 800a5ac:	4b28      	ldr	r3, [pc, #160]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a5ae:	69db      	ldr	r3, [r3, #28]
 800a5b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d208      	bcs.n	800a5ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a5b8:	4b25      	ldr	r3, [pc, #148]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	4922      	ldr	r1, [pc, #136]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d010      	beq.n	800a5f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	69da      	ldr	r2, [r3, #28]
 800a5da:	4b1d      	ldr	r3, [pc, #116]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d208      	bcs.n	800a5f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a5e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	4917      	ldr	r1, [pc, #92]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800a5f8:	f000 f834 	bl	800a664 <HAL_RCC_GetSysClockFreq>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	4b14      	ldr	r3, [pc, #80]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	0a1b      	lsrs	r3, r3, #8
 800a604:	f003 030f 	and.w	r3, r3, #15
 800a608:	4912      	ldr	r1, [pc, #72]	@ (800a654 <HAL_RCC_ClockConfig+0x35c>)
 800a60a:	5ccb      	ldrb	r3, [r1, r3]
 800a60c:	f003 031f 	and.w	r3, r3, #31
 800a610:	fa22 f303 	lsr.w	r3, r2, r3
 800a614:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a616:	4b0e      	ldr	r3, [pc, #56]	@ (800a650 <HAL_RCC_ClockConfig+0x358>)
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	f003 030f 	and.w	r3, r3, #15
 800a61e:	4a0d      	ldr	r2, [pc, #52]	@ (800a654 <HAL_RCC_ClockConfig+0x35c>)
 800a620:	5cd3      	ldrb	r3, [r2, r3]
 800a622:	f003 031f 	and.w	r3, r3, #31
 800a626:	693a      	ldr	r2, [r7, #16]
 800a628:	fa22 f303 	lsr.w	r3, r2, r3
 800a62c:	4a0a      	ldr	r2, [pc, #40]	@ (800a658 <HAL_RCC_ClockConfig+0x360>)
 800a62e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a630:	4a0a      	ldr	r2, [pc, #40]	@ (800a65c <HAL_RCC_ClockConfig+0x364>)
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a636:	4b0a      	ldr	r3, [pc, #40]	@ (800a660 <HAL_RCC_ClockConfig+0x368>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f8 f938 	bl	80028b0 <HAL_InitTick>
 800a640:	4603      	mov	r3, r0
 800a642:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a644:	7bfb      	ldrb	r3, [r7, #15]
}
 800a646:	4618      	mov	r0, r3
 800a648:	3718      	adds	r7, #24
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	58024400 	.word	0x58024400
 800a654:	080191c4 	.word	0x080191c4
 800a658:	24000004 	.word	0x24000004
 800a65c:	24000000 	.word	0x24000000
 800a660:	240000a4 	.word	0x240000a4

0800a664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a664:	b480      	push	{r7}
 800a666:	b089      	sub	sp, #36	@ 0x24
 800a668:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a66a:	4bb3      	ldr	r3, [pc, #716]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a672:	2b18      	cmp	r3, #24
 800a674:	f200 8155 	bhi.w	800a922 <HAL_RCC_GetSysClockFreq+0x2be>
 800a678:	a201      	add	r2, pc, #4	@ (adr r2, 800a680 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a67a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a67e:	bf00      	nop
 800a680:	0800a6e5 	.word	0x0800a6e5
 800a684:	0800a923 	.word	0x0800a923
 800a688:	0800a923 	.word	0x0800a923
 800a68c:	0800a923 	.word	0x0800a923
 800a690:	0800a923 	.word	0x0800a923
 800a694:	0800a923 	.word	0x0800a923
 800a698:	0800a923 	.word	0x0800a923
 800a69c:	0800a923 	.word	0x0800a923
 800a6a0:	0800a70b 	.word	0x0800a70b
 800a6a4:	0800a923 	.word	0x0800a923
 800a6a8:	0800a923 	.word	0x0800a923
 800a6ac:	0800a923 	.word	0x0800a923
 800a6b0:	0800a923 	.word	0x0800a923
 800a6b4:	0800a923 	.word	0x0800a923
 800a6b8:	0800a923 	.word	0x0800a923
 800a6bc:	0800a923 	.word	0x0800a923
 800a6c0:	0800a711 	.word	0x0800a711
 800a6c4:	0800a923 	.word	0x0800a923
 800a6c8:	0800a923 	.word	0x0800a923
 800a6cc:	0800a923 	.word	0x0800a923
 800a6d0:	0800a923 	.word	0x0800a923
 800a6d4:	0800a923 	.word	0x0800a923
 800a6d8:	0800a923 	.word	0x0800a923
 800a6dc:	0800a923 	.word	0x0800a923
 800a6e0:	0800a717 	.word	0x0800a717
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6e4:	4b94      	ldr	r3, [pc, #592]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0320 	and.w	r3, r3, #32
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d009      	beq.n	800a704 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6f0:	4b91      	ldr	r3, [pc, #580]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	08db      	lsrs	r3, r3, #3
 800a6f6:	f003 0303 	and.w	r3, r3, #3
 800a6fa:	4a90      	ldr	r2, [pc, #576]	@ (800a93c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a700:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a702:	e111      	b.n	800a928 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a704:	4b8d      	ldr	r3, [pc, #564]	@ (800a93c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a706:	61bb      	str	r3, [r7, #24]
      break;
 800a708:	e10e      	b.n	800a928 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a70a:	4b8d      	ldr	r3, [pc, #564]	@ (800a940 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a70c:	61bb      	str	r3, [r7, #24]
      break;
 800a70e:	e10b      	b.n	800a928 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a710:	4b8c      	ldr	r3, [pc, #560]	@ (800a944 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a712:	61bb      	str	r3, [r7, #24]
      break;
 800a714:	e108      	b.n	800a928 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a716:	4b88      	ldr	r3, [pc, #544]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a720:	4b85      	ldr	r3, [pc, #532]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a724:	091b      	lsrs	r3, r3, #4
 800a726:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a72a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a72c:	4b82      	ldr	r3, [pc, #520]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a736:	4b80      	ldr	r3, [pc, #512]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a73a:	08db      	lsrs	r3, r3, #3
 800a73c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	fb02 f303 	mul.w	r3, r2, r3
 800a746:	ee07 3a90 	vmov	s15, r3
 800a74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a74e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 80e1 	beq.w	800a91c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	f000 8083 	beq.w	800a868 <HAL_RCC_GetSysClockFreq+0x204>
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2b02      	cmp	r3, #2
 800a766:	f200 80a1 	bhi.w	800a8ac <HAL_RCC_GetSysClockFreq+0x248>
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d003      	beq.n	800a778 <HAL_RCC_GetSysClockFreq+0x114>
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d056      	beq.n	800a824 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a776:	e099      	b.n	800a8ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a778:	4b6f      	ldr	r3, [pc, #444]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0320 	and.w	r3, r3, #32
 800a780:	2b00      	cmp	r3, #0
 800a782:	d02d      	beq.n	800a7e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a784:	4b6c      	ldr	r3, [pc, #432]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	08db      	lsrs	r3, r3, #3
 800a78a:	f003 0303 	and.w	r3, r3, #3
 800a78e:	4a6b      	ldr	r2, [pc, #428]	@ (800a93c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a790:	fa22 f303 	lsr.w	r3, r2, r3
 800a794:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	ee07 3a90 	vmov	s15, r3
 800a79c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	ee07 3a90 	vmov	s15, r3
 800a7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ae:	4b62      	ldr	r3, [pc, #392]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b6:	ee07 3a90 	vmov	s15, r3
 800a7ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7be:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800a948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a7de:	e087      	b.n	800a8f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	ee07 3a90 	vmov	s15, r3
 800a7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800a94c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a7ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7f2:	4b51      	ldr	r3, [pc, #324]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a802:	ed97 6a02 	vldr	s12, [r7, #8]
 800a806:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800a948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a80a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a80e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a81a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a81e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a822:	e065      	b.n	800a8f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	ee07 3a90 	vmov	s15, r3
 800a82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a82e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800a950 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a836:	4b40      	ldr	r3, [pc, #256]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a83a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a83e:	ee07 3a90 	vmov	s15, r3
 800a842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a846:	ed97 6a02 	vldr	s12, [r7, #8]
 800a84a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a84e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a85a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a85e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a862:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a866:	e043      	b.n	800a8f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	ee07 3a90 	vmov	s15, r3
 800a86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a872:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800a954 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a87a:	4b2f      	ldr	r3, [pc, #188]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a87c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a87e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a882:	ee07 3a90 	vmov	s15, r3
 800a886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a88a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a88e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800a948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a89a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a89e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8aa:	e021      	b.n	800a8f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	ee07 3a90 	vmov	s15, r3
 800a8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a950 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a8ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8be:	4b1e      	ldr	r3, [pc, #120]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c6:	ee07 3a90 	vmov	s15, r3
 800a8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800a948 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a8f0:	4b11      	ldr	r3, [pc, #68]	@ (800a938 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f4:	0a5b      	lsrs	r3, r3, #9
 800a8f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	ee07 3a90 	vmov	s15, r3
 800a904:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a908:	edd7 6a07 	vldr	s13, [r7, #28]
 800a90c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a914:	ee17 3a90 	vmov	r3, s15
 800a918:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a91a:	e005      	b.n	800a928 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a91c:	2300      	movs	r3, #0
 800a91e:	61bb      	str	r3, [r7, #24]
      break;
 800a920:	e002      	b.n	800a928 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a922:	4b07      	ldr	r3, [pc, #28]	@ (800a940 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a924:	61bb      	str	r3, [r7, #24]
      break;
 800a926:	bf00      	nop
  }

  return sysclockfreq;
 800a928:	69bb      	ldr	r3, [r7, #24]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3724      	adds	r7, #36	@ 0x24
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	58024400 	.word	0x58024400
 800a93c:	03d09000 	.word	0x03d09000
 800a940:	003d0900 	.word	0x003d0900
 800a944:	016e3600 	.word	0x016e3600
 800a948:	46000000 	.word	0x46000000
 800a94c:	4c742400 	.word	0x4c742400
 800a950:	4a742400 	.word	0x4a742400
 800a954:	4bb71b00 	.word	0x4bb71b00

0800a958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800a95e:	f7ff fe81 	bl	800a664 <HAL_RCC_GetSysClockFreq>
 800a962:	4602      	mov	r2, r0
 800a964:	4b10      	ldr	r3, [pc, #64]	@ (800a9a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	0a1b      	lsrs	r3, r3, #8
 800a96a:	f003 030f 	and.w	r3, r3, #15
 800a96e:	490f      	ldr	r1, [pc, #60]	@ (800a9ac <HAL_RCC_GetHCLKFreq+0x54>)
 800a970:	5ccb      	ldrb	r3, [r1, r3]
 800a972:	f003 031f 	and.w	r3, r3, #31
 800a976:	fa22 f303 	lsr.w	r3, r2, r3
 800a97a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800a97c:	4b0a      	ldr	r3, [pc, #40]	@ (800a9a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	f003 030f 	and.w	r3, r3, #15
 800a984:	4a09      	ldr	r2, [pc, #36]	@ (800a9ac <HAL_RCC_GetHCLKFreq+0x54>)
 800a986:	5cd3      	ldrb	r3, [r2, r3]
 800a988:	f003 031f 	and.w	r3, r3, #31
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	fa22 f303 	lsr.w	r3, r2, r3
 800a992:	4a07      	ldr	r2, [pc, #28]	@ (800a9b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a994:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a996:	4a07      	ldr	r2, [pc, #28]	@ (800a9b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a99c:	4b04      	ldr	r3, [pc, #16]	@ (800a9b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a99e:	681b      	ldr	r3, [r3, #0]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	58024400 	.word	0x58024400
 800a9ac:	080191c4 	.word	0x080191c4
 800a9b0:	24000004 	.word	0x24000004
 800a9b4:	24000000 	.word	0x24000000

0800a9b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800a9bc:	f7ff ffcc 	bl	800a958 <HAL_RCC_GetHCLKFreq>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	4b06      	ldr	r3, [pc, #24]	@ (800a9dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	091b      	lsrs	r3, r3, #4
 800a9c8:	f003 0307 	and.w	r3, r3, #7
 800a9cc:	4904      	ldr	r1, [pc, #16]	@ (800a9e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a9ce:	5ccb      	ldrb	r3, [r1, r3]
 800a9d0:	f003 031f 	and.w	r3, r3, #31
 800a9d4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	080191c4 	.word	0x080191c4

0800a9e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800a9e8:	f7ff ffb6 	bl	800a958 <HAL_RCC_GetHCLKFreq>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	4b06      	ldr	r3, [pc, #24]	@ (800aa08 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9f0:	69db      	ldr	r3, [r3, #28]
 800a9f2:	0a1b      	lsrs	r3, r3, #8
 800a9f4:	f003 0307 	and.w	r3, r3, #7
 800a9f8:	4904      	ldr	r1, [pc, #16]	@ (800aa0c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a9fa:	5ccb      	ldrb	r3, [r1, r3]
 800a9fc:	f003 031f 	and.w	r3, r3, #31
 800aa00:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	58024400 	.word	0x58024400
 800aa0c:	080191c4 	.word	0x080191c4

0800aa10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	223f      	movs	r2, #63	@ 0x3f
 800aa1e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aa20:	4b1a      	ldr	r3, [pc, #104]	@ (800aa8c <HAL_RCC_GetClockConfig+0x7c>)
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	f003 0207 	and.w	r2, r3, #7
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800aa2c:	4b17      	ldr	r3, [pc, #92]	@ (800aa8c <HAL_RCC_GetClockConfig+0x7c>)
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 800aa38:	4b14      	ldr	r3, [pc, #80]	@ (800aa8c <HAL_RCC_GetClockConfig+0x7c>)
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	f003 020f 	and.w	r2, r3, #15
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 800aa44:	4b11      	ldr	r3, [pc, #68]	@ (800aa8c <HAL_RCC_GetClockConfig+0x7c>)
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800aa50:	4b0e      	ldr	r3, [pc, #56]	@ (800aa8c <HAL_RCC_GetClockConfig+0x7c>)
 800aa52:	69db      	ldr	r3, [r3, #28]
 800aa54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 800aa5c:	4b0b      	ldr	r3, [pc, #44]	@ (800aa8c <HAL_RCC_GetClockConfig+0x7c>)
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 800aa68:	4b08      	ldr	r3, [pc, #32]	@ (800aa8c <HAL_RCC_GetClockConfig+0x7c>)
 800aa6a:	6a1b      	ldr	r3, [r3, #32]
 800aa6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aa74:	4b06      	ldr	r3, [pc, #24]	@ (800aa90 <HAL_RCC_GetClockConfig+0x80>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 020f 	and.w	r2, r3, #15
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	601a      	str	r2, [r3, #0]
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	58024400 	.word	0x58024400
 800aa90:	52002000 	.word	0x52002000

0800aa94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa98:	b0c8      	sub	sp, #288	@ 0x120
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aaac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800aab8:	2500      	movs	r5, #0
 800aaba:	ea54 0305 	orrs.w	r3, r4, r5
 800aabe:	d049      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800aac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aac4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aac6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aaca:	d02f      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800aacc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aad0:	d828      	bhi.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aad2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aad6:	d01a      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aad8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aadc:	d822      	bhi.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0x56>
 800aae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aae6:	d007      	beq.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aae8:	e01c      	b.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaea:	4ba7      	ldr	r3, [pc, #668]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaee:	4aa6      	ldr	r2, [pc, #664]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aaf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aaf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aaf6:	e01a      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aaf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aafc:	3308      	adds	r3, #8
 800aafe:	2102      	movs	r1, #2
 800ab00:	4618      	mov	r0, r3
 800ab02:	f001 fc43 	bl	800c38c <RCCEx_PLL2_Config>
 800ab06:	4603      	mov	r3, r0
 800ab08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab0c:	e00f      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab12:	3328      	adds	r3, #40	@ 0x28
 800ab14:	2102      	movs	r1, #2
 800ab16:	4618      	mov	r0, r3
 800ab18:	f001 fcea 	bl	800c4f0 <RCCEx_PLL3_Config>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab22:	e004      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab24:	2301      	movs	r3, #1
 800ab26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ab2a:	e000      	b.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ab2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d10a      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ab36:	4b94      	ldr	r3, [pc, #592]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab3a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ab3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab44:	4a90      	ldr	r2, [pc, #576]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab46:	430b      	orrs	r3, r1
 800ab48:	6513      	str	r3, [r2, #80]	@ 0x50
 800ab4a:	e003      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ab50:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ab54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ab60:	f04f 0900 	mov.w	r9, #0
 800ab64:	ea58 0309 	orrs.w	r3, r8, r9
 800ab68:	d047      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ab6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab70:	2b04      	cmp	r3, #4
 800ab72:	d82a      	bhi.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ab74:	a201      	add	r2, pc, #4	@ (adr r2, 800ab7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ab76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7a:	bf00      	nop
 800ab7c:	0800ab91 	.word	0x0800ab91
 800ab80:	0800ab9f 	.word	0x0800ab9f
 800ab84:	0800abb5 	.word	0x0800abb5
 800ab88:	0800abd3 	.word	0x0800abd3
 800ab8c:	0800abd3 	.word	0x0800abd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab90:	4b7d      	ldr	r3, [pc, #500]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab94:	4a7c      	ldr	r2, [pc, #496]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab9c:	e01a      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aba2:	3308      	adds	r3, #8
 800aba4:	2100      	movs	r1, #0
 800aba6:	4618      	mov	r0, r3
 800aba8:	f001 fbf0 	bl	800c38c <RCCEx_PLL2_Config>
 800abac:	4603      	mov	r3, r0
 800abae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abb2:	e00f      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abb8:	3328      	adds	r3, #40	@ 0x28
 800abba:	2100      	movs	r1, #0
 800abbc:	4618      	mov	r0, r3
 800abbe:	f001 fc97 	bl	800c4f0 <RCCEx_PLL3_Config>
 800abc2:	4603      	mov	r3, r0
 800abc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abc8:	e004      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800abd0:	e000      	b.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800abd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10a      	bne.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800abdc:	4b6a      	ldr	r3, [pc, #424]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abe0:	f023 0107 	bic.w	r1, r3, #7
 800abe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abea:	4a67      	ldr	r2, [pc, #412]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abec:	430b      	orrs	r3, r1
 800abee:	6513      	str	r3, [r2, #80]	@ 0x50
 800abf0:	e003      	b.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abf6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800abfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac02:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800ac06:	f04f 0b00 	mov.w	fp, #0
 800ac0a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ac0e:	d054      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800ac10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac16:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800ac1a:	d036      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800ac1c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800ac20:	d82f      	bhi.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ac22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac26:	d032      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ac28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac2c:	d829      	bhi.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ac2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac30:	d02f      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800ac32:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac34:	d825      	bhi.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ac36:	2b80      	cmp	r3, #128	@ 0x80
 800ac38:	d018      	beq.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800ac3a:	2b80      	cmp	r3, #128	@ 0x80
 800ac3c:	d821      	bhi.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800ac42:	2b40      	cmp	r3, #64	@ 0x40
 800ac44:	d007      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800ac46:	e01c      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac48:	4b4f      	ldr	r3, [pc, #316]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac4c:	4a4e      	ldr	r2, [pc, #312]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800ac54:	e01e      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac5a:	3308      	adds	r3, #8
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f001 fb94 	bl	800c38c <RCCEx_PLL2_Config>
 800ac64:	4603      	mov	r3, r0
 800ac66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800ac6a:	e013      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac70:	3328      	adds	r3, #40	@ 0x28
 800ac72:	2100      	movs	r1, #0
 800ac74:	4618      	mov	r0, r3
 800ac76:	f001 fc3b 	bl	800c4f0 <RCCEx_PLL3_Config>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800ac80:	e008      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac88:	e004      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800ac8a:	bf00      	nop
 800ac8c:	e002      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800ac8e:	bf00      	nop
 800ac90:	e000      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800ac92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10a      	bne.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800ac9c:	4b3a      	ldr	r3, [pc, #232]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aca0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800aca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acaa:	4a37      	ldr	r2, [pc, #220]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acac:	430b      	orrs	r3, r1
 800acae:	6513      	str	r3, [r2, #80]	@ 0x50
 800acb0:	e003      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800acba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800acc6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800acca:	2300      	movs	r3, #0
 800accc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800acd0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800acd4:	460b      	mov	r3, r1
 800acd6:	4313      	orrs	r3, r2
 800acd8:	d05c      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800acda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ace0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800ace4:	d03b      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ace6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800acea:	d834      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800acec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acf0:	d037      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800acf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acf6:	d82e      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800acf8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800acfc:	d033      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800acfe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ad02:	d828      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ad04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad08:	d01a      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800ad0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad0e:	d822      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x288>
 800ad14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad18:	d007      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800ad1a:	e01c      	b.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad20:	4a19      	ldr	r2, [pc, #100]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ad28:	e01e      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad2e:	3308      	adds	r3, #8
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 fb2a 	bl	800c38c <RCCEx_PLL2_Config>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ad3e:	e013      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad44:	3328      	adds	r3, #40	@ 0x28
 800ad46:	2100      	movs	r1, #0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f001 fbd1 	bl	800c4f0 <RCCEx_PLL3_Config>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800ad54:	e008      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ad5c:	e004      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ad5e:	bf00      	nop
 800ad60:	e002      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ad62:	bf00      	nop
 800ad64:	e000      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800ad66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10d      	bne.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800ad70:	4b05      	ldr	r3, [pc, #20]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad74:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800ad78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad7e:	4a02      	ldr	r2, [pc, #8]	@ (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad80:	430b      	orrs	r3, r1
 800ad82:	6513      	str	r3, [r2, #80]	@ 0x50
 800ad84:	e006      	b.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800ad86:	bf00      	nop
 800ad88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ad94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ada0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ada4:	2300      	movs	r3, #0
 800ada6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800adaa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800adae:	460b      	mov	r3, r1
 800adb0:	4313      	orrs	r3, r2
 800adb2:	d03a      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800adb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800adba:	2b30      	cmp	r3, #48	@ 0x30
 800adbc:	d01f      	beq.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800adbe:	2b30      	cmp	r3, #48	@ 0x30
 800adc0:	d819      	bhi.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800adc2:	2b20      	cmp	r3, #32
 800adc4:	d00c      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800adc6:	2b20      	cmp	r3, #32
 800adc8:	d815      	bhi.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d019      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800adce:	2b10      	cmp	r3, #16
 800add0:	d111      	bne.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800add2:	4bae      	ldr	r3, [pc, #696]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800add4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add6:	4aad      	ldr	r2, [pc, #692]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800add8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800addc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800adde:	e011      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ade0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ade4:	3308      	adds	r3, #8
 800ade6:	2102      	movs	r1, #2
 800ade8:	4618      	mov	r0, r3
 800adea:	f001 facf 	bl	800c38c <RCCEx_PLL2_Config>
 800adee:	4603      	mov	r3, r0
 800adf0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800adf4:	e006      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800adfc:	e002      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800adfe:	bf00      	nop
 800ae00:	e000      	b.n	800ae04 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ae02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ae0c:	4b9f      	ldr	r3, [pc, #636]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae10:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ae14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae1a:	4a9c      	ldr	r2, [pc, #624]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae1c:	430b      	orrs	r3, r1
 800ae1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ae20:	e003      	b.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae22:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ae26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ae2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae32:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ae36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ae40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4313      	orrs	r3, r2
 800ae48:	d051      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ae4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae54:	d035      	beq.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800ae56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae5a:	d82e      	bhi.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ae5c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ae60:	d031      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800ae62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ae66:	d828      	bhi.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ae68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae6c:	d01a      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800ae6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae72:	d822      	bhi.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x426>
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d003      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ae78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae7c:	d007      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800ae7e:	e01c      	b.n	800aeba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae80:	4b82      	ldr	r3, [pc, #520]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae84:	4a81      	ldr	r2, [pc, #516]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae8c:	e01c      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae92:	3308      	adds	r3, #8
 800ae94:	2100      	movs	r1, #0
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 fa78 	bl	800c38c <RCCEx_PLL2_Config>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aea2:	e011      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aea8:	3328      	adds	r3, #40	@ 0x28
 800aeaa:	2100      	movs	r1, #0
 800aeac:	4618      	mov	r0, r3
 800aeae:	f001 fb1f 	bl	800c4f0 <RCCEx_PLL3_Config>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aeb8:	e006      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aec0:	e002      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800aec2:	bf00      	nop
 800aec4:	e000      	b.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800aec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aec8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10a      	bne.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aed0:	4b6e      	ldr	r3, [pc, #440]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aed4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800aed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aedc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aede:	4a6b      	ldr	r2, [pc, #428]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aee0:	430b      	orrs	r3, r1
 800aee2:	6513      	str	r3, [r2, #80]	@ 0x50
 800aee4:	e003      	b.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aee6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aeea:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aeee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800aefa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aefe:	2300      	movs	r3, #0
 800af00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800af08:	460b      	mov	r3, r1
 800af0a:	4313      	orrs	r3, r2
 800af0c:	d053      	beq.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800af0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800af14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800af18:	d033      	beq.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800af1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800af1e:	d82c      	bhi.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800af20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af24:	d02f      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800af26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af2a:	d826      	bhi.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800af2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af30:	d02b      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800af32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800af36:	d820      	bhi.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800af38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af3c:	d012      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800af3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af42:	d81a      	bhi.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800af44:	2b00      	cmp	r3, #0
 800af46:	d022      	beq.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800af48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af4c:	d115      	bne.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af52:	3308      	adds	r3, #8
 800af54:	2101      	movs	r1, #1
 800af56:	4618      	mov	r0, r3
 800af58:	f001 fa18 	bl	800c38c <RCCEx_PLL2_Config>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af62:	e015      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af68:	3328      	adds	r3, #40	@ 0x28
 800af6a:	2101      	movs	r1, #1
 800af6c:	4618      	mov	r0, r3
 800af6e:	f001 fabf 	bl	800c4f0 <RCCEx_PLL3_Config>
 800af72:	4603      	mov	r3, r0
 800af74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af78:	e00a      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800af80:	e006      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800af82:	bf00      	nop
 800af84:	e004      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800af86:	bf00      	nop
 800af88:	e002      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800af8a:	bf00      	nop
 800af8c:	e000      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800af8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800af98:	4b3c      	ldr	r3, [pc, #240]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af9c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800afa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afa6:	4a39      	ldr	r2, [pc, #228]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afa8:	430b      	orrs	r3, r1
 800afaa:	6513      	str	r3, [r2, #80]	@ 0x50
 800afac:	e003      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afb2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800afb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800afc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800afc6:	2300      	movs	r3, #0
 800afc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800afcc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800afd0:	460b      	mov	r3, r1
 800afd2:	4313      	orrs	r3, r2
 800afd4:	d060      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800afd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800afde:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800afe2:	d039      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800afe4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800afe8:	d832      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800afea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afee:	d035      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800aff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aff4:	d82c      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800aff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800affa:	d031      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800affc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b000:	d826      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b002:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b006:	d02d      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b008:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b00c:	d820      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b00e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b012:	d012      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b014:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b018:	d81a      	bhi.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d024      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b01e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b022:	d115      	bne.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b028:	3308      	adds	r3, #8
 800b02a:	2101      	movs	r1, #1
 800b02c:	4618      	mov	r0, r3
 800b02e:	f001 f9ad 	bl	800c38c <RCCEx_PLL2_Config>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b038:	e017      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b03e:	3328      	adds	r3, #40	@ 0x28
 800b040:	2101      	movs	r1, #1
 800b042:	4618      	mov	r0, r3
 800b044:	f001 fa54 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b048:	4603      	mov	r3, r0
 800b04a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b04e:	e00c      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b056:	e008      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b058:	bf00      	nop
 800b05a:	e006      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b05c:	bf00      	nop
 800b05e:	e004      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b060:	bf00      	nop
 800b062:	e002      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b064:	bf00      	nop
 800b066:	e000      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b06a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10e      	bne.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b072:	4b06      	ldr	r3, [pc, #24]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b076:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b07a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b07e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b082:	4a02      	ldr	r2, [pc, #8]	@ (800b08c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b084:	430b      	orrs	r3, r1
 800b086:	6593      	str	r3, [r2, #88]	@ 0x58
 800b088:	e006      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b08a:	bf00      	nop
 800b08c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b090:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b094:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800b0a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b0ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	d037      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b0b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0c2:	d00e      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b0c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0c8:	d816      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d018      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b0ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0d2:	d111      	bne.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0d4:	4bc4      	ldr	r3, [pc, #784]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d8:	4ac3      	ldr	r2, [pc, #780]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b0e0:	e00f      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0e6:	3308      	adds	r3, #8
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f001 f94e 	bl	800c38c <RCCEx_PLL2_Config>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b0f6:	e004      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b0fe:	e000      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b100:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b102:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10a      	bne.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b10a:	4bb7      	ldr	r3, [pc, #732]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b10c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b10e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b112:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b116:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b118:	4ab3      	ldr	r2, [pc, #716]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b11a:	430b      	orrs	r3, r1
 800b11c:	6513      	str	r3, [r2, #80]	@ 0x50
 800b11e:	e003      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b124:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b130:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800b134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b138:	2300      	movs	r3, #0
 800b13a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b13e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800b142:	460b      	mov	r3, r1
 800b144:	4313      	orrs	r3, r2
 800b146:	d039      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b148:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b14c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b14e:	2b03      	cmp	r3, #3
 800b150:	d81c      	bhi.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b152:	a201      	add	r2, pc, #4	@ (adr r2, 800b158 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b158:	0800b195 	.word	0x0800b195
 800b15c:	0800b169 	.word	0x0800b169
 800b160:	0800b177 	.word	0x0800b177
 800b164:	0800b195 	.word	0x0800b195
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b168:	4b9f      	ldr	r3, [pc, #636]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16c:	4a9e      	ldr	r2, [pc, #632]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b16e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b174:	e00f      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b17a:	3308      	adds	r3, #8
 800b17c:	2102      	movs	r1, #2
 800b17e:	4618      	mov	r0, r3
 800b180:	f001 f904 	bl	800c38c <RCCEx_PLL2_Config>
 800b184:	4603      	mov	r3, r0
 800b186:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b18a:	e004      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b192:	e000      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b194:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b196:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10a      	bne.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b19e:	4b92      	ldr	r3, [pc, #584]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1a2:	f023 0103 	bic.w	r1, r3, #3
 800b1a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1ac:	4a8e      	ldr	r2, [pc, #568]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1ae:	430b      	orrs	r3, r1
 800b1b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b1b2:	e003      	b.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b1b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b1bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800b1c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b1d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	f000 8099 	beq.w	800b310 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1de:	4b83      	ldr	r3, [pc, #524]	@ (800b3ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a82      	ldr	r2, [pc, #520]	@ (800b3ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b1e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b1ea:	f7fa fd45 	bl	8005c78 <HAL_GetTick>
 800b1ee:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1f2:	e00b      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1f4:	f7fa fd40 	bl	8005c78 <HAL_GetTick>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	2b64      	cmp	r3, #100	@ 0x64
 800b202:	d903      	bls.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b204:	2303      	movs	r3, #3
 800b206:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b20a:	e005      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b20c:	4b77      	ldr	r3, [pc, #476]	@ (800b3ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b214:	2b00      	cmp	r3, #0
 800b216:	d0ed      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b218:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d173      	bne.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b220:	4b71      	ldr	r3, [pc, #452]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b222:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b228:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b22c:	4053      	eors	r3, r2
 800b22e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b232:	2b00      	cmp	r3, #0
 800b234:	d015      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b236:	4b6c      	ldr	r3, [pc, #432]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b23a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b23e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b242:	4b69      	ldr	r3, [pc, #420]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b246:	4a68      	ldr	r2, [pc, #416]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b24c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b24e:	4b66      	ldr	r3, [pc, #408]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b252:	4a65      	ldr	r2, [pc, #404]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b258:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b25a:	4a63      	ldr	r2, [pc, #396]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b25c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b260:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b266:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b26a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b26e:	d118      	bne.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b270:	f7fa fd02 	bl	8005c78 <HAL_GetTick>
 800b274:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b278:	e00d      	b.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b27a:	f7fa fcfd 	bl	8005c78 <HAL_GetTick>
 800b27e:	4602      	mov	r2, r0
 800b280:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b284:	1ad2      	subs	r2, r2, r3
 800b286:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d903      	bls.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800b294:	e005      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b296:	4b54      	ldr	r3, [pc, #336]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b29a:	f003 0302 	and.w	r3, r3, #2
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d0eb      	beq.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b2a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d129      	bne.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b2b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b2b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2ba:	d10e      	bne.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b2bc:	4b4a      	ldr	r3, [pc, #296]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2be:	691b      	ldr	r3, [r3, #16]
 800b2c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800b2c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b2cc:	091a      	lsrs	r2, r3, #4
 800b2ce:	4b48      	ldr	r3, [pc, #288]	@ (800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	4a45      	ldr	r2, [pc, #276]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2d4:	430b      	orrs	r3, r1
 800b2d6:	6113      	str	r3, [r2, #16]
 800b2d8:	e005      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b2da:	4b43      	ldr	r3, [pc, #268]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	4a42      	ldr	r2, [pc, #264]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b2e4:	6113      	str	r3, [r2, #16]
 800b2e6:	4b40      	ldr	r3, [pc, #256]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b2ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b2f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2f6:	4a3c      	ldr	r2, [pc, #240]	@ (800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	6713      	str	r3, [r2, #112]	@ 0x70
 800b2fc:	e008      	b.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b2fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b302:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800b306:	e003      	b.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b308:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b30c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b318:	f002 0301 	and.w	r3, r2, #1
 800b31c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b320:	2300      	movs	r3, #0
 800b322:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b326:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b32a:	460b      	mov	r3, r1
 800b32c:	4313      	orrs	r3, r2
 800b32e:	f000 8090 	beq.w	800b452 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b33a:	2b28      	cmp	r3, #40	@ 0x28
 800b33c:	d870      	bhi.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b33e:	a201      	add	r2, pc, #4	@ (adr r2, 800b344 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b344:	0800b429 	.word	0x0800b429
 800b348:	0800b421 	.word	0x0800b421
 800b34c:	0800b421 	.word	0x0800b421
 800b350:	0800b421 	.word	0x0800b421
 800b354:	0800b421 	.word	0x0800b421
 800b358:	0800b421 	.word	0x0800b421
 800b35c:	0800b421 	.word	0x0800b421
 800b360:	0800b421 	.word	0x0800b421
 800b364:	0800b3f5 	.word	0x0800b3f5
 800b368:	0800b421 	.word	0x0800b421
 800b36c:	0800b421 	.word	0x0800b421
 800b370:	0800b421 	.word	0x0800b421
 800b374:	0800b421 	.word	0x0800b421
 800b378:	0800b421 	.word	0x0800b421
 800b37c:	0800b421 	.word	0x0800b421
 800b380:	0800b421 	.word	0x0800b421
 800b384:	0800b40b 	.word	0x0800b40b
 800b388:	0800b421 	.word	0x0800b421
 800b38c:	0800b421 	.word	0x0800b421
 800b390:	0800b421 	.word	0x0800b421
 800b394:	0800b421 	.word	0x0800b421
 800b398:	0800b421 	.word	0x0800b421
 800b39c:	0800b421 	.word	0x0800b421
 800b3a0:	0800b421 	.word	0x0800b421
 800b3a4:	0800b429 	.word	0x0800b429
 800b3a8:	0800b421 	.word	0x0800b421
 800b3ac:	0800b421 	.word	0x0800b421
 800b3b0:	0800b421 	.word	0x0800b421
 800b3b4:	0800b421 	.word	0x0800b421
 800b3b8:	0800b421 	.word	0x0800b421
 800b3bc:	0800b421 	.word	0x0800b421
 800b3c0:	0800b421 	.word	0x0800b421
 800b3c4:	0800b429 	.word	0x0800b429
 800b3c8:	0800b421 	.word	0x0800b421
 800b3cc:	0800b421 	.word	0x0800b421
 800b3d0:	0800b421 	.word	0x0800b421
 800b3d4:	0800b421 	.word	0x0800b421
 800b3d8:	0800b421 	.word	0x0800b421
 800b3dc:	0800b421 	.word	0x0800b421
 800b3e0:	0800b421 	.word	0x0800b421
 800b3e4:	0800b429 	.word	0x0800b429
 800b3e8:	58024400 	.word	0x58024400
 800b3ec:	58024800 	.word	0x58024800
 800b3f0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3f8:	3308      	adds	r3, #8
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 ffc5 	bl	800c38c <RCCEx_PLL2_Config>
 800b402:	4603      	mov	r3, r0
 800b404:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b408:	e00f      	b.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b40a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b40e:	3328      	adds	r3, #40	@ 0x28
 800b410:	2101      	movs	r1, #1
 800b412:	4618      	mov	r0, r3
 800b414:	f001 f86c 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b418:	4603      	mov	r3, r0
 800b41a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b41e:	e004      	b.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b426:	e000      	b.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b42a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10b      	bne.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b432:	4bc0      	ldr	r3, [pc, #768]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b436:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800b43a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b43e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b442:	4abc      	ldr	r2, [pc, #752]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b444:	430b      	orrs	r3, r1
 800b446:	6553      	str	r3, [r2, #84]	@ 0x54
 800b448:	e003      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b44a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b44e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45a:	f002 0302 	and.w	r3, r2, #2
 800b45e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b462:	2300      	movs	r3, #0
 800b464:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b468:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800b46c:	460b      	mov	r3, r1
 800b46e:	4313      	orrs	r3, r2
 800b470:	d043      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b47a:	2b05      	cmp	r3, #5
 800b47c:	d824      	bhi.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800b47e:	a201      	add	r2, pc, #4	@ (adr r2, 800b484 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800b480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b484:	0800b4d1 	.word	0x0800b4d1
 800b488:	0800b49d 	.word	0x0800b49d
 800b48c:	0800b4b3 	.word	0x0800b4b3
 800b490:	0800b4d1 	.word	0x0800b4d1
 800b494:	0800b4d1 	.word	0x0800b4d1
 800b498:	0800b4d1 	.word	0x0800b4d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b49c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f000 ff71 	bl	800c38c <RCCEx_PLL2_Config>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b4b0:	e00f      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4b6:	3328      	adds	r3, #40	@ 0x28
 800b4b8:	2101      	movs	r1, #1
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f001 f818 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b4c6:	e004      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b4ce:	e000      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800b4d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10b      	bne.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b4da:	4b96      	ldr	r3, [pc, #600]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4de:	f023 0107 	bic.w	r1, r3, #7
 800b4e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4ea:	4a92      	ldr	r2, [pc, #584]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b4ec:	430b      	orrs	r3, r1
 800b4ee:	6553      	str	r3, [r2, #84]	@ 0x54
 800b4f0:	e003      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b4f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b4fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	f002 0304 	and.w	r3, r2, #4
 800b506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b50a:	2300      	movs	r3, #0
 800b50c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b510:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800b514:	460b      	mov	r3, r1
 800b516:	4313      	orrs	r3, r2
 800b518:	d043      	beq.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b51a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b51e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b522:	2b05      	cmp	r3, #5
 800b524:	d824      	bhi.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800b526:	a201      	add	r2, pc, #4	@ (adr r2, 800b52c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800b528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52c:	0800b579 	.word	0x0800b579
 800b530:	0800b545 	.word	0x0800b545
 800b534:	0800b55b 	.word	0x0800b55b
 800b538:	0800b579 	.word	0x0800b579
 800b53c:	0800b579 	.word	0x0800b579
 800b540:	0800b579 	.word	0x0800b579
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b548:	3308      	adds	r3, #8
 800b54a:	2101      	movs	r1, #1
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 ff1d 	bl	800c38c <RCCEx_PLL2_Config>
 800b552:	4603      	mov	r3, r0
 800b554:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b558:	e00f      	b.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b55a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b55e:	3328      	adds	r3, #40	@ 0x28
 800b560:	2101      	movs	r1, #1
 800b562:	4618      	mov	r0, r3
 800b564:	f000 ffc4 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b568:	4603      	mov	r3, r0
 800b56a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b56e:	e004      	b.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b570:	2301      	movs	r3, #1
 800b572:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b576:	e000      	b.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800b578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b57a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10b      	bne.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b582:	4b6c      	ldr	r3, [pc, #432]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b586:	f023 0107 	bic.w	r1, r3, #7
 800b58a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b58e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b592:	4a68      	ldr	r2, [pc, #416]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b594:	430b      	orrs	r3, r1
 800b596:	6593      	str	r3, [r2, #88]	@ 0x58
 800b598:	e003      	b.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b59a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b59e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	f002 0320 	and.w	r3, r2, #32
 800b5ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b5b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b5bc:	460b      	mov	r3, r1
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	d055      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b5c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5ce:	d033      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b5d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5d4:	d82c      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5da:	d02f      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b5dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5e0:	d826      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b5e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b5e6:	d02b      	beq.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b5e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b5ec:	d820      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b5ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5f2:	d012      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b5f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5f8:	d81a      	bhi.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d022      	beq.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b5fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b602:	d115      	bne.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b608:	3308      	adds	r3, #8
 800b60a:	2100      	movs	r1, #0
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 febd 	bl	800c38c <RCCEx_PLL2_Config>
 800b612:	4603      	mov	r3, r0
 800b614:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b618:	e015      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b61a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b61e:	3328      	adds	r3, #40	@ 0x28
 800b620:	2102      	movs	r1, #2
 800b622:	4618      	mov	r0, r3
 800b624:	f000 ff64 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b628:	4603      	mov	r3, r0
 800b62a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b62e:	e00a      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b636:	e006      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b638:	bf00      	nop
 800b63a:	e004      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b63c:	bf00      	nop
 800b63e:	e002      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b640:	bf00      	nop
 800b642:	e000      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800b644:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b646:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10b      	bne.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b64e:	4b39      	ldr	r3, [pc, #228]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b652:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800b656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b65a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b65e:	4a35      	ldr	r2, [pc, #212]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b660:	430b      	orrs	r3, r1
 800b662:	6553      	str	r3, [r2, #84]	@ 0x54
 800b664:	e003      	b.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b666:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b66a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b66e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b676:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800b67a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b67e:	2300      	movs	r3, #0
 800b680:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b684:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800b688:	460b      	mov	r3, r1
 800b68a:	4313      	orrs	r3, r2
 800b68c:	d058      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b68e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b692:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b696:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b69a:	d033      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b69c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800b6a0:	d82c      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b6a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6a6:	d02f      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b6a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6ac:	d826      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b6ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b6b2:	d02b      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b6b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b6b8:	d820      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b6ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6be:	d012      	beq.n	800b6e6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800b6c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6c4:	d81a      	bhi.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d022      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800b6ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6ce:	d115      	bne.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d4:	3308      	adds	r3, #8
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 fe57 	bl	800c38c <RCCEx_PLL2_Config>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b6e4:	e015      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ea:	3328      	adds	r3, #40	@ 0x28
 800b6ec:	2102      	movs	r1, #2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f000 fefe 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b6fa:	e00a      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b702:	e006      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b704:	bf00      	nop
 800b706:	e004      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b708:	bf00      	nop
 800b70a:	e002      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b70c:	bf00      	nop
 800b70e:	e000      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800b710:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b712:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10e      	bne.n	800b738 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b71a:	4b06      	ldr	r3, [pc, #24]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b71e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800b722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b726:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b72a:	4a02      	ldr	r2, [pc, #8]	@ (800b734 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800b72c:	430b      	orrs	r3, r1
 800b72e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b730:	e006      	b.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800b732:	bf00      	nop
 800b734:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b738:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b73c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800b74c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b750:	2300      	movs	r3, #0
 800b752:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b756:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800b75a:	460b      	mov	r3, r1
 800b75c:	4313      	orrs	r3, r2
 800b75e:	d055      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b764:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b768:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b76c:	d033      	beq.n	800b7d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b76e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800b772:	d82c      	bhi.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b778:	d02f      	beq.n	800b7da <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b77a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b77e:	d826      	bhi.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b780:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b784:	d02b      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b786:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b78a:	d820      	bhi.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b78c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b790:	d012      	beq.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800b792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b796:	d81a      	bhi.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d022      	beq.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800b79c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7a0:	d115      	bne.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a6:	3308      	adds	r3, #8
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 fdee 	bl	800c38c <RCCEx_PLL2_Config>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b7b6:	e015      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7bc:	3328      	adds	r3, #40	@ 0x28
 800b7be:	2102      	movs	r1, #2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f000 fe95 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b7cc:	e00a      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b7d4:	e006      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b7d6:	bf00      	nop
 800b7d8:	e004      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b7da:	bf00      	nop
 800b7dc:	e002      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b7de:	bf00      	nop
 800b7e0:	e000      	b.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800b7e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10b      	bne.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b7ec:	4ba1      	ldr	r3, [pc, #644]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b7ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800b7f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b7fc:	4a9d      	ldr	r2, [pc, #628]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b7fe:	430b      	orrs	r3, r1
 800b800:	6593      	str	r3, [r2, #88]	@ 0x58
 800b802:	e003      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b804:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b808:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b80c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f002 0308 	and.w	r3, r2, #8
 800b818:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b81c:	2300      	movs	r3, #0
 800b81e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b822:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800b826:	460b      	mov	r3, r1
 800b828:	4313      	orrs	r3, r2
 800b82a:	d01e      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b82c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b838:	d10c      	bne.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b83a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b83e:	3328      	adds	r3, #40	@ 0x28
 800b840:	2102      	movs	r1, #2
 800b842:	4618      	mov	r0, r3
 800b844:	f000 fe54 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b854:	4b87      	ldr	r3, [pc, #540]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b858:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b85c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b864:	4a83      	ldr	r2, [pc, #524]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b866:	430b      	orrs	r3, r1
 800b868:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b86a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	f002 0310 	and.w	r3, r2, #16
 800b876:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b87a:	2300      	movs	r3, #0
 800b87c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b880:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800b884:	460b      	mov	r3, r1
 800b886:	4313      	orrs	r3, r2
 800b888:	d01e      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b88a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b88e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b896:	d10c      	bne.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b898:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b89c:	3328      	adds	r3, #40	@ 0x28
 800b89e:	2102      	movs	r1, #2
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f000 fe25 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d002      	beq.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8b2:	4b70      	ldr	r3, [pc, #448]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b8b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800b8ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b8c2:	4a6c      	ldr	r2, [pc, #432]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b8c4:	430b      	orrs	r3, r1
 800b8c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b8c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800b8d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b8de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	d03e      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b8f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8f4:	d022      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800b8f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8fa:	d81b      	bhi.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d003      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800b900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b904:	d00b      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800b906:	e015      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b90c:	3308      	adds	r3, #8
 800b90e:	2100      	movs	r1, #0
 800b910:	4618      	mov	r0, r3
 800b912:	f000 fd3b 	bl	800c38c <RCCEx_PLL2_Config>
 800b916:	4603      	mov	r3, r0
 800b918:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b91c:	e00f      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b91e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b922:	3328      	adds	r3, #40	@ 0x28
 800b924:	2102      	movs	r1, #2
 800b926:	4618      	mov	r0, r3
 800b928:	f000 fde2 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b92c:	4603      	mov	r3, r0
 800b92e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b932:	e004      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b93a:	e000      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800b93c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b93e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10b      	bne.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b946:	4b4b      	ldr	r3, [pc, #300]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b94a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800b94e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b952:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b956:	4a47      	ldr	r2, [pc, #284]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b958:	430b      	orrs	r3, r1
 800b95a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b95c:	e003      	b.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b95e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b962:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b966:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800b972:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b974:	2300      	movs	r3, #0
 800b976:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b978:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800b97c:	460b      	mov	r3, r1
 800b97e:	4313      	orrs	r3, r2
 800b980:	d03b      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b98a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b98e:	d01f      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800b990:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b994:	d818      	bhi.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b996:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b99a:	d003      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800b99c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9a0:	d007      	beq.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800b9a2:	e011      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9a4:	4b33      	ldr	r3, [pc, #204]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a8:	4a32      	ldr	r2, [pc, #200]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b9aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b9b0:	e00f      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b6:	3328      	adds	r3, #40	@ 0x28
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f000 fd98 	bl	800c4f0 <RCCEx_PLL3_Config>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800b9c6:	e004      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b9ce:	e000      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800b9d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10b      	bne.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b9da:	4b26      	ldr	r3, [pc, #152]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b9e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9ea:	4a22      	ldr	r2, [pc, #136]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800b9ec:	430b      	orrs	r3, r1
 800b9ee:	6553      	str	r3, [r2, #84]	@ 0x54
 800b9f0:	e003      	b.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b9fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ba06:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba08:	2300      	movs	r3, #0
 800ba0a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ba10:	460b      	mov	r3, r1
 800ba12:	4313      	orrs	r3, r2
 800ba14:	d034      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ba16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d003      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800ba20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba24:	d007      	beq.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800ba26:	e011      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba28:	4b12      	ldr	r3, [pc, #72]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ba2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2c:	4a11      	ldr	r2, [pc, #68]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ba2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba34:	e00e      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	2102      	movs	r1, #2
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 fca4 	bl	800c38c <RCCEx_PLL2_Config>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba4a:	e003      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ba52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10d      	bne.n	800ba78 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ba5c:	4b05      	ldr	r3, [pc, #20]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ba5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba60:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ba64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba6a:	4a02      	ldr	r2, [pc, #8]	@ (800ba74 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ba6c:	430b      	orrs	r3, r1
 800ba6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba70:	e006      	b.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800ba72:	bf00      	nop
 800ba74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba78:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba7c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ba8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba8e:	2300      	movs	r3, #0
 800ba90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ba92:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ba96:	460b      	mov	r3, r1
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	d00c      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baa0:	3328      	adds	r3, #40	@ 0x28
 800baa2:	2102      	movs	r1, #2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f000 fd23 	bl	800c4f0 <RCCEx_PLL3_Config>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800bac2:	663b      	str	r3, [r7, #96]	@ 0x60
 800bac4:	2300      	movs	r3, #0
 800bac6:	667b      	str	r3, [r7, #100]	@ 0x64
 800bac8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800bacc:	460b      	mov	r3, r1
 800bace:	4313      	orrs	r3, r2
 800bad0:	d038      	beq.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bade:	d018      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800bae0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bae4:	d811      	bhi.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800bae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baea:	d014      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800baec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baf0:	d80b      	bhi.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d011      	beq.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800baf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bafa:	d106      	bne.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bafc:	4bc3      	ldr	r3, [pc, #780]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb00:	4ac2      	ldr	r2, [pc, #776]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bb02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bb08:	e008      	b.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bb10:	e004      	b.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800bb12:	bf00      	nop
 800bb14:	e002      	b.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800bb16:	bf00      	nop
 800bb18:	e000      	b.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800bb1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10b      	bne.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb24:	4bb9      	ldr	r3, [pc, #740]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bb26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb28:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800bb2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb34:	4ab5      	ldr	r2, [pc, #724]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bb36:	430b      	orrs	r3, r1
 800bb38:	6553      	str	r3, [r2, #84]	@ 0x54
 800bb3a:	e003      	b.n	800bb44 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb40:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bb44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800bb50:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bb52:	2300      	movs	r3, #0
 800bb54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb56:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	d009      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bb60:	4baa      	ldr	r3, [pc, #680]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb64:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bb68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bb6e:	4aa7      	ldr	r2, [pc, #668]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bb70:	430b      	orrs	r3, r1
 800bb72:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800bb80:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb82:	2300      	movs	r3, #0
 800bb84:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb86:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	d009      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb90:	4b9e      	ldr	r3, [pc, #632]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bb92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb94:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800bb98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb9e:	4a9b      	ldr	r2, [pc, #620]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bba0:	430b      	orrs	r3, r1
 800bba2:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800bba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bbb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbb6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	d009      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800bbc0:	4b92      	ldr	r3, [pc, #584]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bbc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbc4:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800bbc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bbce:	4a8f      	ldr	r2, [pc, #572]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bbd0:	430b      	orrs	r3, r1
 800bbd2:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bbd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800bbe0:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbe6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800bbea:	460b      	mov	r3, r1
 800bbec:	4313      	orrs	r3, r2
 800bbee:	d00e      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bbf0:	4b86      	ldr	r3, [pc, #536]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	4a85      	ldr	r2, [pc, #532]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bbf6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bbfa:	6113      	str	r3, [r2, #16]
 800bbfc:	4b83      	ldr	r3, [pc, #524]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bbfe:	6919      	ldr	r1, [r3, #16]
 800bc00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800bc08:	4a80      	ldr	r2, [pc, #512]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bc0a:	430b      	orrs	r3, r1
 800bc0c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800bc1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc20:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800bc24:	460b      	mov	r3, r1
 800bc26:	4313      	orrs	r3, r2
 800bc28:	d009      	beq.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc2a:	4b78      	ldr	r3, [pc, #480]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bc2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc2e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bc32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc38:	4a74      	ldr	r2, [pc, #464]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bc3a:	430b      	orrs	r3, r1
 800bc3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800bc4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc50:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800bc54:	460b      	mov	r3, r1
 800bc56:	4313      	orrs	r3, r2
 800bc58:	d00a      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc5a:	4b6c      	ldr	r3, [pc, #432]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bc5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc5e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800bc62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc6a:	4a68      	ldr	r2, [pc, #416]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800bc6c:	430b      	orrs	r3, r1
 800bc6e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bc70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	2100      	movs	r1, #0
 800bc7a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc82:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800bc86:	460b      	mov	r3, r1
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	d011      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc90:	3308      	adds	r3, #8
 800bc92:	2100      	movs	r1, #0
 800bc94:	4618      	mov	r0, r3
 800bc96:	f000 fb79 	bl	800c38c <RCCEx_PLL2_Config>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bca0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d003      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bca8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bcb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb8:	2100      	movs	r1, #0
 800bcba:	6239      	str	r1, [r7, #32]
 800bcbc:	f003 0302 	and.w	r3, r3, #2
 800bcc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcc2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	d011      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	2101      	movs	r1, #1
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 fb59 	bl	800c38c <RCCEx_PLL2_Config>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bce0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bce8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bcf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	61b9      	str	r1, [r7, #24]
 800bcfc:	f003 0304 	and.w	r3, r3, #4
 800bd00:	61fb      	str	r3, [r7, #28]
 800bd02:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bd06:	460b      	mov	r3, r1
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	d011      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd10:	3308      	adds	r3, #8
 800bd12:	2102      	movs	r1, #2
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 fb39 	bl	800c38c <RCCEx_PLL2_Config>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bd20:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d003      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd2c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bd30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	2100      	movs	r1, #0
 800bd3a:	6139      	str	r1, [r7, #16]
 800bd3c:	f003 0308 	and.w	r3, r3, #8
 800bd40:	617b      	str	r3, [r7, #20]
 800bd42:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bd46:	460b      	mov	r3, r1
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	d011      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd50:	3328      	adds	r3, #40	@ 0x28
 800bd52:	2100      	movs	r1, #0
 800bd54:	4618      	mov	r0, r3
 800bd56:	f000 fbcb 	bl	800c4f0 <RCCEx_PLL3_Config>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800bd60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d003      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bd70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	2100      	movs	r1, #0
 800bd7a:	60b9      	str	r1, [r7, #8]
 800bd7c:	f003 0310 	and.w	r3, r3, #16
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bd86:	460b      	mov	r3, r1
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	d011      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd90:	3328      	adds	r3, #40	@ 0x28
 800bd92:	2101      	movs	r1, #1
 800bd94:	4618      	mov	r0, r3
 800bd96:	f000 fbab 	bl	800c4f0 <RCCEx_PLL3_Config>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bda0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d003      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bda8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bdb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	2100      	movs	r1, #0
 800bdba:	6039      	str	r1, [r7, #0]
 800bdbc:	f003 0320 	and.w	r3, r3, #32
 800bdc0:	607b      	str	r3, [r7, #4]
 800bdc2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	d011      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdd0:	3328      	adds	r3, #40	@ 0x28
 800bdd2:	2102      	movs	r1, #2
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f000 fb8b 	bl	800c4f0 <RCCEx_PLL3_Config>
 800bdda:	4603      	mov	r3, r0
 800bddc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800bde0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d003      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bde8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800bdf0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d101      	bne.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	e000      	b.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800be04:	46bd      	mov	sp, r7
 800be06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be0a:	bf00      	nop
 800be0c:	58024400 	.word	0x58024400

0800be10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800be14:	f7fe fda0 	bl	800a958 <HAL_RCC_GetHCLKFreq>
 800be18:	4602      	mov	r2, r0
 800be1a:	4b06      	ldr	r3, [pc, #24]	@ (800be34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800be1c:	6a1b      	ldr	r3, [r3, #32]
 800be1e:	091b      	lsrs	r3, r3, #4
 800be20:	f003 0307 	and.w	r3, r3, #7
 800be24:	4904      	ldr	r1, [pc, #16]	@ (800be38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800be26:	5ccb      	ldrb	r3, [r1, r3]
 800be28:	f003 031f 	and.w	r3, r3, #31
 800be2c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800be30:	4618      	mov	r0, r3
 800be32:	bd80      	pop	{r7, pc}
 800be34:	58024400 	.word	0x58024400
 800be38:	080191c4 	.word	0x080191c4

0800be3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b089      	sub	sp, #36	@ 0x24
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be44:	4ba1      	ldr	r3, [pc, #644]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be48:	f003 0303 	and.w	r3, r3, #3
 800be4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800be4e:	4b9f      	ldr	r3, [pc, #636]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be52:	0b1b      	lsrs	r3, r3, #12
 800be54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800be5a:	4b9c      	ldr	r3, [pc, #624]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be5e:	091b      	lsrs	r3, r3, #4
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800be66:	4b99      	ldr	r3, [pc, #612]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be6a:	08db      	lsrs	r3, r3, #3
 800be6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	fb02 f303 	mul.w	r3, r2, r3
 800be76:	ee07 3a90 	vmov	s15, r3
 800be7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 8111 	beq.w	800c0ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	f000 8083 	beq.w	800bf98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	2b02      	cmp	r3, #2
 800be96:	f200 80a1 	bhi.w	800bfdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d003      	beq.n	800bea8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d056      	beq.n	800bf54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bea6:	e099      	b.n	800bfdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bea8:	4b88      	ldr	r3, [pc, #544]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 0320 	and.w	r3, r3, #32
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d02d      	beq.n	800bf10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800beb4:	4b85      	ldr	r3, [pc, #532]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	08db      	lsrs	r3, r3, #3
 800beba:	f003 0303 	and.w	r3, r3, #3
 800bebe:	4a84      	ldr	r2, [pc, #528]	@ (800c0d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bec0:	fa22 f303 	lsr.w	r3, r2, r3
 800bec4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	ee07 3a90 	vmov	s15, r3
 800becc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	ee07 3a90 	vmov	s15, r3
 800bed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bede:	4b7b      	ldr	r3, [pc, #492]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bee6:	ee07 3a90 	vmov	s15, r3
 800beea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beee:	ed97 6a03 	vldr	s12, [r7, #12]
 800bef2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800befa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800befe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf0e:	e087      	b.n	800c020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	ee07 3a90 	vmov	s15, r3
 800bf16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bf1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf22:	4b6a      	ldr	r3, [pc, #424]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf2a:	ee07 3a90 	vmov	s15, r3
 800bf2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf32:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf52:	e065      	b.n	800c020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	ee07 3a90 	vmov	s15, r3
 800bf5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf66:	4b59      	ldr	r3, [pc, #356]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf6e:	ee07 3a90 	vmov	s15, r3
 800bf72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf76:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf96:	e043      	b.n	800c020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	ee07 3a90 	vmov	s15, r3
 800bf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bfa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfaa:	4b48      	ldr	r3, [pc, #288]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb2:	ee07 3a90 	vmov	s15, r3
 800bfb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfba:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfbe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bfc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfda:	e021      	b.n	800c020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	ee07 3a90 	vmov	s15, r3
 800bfe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bfea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfee:	4b37      	ldr	r3, [pc, #220]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bffe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c002:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c00e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c01a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c01e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c020:	4b2a      	ldr	r3, [pc, #168]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c024:	0a5b      	lsrs	r3, r3, #9
 800c026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c02a:	ee07 3a90 	vmov	s15, r3
 800c02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c032:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c03a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c03e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c046:	ee17 2a90 	vmov	r2, s15
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c04e:	4b1f      	ldr	r3, [pc, #124]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c052:	0c1b      	lsrs	r3, r3, #16
 800c054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c058:	ee07 3a90 	vmov	s15, r3
 800c05c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c060:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c064:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c068:	edd7 6a07 	vldr	s13, [r7, #28]
 800c06c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c074:	ee17 2a90 	vmov	r2, s15
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c07c:	4b13      	ldr	r3, [pc, #76]	@ (800c0cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c07e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c080:	0e1b      	lsrs	r3, r3, #24
 800c082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c08e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c092:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c096:	edd7 6a07 	vldr	s13, [r7, #28]
 800c09a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c09e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0a2:	ee17 2a90 	vmov	r2, s15
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c0aa:	e008      	b.n	800c0be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	609a      	str	r2, [r3, #8]
}
 800c0be:	bf00      	nop
 800c0c0:	3724      	adds	r7, #36	@ 0x24
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	58024400 	.word	0x58024400
 800c0d0:	03d09000 	.word	0x03d09000
 800c0d4:	46000000 	.word	0x46000000
 800c0d8:	4c742400 	.word	0x4c742400
 800c0dc:	4a742400 	.word	0x4a742400
 800c0e0:	4bb71b00 	.word	0x4bb71b00

0800c0e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b089      	sub	sp, #36	@ 0x24
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0ec:	4ba1      	ldr	r3, [pc, #644]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0f0:	f003 0303 	and.w	r3, r3, #3
 800c0f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c0f6:	4b9f      	ldr	r3, [pc, #636]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0fa:	0d1b      	lsrs	r3, r3, #20
 800c0fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c100:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c102:	4b9c      	ldr	r3, [pc, #624]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c106:	0a1b      	lsrs	r3, r3, #8
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c10e:	4b99      	ldr	r3, [pc, #612]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c112:	08db      	lsrs	r3, r3, #3
 800c114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	fb02 f303 	mul.w	r3, r2, r3
 800c11e:	ee07 3a90 	vmov	s15, r3
 800c122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c126:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f000 8111 	beq.w	800c354 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	2b02      	cmp	r3, #2
 800c136:	f000 8083 	beq.w	800c240 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	f200 80a1 	bhi.w	800c284 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d003      	beq.n	800c150 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d056      	beq.n	800c1fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c14e:	e099      	b.n	800c284 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c150:	4b88      	ldr	r3, [pc, #544]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 0320 	and.w	r3, r3, #32
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d02d      	beq.n	800c1b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c15c:	4b85      	ldr	r3, [pc, #532]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	08db      	lsrs	r3, r3, #3
 800c162:	f003 0303 	and.w	r3, r3, #3
 800c166:	4a84      	ldr	r2, [pc, #528]	@ (800c378 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c168:	fa22 f303 	lsr.w	r3, r2, r3
 800c16c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	ee07 3a90 	vmov	s15, r3
 800c174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	ee07 3a90 	vmov	s15, r3
 800c17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c186:	4b7b      	ldr	r3, [pc, #492]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18e:	ee07 3a90 	vmov	s15, r3
 800c192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c196:	ed97 6a03 	vldr	s12, [r7, #12]
 800c19a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c37c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c1b6:	e087      	b.n	800c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	ee07 3a90 	vmov	s15, r3
 800c1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c380 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ca:	4b6a      	ldr	r3, [pc, #424]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d2:	ee07 3a90 	vmov	s15, r3
 800c1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c37c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1fa:	e065      	b.n	800c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	ee07 3a90 	vmov	s15, r3
 800c202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c206:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c384 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c20e:	4b59      	ldr	r3, [pc, #356]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c216:	ee07 3a90 	vmov	s15, r3
 800c21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c222:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c37c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c23a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c23e:	e043      	b.n	800c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	ee07 3a90 	vmov	s15, r3
 800c246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c24a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c388 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c252:	4b48      	ldr	r3, [pc, #288]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c25a:	ee07 3a90 	vmov	s15, r3
 800c25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c262:	ed97 6a03 	vldr	s12, [r7, #12]
 800c266:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c37c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c27e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c282:	e021      	b.n	800c2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	ee07 3a90 	vmov	s15, r3
 800c28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c28e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c384 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c296:	4b37      	ldr	r3, [pc, #220]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c29e:	ee07 3a90 	vmov	s15, r3
 800c2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c37c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c2c8:	4b2a      	ldr	r3, [pc, #168]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2cc:	0a5b      	lsrs	r3, r3, #9
 800c2ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2d2:	ee07 3a90 	vmov	s15, r3
 800c2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c2de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2ee:	ee17 2a90 	vmov	r2, s15
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c2f6:	4b1f      	ldr	r3, [pc, #124]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2fa:	0c1b      	lsrs	r3, r3, #16
 800c2fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c300:	ee07 3a90 	vmov	s15, r3
 800c304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c308:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c30c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c310:	edd7 6a07 	vldr	s13, [r7, #28]
 800c314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c31c:	ee17 2a90 	vmov	r2, s15
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c324:	4b13      	ldr	r3, [pc, #76]	@ (800c374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c328:	0e1b      	lsrs	r3, r3, #24
 800c32a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c32e:	ee07 3a90 	vmov	s15, r3
 800c332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c33a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c33e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c34a:	ee17 2a90 	vmov	r2, s15
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c352:	e008      	b.n	800c366 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2200      	movs	r2, #0
 800c35e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	609a      	str	r2, [r3, #8]
}
 800c366:	bf00      	nop
 800c368:	3724      	adds	r7, #36	@ 0x24
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	58024400 	.word	0x58024400
 800c378:	03d09000 	.word	0x03d09000
 800c37c:	46000000 	.word	0x46000000
 800c380:	4c742400 	.word	0x4c742400
 800c384:	4a742400 	.word	0x4a742400
 800c388:	4bb71b00 	.word	0x4bb71b00

0800c38c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c396:	2300      	movs	r3, #0
 800c398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c39a:	4b53      	ldr	r3, [pc, #332]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c39e:	f003 0303 	and.w	r3, r3, #3
 800c3a2:	2b03      	cmp	r3, #3
 800c3a4:	d101      	bne.n	800c3aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e099      	b.n	800c4de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c3aa:	4b4f      	ldr	r3, [pc, #316]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a4e      	ldr	r2, [pc, #312]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c3b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c3b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3b6:	f7f9 fc5f 	bl	8005c78 <HAL_GetTick>
 800c3ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3bc:	e008      	b.n	800c3d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3be:	f7f9 fc5b 	bl	8005c78 <HAL_GetTick>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	1ad3      	subs	r3, r2, r3
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	d901      	bls.n	800c3d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c3cc:	2303      	movs	r3, #3
 800c3ce:	e086      	b.n	800c4de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3d0:	4b45      	ldr	r3, [pc, #276]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1f0      	bne.n	800c3be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c3dc:	4b42      	ldr	r3, [pc, #264]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	031b      	lsls	r3, r3, #12
 800c3ea:	493f      	ldr	r1, [pc, #252]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	628b      	str	r3, [r1, #40]	@ 0x28
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	3b01      	subs	r3, #1
 800c400:	025b      	lsls	r3, r3, #9
 800c402:	b29b      	uxth	r3, r3
 800c404:	431a      	orrs	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	041b      	lsls	r3, r3, #16
 800c40e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c412:	431a      	orrs	r2, r3
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	691b      	ldr	r3, [r3, #16]
 800c418:	3b01      	subs	r3, #1
 800c41a:	061b      	lsls	r3, r3, #24
 800c41c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c420:	4931      	ldr	r1, [pc, #196]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c422:	4313      	orrs	r3, r2
 800c424:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c426:	4b30      	ldr	r3, [pc, #192]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c42a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	492d      	ldr	r1, [pc, #180]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c434:	4313      	orrs	r3, r2
 800c436:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c438:	4b2b      	ldr	r3, [pc, #172]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c43c:	f023 0220 	bic.w	r2, r3, #32
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	699b      	ldr	r3, [r3, #24]
 800c444:	4928      	ldr	r1, [pc, #160]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c446:	4313      	orrs	r3, r2
 800c448:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c44a:	4b27      	ldr	r3, [pc, #156]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c44e:	4a26      	ldr	r2, [pc, #152]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c450:	f023 0310 	bic.w	r3, r3, #16
 800c454:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c456:	4b24      	ldr	r3, [pc, #144]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c458:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c45a:	4b24      	ldr	r3, [pc, #144]	@ (800c4ec <RCCEx_PLL2_Config+0x160>)
 800c45c:	4013      	ands	r3, r2
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	69d2      	ldr	r2, [r2, #28]
 800c462:	00d2      	lsls	r2, r2, #3
 800c464:	4920      	ldr	r1, [pc, #128]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c466:	4313      	orrs	r3, r2
 800c468:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c46a:	4b1f      	ldr	r3, [pc, #124]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c46e:	4a1e      	ldr	r2, [pc, #120]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c470:	f043 0310 	orr.w	r3, r3, #16
 800c474:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d106      	bne.n	800c48a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c47c:	4b1a      	ldr	r3, [pc, #104]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c480:	4a19      	ldr	r2, [pc, #100]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c482:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c486:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c488:	e00f      	b.n	800c4aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d106      	bne.n	800c49e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c490:	4b15      	ldr	r3, [pc, #84]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c494:	4a14      	ldr	r2, [pc, #80]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c49a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c49c:	e005      	b.n	800c4aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c49e:	4b12      	ldr	r3, [pc, #72]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a2:	4a11      	ldr	r2, [pc, #68]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c4a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c4a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c4aa:	4b0f      	ldr	r3, [pc, #60]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a0e      	ldr	r2, [pc, #56]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c4b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c4b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4b6:	f7f9 fbdf 	bl	8005c78 <HAL_GetTick>
 800c4ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4bc:	e008      	b.n	800c4d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c4be:	f7f9 fbdb 	bl	8005c78 <HAL_GetTick>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	d901      	bls.n	800c4d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	e006      	b.n	800c4de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4d0:	4b05      	ldr	r3, [pc, #20]	@ (800c4e8 <RCCEx_PLL2_Config+0x15c>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d0f0      	beq.n	800c4be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	58024400 	.word	0x58024400
 800c4ec:	ffff0007 	.word	0xffff0007

0800c4f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b084      	sub	sp, #16
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4fe:	4b53      	ldr	r3, [pc, #332]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c502:	f003 0303 	and.w	r3, r3, #3
 800c506:	2b03      	cmp	r3, #3
 800c508:	d101      	bne.n	800c50e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e099      	b.n	800c642 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c50e:	4b4f      	ldr	r3, [pc, #316]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a4e      	ldr	r2, [pc, #312]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c51a:	f7f9 fbad 	bl	8005c78 <HAL_GetTick>
 800c51e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c520:	e008      	b.n	800c534 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c522:	f7f9 fba9 	bl	8005c78 <HAL_GetTick>
 800c526:	4602      	mov	r2, r0
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	2b02      	cmp	r3, #2
 800c52e:	d901      	bls.n	800c534 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c530:	2303      	movs	r3, #3
 800c532:	e086      	b.n	800c642 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c534:	4b45      	ldr	r3, [pc, #276]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1f0      	bne.n	800c522 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c540:	4b42      	ldr	r3, [pc, #264]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c544:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	051b      	lsls	r3, r3, #20
 800c54e:	493f      	ldr	r1, [pc, #252]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c550:	4313      	orrs	r3, r2
 800c552:	628b      	str	r3, [r1, #40]	@ 0x28
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	3b01      	subs	r3, #1
 800c55a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	3b01      	subs	r3, #1
 800c564:	025b      	lsls	r3, r3, #9
 800c566:	b29b      	uxth	r3, r3
 800c568:	431a      	orrs	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	3b01      	subs	r3, #1
 800c570:	041b      	lsls	r3, r3, #16
 800c572:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c576:	431a      	orrs	r2, r3
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	061b      	lsls	r3, r3, #24
 800c580:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c584:	4931      	ldr	r1, [pc, #196]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c586:	4313      	orrs	r3, r2
 800c588:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c58a:	4b30      	ldr	r3, [pc, #192]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c58e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	492d      	ldr	r1, [pc, #180]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c598:	4313      	orrs	r3, r2
 800c59a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c59c:	4b2b      	ldr	r3, [pc, #172]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	4928      	ldr	r1, [pc, #160]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c5ae:	4b27      	ldr	r3, [pc, #156]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b2:	4a26      	ldr	r2, [pc, #152]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c5ba:	4b24      	ldr	r3, [pc, #144]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5be:	4b24      	ldr	r3, [pc, #144]	@ (800c650 <RCCEx_PLL3_Config+0x160>)
 800c5c0:	4013      	ands	r3, r2
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	69d2      	ldr	r2, [r2, #28]
 800c5c6:	00d2      	lsls	r2, r2, #3
 800c5c8:	4920      	ldr	r1, [pc, #128]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c5ce:	4b1f      	ldr	r3, [pc, #124]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5d2:	4a1e      	ldr	r2, [pc, #120]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c5d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d106      	bne.n	800c5ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c5e0:	4b1a      	ldr	r3, [pc, #104]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e4:	4a19      	ldr	r2, [pc, #100]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c5ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c5ec:	e00f      	b.n	800c60e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	d106      	bne.n	800c602 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c5f4:	4b15      	ldr	r3, [pc, #84]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f8:	4a14      	ldr	r2, [pc, #80]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c5fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c5fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c600:	e005      	b.n	800c60e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c602:	4b12      	ldr	r3, [pc, #72]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c606:	4a11      	ldr	r2, [pc, #68]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c608:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c60c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c60e:	4b0f      	ldr	r3, [pc, #60]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a0e      	ldr	r2, [pc, #56]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c61a:	f7f9 fb2d 	bl	8005c78 <HAL_GetTick>
 800c61e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c620:	e008      	b.n	800c634 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c622:	f7f9 fb29 	bl	8005c78 <HAL_GetTick>
 800c626:	4602      	mov	r2, r0
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d901      	bls.n	800c634 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c630:	2303      	movs	r3, #3
 800c632:	e006      	b.n	800c642 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c634:	4b05      	ldr	r3, [pc, #20]	@ (800c64c <RCCEx_PLL3_Config+0x15c>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d0f0      	beq.n	800c622 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c640:	7bfb      	ldrb	r3, [r7, #15]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	58024400 	.word	0x58024400
 800c650:	ffff0007 	.word	0xffff0007

0800c654 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d101      	bne.n	800c666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c662:	2301      	movs	r3, #1
 800c664:	e10f      	b.n	800c886 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a87      	ldr	r2, [pc, #540]	@ (800c890 <HAL_SPI_Init+0x23c>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d00f      	beq.n	800c696 <HAL_SPI_Init+0x42>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a86      	ldr	r2, [pc, #536]	@ (800c894 <HAL_SPI_Init+0x240>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d00a      	beq.n	800c696 <HAL_SPI_Init+0x42>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a84      	ldr	r2, [pc, #528]	@ (800c898 <HAL_SPI_Init+0x244>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d005      	beq.n	800c696 <HAL_SPI_Init+0x42>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	2b0f      	cmp	r3, #15
 800c690:	d901      	bls.n	800c696 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	e0f7      	b.n	800c886 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f001 f968 	bl	800d96c <SPI_GetPacketSize>
 800c69c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a7b      	ldr	r2, [pc, #492]	@ (800c890 <HAL_SPI_Init+0x23c>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d00c      	beq.n	800c6c2 <HAL_SPI_Init+0x6e>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a79      	ldr	r2, [pc, #484]	@ (800c894 <HAL_SPI_Init+0x240>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d007      	beq.n	800c6c2 <HAL_SPI_Init+0x6e>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a78      	ldr	r2, [pc, #480]	@ (800c898 <HAL_SPI_Init+0x244>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d002      	beq.n	800c6c2 <HAL_SPI_Init+0x6e>
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2b08      	cmp	r3, #8
 800c6c0:	d811      	bhi.n	800c6e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c6c6:	4a72      	ldr	r2, [pc, #456]	@ (800c890 <HAL_SPI_Init+0x23c>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d009      	beq.n	800c6e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a70      	ldr	r2, [pc, #448]	@ (800c894 <HAL_SPI_Init+0x240>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d004      	beq.n	800c6e0 <HAL_SPI_Init+0x8c>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a6f      	ldr	r2, [pc, #444]	@ (800c898 <HAL_SPI_Init+0x244>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d104      	bne.n	800c6ea <HAL_SPI_Init+0x96>
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2b10      	cmp	r3, #16
 800c6e4:	d901      	bls.n	800c6ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e0cd      	b.n	800c886 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d106      	bne.n	800c704 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7f6 f800 	bl	8002704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2202      	movs	r2, #2
 800c708:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f022 0201 	bic.w	r2, r2, #1
 800c71a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c726:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	699b      	ldr	r3, [r3, #24]
 800c72c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c730:	d119      	bne.n	800c766 <HAL_SPI_Init+0x112>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c73a:	d103      	bne.n	800c744 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c740:	2b00      	cmp	r3, #0
 800c742:	d008      	beq.n	800c756 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10c      	bne.n	800c766 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c750:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c754:	d107      	bne.n	800c766 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c764:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00f      	beq.n	800c792 <HAL_SPI_Init+0x13e>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	2b06      	cmp	r3, #6
 800c778:	d90b      	bls.n	800c792 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	430a      	orrs	r2, r1
 800c78e:	601a      	str	r2, [r3, #0]
 800c790:	e007      	b.n	800c7a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c7a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	69da      	ldr	r2, [r3, #28]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7aa:	431a      	orrs	r2, r3
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	431a      	orrs	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7b4:	ea42 0103 	orr.w	r1, r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	68da      	ldr	r2, [r3, #12]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	430a      	orrs	r2, r1
 800c7c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7cc:	431a      	orrs	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	431a      	orrs	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	431a      	orrs	r2, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	695b      	ldr	r3, [r3, #20]
 800c7e4:	431a      	orrs	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	431a      	orrs	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7f6:	431a      	orrs	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	431a      	orrs	r2, r3
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c802:	ea42 0103 	orr.w	r1, r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	430a      	orrs	r2, r1
 800c810:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d113      	bne.n	800c842 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c82c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	689b      	ldr	r3, [r3, #8]
 800c834:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c840:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f022 0201 	bic.w	r2, r2, #1
 800c850:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00a      	beq.n	800c874 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	430a      	orrs	r2, r1
 800c872:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	40013000 	.word	0x40013000
 800c894:	40003800 	.word	0x40003800
 800c898:	40003c00 	.word	0x40003c00

0800c89c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b088      	sub	sp, #32
 800c8a0:	af02      	add	r7, sp, #8
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	603b      	str	r3, [r7, #0]
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	3320      	adds	r3, #32
 800c8b2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c8b4:	f7f9 f9e0 	bl	8005c78 <HAL_GetTick>
 800c8b8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d001      	beq.n	800c8ca <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	e1d1      	b.n	800cc6e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <HAL_SPI_Transmit+0x3a>
 800c8d0:	88fb      	ldrh	r3, [r7, #6]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d101      	bne.n	800c8da <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e1c9      	b.n	800cc6e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d101      	bne.n	800c8e8 <HAL_SPI_Transmit+0x4c>
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	e1c2      	b.n	800cc6e <HAL_SPI_Transmit+0x3d2>
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2203      	movs	r2, #3
 800c8f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	88fa      	ldrh	r2, [r7, #6]
 800c90a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	88fa      	ldrh	r2, [r7, #6]
 800c912:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2200      	movs	r2, #0
 800c928:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2200      	movs	r2, #0
 800c936:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c940:	d108      	bne.n	800c954 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c950:	601a      	str	r2, [r3, #0]
 800c952:	e009      	b.n	800c968 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c966:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	4b96      	ldr	r3, [pc, #600]	@ (800cbc8 <HAL_SPI_Transmit+0x32c>)
 800c970:	4013      	ands	r3, r2
 800c972:	88f9      	ldrh	r1, [r7, #6]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	6812      	ldr	r2, [r2, #0]
 800c978:	430b      	orrs	r3, r1
 800c97a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f042 0201 	orr.w	r2, r2, #1
 800c98a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c994:	d107      	bne.n	800c9a6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c9a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	2b0f      	cmp	r3, #15
 800c9ac:	d947      	bls.n	800ca3e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c9ae:	e03f      	b.n	800ca30 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	695b      	ldr	r3, [r3, #20]
 800c9b6:	f003 0302 	and.w	r3, r3, #2
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d114      	bne.n	800c9e8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6812      	ldr	r2, [r2, #0]
 800c9c8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9ce:	1d1a      	adds	r2, r3, #4
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800c9e6:	e023      	b.n	800ca30 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9e8:	f7f9 f946 	bl	8005c78 <HAL_GetTick>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	1ad3      	subs	r3, r2, r3
 800c9f2:	683a      	ldr	r2, [r7, #0]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d803      	bhi.n	800ca00 <HAL_SPI_Transmit+0x164>
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9fe:	d102      	bne.n	800ca06 <HAL_SPI_Transmit+0x16a>
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d114      	bne.n	800ca30 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f000 fee2 	bl	800d7d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	e11e      	b.n	800cc6e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1b9      	bne.n	800c9b0 <HAL_SPI_Transmit+0x114>
 800ca3c:	e0f1      	b.n	800cc22 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	2b07      	cmp	r3, #7
 800ca44:	f240 80e6 	bls.w	800cc14 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ca48:	e05d      	b.n	800cb06 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	695b      	ldr	r3, [r3, #20]
 800ca50:	f003 0302 	and.w	r3, r3, #2
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d132      	bne.n	800cabe <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d918      	bls.n	800ca96 <HAL_SPI_Transmit+0x1fa>
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d014      	beq.n	800ca96 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	6812      	ldr	r2, [r2, #0]
 800ca76:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca7c:	1d1a      	adds	r2, r3, #4
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	3b02      	subs	r3, #2
 800ca8c:	b29a      	uxth	r2, r3
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ca94:	e037      	b.n	800cb06 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca9a:	881a      	ldrh	r2, [r3, #0]
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800caa4:	1c9a      	adds	r2, r3, #2
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	3b01      	subs	r3, #1
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cabc:	e023      	b.n	800cb06 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cabe:	f7f9 f8db 	bl	8005c78 <HAL_GetTick>
 800cac2:	4602      	mov	r2, r0
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	1ad3      	subs	r3, r2, r3
 800cac8:	683a      	ldr	r2, [r7, #0]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d803      	bhi.n	800cad6 <HAL_SPI_Transmit+0x23a>
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cad4:	d102      	bne.n	800cadc <HAL_SPI_Transmit+0x240>
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d114      	bne.n	800cb06 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f000 fe77 	bl	800d7d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cae8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2201      	movs	r2, #1
 800caf6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cb02:	2303      	movs	r3, #3
 800cb04:	e0b3      	b.n	800cc6e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d19b      	bne.n	800ca4a <HAL_SPI_Transmit+0x1ae>
 800cb12:	e086      	b.n	800cc22 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	695b      	ldr	r3, [r3, #20]
 800cb1a:	f003 0302 	and.w	r3, r3, #2
 800cb1e:	2b02      	cmp	r3, #2
 800cb20:	d154      	bne.n	800cbcc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	2b03      	cmp	r3, #3
 800cb2c:	d918      	bls.n	800cb60 <HAL_SPI_Transmit+0x2c4>
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb32:	2b40      	cmp	r3, #64	@ 0x40
 800cb34:	d914      	bls.n	800cb60 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	6812      	ldr	r2, [r2, #0]
 800cb40:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb46:	1d1a      	adds	r2, r3, #4
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	3b04      	subs	r3, #4
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cb5e:	e059      	b.n	800cc14 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d917      	bls.n	800cb9c <HAL_SPI_Transmit+0x300>
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d013      	beq.n	800cb9c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb78:	881a      	ldrh	r2, [r3, #0]
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb82:	1c9a      	adds	r2, r3, #2
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	3b02      	subs	r3, #2
 800cb92:	b29a      	uxth	r2, r3
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cb9a:	e03b      	b.n	800cc14 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3320      	adds	r3, #32
 800cba6:	7812      	ldrb	r2, [r2, #0]
 800cba8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cbae:	1c5a      	adds	r2, r3, #1
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800cbc6:	e025      	b.n	800cc14 <HAL_SPI_Transmit+0x378>
 800cbc8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cbcc:	f7f9 f854 	bl	8005c78 <HAL_GetTick>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	683a      	ldr	r2, [r7, #0]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d803      	bhi.n	800cbe4 <HAL_SPI_Transmit+0x348>
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe2:	d102      	bne.n	800cbea <HAL_SPI_Transmit+0x34e>
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d114      	bne.n	800cc14 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f000 fdf0 	bl	800d7d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbf6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cc10:	2303      	movs	r3, #3
 800cc12:	e02c      	b.n	800cc6e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f47f af79 	bne.w	800cb14 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	2108      	movs	r1, #8
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f000 fe6f 	bl	800d910 <SPI_WaitOnFlagUntilTimeout>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d007      	beq.n	800cc48 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc3e:	f043 0220 	orr.w	r2, r3, #32
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f000 fdc1 	bl	800d7d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2201      	movs	r2, #1
 800cc52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	e000      	b.n	800cc6e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
  }
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3718      	adds	r7, #24
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop

0800cc78 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b088      	sub	sp, #32
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	4613      	mov	r3, r2
 800cc86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc8c:	095b      	lsrs	r3, r3, #5
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	3301      	adds	r3, #1
 800cc92:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3330      	adds	r3, #48	@ 0x30
 800cc9a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc9c:	f7f8 ffec 	bl	8005c78 <HAL_GetTick>
 800cca0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d001      	beq.n	800ccb2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800ccae:	2302      	movs	r3, #2
 800ccb0:	e250      	b.n	800d154 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d002      	beq.n	800ccbe <HAL_SPI_Receive+0x46>
 800ccb8:	88fb      	ldrh	r3, [r7, #6]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d101      	bne.n	800ccc2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e248      	b.n	800d154 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d101      	bne.n	800ccd0 <HAL_SPI_Receive+0x58>
 800cccc:	2302      	movs	r3, #2
 800ccce:	e241      	b.n	800d154 <HAL_SPI_Receive+0x4dc>
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2204      	movs	r2, #4
 800ccdc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	68ba      	ldr	r2, [r7, #8]
 800ccec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	88fa      	ldrh	r2, [r7, #6]
 800ccf2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	88fa      	ldrh	r2, [r7, #6]
 800ccfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800cd28:	d108      	bne.n	800cd3c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cd38:	601a      	str	r2, [r3, #0]
 800cd3a:	e009      	b.n	800cd50 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800cd4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	685a      	ldr	r2, [r3, #4]
 800cd56:	4b95      	ldr	r3, [pc, #596]	@ (800cfac <HAL_SPI_Receive+0x334>)
 800cd58:	4013      	ands	r3, r2
 800cd5a:	88f9      	ldrh	r1, [r7, #6]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	6812      	ldr	r2, [r2, #0]
 800cd60:	430b      	orrs	r3, r1
 800cd62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f042 0201 	orr.w	r2, r2, #1
 800cd72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd7c:	d107      	bne.n	800cd8e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	2b0f      	cmp	r3, #15
 800cd94:	d96c      	bls.n	800ce70 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cd96:	e064      	b.n	800ce62 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	f003 0301 	and.w	r3, r3, #1
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d114      	bne.n	800cdd8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdb6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cdb8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdbe:	1d1a      	adds	r2, r3, #4
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cdd6:	e044      	b.n	800ce62 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	8bfa      	ldrh	r2, [r7, #30]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d919      	bls.n	800ce1a <HAL_SPI_Receive+0x1a2>
 800cde6:	693b      	ldr	r3, [r7, #16]
 800cde8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d014      	beq.n	800ce1a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681a      	ldr	r2, [r3, #0]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdf8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cdfa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce00:	1d1a      	adds	r2, r3, #4
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	b29a      	uxth	r2, r3
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ce18:	e023      	b.n	800ce62 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce1a:	f7f8 ff2d 	bl	8005c78 <HAL_GetTick>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d803      	bhi.n	800ce32 <HAL_SPI_Receive+0x1ba>
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce30:	d102      	bne.n	800ce38 <HAL_SPI_Receive+0x1c0>
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d114      	bne.n	800ce62 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f000 fcc9 	bl	800d7d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	2201      	movs	r2, #1
 800ce52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ce5e:	2303      	movs	r3, #3
 800ce60:	e178      	b.n	800d154 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d194      	bne.n	800cd98 <HAL_SPI_Receive+0x120>
 800ce6e:	e15e      	b.n	800d12e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	2b07      	cmp	r3, #7
 800ce76:	f240 8153 	bls.w	800d120 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ce7a:	e08f      	b.n	800cf9c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	695b      	ldr	r3, [r3, #20]
 800ce8a:	f003 0301 	and.w	r3, r3, #1
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d114      	bne.n	800cebc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ce96:	69ba      	ldr	r2, [r7, #24]
 800ce98:	8812      	ldrh	r2, [r2, #0]
 800ce9a:	b292      	uxth	r2, r2
 800ce9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cea2:	1c9a      	adds	r2, r3, #2
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ceba:	e06f      	b.n	800cf9c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	8bfa      	ldrh	r2, [r7, #30]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d924      	bls.n	800cf14 <HAL_SPI_Receive+0x29c>
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01f      	beq.n	800cf14 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ced8:	69ba      	ldr	r2, [r7, #24]
 800ceda:	8812      	ldrh	r2, [r2, #0]
 800cedc:	b292      	uxth	r2, r2
 800cede:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cee4:	1c9a      	adds	r2, r3, #2
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ceee:	69ba      	ldr	r2, [r7, #24]
 800cef0:	8812      	ldrh	r2, [r2, #0]
 800cef2:	b292      	uxth	r2, r2
 800cef4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cefa:	1c9a      	adds	r2, r3, #2
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	3b02      	subs	r3, #2
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cf12:	e043      	b.n	800cf9c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d119      	bne.n	800cf54 <HAL_SPI_Receive+0x2dc>
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d014      	beq.n	800cf54 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf2e:	69ba      	ldr	r2, [r7, #24]
 800cf30:	8812      	ldrh	r2, [r2, #0]
 800cf32:	b292      	uxth	r2, r2
 800cf34:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cf3a:	1c9a      	adds	r2, r3, #2
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cf52:	e023      	b.n	800cf9c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf54:	f7f8 fe90 	bl	8005c78 <HAL_GetTick>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d803      	bhi.n	800cf6c <HAL_SPI_Receive+0x2f4>
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf6a:	d102      	bne.n	800cf72 <HAL_SPI_Receive+0x2fa>
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d114      	bne.n	800cf9c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f000 fc2c 	bl	800d7d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800cf98:	2303      	movs	r3, #3
 800cf9a:	e0db      	b.n	800d154 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f47f af69 	bne.w	800ce7c <HAL_SPI_Receive+0x204>
 800cfaa:	e0c0      	b.n	800d12e <HAL_SPI_Receive+0x4b6>
 800cfac:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	695b      	ldr	r3, [r3, #20]
 800cfb6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	695b      	ldr	r3, [r3, #20]
 800cfbe:	f003 0301 	and.w	r3, r3, #1
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d117      	bne.n	800cff6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfd2:	7812      	ldrb	r2, [r2, #0]
 800cfd4:	b2d2      	uxtb	r2, r2
 800cfd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfdc:	1c5a      	adds	r2, r3, #1
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	3b01      	subs	r3, #1
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800cff4:	e094      	b.n	800d120 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	8bfa      	ldrh	r2, [r7, #30]
 800d000:	429a      	cmp	r2, r3
 800d002:	d946      	bls.n	800d092 <HAL_SPI_Receive+0x41a>
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d041      	beq.n	800d092 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d01a:	7812      	ldrb	r2, [r2, #0]
 800d01c:	b2d2      	uxtb	r2, r2
 800d01e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d024:	1c5a      	adds	r2, r3, #1
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d036:	7812      	ldrb	r2, [r2, #0]
 800d038:	b2d2      	uxtb	r2, r2
 800d03a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d040:	1c5a      	adds	r2, r3, #1
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d052:	7812      	ldrb	r2, [r2, #0]
 800d054:	b2d2      	uxtb	r2, r2
 800d056:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d05c:	1c5a      	adds	r2, r3, #1
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d06e:	7812      	ldrb	r2, [r2, #0]
 800d070:	b2d2      	uxtb	r2, r2
 800d072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d078:	1c5a      	adds	r2, r3, #1
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d084:	b29b      	uxth	r3, r3
 800d086:	3b04      	subs	r3, #4
 800d088:	b29a      	uxth	r2, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d090:	e046      	b.n	800d120 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d098:	b29b      	uxth	r3, r3
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d81c      	bhi.n	800d0d8 <HAL_SPI_Receive+0x460>
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d017      	beq.n	800d0d8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0b4:	7812      	ldrb	r2, [r2, #0]
 800d0b6:	b2d2      	uxtb	r2, r2
 800d0b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d0d6:	e023      	b.n	800d120 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0d8:	f7f8 fdce 	bl	8005c78 <HAL_GetTick>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d803      	bhi.n	800d0f0 <HAL_SPI_Receive+0x478>
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ee:	d102      	bne.n	800d0f6 <HAL_SPI_Receive+0x47e>
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d114      	bne.n	800d120 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f000 fb6a 	bl	800d7d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d102:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2200      	movs	r2, #0
 800d118:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800d11c:	2303      	movs	r3, #3
 800d11e:	e019      	b.n	800d154 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d126:	b29b      	uxth	r3, r3
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f47f af41 	bne.w	800cfb0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f000 fb4e 	bl	800d7d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d001      	beq.n	800d152 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	e000      	b.n	800d154 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800d152:	2300      	movs	r3, #0
  }
}
 800d154:	4618      	mov	r0, r3
 800d156:	3720      	adds	r7, #32
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b08e      	sub	sp, #56	@ 0x38
 800d160:	af02      	add	r7, sp, #8
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	607a      	str	r2, [r7, #4]
 800d168:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	3320      	adds	r3, #32
 800d170:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3330      	adds	r3, #48	@ 0x30
 800d178:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d17e:	095b      	lsrs	r3, r3, #5
 800d180:	b29b      	uxth	r3, r3
 800d182:	3301      	adds	r3, #1
 800d184:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d186:	f7f8 fd77 	bl	8005c78 <HAL_GetTick>
 800d18a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800d18c:	887b      	ldrh	r3, [r7, #2]
 800d18e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800d190:	887b      	ldrh	r3, [r7, #2]
 800d192:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d001      	beq.n	800d1a4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800d1a0:	2302      	movs	r3, #2
 800d1a2:	e310      	b.n	800d7c6 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d005      	beq.n	800d1b6 <HAL_SPI_TransmitReceive+0x5a>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <HAL_SPI_TransmitReceive+0x5a>
 800d1b0:	887b      	ldrh	r3, [r7, #2]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d101      	bne.n	800d1ba <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	e305      	b.n	800d7c6 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d101      	bne.n	800d1c8 <HAL_SPI_TransmitReceive+0x6c>
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	e2fe      	b.n	800d7c6 <HAL_SPI_TransmitReceive+0x66a>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2205      	movs	r2, #5
 800d1d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	887a      	ldrh	r2, [r7, #2]
 800d1ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	887a      	ldrh	r2, [r7, #2]
 800d1f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	887a      	ldrh	r2, [r7, #2]
 800d200:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	887a      	ldrh	r2, [r7, #2]
 800d208:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68da      	ldr	r2, [r3, #12]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800d226:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a70      	ldr	r2, [pc, #448]	@ (800d3f0 <HAL_SPI_TransmitReceive+0x294>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d009      	beq.n	800d246 <HAL_SPI_TransmitReceive+0xea>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4a6f      	ldr	r2, [pc, #444]	@ (800d3f4 <HAL_SPI_TransmitReceive+0x298>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d004      	beq.n	800d246 <HAL_SPI_TransmitReceive+0xea>
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a6d      	ldr	r2, [pc, #436]	@ (800d3f8 <HAL_SPI_TransmitReceive+0x29c>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d102      	bne.n	800d24c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800d246:	2310      	movs	r3, #16
 800d248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d24a:	e001      	b.n	800d250 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800d24c:	2308      	movs	r3, #8
 800d24e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	685a      	ldr	r2, [r3, #4]
 800d256:	4b69      	ldr	r3, [pc, #420]	@ (800d3fc <HAL_SPI_TransmitReceive+0x2a0>)
 800d258:	4013      	ands	r3, r2
 800d25a:	8879      	ldrh	r1, [r7, #2]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	6812      	ldr	r2, [r2, #0]
 800d260:	430b      	orrs	r3, r1
 800d262:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f042 0201 	orr.w	r2, r2, #1
 800d272:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d27c:	d107      	bne.n	800d28e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d28c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	68db      	ldr	r3, [r3, #12]
 800d292:	2b0f      	cmp	r3, #15
 800d294:	f240 80a2 	bls.w	800d3dc <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800d298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29a:	089b      	lsrs	r3, r3, #2
 800d29c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d29e:	e094      	b.n	800d3ca <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	695b      	ldr	r3, [r3, #20]
 800d2a6:	f003 0302 	and.w	r3, r3, #2
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d120      	bne.n	800d2f0 <HAL_SPI_TransmitReceive+0x194>
 800d2ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d01d      	beq.n	800d2f0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d2b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d2b6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ba:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d217      	bcs.n	800d2f0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6812      	ldr	r2, [r2, #0]
 800d2ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d2d0:	1d1a      	adds	r2, r3, #4
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	3b01      	subs	r3, #1
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	695b      	ldr	r3, [r3, #20]
 800d2f6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d2f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d065      	beq.n	800d3ca <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	695b      	ldr	r3, [r3, #20]
 800d304:	f003 0301 	and.w	r3, r3, #1
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d118      	bne.n	800d33e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d314:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d316:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d31c:	1d1a      	adds	r2, r3, #4
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d328:	b29b      	uxth	r3, r3
 800d32a:	3b01      	subs	r3, #1
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d33a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d33c:	e045      	b.n	800d3ca <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d33e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d340:	8bfb      	ldrh	r3, [r7, #30]
 800d342:	429a      	cmp	r2, r3
 800d344:	d21d      	bcs.n	800d382 <HAL_SPI_TransmitReceive+0x226>
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d018      	beq.n	800d382 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d358:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d35a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d360:	1d1a      	adds	r2, r3, #4
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	3b01      	subs	r3, #1
 800d370:	b29a      	uxth	r2, r3
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d37e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d380:	e023      	b.n	800d3ca <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d382:	f7f8 fc79 	bl	8005c78 <HAL_GetTick>
 800d386:	4602      	mov	r2, r0
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d38e:	429a      	cmp	r2, r3
 800d390:	d803      	bhi.n	800d39a <HAL_SPI_TransmitReceive+0x23e>
 800d392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d398:	d102      	bne.n	800d3a0 <HAL_SPI_TransmitReceive+0x244>
 800d39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d114      	bne.n	800d3ca <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f000 fa15 	bl	800d7d0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d3ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d3c6:	2303      	movs	r3, #3
 800d3c8:	e1fd      	b.n	800d7c6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d3ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f47f af67 	bne.w	800d2a0 <HAL_SPI_TransmitReceive+0x144>
 800d3d2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f47f af63 	bne.w	800d2a0 <HAL_SPI_TransmitReceive+0x144>
 800d3da:	e1ce      	b.n	800d77a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	2b07      	cmp	r3, #7
 800d3e2:	f240 81c2 	bls.w	800d76a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800d3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e8:	085b      	lsrs	r3, r3, #1
 800d3ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d3ec:	e0c9      	b.n	800d582 <HAL_SPI_TransmitReceive+0x426>
 800d3ee:	bf00      	nop
 800d3f0:	40013000 	.word	0x40013000
 800d3f4:	40003800 	.word	0x40003800
 800d3f8:	40003c00 	.word	0x40003c00
 800d3fc:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	695b      	ldr	r3, [r3, #20]
 800d406:	f003 0302 	and.w	r3, r3, #2
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d11f      	bne.n	800d44e <HAL_SPI_TransmitReceive+0x2f2>
 800d40e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d410:	2b00      	cmp	r3, #0
 800d412:	d01c      	beq.n	800d44e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d414:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d416:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d41a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d216      	bcs.n	800d44e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d424:	881a      	ldrh	r2, [r3, #0]
 800d426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d428:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d42e:	1c9a      	adds	r2, r3, #2
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	3b01      	subs	r3, #1
 800d43e:	b29a      	uxth	r2, r3
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d44c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	695b      	ldr	r3, [r3, #20]
 800d454:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d456:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f000 8092 	beq.w	800d582 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	695b      	ldr	r3, [r3, #20]
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d118      	bne.n	800d49e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d470:	6a3a      	ldr	r2, [r7, #32]
 800d472:	8812      	ldrh	r2, [r2, #0]
 800d474:	b292      	uxth	r2, r2
 800d476:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d47c:	1c9a      	adds	r2, r3, #2
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d488:	b29b      	uxth	r3, r3
 800d48a:	3b01      	subs	r3, #1
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d49a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d49c:	e071      	b.n	800d582 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d49e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d4a0:	8bfb      	ldrh	r3, [r7, #30]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d228      	bcs.n	800d4f8 <HAL_SPI_TransmitReceive+0x39c>
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d023      	beq.n	800d4f8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4b4:	6a3a      	ldr	r2, [r7, #32]
 800d4b6:	8812      	ldrh	r2, [r2, #0]
 800d4b8:	b292      	uxth	r2, r2
 800d4ba:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4c0:	1c9a      	adds	r2, r3, #2
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4ca:	6a3a      	ldr	r2, [r7, #32]
 800d4cc:	8812      	ldrh	r2, [r2, #0]
 800d4ce:	b292      	uxth	r2, r2
 800d4d0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4d6:	1c9a      	adds	r2, r3, #2
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	3b02      	subs	r3, #2
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d4f4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d4f6:	e044      	b.n	800d582 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800d4f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d11d      	bne.n	800d53a <HAL_SPI_TransmitReceive+0x3de>
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d504:	2b00      	cmp	r3, #0
 800d506:	d018      	beq.n	800d53a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d50c:	6a3a      	ldr	r2, [r7, #32]
 800d50e:	8812      	ldrh	r2, [r2, #0]
 800d510:	b292      	uxth	r2, r2
 800d512:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d518:	1c9a      	adds	r2, r3, #2
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d524:	b29b      	uxth	r3, r3
 800d526:	3b01      	subs	r3, #1
 800d528:	b29a      	uxth	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d536:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d538:	e023      	b.n	800d582 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d53a:	f7f8 fb9d 	bl	8005c78 <HAL_GetTick>
 800d53e:	4602      	mov	r2, r0
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d546:	429a      	cmp	r2, r3
 800d548:	d803      	bhi.n	800d552 <HAL_SPI_TransmitReceive+0x3f6>
 800d54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d550:	d102      	bne.n	800d558 <HAL_SPI_TransmitReceive+0x3fc>
 800d552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d554:	2b00      	cmp	r3, #0
 800d556:	d114      	bne.n	800d582 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d558:	68f8      	ldr	r0, [r7, #12]
 800d55a:	f000 f939 	bl	800d7d0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d564:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2200      	movs	r2, #0
 800d57a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d57e:	2303      	movs	r3, #3
 800d580:	e121      	b.n	800d7c6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d582:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d584:	2b00      	cmp	r3, #0
 800d586:	f47f af3b 	bne.w	800d400 <HAL_SPI_TransmitReceive+0x2a4>
 800d58a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f47f af37 	bne.w	800d400 <HAL_SPI_TransmitReceive+0x2a4>
 800d592:	e0f2      	b.n	800d77a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	695b      	ldr	r3, [r3, #20]
 800d59a:	f003 0302 	and.w	r3, r3, #2
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	d121      	bne.n	800d5e6 <HAL_SPI_TransmitReceive+0x48a>
 800d5a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d01e      	beq.n	800d5e6 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800d5a8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d5aa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800d5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5ae:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d218      	bcs.n	800d5e6 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	3320      	adds	r3, #32
 800d5be:	7812      	ldrb	r2, [r2, #0]
 800d5c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d5c6:	1c5a      	adds	r2, r3, #1
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	3b01      	subs	r3, #1
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d5e4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	695b      	ldr	r3, [r3, #20]
 800d5ec:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800d5ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f000 80ba 	beq.w	800d76a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	695b      	ldr	r3, [r3, #20]
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	2b01      	cmp	r3, #1
 800d602:	d11b      	bne.n	800d63c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d610:	7812      	ldrb	r2, [r2, #0]
 800d612:	b2d2      	uxtb	r2, r2
 800d614:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d61a:	1c5a      	adds	r2, r3, #1
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d626:	b29b      	uxth	r3, r3
 800d628:	3b01      	subs	r3, #1
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d638:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d63a:	e096      	b.n	800d76a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800d63c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d63e:	8bfb      	ldrh	r3, [r7, #30]
 800d640:	429a      	cmp	r2, r3
 800d642:	d24a      	bcs.n	800d6da <HAL_SPI_TransmitReceive+0x57e>
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d045      	beq.n	800d6da <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d65a:	7812      	ldrb	r2, [r2, #0]
 800d65c:	b2d2      	uxtb	r2, r2
 800d65e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d664:	1c5a      	adds	r2, r3, #1
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d676:	7812      	ldrb	r2, [r2, #0]
 800d678:	b2d2      	uxtb	r2, r2
 800d67a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d680:	1c5a      	adds	r2, r3, #1
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d692:	7812      	ldrb	r2, [r2, #0]
 800d694:	b2d2      	uxtb	r2, r2
 800d696:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d69c:	1c5a      	adds	r2, r3, #1
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6ae:	7812      	ldrb	r2, [r2, #0]
 800d6b0:	b2d2      	uxtb	r2, r2
 800d6b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6b8:	1c5a      	adds	r2, r3, #1
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	3b04      	subs	r3, #4
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d6d6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d6d8:	e047      	b.n	800d76a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800d6da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d6dc:	2b03      	cmp	r3, #3
 800d6de:	d820      	bhi.n	800d722 <HAL_SPI_TransmitReceive+0x5c6>
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d01b      	beq.n	800d722 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6f6:	7812      	ldrb	r2, [r2, #0]
 800d6f8:	b2d2      	uxtb	r2, r2
 800d6fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	3b01      	subs	r3, #1
 800d710:	b29a      	uxth	r2, r3
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d71e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d720:	e023      	b.n	800d76a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d722:	f7f8 faa9 	bl	8005c78 <HAL_GetTick>
 800d726:	4602      	mov	r2, r0
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	1ad3      	subs	r3, r2, r3
 800d72c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d72e:	429a      	cmp	r2, r3
 800d730:	d803      	bhi.n	800d73a <HAL_SPI_TransmitReceive+0x5de>
 800d732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d738:	d102      	bne.n	800d740 <HAL_SPI_TransmitReceive+0x5e4>
 800d73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d114      	bne.n	800d76a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f000 f845 	bl	800d7d0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d74c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2201      	movs	r2, #1
 800d75a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	2200      	movs	r2, #0
 800d762:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800d766:	2303      	movs	r3, #3
 800d768:	e02d      	b.n	800d7c6 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d76a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f47f af11 	bne.w	800d594 <HAL_SPI_TransmitReceive+0x438>
 800d772:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d774:	2b00      	cmp	r3, #0
 800d776:	f47f af0d 	bne.w	800d594 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d780:	2200      	movs	r2, #0
 800d782:	2108      	movs	r1, #8
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	f000 f8c3 	bl	800d910 <SPI_WaitOnFlagUntilTimeout>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d007      	beq.n	800d7a0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d796:	f043 0220 	orr.w	r2, r3, #32
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f000 f815 	bl	800d7d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d001      	beq.n	800d7c4 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e000      	b.n	800d7c6 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800d7c4:	2300      	movs	r3, #0
  }
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3730      	adds	r7, #48	@ 0x30
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop

0800d7d0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	695b      	ldr	r3, [r3, #20]
 800d7de:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	699a      	ldr	r2, [r3, #24]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f042 0208 	orr.w	r2, r2, #8
 800d7ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	699a      	ldr	r2, [r3, #24]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f042 0210 	orr.w	r2, r2, #16
 800d7fe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f022 0201 	bic.w	r2, r2, #1
 800d80e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6919      	ldr	r1, [r3, #16]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	4b3c      	ldr	r3, [pc, #240]	@ (800d90c <SPI_CloseTransfer+0x13c>)
 800d81c:	400b      	ands	r3, r1
 800d81e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	689a      	ldr	r2, [r3, #8]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800d82e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d836:	b2db      	uxtb	r3, r3
 800d838:	2b04      	cmp	r3, #4
 800d83a:	d014      	beq.n	800d866 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f003 0320 	and.w	r3, r3, #32
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00f      	beq.n	800d866 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d84c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	699a      	ldr	r2, [r3, #24]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f042 0220 	orr.w	r2, r2, #32
 800d864:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d014      	beq.n	800d89c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00f      	beq.n	800d89c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d882:	f043 0204 	orr.w	r2, r3, #4
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	699a      	ldr	r2, [r3, #24]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d89a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00f      	beq.n	800d8c6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d8ac:	f043 0201 	orr.w	r2, r3, #1
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	699a      	ldr	r2, [r3, #24]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d8c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00f      	beq.n	800d8f0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d8d6:	f043 0208 	orr.w	r2, r3, #8
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	699a      	ldr	r2, [r3, #24]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d8ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800d900:	bf00      	nop
 800d902:	3714      	adds	r7, #20
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	fffffc90 	.word	0xfffffc90

0800d910 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	60f8      	str	r0, [r7, #12]
 800d918:	60b9      	str	r1, [r7, #8]
 800d91a:	603b      	str	r3, [r7, #0]
 800d91c:	4613      	mov	r3, r2
 800d91e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d920:	e010      	b.n	800d944 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d922:	f7f8 f9a9 	bl	8005c78 <HAL_GetTick>
 800d926:	4602      	mov	r2, r0
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	1ad3      	subs	r3, r2, r3
 800d92c:	683a      	ldr	r2, [r7, #0]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d803      	bhi.n	800d93a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d938:	d102      	bne.n	800d940 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d101      	bne.n	800d944 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d940:	2303      	movs	r3, #3
 800d942:	e00f      	b.n	800d964 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	695a      	ldr	r2, [r3, #20]
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	4013      	ands	r3, r2
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	429a      	cmp	r2, r3
 800d952:	bf0c      	ite	eq
 800d954:	2301      	moveq	r3, #1
 800d956:	2300      	movne	r3, #0
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	461a      	mov	r2, r3
 800d95c:	79fb      	ldrb	r3, [r7, #7]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d0df      	beq.n	800d922 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d978:	095b      	lsrs	r3, r3, #5
 800d97a:	3301      	adds	r3, #1
 800d97c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	3301      	adds	r3, #1
 800d984:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	3307      	adds	r3, #7
 800d98a:	08db      	lsrs	r3, r3, #3
 800d98c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	fb02 f303 	mul.w	r3, r2, r3
}
 800d996:	4618      	mov	r0, r3
 800d998:	3714      	adds	r7, #20
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b082      	sub	sp, #8
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e049      	b.n	800da48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d106      	bne.n	800d9ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7f5 fb4f 	bl	800306c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	3304      	adds	r3, #4
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4610      	mov	r0, r2
 800d9e2:	f000 fc57 	bl	800e294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2201      	movs	r2, #1
 800da02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2201      	movs	r2, #1
 800da1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2201      	movs	r2, #1
 800da22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2201      	movs	r2, #1
 800da2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2201      	movs	r2, #1
 800da32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2201      	movs	r2, #1
 800da3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800da46:	2300      	movs	r3, #0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3708      	adds	r7, #8
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2b01      	cmp	r3, #1
 800da62:	d001      	beq.n	800da68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800da64:	2301      	movs	r3, #1
 800da66:	e054      	b.n	800db12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2202      	movs	r2, #2
 800da6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	68da      	ldr	r2, [r3, #12]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f042 0201 	orr.w	r2, r2, #1
 800da7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a26      	ldr	r2, [pc, #152]	@ (800db20 <HAL_TIM_Base_Start_IT+0xd0>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d022      	beq.n	800dad0 <HAL_TIM_Base_Start_IT+0x80>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da92:	d01d      	beq.n	800dad0 <HAL_TIM_Base_Start_IT+0x80>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a22      	ldr	r2, [pc, #136]	@ (800db24 <HAL_TIM_Base_Start_IT+0xd4>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d018      	beq.n	800dad0 <HAL_TIM_Base_Start_IT+0x80>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a21      	ldr	r2, [pc, #132]	@ (800db28 <HAL_TIM_Base_Start_IT+0xd8>)
 800daa4:	4293      	cmp	r3, r2
 800daa6:	d013      	beq.n	800dad0 <HAL_TIM_Base_Start_IT+0x80>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a1f      	ldr	r2, [pc, #124]	@ (800db2c <HAL_TIM_Base_Start_IT+0xdc>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d00e      	beq.n	800dad0 <HAL_TIM_Base_Start_IT+0x80>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a1e      	ldr	r2, [pc, #120]	@ (800db30 <HAL_TIM_Base_Start_IT+0xe0>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d009      	beq.n	800dad0 <HAL_TIM_Base_Start_IT+0x80>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a1c      	ldr	r2, [pc, #112]	@ (800db34 <HAL_TIM_Base_Start_IT+0xe4>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d004      	beq.n	800dad0 <HAL_TIM_Base_Start_IT+0x80>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a1b      	ldr	r2, [pc, #108]	@ (800db38 <HAL_TIM_Base_Start_IT+0xe8>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d115      	bne.n	800dafc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	689a      	ldr	r2, [r3, #8]
 800dad6:	4b19      	ldr	r3, [pc, #100]	@ (800db3c <HAL_TIM_Base_Start_IT+0xec>)
 800dad8:	4013      	ands	r3, r2
 800dada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2b06      	cmp	r3, #6
 800dae0:	d015      	beq.n	800db0e <HAL_TIM_Base_Start_IT+0xbe>
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dae8:	d011      	beq.n	800db0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f042 0201 	orr.w	r2, r2, #1
 800daf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dafa:	e008      	b.n	800db0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f042 0201 	orr.w	r2, r2, #1
 800db0a:	601a      	str	r2, [r3, #0]
 800db0c:	e000      	b.n	800db10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3714      	adds	r7, #20
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	40010000 	.word	0x40010000
 800db24:	40000400 	.word	0x40000400
 800db28:	40000800 	.word	0x40000800
 800db2c:	40000c00 	.word	0x40000c00
 800db30:	40010400 	.word	0x40010400
 800db34:	40001800 	.word	0x40001800
 800db38:	40014000 	.word	0x40014000
 800db3c:	00010007 	.word	0x00010007

0800db40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d101      	bne.n	800db52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	e049      	b.n	800dbe6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d106      	bne.n	800db6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f7f5 fa32 	bl	8002fd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2202      	movs	r2, #2
 800db70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3304      	adds	r3, #4
 800db7c:	4619      	mov	r1, r3
 800db7e:	4610      	mov	r0, r2
 800db80:	f000 fb88 	bl	800e294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2201      	movs	r2, #1
 800db98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2201      	movs	r2, #1
 800dba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2201      	movs	r2, #1
 800dbe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dbe4:	2300      	movs	r3, #0
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3708      	adds	r7, #8
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
	...

0800dbf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d109      	bne.n	800dc14 <HAL_TIM_PWM_Start+0x24>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	bf14      	ite	ne
 800dc0c:	2301      	movne	r3, #1
 800dc0e:	2300      	moveq	r3, #0
 800dc10:	b2db      	uxtb	r3, r3
 800dc12:	e03c      	b.n	800dc8e <HAL_TIM_PWM_Start+0x9e>
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	2b04      	cmp	r3, #4
 800dc18:	d109      	bne.n	800dc2e <HAL_TIM_PWM_Start+0x3e>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	bf14      	ite	ne
 800dc26:	2301      	movne	r3, #1
 800dc28:	2300      	moveq	r3, #0
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	e02f      	b.n	800dc8e <HAL_TIM_PWM_Start+0x9e>
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	2b08      	cmp	r3, #8
 800dc32:	d109      	bne.n	800dc48 <HAL_TIM_PWM_Start+0x58>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dc3a:	b2db      	uxtb	r3, r3
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	bf14      	ite	ne
 800dc40:	2301      	movne	r3, #1
 800dc42:	2300      	moveq	r3, #0
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	e022      	b.n	800dc8e <HAL_TIM_PWM_Start+0x9e>
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	2b0c      	cmp	r3, #12
 800dc4c:	d109      	bne.n	800dc62 <HAL_TIM_PWM_Start+0x72>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	bf14      	ite	ne
 800dc5a:	2301      	movne	r3, #1
 800dc5c:	2300      	moveq	r3, #0
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	e015      	b.n	800dc8e <HAL_TIM_PWM_Start+0x9e>
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	2b10      	cmp	r3, #16
 800dc66:	d109      	bne.n	800dc7c <HAL_TIM_PWM_Start+0x8c>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	bf14      	ite	ne
 800dc74:	2301      	movne	r3, #1
 800dc76:	2300      	moveq	r3, #0
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	e008      	b.n	800dc8e <HAL_TIM_PWM_Start+0x9e>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	bf14      	ite	ne
 800dc88:	2301      	movne	r3, #1
 800dc8a:	2300      	moveq	r3, #0
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e0a1      	b.n	800ddda <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d104      	bne.n	800dca6 <HAL_TIM_PWM_Start+0xb6>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2202      	movs	r2, #2
 800dca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dca4:	e023      	b.n	800dcee <HAL_TIM_PWM_Start+0xfe>
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	2b04      	cmp	r3, #4
 800dcaa:	d104      	bne.n	800dcb6 <HAL_TIM_PWM_Start+0xc6>
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2202      	movs	r2, #2
 800dcb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dcb4:	e01b      	b.n	800dcee <HAL_TIM_PWM_Start+0xfe>
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2b08      	cmp	r3, #8
 800dcba:	d104      	bne.n	800dcc6 <HAL_TIM_PWM_Start+0xd6>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2202      	movs	r2, #2
 800dcc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dcc4:	e013      	b.n	800dcee <HAL_TIM_PWM_Start+0xfe>
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	2b0c      	cmp	r3, #12
 800dcca:	d104      	bne.n	800dcd6 <HAL_TIM_PWM_Start+0xe6>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2202      	movs	r2, #2
 800dcd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dcd4:	e00b      	b.n	800dcee <HAL_TIM_PWM_Start+0xfe>
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	2b10      	cmp	r3, #16
 800dcda:	d104      	bne.n	800dce6 <HAL_TIM_PWM_Start+0xf6>
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2202      	movs	r2, #2
 800dce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dce4:	e003      	b.n	800dcee <HAL_TIM_PWM_Start+0xfe>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2202      	movs	r2, #2
 800dcea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	6839      	ldr	r1, [r7, #0]
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f000 fe48 	bl	800e98c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a38      	ldr	r2, [pc, #224]	@ (800dde4 <HAL_TIM_PWM_Start+0x1f4>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d013      	beq.n	800dd2e <HAL_TIM_PWM_Start+0x13e>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a37      	ldr	r2, [pc, #220]	@ (800dde8 <HAL_TIM_PWM_Start+0x1f8>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d00e      	beq.n	800dd2e <HAL_TIM_PWM_Start+0x13e>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a35      	ldr	r2, [pc, #212]	@ (800ddec <HAL_TIM_PWM_Start+0x1fc>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d009      	beq.n	800dd2e <HAL_TIM_PWM_Start+0x13e>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	4a34      	ldr	r2, [pc, #208]	@ (800ddf0 <HAL_TIM_PWM_Start+0x200>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d004      	beq.n	800dd2e <HAL_TIM_PWM_Start+0x13e>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a32      	ldr	r2, [pc, #200]	@ (800ddf4 <HAL_TIM_PWM_Start+0x204>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d101      	bne.n	800dd32 <HAL_TIM_PWM_Start+0x142>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e000      	b.n	800dd34 <HAL_TIM_PWM_Start+0x144>
 800dd32:	2300      	movs	r3, #0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d007      	beq.n	800dd48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dd46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a25      	ldr	r2, [pc, #148]	@ (800dde4 <HAL_TIM_PWM_Start+0x1f4>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d022      	beq.n	800dd98 <HAL_TIM_PWM_Start+0x1a8>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd5a:	d01d      	beq.n	800dd98 <HAL_TIM_PWM_Start+0x1a8>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a25      	ldr	r2, [pc, #148]	@ (800ddf8 <HAL_TIM_PWM_Start+0x208>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d018      	beq.n	800dd98 <HAL_TIM_PWM_Start+0x1a8>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a24      	ldr	r2, [pc, #144]	@ (800ddfc <HAL_TIM_PWM_Start+0x20c>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d013      	beq.n	800dd98 <HAL_TIM_PWM_Start+0x1a8>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a22      	ldr	r2, [pc, #136]	@ (800de00 <HAL_TIM_PWM_Start+0x210>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d00e      	beq.n	800dd98 <HAL_TIM_PWM_Start+0x1a8>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4a1a      	ldr	r2, [pc, #104]	@ (800dde8 <HAL_TIM_PWM_Start+0x1f8>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d009      	beq.n	800dd98 <HAL_TIM_PWM_Start+0x1a8>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a1e      	ldr	r2, [pc, #120]	@ (800de04 <HAL_TIM_PWM_Start+0x214>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d004      	beq.n	800dd98 <HAL_TIM_PWM_Start+0x1a8>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a16      	ldr	r2, [pc, #88]	@ (800ddec <HAL_TIM_PWM_Start+0x1fc>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d115      	bne.n	800ddc4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	689a      	ldr	r2, [r3, #8]
 800dd9e:	4b1a      	ldr	r3, [pc, #104]	@ (800de08 <HAL_TIM_PWM_Start+0x218>)
 800dda0:	4013      	ands	r3, r2
 800dda2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2b06      	cmp	r3, #6
 800dda8:	d015      	beq.n	800ddd6 <HAL_TIM_PWM_Start+0x1e6>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddb0:	d011      	beq.n	800ddd6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f042 0201 	orr.w	r2, r2, #1
 800ddc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddc2:	e008      	b.n	800ddd6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f042 0201 	orr.w	r2, r2, #1
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	e000      	b.n	800ddd8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	40010000 	.word	0x40010000
 800dde8:	40010400 	.word	0x40010400
 800ddec:	40014000 	.word	0x40014000
 800ddf0:	40014400 	.word	0x40014400
 800ddf4:	40014800 	.word	0x40014800
 800ddf8:	40000400 	.word	0x40000400
 800ddfc:	40000800 	.word	0x40000800
 800de00:	40000c00 	.word	0x40000c00
 800de04:	40001800 	.word	0x40001800
 800de08:	00010007 	.word	0x00010007

0800de0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	691b      	ldr	r3, [r3, #16]
 800de22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	f003 0302 	and.w	r3, r3, #2
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d020      	beq.n	800de70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	f003 0302 	and.w	r3, r3, #2
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01b      	beq.n	800de70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f06f 0202 	mvn.w	r2, #2
 800de40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2201      	movs	r2, #1
 800de46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	699b      	ldr	r3, [r3, #24]
 800de4e:	f003 0303 	and.w	r3, r3, #3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d003      	beq.n	800de5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 f9fe 	bl	800e258 <HAL_TIM_IC_CaptureCallback>
 800de5c:	e005      	b.n	800de6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 f9f0 	bl	800e244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 fa01 	bl	800e26c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2200      	movs	r2, #0
 800de6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	f003 0304 	and.w	r3, r3, #4
 800de76:	2b00      	cmp	r3, #0
 800de78:	d020      	beq.n	800debc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f003 0304 	and.w	r3, r3, #4
 800de80:	2b00      	cmp	r3, #0
 800de82:	d01b      	beq.n	800debc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f06f 0204 	mvn.w	r2, #4
 800de8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2202      	movs	r2, #2
 800de92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	699b      	ldr	r3, [r3, #24]
 800de9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d003      	beq.n	800deaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 f9d8 	bl	800e258 <HAL_TIM_IC_CaptureCallback>
 800dea8:	e005      	b.n	800deb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f9ca 	bl	800e244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 f9db 	bl	800e26c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	f003 0308 	and.w	r3, r3, #8
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d020      	beq.n	800df08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f003 0308 	and.w	r3, r3, #8
 800decc:	2b00      	cmp	r3, #0
 800dece:	d01b      	beq.n	800df08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f06f 0208 	mvn.w	r2, #8
 800ded8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2204      	movs	r2, #4
 800dede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	69db      	ldr	r3, [r3, #28]
 800dee6:	f003 0303 	and.w	r3, r3, #3
 800deea:	2b00      	cmp	r3, #0
 800deec:	d003      	beq.n	800def6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 f9b2 	bl	800e258 <HAL_TIM_IC_CaptureCallback>
 800def4:	e005      	b.n	800df02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f000 f9a4 	bl	800e244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 f9b5 	bl	800e26c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	f003 0310 	and.w	r3, r3, #16
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d020      	beq.n	800df54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f003 0310 	and.w	r3, r3, #16
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d01b      	beq.n	800df54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f06f 0210 	mvn.w	r2, #16
 800df24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2208      	movs	r2, #8
 800df2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	69db      	ldr	r3, [r3, #28]
 800df32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800df36:	2b00      	cmp	r3, #0
 800df38:	d003      	beq.n	800df42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 f98c 	bl	800e258 <HAL_TIM_IC_CaptureCallback>
 800df40:	e005      	b.n	800df4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f97e 	bl	800e244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f98f 	bl	800e26c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	f003 0301 	and.w	r3, r3, #1
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00c      	beq.n	800df78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f003 0301 	and.w	r3, r3, #1
 800df64:	2b00      	cmp	r3, #0
 800df66:	d007      	beq.n	800df78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f06f 0201 	mvn.w	r2, #1
 800df70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f7f4 fb02 	bl	800257c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d104      	bne.n	800df8c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00c      	beq.n	800dfa6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df92:	2b00      	cmp	r3, #0
 800df94:	d007      	beq.n	800dfa6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800df9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 fdb1 	bl	800eb08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00c      	beq.n	800dfca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d007      	beq.n	800dfca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dfc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 fda9 	bl	800eb1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00c      	beq.n	800dfee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d007      	beq.n	800dfee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dfe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 f949 	bl	800e280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	f003 0320 	and.w	r3, r3, #32
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00c      	beq.n	800e012 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f003 0320 	and.w	r3, r3, #32
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d007      	beq.n	800e012 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f06f 0220 	mvn.w	r2, #32
 800e00a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 fd71 	bl	800eaf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e012:	bf00      	nop
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
	...

0800e01c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e028:	2300      	movs	r3, #0
 800e02a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e032:	2b01      	cmp	r3, #1
 800e034:	d101      	bne.n	800e03a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e036:	2302      	movs	r3, #2
 800e038:	e0ff      	b.n	800e23a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2201      	movs	r2, #1
 800e03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2b14      	cmp	r3, #20
 800e046:	f200 80f0 	bhi.w	800e22a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e04a:	a201      	add	r2, pc, #4	@ (adr r2, 800e050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e050:	0800e0a5 	.word	0x0800e0a5
 800e054:	0800e22b 	.word	0x0800e22b
 800e058:	0800e22b 	.word	0x0800e22b
 800e05c:	0800e22b 	.word	0x0800e22b
 800e060:	0800e0e5 	.word	0x0800e0e5
 800e064:	0800e22b 	.word	0x0800e22b
 800e068:	0800e22b 	.word	0x0800e22b
 800e06c:	0800e22b 	.word	0x0800e22b
 800e070:	0800e127 	.word	0x0800e127
 800e074:	0800e22b 	.word	0x0800e22b
 800e078:	0800e22b 	.word	0x0800e22b
 800e07c:	0800e22b 	.word	0x0800e22b
 800e080:	0800e167 	.word	0x0800e167
 800e084:	0800e22b 	.word	0x0800e22b
 800e088:	0800e22b 	.word	0x0800e22b
 800e08c:	0800e22b 	.word	0x0800e22b
 800e090:	0800e1a9 	.word	0x0800e1a9
 800e094:	0800e22b 	.word	0x0800e22b
 800e098:	0800e22b 	.word	0x0800e22b
 800e09c:	0800e22b 	.word	0x0800e22b
 800e0a0:	0800e1e9 	.word	0x0800e1e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68b9      	ldr	r1, [r7, #8]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 f998 	bl	800e3e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	699a      	ldr	r2, [r3, #24]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f042 0208 	orr.w	r2, r2, #8
 800e0be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	699a      	ldr	r2, [r3, #24]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f022 0204 	bic.w	r2, r2, #4
 800e0ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	6999      	ldr	r1, [r3, #24]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	691a      	ldr	r2, [r3, #16]
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	430a      	orrs	r2, r1
 800e0e0:	619a      	str	r2, [r3, #24]
      break;
 800e0e2:	e0a5      	b.n	800e230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	68b9      	ldr	r1, [r7, #8]
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 fa08 	bl	800e500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	699a      	ldr	r2, [r3, #24]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e0fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	699a      	ldr	r2, [r3, #24]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e10e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6999      	ldr	r1, [r3, #24]
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	691b      	ldr	r3, [r3, #16]
 800e11a:	021a      	lsls	r2, r3, #8
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	430a      	orrs	r2, r1
 800e122:	619a      	str	r2, [r3, #24]
      break;
 800e124:	e084      	b.n	800e230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	68b9      	ldr	r1, [r7, #8]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f000 fa71 	bl	800e614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	69da      	ldr	r2, [r3, #28]
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f042 0208 	orr.w	r2, r2, #8
 800e140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	69da      	ldr	r2, [r3, #28]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f022 0204 	bic.w	r2, r2, #4
 800e150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	69d9      	ldr	r1, [r3, #28]
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	691a      	ldr	r2, [r3, #16]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	430a      	orrs	r2, r1
 800e162:	61da      	str	r2, [r3, #28]
      break;
 800e164:	e064      	b.n	800e230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	68b9      	ldr	r1, [r7, #8]
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 fad9 	bl	800e724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	69da      	ldr	r2, [r3, #28]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	69da      	ldr	r2, [r3, #28]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	69d9      	ldr	r1, [r3, #28]
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	691b      	ldr	r3, [r3, #16]
 800e19c:	021a      	lsls	r2, r3, #8
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	430a      	orrs	r2, r1
 800e1a4:	61da      	str	r2, [r3, #28]
      break;
 800e1a6:	e043      	b.n	800e230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	68b9      	ldr	r1, [r7, #8]
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 fb22 	bl	800e7f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f042 0208 	orr.w	r2, r2, #8
 800e1c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f022 0204 	bic.w	r2, r2, #4
 800e1d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	691a      	ldr	r2, [r3, #16]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	430a      	orrs	r2, r1
 800e1e4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e1e6:	e023      	b.n	800e230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	68b9      	ldr	r1, [r7, #8]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f000 fb66 	bl	800e8c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e202:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e212:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	021a      	lsls	r2, r3, #8
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	430a      	orrs	r2, r1
 800e226:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e228:	e002      	b.n	800e230 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e22a:	2301      	movs	r3, #1
 800e22c:	75fb      	strb	r3, [r7, #23]
      break;
 800e22e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2200      	movs	r2, #0
 800e234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e238:	7dfb      	ldrb	r3, [r7, #23]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3718      	adds	r7, #24
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop

0800e244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e24c:	bf00      	nop
 800e24e:	370c      	adds	r7, #12
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr

0800e258 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e260:	bf00      	nop
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e274:	bf00      	nop
 800e276:	370c      	adds	r7, #12
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e288:	bf00      	nop
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	4a46      	ldr	r2, [pc, #280]	@ (800e3c0 <TIM_Base_SetConfig+0x12c>)
 800e2a8:	4293      	cmp	r3, r2
 800e2aa:	d013      	beq.n	800e2d4 <TIM_Base_SetConfig+0x40>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2b2:	d00f      	beq.n	800e2d4 <TIM_Base_SetConfig+0x40>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4a43      	ldr	r2, [pc, #268]	@ (800e3c4 <TIM_Base_SetConfig+0x130>)
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	d00b      	beq.n	800e2d4 <TIM_Base_SetConfig+0x40>
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	4a42      	ldr	r2, [pc, #264]	@ (800e3c8 <TIM_Base_SetConfig+0x134>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d007      	beq.n	800e2d4 <TIM_Base_SetConfig+0x40>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	4a41      	ldr	r2, [pc, #260]	@ (800e3cc <TIM_Base_SetConfig+0x138>)
 800e2c8:	4293      	cmp	r3, r2
 800e2ca:	d003      	beq.n	800e2d4 <TIM_Base_SetConfig+0x40>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a40      	ldr	r2, [pc, #256]	@ (800e3d0 <TIM_Base_SetConfig+0x13c>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d108      	bne.n	800e2e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	4a35      	ldr	r2, [pc, #212]	@ (800e3c0 <TIM_Base_SetConfig+0x12c>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d01f      	beq.n	800e32e <TIM_Base_SetConfig+0x9a>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2f4:	d01b      	beq.n	800e32e <TIM_Base_SetConfig+0x9a>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	4a32      	ldr	r2, [pc, #200]	@ (800e3c4 <TIM_Base_SetConfig+0x130>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d017      	beq.n	800e32e <TIM_Base_SetConfig+0x9a>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4a31      	ldr	r2, [pc, #196]	@ (800e3c8 <TIM_Base_SetConfig+0x134>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d013      	beq.n	800e32e <TIM_Base_SetConfig+0x9a>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4a30      	ldr	r2, [pc, #192]	@ (800e3cc <TIM_Base_SetConfig+0x138>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d00f      	beq.n	800e32e <TIM_Base_SetConfig+0x9a>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4a2f      	ldr	r2, [pc, #188]	@ (800e3d0 <TIM_Base_SetConfig+0x13c>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d00b      	beq.n	800e32e <TIM_Base_SetConfig+0x9a>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4a2e      	ldr	r2, [pc, #184]	@ (800e3d4 <TIM_Base_SetConfig+0x140>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d007      	beq.n	800e32e <TIM_Base_SetConfig+0x9a>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	4a2d      	ldr	r2, [pc, #180]	@ (800e3d8 <TIM_Base_SetConfig+0x144>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d003      	beq.n	800e32e <TIM_Base_SetConfig+0x9a>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4a2c      	ldr	r2, [pc, #176]	@ (800e3dc <TIM_Base_SetConfig+0x148>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d108      	bne.n	800e340 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	4313      	orrs	r3, r2
 800e33e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	695b      	ldr	r3, [r3, #20]
 800e34a:	4313      	orrs	r3, r2
 800e34c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	689a      	ldr	r2, [r3, #8]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	4a16      	ldr	r2, [pc, #88]	@ (800e3c0 <TIM_Base_SetConfig+0x12c>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d00f      	beq.n	800e38c <TIM_Base_SetConfig+0xf8>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4a18      	ldr	r2, [pc, #96]	@ (800e3d0 <TIM_Base_SetConfig+0x13c>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d00b      	beq.n	800e38c <TIM_Base_SetConfig+0xf8>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	4a17      	ldr	r2, [pc, #92]	@ (800e3d4 <TIM_Base_SetConfig+0x140>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d007      	beq.n	800e38c <TIM_Base_SetConfig+0xf8>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	4a16      	ldr	r2, [pc, #88]	@ (800e3d8 <TIM_Base_SetConfig+0x144>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d003      	beq.n	800e38c <TIM_Base_SetConfig+0xf8>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	4a15      	ldr	r2, [pc, #84]	@ (800e3dc <TIM_Base_SetConfig+0x148>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d103      	bne.n	800e394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	691a      	ldr	r2, [r3, #16]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2201      	movs	r2, #1
 800e398:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	691b      	ldr	r3, [r3, #16]
 800e39e:	f003 0301 	and.w	r3, r3, #1
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d105      	bne.n	800e3b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	691b      	ldr	r3, [r3, #16]
 800e3aa:	f023 0201 	bic.w	r2, r3, #1
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	611a      	str	r2, [r3, #16]
  }
}
 800e3b2:	bf00      	nop
 800e3b4:	3714      	adds	r7, #20
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	40010000 	.word	0x40010000
 800e3c4:	40000400 	.word	0x40000400
 800e3c8:	40000800 	.word	0x40000800
 800e3cc:	40000c00 	.word	0x40000c00
 800e3d0:	40010400 	.word	0x40010400
 800e3d4:	40014000 	.word	0x40014000
 800e3d8:	40014400 	.word	0x40014400
 800e3dc:	40014800 	.word	0x40014800

0800e3e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b087      	sub	sp, #28
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6a1b      	ldr	r3, [r3, #32]
 800e3ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6a1b      	ldr	r3, [r3, #32]
 800e3f4:	f023 0201 	bic.w	r2, r3, #1
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e408:	68fa      	ldr	r2, [r7, #12]
 800e40a:	4b37      	ldr	r3, [pc, #220]	@ (800e4e8 <TIM_OC1_SetConfig+0x108>)
 800e40c:	4013      	ands	r3, r2
 800e40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f023 0303 	bic.w	r3, r3, #3
 800e416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	68fa      	ldr	r2, [r7, #12]
 800e41e:	4313      	orrs	r3, r2
 800e420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	f023 0302 	bic.w	r3, r3, #2
 800e428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	697a      	ldr	r2, [r7, #20]
 800e430:	4313      	orrs	r3, r2
 800e432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	4a2d      	ldr	r2, [pc, #180]	@ (800e4ec <TIM_OC1_SetConfig+0x10c>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d00f      	beq.n	800e45c <TIM_OC1_SetConfig+0x7c>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4a2c      	ldr	r2, [pc, #176]	@ (800e4f0 <TIM_OC1_SetConfig+0x110>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d00b      	beq.n	800e45c <TIM_OC1_SetConfig+0x7c>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	4a2b      	ldr	r2, [pc, #172]	@ (800e4f4 <TIM_OC1_SetConfig+0x114>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d007      	beq.n	800e45c <TIM_OC1_SetConfig+0x7c>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	4a2a      	ldr	r2, [pc, #168]	@ (800e4f8 <TIM_OC1_SetConfig+0x118>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d003      	beq.n	800e45c <TIM_OC1_SetConfig+0x7c>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	4a29      	ldr	r2, [pc, #164]	@ (800e4fc <TIM_OC1_SetConfig+0x11c>)
 800e458:	4293      	cmp	r3, r2
 800e45a:	d10c      	bne.n	800e476 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	f023 0308 	bic.w	r3, r3, #8
 800e462:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	697a      	ldr	r2, [r7, #20]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	f023 0304 	bic.w	r3, r3, #4
 800e474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	4a1c      	ldr	r2, [pc, #112]	@ (800e4ec <TIM_OC1_SetConfig+0x10c>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d00f      	beq.n	800e49e <TIM_OC1_SetConfig+0xbe>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	4a1b      	ldr	r2, [pc, #108]	@ (800e4f0 <TIM_OC1_SetConfig+0x110>)
 800e482:	4293      	cmp	r3, r2
 800e484:	d00b      	beq.n	800e49e <TIM_OC1_SetConfig+0xbe>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	4a1a      	ldr	r2, [pc, #104]	@ (800e4f4 <TIM_OC1_SetConfig+0x114>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d007      	beq.n	800e49e <TIM_OC1_SetConfig+0xbe>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	4a19      	ldr	r2, [pc, #100]	@ (800e4f8 <TIM_OC1_SetConfig+0x118>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d003      	beq.n	800e49e <TIM_OC1_SetConfig+0xbe>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	4a18      	ldr	r2, [pc, #96]	@ (800e4fc <TIM_OC1_SetConfig+0x11c>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d111      	bne.n	800e4c2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e4ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	695b      	ldr	r3, [r3, #20]
 800e4b2:	693a      	ldr	r2, [r7, #16]
 800e4b4:	4313      	orrs	r3, r2
 800e4b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	693a      	ldr	r2, [r7, #16]
 800e4be:	4313      	orrs	r3, r2
 800e4c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	693a      	ldr	r2, [r7, #16]
 800e4c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	685a      	ldr	r2, [r3, #4]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	697a      	ldr	r2, [r7, #20]
 800e4da:	621a      	str	r2, [r3, #32]
}
 800e4dc:	bf00      	nop
 800e4de:	371c      	adds	r7, #28
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr
 800e4e8:	fffeff8f 	.word	0xfffeff8f
 800e4ec:	40010000 	.word	0x40010000
 800e4f0:	40010400 	.word	0x40010400
 800e4f4:	40014000 	.word	0x40014000
 800e4f8:	40014400 	.word	0x40014400
 800e4fc:	40014800 	.word	0x40014800

0800e500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e500:	b480      	push	{r7}
 800e502:	b087      	sub	sp, #28
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6a1b      	ldr	r3, [r3, #32]
 800e50e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6a1b      	ldr	r3, [r3, #32]
 800e514:	f023 0210 	bic.w	r2, r3, #16
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	699b      	ldr	r3, [r3, #24]
 800e526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	4b34      	ldr	r3, [pc, #208]	@ (800e5fc <TIM_OC2_SetConfig+0xfc>)
 800e52c:	4013      	ands	r3, r2
 800e52e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	021b      	lsls	r3, r3, #8
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	4313      	orrs	r3, r2
 800e542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	f023 0320 	bic.w	r3, r3, #32
 800e54a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	689b      	ldr	r3, [r3, #8]
 800e550:	011b      	lsls	r3, r3, #4
 800e552:	697a      	ldr	r2, [r7, #20]
 800e554:	4313      	orrs	r3, r2
 800e556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4a29      	ldr	r2, [pc, #164]	@ (800e600 <TIM_OC2_SetConfig+0x100>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d003      	beq.n	800e568 <TIM_OC2_SetConfig+0x68>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	4a28      	ldr	r2, [pc, #160]	@ (800e604 <TIM_OC2_SetConfig+0x104>)
 800e564:	4293      	cmp	r3, r2
 800e566:	d10d      	bne.n	800e584 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e56e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	011b      	lsls	r3, r3, #4
 800e576:	697a      	ldr	r2, [r7, #20]
 800e578:	4313      	orrs	r3, r2
 800e57a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e582:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4a1e      	ldr	r2, [pc, #120]	@ (800e600 <TIM_OC2_SetConfig+0x100>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d00f      	beq.n	800e5ac <TIM_OC2_SetConfig+0xac>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4a1d      	ldr	r2, [pc, #116]	@ (800e604 <TIM_OC2_SetConfig+0x104>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d00b      	beq.n	800e5ac <TIM_OC2_SetConfig+0xac>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4a1c      	ldr	r2, [pc, #112]	@ (800e608 <TIM_OC2_SetConfig+0x108>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d007      	beq.n	800e5ac <TIM_OC2_SetConfig+0xac>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	4a1b      	ldr	r2, [pc, #108]	@ (800e60c <TIM_OC2_SetConfig+0x10c>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d003      	beq.n	800e5ac <TIM_OC2_SetConfig+0xac>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	4a1a      	ldr	r2, [pc, #104]	@ (800e610 <TIM_OC2_SetConfig+0x110>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d113      	bne.n	800e5d4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e5b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e5ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	695b      	ldr	r3, [r3, #20]
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	693a      	ldr	r2, [r7, #16]
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	699b      	ldr	r3, [r3, #24]
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	693a      	ldr	r2, [r7, #16]
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	693a      	ldr	r2, [r7, #16]
 800e5d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	685a      	ldr	r2, [r3, #4]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	697a      	ldr	r2, [r7, #20]
 800e5ec:	621a      	str	r2, [r3, #32]
}
 800e5ee:	bf00      	nop
 800e5f0:	371c      	adds	r7, #28
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	feff8fff 	.word	0xfeff8fff
 800e600:	40010000 	.word	0x40010000
 800e604:	40010400 	.word	0x40010400
 800e608:	40014000 	.word	0x40014000
 800e60c:	40014400 	.word	0x40014400
 800e610:	40014800 	.word	0x40014800

0800e614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e614:	b480      	push	{r7}
 800e616:	b087      	sub	sp, #28
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	6a1b      	ldr	r3, [r3, #32]
 800e622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6a1b      	ldr	r3, [r3, #32]
 800e628:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	69db      	ldr	r3, [r3, #28]
 800e63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	4b33      	ldr	r3, [pc, #204]	@ (800e70c <TIM_OC3_SetConfig+0xf8>)
 800e640:	4013      	ands	r3, r2
 800e642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f023 0303 	bic.w	r3, r3, #3
 800e64a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	68fa      	ldr	r2, [r7, #12]
 800e652:	4313      	orrs	r3, r2
 800e654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e65c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	689b      	ldr	r3, [r3, #8]
 800e662:	021b      	lsls	r3, r3, #8
 800e664:	697a      	ldr	r2, [r7, #20]
 800e666:	4313      	orrs	r3, r2
 800e668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	4a28      	ldr	r2, [pc, #160]	@ (800e710 <TIM_OC3_SetConfig+0xfc>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d003      	beq.n	800e67a <TIM_OC3_SetConfig+0x66>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4a27      	ldr	r2, [pc, #156]	@ (800e714 <TIM_OC3_SetConfig+0x100>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d10d      	bne.n	800e696 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	68db      	ldr	r3, [r3, #12]
 800e686:	021b      	lsls	r3, r3, #8
 800e688:	697a      	ldr	r2, [r7, #20]
 800e68a:	4313      	orrs	r3, r2
 800e68c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	4a1d      	ldr	r2, [pc, #116]	@ (800e710 <TIM_OC3_SetConfig+0xfc>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d00f      	beq.n	800e6be <TIM_OC3_SetConfig+0xaa>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4a1c      	ldr	r2, [pc, #112]	@ (800e714 <TIM_OC3_SetConfig+0x100>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d00b      	beq.n	800e6be <TIM_OC3_SetConfig+0xaa>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4a1b      	ldr	r2, [pc, #108]	@ (800e718 <TIM_OC3_SetConfig+0x104>)
 800e6aa:	4293      	cmp	r3, r2
 800e6ac:	d007      	beq.n	800e6be <TIM_OC3_SetConfig+0xaa>
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	4a1a      	ldr	r2, [pc, #104]	@ (800e71c <TIM_OC3_SetConfig+0x108>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d003      	beq.n	800e6be <TIM_OC3_SetConfig+0xaa>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	4a19      	ldr	r2, [pc, #100]	@ (800e720 <TIM_OC3_SetConfig+0x10c>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d113      	bne.n	800e6e6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e6cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	695b      	ldr	r3, [r3, #20]
 800e6d2:	011b      	lsls	r3, r3, #4
 800e6d4:	693a      	ldr	r2, [r7, #16]
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	699b      	ldr	r3, [r3, #24]
 800e6de:	011b      	lsls	r3, r3, #4
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	693a      	ldr	r2, [r7, #16]
 800e6ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	68fa      	ldr	r2, [r7, #12]
 800e6f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	697a      	ldr	r2, [r7, #20]
 800e6fe:	621a      	str	r2, [r3, #32]
}
 800e700:	bf00      	nop
 800e702:	371c      	adds	r7, #28
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr
 800e70c:	fffeff8f 	.word	0xfffeff8f
 800e710:	40010000 	.word	0x40010000
 800e714:	40010400 	.word	0x40010400
 800e718:	40014000 	.word	0x40014000
 800e71c:	40014400 	.word	0x40014400
 800e720:	40014800 	.word	0x40014800

0800e724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e724:	b480      	push	{r7}
 800e726:	b087      	sub	sp, #28
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6a1b      	ldr	r3, [r3, #32]
 800e732:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6a1b      	ldr	r3, [r3, #32]
 800e738:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	69db      	ldr	r3, [r3, #28]
 800e74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	4b24      	ldr	r3, [pc, #144]	@ (800e7e0 <TIM_OC4_SetConfig+0xbc>)
 800e750:	4013      	ands	r3, r2
 800e752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e75a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	021b      	lsls	r3, r3, #8
 800e762:	68fa      	ldr	r2, [r7, #12]
 800e764:	4313      	orrs	r3, r2
 800e766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e76e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	031b      	lsls	r3, r3, #12
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	4313      	orrs	r3, r2
 800e77a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a19      	ldr	r2, [pc, #100]	@ (800e7e4 <TIM_OC4_SetConfig+0xc0>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d00f      	beq.n	800e7a4 <TIM_OC4_SetConfig+0x80>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a18      	ldr	r2, [pc, #96]	@ (800e7e8 <TIM_OC4_SetConfig+0xc4>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d00b      	beq.n	800e7a4 <TIM_OC4_SetConfig+0x80>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a17      	ldr	r2, [pc, #92]	@ (800e7ec <TIM_OC4_SetConfig+0xc8>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d007      	beq.n	800e7a4 <TIM_OC4_SetConfig+0x80>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4a16      	ldr	r2, [pc, #88]	@ (800e7f0 <TIM_OC4_SetConfig+0xcc>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d003      	beq.n	800e7a4 <TIM_OC4_SetConfig+0x80>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	4a15      	ldr	r2, [pc, #84]	@ (800e7f4 <TIM_OC4_SetConfig+0xd0>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d109      	bne.n	800e7b8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e7aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	695b      	ldr	r3, [r3, #20]
 800e7b0:	019b      	lsls	r3, r3, #6
 800e7b2:	697a      	ldr	r2, [r7, #20]
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	697a      	ldr	r2, [r7, #20]
 800e7bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	685a      	ldr	r2, [r3, #4]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	693a      	ldr	r2, [r7, #16]
 800e7d0:	621a      	str	r2, [r3, #32]
}
 800e7d2:	bf00      	nop
 800e7d4:	371c      	adds	r7, #28
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop
 800e7e0:	feff8fff 	.word	0xfeff8fff
 800e7e4:	40010000 	.word	0x40010000
 800e7e8:	40010400 	.word	0x40010400
 800e7ec:	40014000 	.word	0x40014000
 800e7f0:	40014400 	.word	0x40014400
 800e7f4:	40014800 	.word	0x40014800

0800e7f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b087      	sub	sp, #28
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6a1b      	ldr	r3, [r3, #32]
 800e806:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6a1b      	ldr	r3, [r3, #32]
 800e80c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	4b21      	ldr	r3, [pc, #132]	@ (800e8a8 <TIM_OC5_SetConfig+0xb0>)
 800e824:	4013      	ands	r3, r2
 800e826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	4313      	orrs	r3, r2
 800e830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e838:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	041b      	lsls	r3, r3, #16
 800e840:	693a      	ldr	r2, [r7, #16]
 800e842:	4313      	orrs	r3, r2
 800e844:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4a18      	ldr	r2, [pc, #96]	@ (800e8ac <TIM_OC5_SetConfig+0xb4>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d00f      	beq.n	800e86e <TIM_OC5_SetConfig+0x76>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4a17      	ldr	r2, [pc, #92]	@ (800e8b0 <TIM_OC5_SetConfig+0xb8>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d00b      	beq.n	800e86e <TIM_OC5_SetConfig+0x76>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	4a16      	ldr	r2, [pc, #88]	@ (800e8b4 <TIM_OC5_SetConfig+0xbc>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d007      	beq.n	800e86e <TIM_OC5_SetConfig+0x76>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4a15      	ldr	r2, [pc, #84]	@ (800e8b8 <TIM_OC5_SetConfig+0xc0>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d003      	beq.n	800e86e <TIM_OC5_SetConfig+0x76>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	4a14      	ldr	r2, [pc, #80]	@ (800e8bc <TIM_OC5_SetConfig+0xc4>)
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d109      	bne.n	800e882 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e874:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	695b      	ldr	r3, [r3, #20]
 800e87a:	021b      	lsls	r3, r3, #8
 800e87c:	697a      	ldr	r2, [r7, #20]
 800e87e:	4313      	orrs	r3, r2
 800e880:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	697a      	ldr	r2, [r7, #20]
 800e886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	685a      	ldr	r2, [r3, #4]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	693a      	ldr	r2, [r7, #16]
 800e89a:	621a      	str	r2, [r3, #32]
}
 800e89c:	bf00      	nop
 800e89e:	371c      	adds	r7, #28
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr
 800e8a8:	fffeff8f 	.word	0xfffeff8f
 800e8ac:	40010000 	.word	0x40010000
 800e8b0:	40010400 	.word	0x40010400
 800e8b4:	40014000 	.word	0x40014000
 800e8b8:	40014400 	.word	0x40014400
 800e8bc:	40014800 	.word	0x40014800

0800e8c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a1b      	ldr	r3, [r3, #32]
 800e8ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6a1b      	ldr	r3, [r3, #32]
 800e8d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	4b22      	ldr	r3, [pc, #136]	@ (800e974 <TIM_OC6_SetConfig+0xb4>)
 800e8ec:	4013      	ands	r3, r2
 800e8ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	021b      	lsls	r3, r3, #8
 800e8f6:	68fa      	ldr	r2, [r7, #12]
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	051b      	lsls	r3, r3, #20
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	4313      	orrs	r3, r2
 800e90e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a19      	ldr	r2, [pc, #100]	@ (800e978 <TIM_OC6_SetConfig+0xb8>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d00f      	beq.n	800e938 <TIM_OC6_SetConfig+0x78>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a18      	ldr	r2, [pc, #96]	@ (800e97c <TIM_OC6_SetConfig+0xbc>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d00b      	beq.n	800e938 <TIM_OC6_SetConfig+0x78>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a17      	ldr	r2, [pc, #92]	@ (800e980 <TIM_OC6_SetConfig+0xc0>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d007      	beq.n	800e938 <TIM_OC6_SetConfig+0x78>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a16      	ldr	r2, [pc, #88]	@ (800e984 <TIM_OC6_SetConfig+0xc4>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d003      	beq.n	800e938 <TIM_OC6_SetConfig+0x78>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4a15      	ldr	r2, [pc, #84]	@ (800e988 <TIM_OC6_SetConfig+0xc8>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d109      	bne.n	800e94c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e93e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	695b      	ldr	r3, [r3, #20]
 800e944:	029b      	lsls	r3, r3, #10
 800e946:	697a      	ldr	r2, [r7, #20]
 800e948:	4313      	orrs	r3, r2
 800e94a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	697a      	ldr	r2, [r7, #20]
 800e950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	68fa      	ldr	r2, [r7, #12]
 800e956:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	685a      	ldr	r2, [r3, #4]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	693a      	ldr	r2, [r7, #16]
 800e964:	621a      	str	r2, [r3, #32]
}
 800e966:	bf00      	nop
 800e968:	371c      	adds	r7, #28
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	feff8fff 	.word	0xfeff8fff
 800e978:	40010000 	.word	0x40010000
 800e97c:	40010400 	.word	0x40010400
 800e980:	40014000 	.word	0x40014000
 800e984:	40014400 	.word	0x40014400
 800e988:	40014800 	.word	0x40014800

0800e98c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b087      	sub	sp, #28
 800e990:	af00      	add	r7, sp, #0
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	60b9      	str	r1, [r7, #8]
 800e996:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	f003 031f 	and.w	r3, r3, #31
 800e99e:	2201      	movs	r2, #1
 800e9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e9a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6a1a      	ldr	r2, [r3, #32]
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	43db      	mvns	r3, r3
 800e9ae:	401a      	ands	r2, r3
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	6a1a      	ldr	r2, [r3, #32]
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	f003 031f 	and.w	r3, r3, #31
 800e9be:	6879      	ldr	r1, [r7, #4]
 800e9c0:	fa01 f303 	lsl.w	r3, r1, r3
 800e9c4:	431a      	orrs	r2, r3
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	621a      	str	r2, [r3, #32]
}
 800e9ca:	bf00      	nop
 800e9cc:	371c      	adds	r7, #28
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
	...

0800e9d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d101      	bne.n	800e9f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9ec:	2302      	movs	r3, #2
 800e9ee:	e06d      	b.n	800eacc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2202      	movs	r2, #2
 800e9fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a30      	ldr	r2, [pc, #192]	@ (800ead8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d004      	beq.n	800ea24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a2f      	ldr	r2, [pc, #188]	@ (800eadc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d108      	bne.n	800ea36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ea2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	4313      	orrs	r3, r2
 800ea34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	4313      	orrs	r3, r2
 800ea46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68fa      	ldr	r2, [r7, #12]
 800ea4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a20      	ldr	r2, [pc, #128]	@ (800ead8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d022      	beq.n	800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea62:	d01d      	beq.n	800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	4a1d      	ldr	r2, [pc, #116]	@ (800eae0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d018      	beq.n	800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a1c      	ldr	r2, [pc, #112]	@ (800eae4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d013      	beq.n	800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	4a1a      	ldr	r2, [pc, #104]	@ (800eae8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d00e      	beq.n	800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4a15      	ldr	r2, [pc, #84]	@ (800eadc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d009      	beq.n	800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a16      	ldr	r2, [pc, #88]	@ (800eaec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d004      	beq.n	800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a15      	ldr	r2, [pc, #84]	@ (800eaf0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d10c      	bne.n	800eaba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eaa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	68ba      	ldr	r2, [r7, #8]
 800eaae:	4313      	orrs	r3, r2
 800eab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	68ba      	ldr	r2, [r7, #8]
 800eab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2201      	movs	r2, #1
 800eabe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eaca:	2300      	movs	r3, #0
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3714      	adds	r7, #20
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr
 800ead8:	40010000 	.word	0x40010000
 800eadc:	40010400 	.word	0x40010400
 800eae0:	40000400 	.word	0x40000400
 800eae4:	40000800 	.word	0x40000800
 800eae8:	40000c00 	.word	0x40000c00
 800eaec:	40001800 	.word	0x40001800
 800eaf0:	40014000 	.word	0x40014000

0800eaf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eafc:	bf00      	nop
 800eafe:	370c      	adds	r7, #12
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb10:	bf00      	nop
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eb24:	bf00      	nop
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d101      	bne.n	800eb42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e042      	b.n	800ebc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d106      	bne.n	800eb5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7f4 fc89 	bl	800346c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2224      	movs	r2, #36	@ 0x24
 800eb5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f022 0201 	bic.w	r2, r2, #1
 800eb70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d002      	beq.n	800eb80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f001 fe0e 	bl	801079c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f000 ff9f 	bl	800fac4 <UART_SetConfig>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d101      	bne.n	800eb90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e01b      	b.n	800ebc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	685a      	ldr	r2, [r3, #4]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800eb9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	689a      	ldr	r2, [r3, #8]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ebae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f042 0201 	orr.w	r2, r2, #1
 800ebbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f001 fe8d 	bl	80108e0 <UART_CheckIdleState>
 800ebc6:	4603      	mov	r3, r0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b08a      	sub	sp, #40	@ 0x28
 800ebd4:	af02      	add	r7, sp, #8
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	603b      	str	r3, [r7, #0]
 800ebdc:	4613      	mov	r3, r2
 800ebde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ebe6:	2b20      	cmp	r3, #32
 800ebe8:	d17b      	bne.n	800ece2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d002      	beq.n	800ebf6 <HAL_UART_Transmit+0x26>
 800ebf0:	88fb      	ldrh	r3, [r7, #6]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d101      	bne.n	800ebfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	e074      	b.n	800ece4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2221      	movs	r2, #33	@ 0x21
 800ec06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ec0a:	f7f7 f835 	bl	8005c78 <HAL_GetTick>
 800ec0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	88fa      	ldrh	r2, [r7, #6]
 800ec14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	88fa      	ldrh	r2, [r7, #6]
 800ec1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ec28:	d108      	bne.n	800ec3c <HAL_UART_Transmit+0x6c>
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	691b      	ldr	r3, [r3, #16]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d104      	bne.n	800ec3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ec32:	2300      	movs	r3, #0
 800ec34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ec36:	68bb      	ldr	r3, [r7, #8]
 800ec38:	61bb      	str	r3, [r7, #24]
 800ec3a:	e003      	b.n	800ec44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ec40:	2300      	movs	r3, #0
 800ec42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ec44:	e030      	b.n	800eca8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	9300      	str	r3, [sp, #0]
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	2180      	movs	r1, #128	@ 0x80
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f001 feef 	bl	8010a34 <UART_WaitOnFlagUntilTimeout>
 800ec56:	4603      	mov	r3, r0
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d005      	beq.n	800ec68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2220      	movs	r2, #32
 800ec60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ec64:	2303      	movs	r3, #3
 800ec66:	e03d      	b.n	800ece4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d10b      	bne.n	800ec86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	881b      	ldrh	r3, [r3, #0]
 800ec72:	461a      	mov	r2, r3
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	3302      	adds	r3, #2
 800ec82:	61bb      	str	r3, [r7, #24]
 800ec84:	e007      	b.n	800ec96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	781a      	ldrb	r2, [r3, #0]
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	3301      	adds	r3, #1
 800ec94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ecae:	b29b      	uxth	r3, r3
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d1c8      	bne.n	800ec46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	9300      	str	r3, [sp, #0]
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	2140      	movs	r1, #64	@ 0x40
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f001 feb8 	bl	8010a34 <UART_WaitOnFlagUntilTimeout>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d005      	beq.n	800ecd6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2220      	movs	r2, #32
 800ecce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800ecd2:	2303      	movs	r3, #3
 800ecd4:	e006      	b.n	800ece4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2220      	movs	r2, #32
 800ecda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800ecde:	2300      	movs	r3, #0
 800ece0:	e000      	b.n	800ece4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ece2:	2302      	movs	r3, #2
  }
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3720      	adds	r7, #32
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b091      	sub	sp, #68	@ 0x44
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed00:	2b20      	cmp	r3, #32
 800ed02:	d178      	bne.n	800edf6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d002      	beq.n	800ed10 <HAL_UART_Transmit_IT+0x24>
 800ed0a:	88fb      	ldrh	r3, [r7, #6]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d101      	bne.n	800ed14 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800ed10:	2301      	movs	r3, #1
 800ed12:	e071      	b.n	800edf8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	88fa      	ldrh	r2, [r7, #6]
 800ed1e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	88fa      	ldrh	r2, [r7, #6]
 800ed26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2221      	movs	r2, #33	@ 0x21
 800ed3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed48:	d12a      	bne.n	800eda0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed52:	d107      	bne.n	800ed64 <HAL_UART_Transmit_IT+0x78>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	691b      	ldr	r3, [r3, #16]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d103      	bne.n	800ed64 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	4a29      	ldr	r2, [pc, #164]	@ (800ee04 <HAL_UART_Transmit_IT+0x118>)
 800ed60:	679a      	str	r2, [r3, #120]	@ 0x78
 800ed62:	e002      	b.n	800ed6a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	4a28      	ldr	r2, [pc, #160]	@ (800ee08 <HAL_UART_Transmit_IT+0x11c>)
 800ed68:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	3308      	adds	r3, #8
 800ed70:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed74:	e853 3f00 	ldrex	r3, [r3]
 800ed78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ed80:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	3308      	adds	r3, #8
 800ed88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ed8a:	637a      	str	r2, [r7, #52]	@ 0x34
 800ed8c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ed90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed92:	e841 2300 	strex	r3, r2, [r1]
 800ed96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ed98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d1e5      	bne.n	800ed6a <HAL_UART_Transmit_IT+0x7e>
 800ed9e:	e028      	b.n	800edf2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	689b      	ldr	r3, [r3, #8]
 800eda4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eda8:	d107      	bne.n	800edba <HAL_UART_Transmit_IT+0xce>
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d103      	bne.n	800edba <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	4a15      	ldr	r2, [pc, #84]	@ (800ee0c <HAL_UART_Transmit_IT+0x120>)
 800edb6:	679a      	str	r2, [r3, #120]	@ 0x78
 800edb8:	e002      	b.n	800edc0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	4a14      	ldr	r2, [pc, #80]	@ (800ee10 <HAL_UART_Transmit_IT+0x124>)
 800edbe:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	e853 3f00 	ldrex	r3, [r3]
 800edcc:	613b      	str	r3, [r7, #16]
   return(result);
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	461a      	mov	r2, r3
 800eddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edde:	623b      	str	r3, [r7, #32]
 800ede0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ede2:	69f9      	ldr	r1, [r7, #28]
 800ede4:	6a3a      	ldr	r2, [r7, #32]
 800ede6:	e841 2300 	strex	r3, r2, [r1]
 800edea:	61bb      	str	r3, [r7, #24]
   return(result);
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d1e6      	bne.n	800edc0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800edf2:	2300      	movs	r3, #0
 800edf4:	e000      	b.n	800edf8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800edf6:	2302      	movs	r3, #2
  }
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3744      	adds	r7, #68	@ 0x44
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr
 800ee04:	08011569 	.word	0x08011569
 800ee08:	08011489 	.word	0x08011489
 800ee0c:	080113c7 	.word	0x080113c7
 800ee10:	0801130f 	.word	0x0801130f

0800ee14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b08a      	sub	sp, #40	@ 0x28
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	60b9      	str	r1, [r7, #8]
 800ee1e:	4613      	mov	r3, r2
 800ee20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ee28:	2b20      	cmp	r3, #32
 800ee2a:	d137      	bne.n	800ee9c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d002      	beq.n	800ee38 <HAL_UART_Receive_IT+0x24>
 800ee32:	88fb      	ldrh	r3, [r7, #6]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d101      	bne.n	800ee3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	e030      	b.n	800ee9e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2200      	movs	r2, #0
 800ee40:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	4a18      	ldr	r2, [pc, #96]	@ (800eea8 <HAL_UART_Receive_IT+0x94>)
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	d01f      	beq.n	800ee8c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d018      	beq.n	800ee8c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	e853 3f00 	ldrex	r3, [r3]
 800ee66:	613b      	str	r3, [r7, #16]
   return(result);
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ee6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	461a      	mov	r2, r3
 800ee76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee78:	623b      	str	r3, [r7, #32]
 800ee7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee7c:	69f9      	ldr	r1, [r7, #28]
 800ee7e:	6a3a      	ldr	r2, [r7, #32]
 800ee80:	e841 2300 	strex	r3, r2, [r1]
 800ee84:	61bb      	str	r3, [r7, #24]
   return(result);
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d1e6      	bne.n	800ee5a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ee8c:	88fb      	ldrh	r3, [r7, #6]
 800ee8e:	461a      	mov	r2, r3
 800ee90:	68b9      	ldr	r1, [r7, #8]
 800ee92:	68f8      	ldr	r0, [r7, #12]
 800ee94:	f001 fe3c 	bl	8010b10 <UART_Start_Receive_IT>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	e000      	b.n	800ee9e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ee9c:	2302      	movs	r3, #2
  }
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3728      	adds	r7, #40	@ 0x28
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	58000c00 	.word	0x58000c00

0800eeac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b08a      	sub	sp, #40	@ 0x28
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eec0:	2b20      	cmp	r3, #32
 800eec2:	d137      	bne.n	800ef34 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d002      	beq.n	800eed0 <HAL_UART_Receive_DMA+0x24>
 800eeca:	88fb      	ldrh	r3, [r7, #6]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d101      	bne.n	800eed4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800eed0:	2301      	movs	r3, #1
 800eed2:	e030      	b.n	800ef36 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2200      	movs	r2, #0
 800eed8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4a18      	ldr	r2, [pc, #96]	@ (800ef40 <HAL_UART_Receive_DMA+0x94>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d01f      	beq.n	800ef24 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d018      	beq.n	800ef24 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	e853 3f00 	ldrex	r3, [r3]
 800eefe:	613b      	str	r3, [r7, #16]
   return(result);
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ef06:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef10:	623b      	str	r3, [r7, #32]
 800ef12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef14:	69f9      	ldr	r1, [r7, #28]
 800ef16:	6a3a      	ldr	r2, [r7, #32]
 800ef18:	e841 2300 	strex	r3, r2, [r1]
 800ef1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d1e6      	bne.n	800eef2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ef24:	88fb      	ldrh	r3, [r7, #6]
 800ef26:	461a      	mov	r2, r3
 800ef28:	68b9      	ldr	r1, [r7, #8]
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f001 ff12 	bl	8010d54 <UART_Start_Receive_DMA>
 800ef30:	4603      	mov	r3, r0
 800ef32:	e000      	b.n	800ef36 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ef34:	2302      	movs	r3, #2
  }
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3728      	adds	r7, #40	@ 0x28
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	58000c00 	.word	0x58000c00

0800ef44 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b090      	sub	sp, #64	@ 0x40
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	689b      	ldr	r3, [r3, #8]
 800ef62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef66:	2b80      	cmp	r3, #128	@ 0x80
 800ef68:	d139      	bne.n	800efde <HAL_UART_DMAStop+0x9a>
 800ef6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef6c:	2b21      	cmp	r3, #33	@ 0x21
 800ef6e:	d136      	bne.n	800efde <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	3308      	adds	r3, #8
 800ef76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef78:	6a3b      	ldr	r3, [r7, #32]
 800ef7a:	e853 3f00 	ldrex	r3, [r3]
 800ef7e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ef86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	3308      	adds	r3, #8
 800ef8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ef92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef98:	e841 2300 	strex	r3, r2, [r1]
 800ef9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ef9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d1e5      	bne.n	800ef70 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d015      	beq.n	800efd8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7f7 fde1 	bl	8006b78 <HAL_DMA_Abort>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d00d      	beq.n	800efd8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7f9 fa9f 	bl	8008504 <HAL_DMA_GetError>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b20      	cmp	r3, #32
 800efca:	d105      	bne.n	800efd8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2210      	movs	r2, #16
 800efd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800efd4:	2303      	movs	r3, #3
 800efd6:	e047      	b.n	800f068 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f001 ff61 	bl	8010ea0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efe8:	2b40      	cmp	r3, #64	@ 0x40
 800efea:	d13c      	bne.n	800f066 <HAL_UART_DMAStop+0x122>
 800efec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efee:	2b22      	cmp	r3, #34	@ 0x22
 800eff0:	d139      	bne.n	800f066 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	3308      	adds	r3, #8
 800eff8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	e853 3f00 	ldrex	r3, [r3]
 800f000:	60bb      	str	r3, [r7, #8]
   return(result);
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f008:	633b      	str	r3, [r7, #48]	@ 0x30
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	3308      	adds	r3, #8
 800f010:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f012:	61ba      	str	r2, [r7, #24]
 800f014:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f016:	6979      	ldr	r1, [r7, #20]
 800f018:	69ba      	ldr	r2, [r7, #24]
 800f01a:	e841 2300 	strex	r3, r2, [r1]
 800f01e:	613b      	str	r3, [r7, #16]
   return(result);
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d1e5      	bne.n	800eff2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d017      	beq.n	800f060 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f036:	4618      	mov	r0, r3
 800f038:	f7f7 fd9e 	bl	8006b78 <HAL_DMA_Abort>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00e      	beq.n	800f060 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f048:	4618      	mov	r0, r3
 800f04a:	f7f9 fa5b 	bl	8008504 <HAL_DMA_GetError>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b20      	cmp	r3, #32
 800f052:	d105      	bne.n	800f060 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2210      	movs	r2, #16
 800f058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f05c:	2303      	movs	r3, #3
 800f05e:	e003      	b.n	800f068 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f001 ff5f 	bl	8010f24 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f066:	2300      	movs	r3, #0
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3740      	adds	r7, #64	@ 0x40
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}

0800f070 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b0a2      	sub	sp, #136	@ 0x88
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800f078:	2301      	movs	r3, #1
 800f07a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f084:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f086:	e853 3f00 	ldrex	r3, [r3]
 800f08a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f08c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f08e:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800f092:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	461a      	mov	r2, r3
 800f09c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f0a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f0a2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f0a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f0a8:	e841 2300 	strex	r3, r2, [r1]
 800f0ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f0ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d1e4      	bne.n	800f07e <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	3308      	adds	r3, #8
 800f0ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0be:	e853 3f00 	ldrex	r3, [r3]
 800f0c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f0c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f0c6:	4b85      	ldr	r3, [pc, #532]	@ (800f2dc <HAL_UART_Abort_IT+0x26c>)
 800f0c8:	4013      	ands	r3, r2
 800f0ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	3308      	adds	r3, #8
 800f0d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f0d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f0d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f0da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f0dc:	e841 2300 	strex	r3, r2, [r1]
 800f0e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f0e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1e5      	bne.n	800f0b4 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d118      	bne.n	800f122 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f8:	e853 3f00 	ldrex	r3, [r3]
 800f0fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f0fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f100:	f023 0310 	bic.w	r3, r3, #16
 800f104:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	461a      	mov	r2, r3
 800f10c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f10e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f110:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f112:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f114:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f116:	e841 2300 	strex	r3, r2, [r1]
 800f11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d1e6      	bne.n	800f0f0 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00f      	beq.n	800f14a <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f134:	2b80      	cmp	r3, #128	@ 0x80
 800f136:	d104      	bne.n	800f142 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f13c:	4a68      	ldr	r2, [pc, #416]	@ (800f2e0 <HAL_UART_Abort_IT+0x270>)
 800f13e:	651a      	str	r2, [r3, #80]	@ 0x50
 800f140:	e003      	b.n	800f14a <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f146:	2200      	movs	r2, #0
 800f148:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f150:	2b00      	cmp	r3, #0
 800f152:	d011      	beq.n	800f178 <HAL_UART_Abort_IT+0x108>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	689b      	ldr	r3, [r3, #8]
 800f15a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f15e:	2b40      	cmp	r3, #64	@ 0x40
 800f160:	d105      	bne.n	800f16e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f168:	4a5e      	ldr	r2, [pc, #376]	@ (800f2e4 <HAL_UART_Abort_IT+0x274>)
 800f16a:	651a      	str	r2, [r3, #80]	@ 0x50
 800f16c:	e004      	b.n	800f178 <HAL_UART_Abort_IT+0x108>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f174:	2200      	movs	r2, #0
 800f176:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	689b      	ldr	r3, [r3, #8]
 800f17e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f182:	2b80      	cmp	r3, #128	@ 0x80
 800f184:	d12d      	bne.n	800f1e2 <HAL_UART_Abort_IT+0x172>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	3308      	adds	r3, #8
 800f18c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f190:	e853 3f00 	ldrex	r3, [r3]
 800f194:	623b      	str	r3, [r7, #32]
   return(result);
 800f196:	6a3b      	ldr	r3, [r7, #32]
 800f198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f19c:	677b      	str	r3, [r7, #116]	@ 0x74
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	3308      	adds	r3, #8
 800f1a4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f1a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800f1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f1ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1ae:	e841 2300 	strex	r3, r2, [r1]
 800f1b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1e5      	bne.n	800f186 <HAL_UART_Abort_IT+0x116>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d00f      	beq.n	800f1e2 <HAL_UART_Abort_IT+0x172>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7f7 fff4 	bl	80071b4 <HAL_DMA_Abort_IT>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d004      	beq.n	800f1dc <HAL_UART_Abort_IT+0x16c>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	651a      	str	r2, [r3, #80]	@ 0x50
 800f1da:	e002      	b.n	800f1e2 <HAL_UART_Abort_IT+0x172>
      }
      else
      {
        abortcplt = 0U;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1ec:	2b40      	cmp	r3, #64	@ 0x40
 800f1ee:	d133      	bne.n	800f258 <HAL_UART_Abort_IT+0x1e8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	3308      	adds	r3, #8
 800f1f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	e853 3f00 	ldrex	r3, [r3]
 800f1fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f206:	673b      	str	r3, [r7, #112]	@ 0x70
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	3308      	adds	r3, #8
 800f20e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f210:	61fa      	str	r2, [r7, #28]
 800f212:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f214:	69b9      	ldr	r1, [r7, #24]
 800f216:	69fa      	ldr	r2, [r7, #28]
 800f218:	e841 2300 	strex	r3, r2, [r1]
 800f21c:	617b      	str	r3, [r7, #20]
   return(result);
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d1e5      	bne.n	800f1f0 <HAL_UART_Abort_IT+0x180>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d014      	beq.n	800f258 <HAL_UART_Abort_IT+0x1e8>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f234:	4618      	mov	r0, r3
 800f236:	f7f7 ffbd 	bl	80071b4 <HAL_DMA_Abort_IT>
 800f23a:	4603      	mov	r3, r0
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d008      	beq.n	800f252 <HAL_UART_Abort_IT+0x1e2>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f246:	2200      	movs	r2, #0
 800f248:	651a      	str	r2, [r3, #80]	@ 0x50
        abortcplt = 1U;
 800f24a:	2301      	movs	r3, #1
 800f24c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f250:	e002      	b.n	800f258 <HAL_UART_Abort_IT+0x1e8>
      }
      else
      {
        abortcplt = 0U;
 800f252:	2300      	movs	r3, #0
 800f254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800f258:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d138      	bne.n	800f2d2 <HAL_UART_Abort_IT+0x262>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2200      	movs	r2, #0
 800f264:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->RxXferCount = 0U;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2200      	movs	r2, #0
 800f274:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2200      	movs	r2, #0
 800f27a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2200      	movs	r2, #0
 800f280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	220f      	movs	r2, #15
 800f28a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f294:	d107      	bne.n	800f2a6 <HAL_UART_Abort_IT+0x236>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	699a      	ldr	r2, [r3, #24]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f042 0210 	orr.w	r2, r2, #16
 800f2a4:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	699a      	ldr	r2, [r3, #24]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f042 0208 	orr.w	r2, r2, #8
 800f2b4:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2220      	movs	r2, #32
 800f2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2220      	movs	r2, #32
 800f2c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 fbe3 	bl	800fa98 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f2d2:	2300      	movs	r3, #0
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3788      	adds	r7, #136	@ 0x88
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	ef7ffffe 	.word	0xef7ffffe
 800f2e0:	08011203 	.word	0x08011203
 800f2e4:	0801128f 	.word	0x0801128f

0800f2e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b0ba      	sub	sp, #232	@ 0xe8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	69db      	ldr	r3, [r3, #28]
 800f2f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	689b      	ldr	r3, [r3, #8]
 800f30a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f30e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f312:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f316:	4013      	ands	r3, r2
 800f318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f31c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f320:	2b00      	cmp	r3, #0
 800f322:	d11b      	bne.n	800f35c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f328:	f003 0320 	and.w	r3, r3, #32
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d015      	beq.n	800f35c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f334:	f003 0320 	and.w	r3, r3, #32
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d105      	bne.n	800f348 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f33c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f344:	2b00      	cmp	r3, #0
 800f346:	d009      	beq.n	800f35c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	f000 8377 	beq.w	800fa40 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	4798      	blx	r3
      }
      return;
 800f35a:	e371      	b.n	800fa40 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f35c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f360:	2b00      	cmp	r3, #0
 800f362:	f000 8123 	beq.w	800f5ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f366:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f36a:	4b8d      	ldr	r3, [pc, #564]	@ (800f5a0 <HAL_UART_IRQHandler+0x2b8>)
 800f36c:	4013      	ands	r3, r2
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d106      	bne.n	800f380 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f372:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f376:	4b8b      	ldr	r3, [pc, #556]	@ (800f5a4 <HAL_UART_IRQHandler+0x2bc>)
 800f378:	4013      	ands	r3, r2
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	f000 8116 	beq.w	800f5ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f384:	f003 0301 	and.w	r3, r3, #1
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d011      	beq.n	800f3b0 <HAL_UART_IRQHandler+0xc8>
 800f38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00b      	beq.n	800f3b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2201      	movs	r2, #1
 800f39e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3a6:	f043 0201 	orr.w	r2, r3, #1
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3b4:	f003 0302 	and.w	r3, r3, #2
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d011      	beq.n	800f3e0 <HAL_UART_IRQHandler+0xf8>
 800f3bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3c0:	f003 0301 	and.w	r3, r3, #1
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d00b      	beq.n	800f3e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2202      	movs	r2, #2
 800f3ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f3d6:	f043 0204 	orr.w	r2, r3, #4
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3e4:	f003 0304 	and.w	r3, r3, #4
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d011      	beq.n	800f410 <HAL_UART_IRQHandler+0x128>
 800f3ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f3f0:	f003 0301 	and.w	r3, r3, #1
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00b      	beq.n	800f410 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2204      	movs	r2, #4
 800f3fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f406:	f043 0202 	orr.w	r2, r3, #2
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f414:	f003 0308 	and.w	r3, r3, #8
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d017      	beq.n	800f44c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f41c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f420:	f003 0320 	and.w	r3, r3, #32
 800f424:	2b00      	cmp	r3, #0
 800f426:	d105      	bne.n	800f434 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f428:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f42c:	4b5c      	ldr	r3, [pc, #368]	@ (800f5a0 <HAL_UART_IRQHandler+0x2b8>)
 800f42e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f430:	2b00      	cmp	r3, #0
 800f432:	d00b      	beq.n	800f44c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2208      	movs	r2, #8
 800f43a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f442:	f043 0208 	orr.w	r2, r3, #8
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f450:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f454:	2b00      	cmp	r3, #0
 800f456:	d012      	beq.n	800f47e <HAL_UART_IRQHandler+0x196>
 800f458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f45c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f460:	2b00      	cmp	r3, #0
 800f462:	d00c      	beq.n	800f47e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f46c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f474:	f043 0220 	orr.w	r2, r3, #32
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f484:	2b00      	cmp	r3, #0
 800f486:	f000 82dd 	beq.w	800fa44 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f48e:	f003 0320 	and.w	r3, r3, #32
 800f492:	2b00      	cmp	r3, #0
 800f494:	d013      	beq.n	800f4be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f49a:	f003 0320 	and.w	r3, r3, #32
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d105      	bne.n	800f4ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f4a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f4a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d007      	beq.n	800f4be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d003      	beq.n	800f4be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4d2:	2b40      	cmp	r3, #64	@ 0x40
 800f4d4:	d005      	beq.n	800f4e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f4d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f4da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d054      	beq.n	800f58c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f001 fd1e 	bl	8010f24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	689b      	ldr	r3, [r3, #8]
 800f4ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4f2:	2b40      	cmp	r3, #64	@ 0x40
 800f4f4:	d146      	bne.n	800f584 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	3308      	adds	r3, #8
 800f4fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f500:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f504:	e853 3f00 	ldrex	r3, [r3]
 800f508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f50c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f514:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	3308      	adds	r3, #8
 800f51e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f522:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f52a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f52e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f532:	e841 2300 	strex	r3, r2, [r1]
 800f536:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f53a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d1d9      	bne.n	800f4f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d017      	beq.n	800f57c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f552:	4a15      	ldr	r2, [pc, #84]	@ (800f5a8 <HAL_UART_IRQHandler+0x2c0>)
 800f554:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7f7 fe29 	bl	80071b4 <HAL_DMA_Abort_IT>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d019      	beq.n	800f59c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f56e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f576:	4610      	mov	r0, r2
 800f578:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f57a:	e00f      	b.n	800f59c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 fa81 	bl	800fa84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f582:	e00b      	b.n	800f59c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f000 fa7d 	bl	800fa84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f58a:	e007      	b.n	800f59c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 fa79 	bl	800fa84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2200      	movs	r2, #0
 800f596:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f59a:	e253      	b.n	800fa44 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f59c:	bf00      	nop
    return;
 800f59e:	e251      	b.n	800fa44 <HAL_UART_IRQHandler+0x75c>
 800f5a0:	10000001 	.word	0x10000001
 800f5a4:	04000120 	.word	0x04000120
 800f5a8:	080111d7 	.word	0x080111d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	f040 81e7 	bne.w	800f984 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5ba:	f003 0310 	and.w	r3, r3, #16
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	f000 81e0 	beq.w	800f984 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f5c8:	f003 0310 	and.w	r3, r3, #16
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	f000 81d9 	beq.w	800f984 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2210      	movs	r2, #16
 800f5d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	689b      	ldr	r3, [r3, #8]
 800f5e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f5e4:	2b40      	cmp	r3, #64	@ 0x40
 800f5e6:	f040 8151 	bne.w	800f88c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	4a96      	ldr	r2, [pc, #600]	@ (800f84c <HAL_UART_IRQHandler+0x564>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d068      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4a93      	ldr	r2, [pc, #588]	@ (800f850 <HAL_UART_IRQHandler+0x568>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d061      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	4a91      	ldr	r2, [pc, #580]	@ (800f854 <HAL_UART_IRQHandler+0x56c>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d05a      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4a8e      	ldr	r2, [pc, #568]	@ (800f858 <HAL_UART_IRQHandler+0x570>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d053      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a8c      	ldr	r2, [pc, #560]	@ (800f85c <HAL_UART_IRQHandler+0x574>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d04c      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4a89      	ldr	r2, [pc, #548]	@ (800f860 <HAL_UART_IRQHandler+0x578>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d045      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4a87      	ldr	r2, [pc, #540]	@ (800f864 <HAL_UART_IRQHandler+0x57c>)
 800f648:	4293      	cmp	r3, r2
 800f64a:	d03e      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	4a84      	ldr	r2, [pc, #528]	@ (800f868 <HAL_UART_IRQHandler+0x580>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d037      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	4a82      	ldr	r2, [pc, #520]	@ (800f86c <HAL_UART_IRQHandler+0x584>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d030      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4a7f      	ldr	r2, [pc, #508]	@ (800f870 <HAL_UART_IRQHandler+0x588>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d029      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	4a7d      	ldr	r2, [pc, #500]	@ (800f874 <HAL_UART_IRQHandler+0x58c>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d022      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a7a      	ldr	r2, [pc, #488]	@ (800f878 <HAL_UART_IRQHandler+0x590>)
 800f68e:	4293      	cmp	r3, r2
 800f690:	d01b      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a78      	ldr	r2, [pc, #480]	@ (800f87c <HAL_UART_IRQHandler+0x594>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d014      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4a75      	ldr	r2, [pc, #468]	@ (800f880 <HAL_UART_IRQHandler+0x598>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d00d      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4a73      	ldr	r2, [pc, #460]	@ (800f884 <HAL_UART_IRQHandler+0x59c>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d006      	beq.n	800f6ca <HAL_UART_IRQHandler+0x3e2>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	4a70      	ldr	r2, [pc, #448]	@ (800f888 <HAL_UART_IRQHandler+0x5a0>)
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d106      	bne.n	800f6d8 <HAL_UART_IRQHandler+0x3f0>
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	685b      	ldr	r3, [r3, #4]
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	e005      	b.n	800f6e4 <HAL_UART_IRQHandler+0x3fc>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f6e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	f000 81ab 	beq.w	800fa48 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f6f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	f080 81a3 	bcs.w	800fa48 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f708:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f712:	69db      	ldr	r3, [r3, #28]
 800f714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f718:	f000 8087 	beq.w	800f82a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f724:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f728:	e853 3f00 	ldrex	r3, [r3]
 800f72c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	461a      	mov	r2, r3
 800f742:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f746:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f74a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f74e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f752:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f756:	e841 2300 	strex	r3, r2, [r1]
 800f75a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f75e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f762:	2b00      	cmp	r3, #0
 800f764:	d1da      	bne.n	800f71c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	3308      	adds	r3, #8
 800f76c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f76e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f770:	e853 3f00 	ldrex	r3, [r3]
 800f774:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f776:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f778:	f023 0301 	bic.w	r3, r3, #1
 800f77c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	3308      	adds	r3, #8
 800f786:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f78a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f78e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f790:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f792:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f796:	e841 2300 	strex	r3, r2, [r1]
 800f79a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f79c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1e1      	bne.n	800f766 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	3308      	adds	r3, #8
 800f7a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f7ac:	e853 3f00 	ldrex	r3, [r3]
 800f7b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f7b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f7b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f7b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	3308      	adds	r3, #8
 800f7c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f7c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f7c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f7cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f7ce:	e841 2300 	strex	r3, r2, [r1]
 800f7d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f7d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1e3      	bne.n	800f7a2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2220      	movs	r2, #32
 800f7de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7f0:	e853 3f00 	ldrex	r3, [r3]
 800f7f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f7f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7f8:	f023 0310 	bic.w	r3, r3, #16
 800f7fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	461a      	mov	r2, r3
 800f806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f80a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f80c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f80e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f810:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f812:	e841 2300 	strex	r3, r2, [r1]
 800f816:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f818:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d1e4      	bne.n	800f7e8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f824:	4618      	mov	r0, r3
 800f826:	f7f7 f9a7 	bl	8006b78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2202      	movs	r2, #2
 800f82e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	1ad3      	subs	r3, r2, r3
 800f840:	b29b      	uxth	r3, r3
 800f842:	4619      	mov	r1, r3
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f931 	bl	800faac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f84a:	e0fd      	b.n	800fa48 <HAL_UART_IRQHandler+0x760>
 800f84c:	40020010 	.word	0x40020010
 800f850:	40020028 	.word	0x40020028
 800f854:	40020040 	.word	0x40020040
 800f858:	40020058 	.word	0x40020058
 800f85c:	40020070 	.word	0x40020070
 800f860:	40020088 	.word	0x40020088
 800f864:	400200a0 	.word	0x400200a0
 800f868:	400200b8 	.word	0x400200b8
 800f86c:	40020410 	.word	0x40020410
 800f870:	40020428 	.word	0x40020428
 800f874:	40020440 	.word	0x40020440
 800f878:	40020458 	.word	0x40020458
 800f87c:	40020470 	.word	0x40020470
 800f880:	40020488 	.word	0x40020488
 800f884:	400204a0 	.word	0x400204a0
 800f888:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f898:	b29b      	uxth	r3, r3
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 80cf 	beq.w	800fa4c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f8ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f000 80ca 	beq.w	800fa4c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8c0:	e853 3f00 	ldrex	r3, [r3]
 800f8c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f8cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f8da:	647b      	str	r3, [r7, #68]	@ 0x44
 800f8dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f8e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f8e2:	e841 2300 	strex	r3, r2, [r1]
 800f8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f8e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1e4      	bne.n	800f8b8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	3308      	adds	r3, #8
 800f8f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f8:	e853 3f00 	ldrex	r3, [r3]
 800f8fc:	623b      	str	r3, [r7, #32]
   return(result);
 800f8fe:	6a3a      	ldr	r2, [r7, #32]
 800f900:	4b55      	ldr	r3, [pc, #340]	@ (800fa58 <HAL_UART_IRQHandler+0x770>)
 800f902:	4013      	ands	r3, r2
 800f904:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3308      	adds	r3, #8
 800f90e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f912:	633a      	str	r2, [r7, #48]	@ 0x30
 800f914:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f91a:	e841 2300 	strex	r3, r2, [r1]
 800f91e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f922:	2b00      	cmp	r3, #0
 800f924:	d1e3      	bne.n	800f8ee <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2220      	movs	r2, #32
 800f92a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2200      	movs	r2, #0
 800f932:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2200      	movs	r2, #0
 800f938:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f940:	693b      	ldr	r3, [r7, #16]
 800f942:	e853 3f00 	ldrex	r3, [r3]
 800f946:	60fb      	str	r3, [r7, #12]
   return(result);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f023 0310 	bic.w	r3, r3, #16
 800f94e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	461a      	mov	r2, r3
 800f958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f95c:	61fb      	str	r3, [r7, #28]
 800f95e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f960:	69b9      	ldr	r1, [r7, #24]
 800f962:	69fa      	ldr	r2, [r7, #28]
 800f964:	e841 2300 	strex	r3, r2, [r1]
 800f968:	617b      	str	r3, [r7, #20]
   return(result);
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1e4      	bne.n	800f93a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2202      	movs	r2, #2
 800f974:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f976:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f97a:	4619      	mov	r1, r3
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f000 f895 	bl	800faac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f982:	e063      	b.n	800fa4c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f988:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d00e      	beq.n	800f9ae <HAL_UART_IRQHandler+0x6c6>
 800f990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f994:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d008      	beq.n	800f9ae <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f9a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f002 fb9a 	bl	80120e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f9ac:	e051      	b.n	800fa52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f9ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d014      	beq.n	800f9e4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f9ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d105      	bne.n	800f9d2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f9c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f9ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d008      	beq.n	800f9e4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d03a      	beq.n	800fa50 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	4798      	blx	r3
    }
    return;
 800f9e2:	e035      	b.n	800fa50 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d009      	beq.n	800fa04 <HAL_UART_IRQHandler+0x71c>
 800f9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d003      	beq.n	800fa04 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f001 fe28 	bl	8011652 <UART_EndTransmit_IT>
    return;
 800fa02:	e026      	b.n	800fa52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fa04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d009      	beq.n	800fa24 <HAL_UART_IRQHandler+0x73c>
 800fa10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa14:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d003      	beq.n	800fa24 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f002 fb73 	bl	8012108 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa22:	e016      	b.n	800fa52 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fa24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d010      	beq.n	800fa52 <HAL_UART_IRQHandler+0x76a>
 800fa30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	da0c      	bge.n	800fa52 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f002 fb5b 	bl	80120f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa3e:	e008      	b.n	800fa52 <HAL_UART_IRQHandler+0x76a>
      return;
 800fa40:	bf00      	nop
 800fa42:	e006      	b.n	800fa52 <HAL_UART_IRQHandler+0x76a>
    return;
 800fa44:	bf00      	nop
 800fa46:	e004      	b.n	800fa52 <HAL_UART_IRQHandler+0x76a>
      return;
 800fa48:	bf00      	nop
 800fa4a:	e002      	b.n	800fa52 <HAL_UART_IRQHandler+0x76a>
      return;
 800fa4c:	bf00      	nop
 800fa4e:	e000      	b.n	800fa52 <HAL_UART_IRQHandler+0x76a>
    return;
 800fa50:	bf00      	nop
  }
}
 800fa52:	37e8      	adds	r7, #232	@ 0xe8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	effffffe 	.word	0xeffffffe

0800fa5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fa64:	bf00      	nop
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fa78:	bf00      	nop
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800faa0:	bf00      	nop
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	460b      	mov	r3, r1
 800fab6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fab8:	bf00      	nop
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr

0800fac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fac8:	b092      	sub	sp, #72	@ 0x48
 800faca:	af00      	add	r7, sp, #0
 800facc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800face:	2300      	movs	r3, #0
 800fad0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	689a      	ldr	r2, [r3, #8]
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	431a      	orrs	r2, r3
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	695b      	ldr	r3, [r3, #20]
 800fae2:	431a      	orrs	r2, r3
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	69db      	ldr	r3, [r3, #28]
 800fae8:	4313      	orrs	r3, r2
 800faea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	4bbe      	ldr	r3, [pc, #760]	@ (800fdec <UART_SetConfig+0x328>)
 800faf4:	4013      	ands	r3, r2
 800faf6:	697a      	ldr	r2, [r7, #20]
 800faf8:	6812      	ldr	r2, [r2, #0]
 800fafa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fafc:	430b      	orrs	r3, r1
 800fafe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	68da      	ldr	r2, [r3, #12]
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	430a      	orrs	r2, r1
 800fb14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	699b      	ldr	r3, [r3, #24]
 800fb1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	4ab3      	ldr	r2, [pc, #716]	@ (800fdf0 <UART_SetConfig+0x32c>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d004      	beq.n	800fb30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fb26:	697b      	ldr	r3, [r7, #20]
 800fb28:	6a1b      	ldr	r3, [r3, #32]
 800fb2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	689a      	ldr	r2, [r3, #8]
 800fb36:	4baf      	ldr	r3, [pc, #700]	@ (800fdf4 <UART_SetConfig+0x330>)
 800fb38:	4013      	ands	r3, r2
 800fb3a:	697a      	ldr	r2, [r7, #20]
 800fb3c:	6812      	ldr	r2, [r2, #0]
 800fb3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fb40:	430b      	orrs	r3, r1
 800fb42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb4a:	f023 010f 	bic.w	r1, r3, #15
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	430a      	orrs	r2, r1
 800fb58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	4aa6      	ldr	r2, [pc, #664]	@ (800fdf8 <UART_SetConfig+0x334>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d177      	bne.n	800fc54 <UART_SetConfig+0x190>
 800fb64:	4ba5      	ldr	r3, [pc, #660]	@ (800fdfc <UART_SetConfig+0x338>)
 800fb66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fb6c:	2b28      	cmp	r3, #40	@ 0x28
 800fb6e:	d86d      	bhi.n	800fc4c <UART_SetConfig+0x188>
 800fb70:	a201      	add	r2, pc, #4	@ (adr r2, 800fb78 <UART_SetConfig+0xb4>)
 800fb72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb76:	bf00      	nop
 800fb78:	0800fc1d 	.word	0x0800fc1d
 800fb7c:	0800fc4d 	.word	0x0800fc4d
 800fb80:	0800fc4d 	.word	0x0800fc4d
 800fb84:	0800fc4d 	.word	0x0800fc4d
 800fb88:	0800fc4d 	.word	0x0800fc4d
 800fb8c:	0800fc4d 	.word	0x0800fc4d
 800fb90:	0800fc4d 	.word	0x0800fc4d
 800fb94:	0800fc4d 	.word	0x0800fc4d
 800fb98:	0800fc25 	.word	0x0800fc25
 800fb9c:	0800fc4d 	.word	0x0800fc4d
 800fba0:	0800fc4d 	.word	0x0800fc4d
 800fba4:	0800fc4d 	.word	0x0800fc4d
 800fba8:	0800fc4d 	.word	0x0800fc4d
 800fbac:	0800fc4d 	.word	0x0800fc4d
 800fbb0:	0800fc4d 	.word	0x0800fc4d
 800fbb4:	0800fc4d 	.word	0x0800fc4d
 800fbb8:	0800fc2d 	.word	0x0800fc2d
 800fbbc:	0800fc4d 	.word	0x0800fc4d
 800fbc0:	0800fc4d 	.word	0x0800fc4d
 800fbc4:	0800fc4d 	.word	0x0800fc4d
 800fbc8:	0800fc4d 	.word	0x0800fc4d
 800fbcc:	0800fc4d 	.word	0x0800fc4d
 800fbd0:	0800fc4d 	.word	0x0800fc4d
 800fbd4:	0800fc4d 	.word	0x0800fc4d
 800fbd8:	0800fc35 	.word	0x0800fc35
 800fbdc:	0800fc4d 	.word	0x0800fc4d
 800fbe0:	0800fc4d 	.word	0x0800fc4d
 800fbe4:	0800fc4d 	.word	0x0800fc4d
 800fbe8:	0800fc4d 	.word	0x0800fc4d
 800fbec:	0800fc4d 	.word	0x0800fc4d
 800fbf0:	0800fc4d 	.word	0x0800fc4d
 800fbf4:	0800fc4d 	.word	0x0800fc4d
 800fbf8:	0800fc3d 	.word	0x0800fc3d
 800fbfc:	0800fc4d 	.word	0x0800fc4d
 800fc00:	0800fc4d 	.word	0x0800fc4d
 800fc04:	0800fc4d 	.word	0x0800fc4d
 800fc08:	0800fc4d 	.word	0x0800fc4d
 800fc0c:	0800fc4d 	.word	0x0800fc4d
 800fc10:	0800fc4d 	.word	0x0800fc4d
 800fc14:	0800fc4d 	.word	0x0800fc4d
 800fc18:	0800fc45 	.word	0x0800fc45
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc22:	e326      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fc24:	2304      	movs	r3, #4
 800fc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc2a:	e322      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fc2c:	2308      	movs	r3, #8
 800fc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc32:	e31e      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fc34:	2310      	movs	r3, #16
 800fc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc3a:	e31a      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fc3c:	2320      	movs	r3, #32
 800fc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc42:	e316      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fc44:	2340      	movs	r3, #64	@ 0x40
 800fc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc4a:	e312      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fc4c:	2380      	movs	r3, #128	@ 0x80
 800fc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc52:	e30e      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4a69      	ldr	r2, [pc, #420]	@ (800fe00 <UART_SetConfig+0x33c>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d130      	bne.n	800fcc0 <UART_SetConfig+0x1fc>
 800fc5e:	4b67      	ldr	r3, [pc, #412]	@ (800fdfc <UART_SetConfig+0x338>)
 800fc60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc62:	f003 0307 	and.w	r3, r3, #7
 800fc66:	2b05      	cmp	r3, #5
 800fc68:	d826      	bhi.n	800fcb8 <UART_SetConfig+0x1f4>
 800fc6a:	a201      	add	r2, pc, #4	@ (adr r2, 800fc70 <UART_SetConfig+0x1ac>)
 800fc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc70:	0800fc89 	.word	0x0800fc89
 800fc74:	0800fc91 	.word	0x0800fc91
 800fc78:	0800fc99 	.word	0x0800fc99
 800fc7c:	0800fca1 	.word	0x0800fca1
 800fc80:	0800fca9 	.word	0x0800fca9
 800fc84:	0800fcb1 	.word	0x0800fcb1
 800fc88:	2300      	movs	r3, #0
 800fc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc8e:	e2f0      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fc90:	2304      	movs	r3, #4
 800fc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc96:	e2ec      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fc98:	2308      	movs	r3, #8
 800fc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc9e:	e2e8      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fca0:	2310      	movs	r3, #16
 800fca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fca6:	e2e4      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fca8:	2320      	movs	r3, #32
 800fcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcae:	e2e0      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fcb0:	2340      	movs	r3, #64	@ 0x40
 800fcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcb6:	e2dc      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fcb8:	2380      	movs	r3, #128	@ 0x80
 800fcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcbe:	e2d8      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4a4f      	ldr	r2, [pc, #316]	@ (800fe04 <UART_SetConfig+0x340>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d130      	bne.n	800fd2c <UART_SetConfig+0x268>
 800fcca:	4b4c      	ldr	r3, [pc, #304]	@ (800fdfc <UART_SetConfig+0x338>)
 800fccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcce:	f003 0307 	and.w	r3, r3, #7
 800fcd2:	2b05      	cmp	r3, #5
 800fcd4:	d826      	bhi.n	800fd24 <UART_SetConfig+0x260>
 800fcd6:	a201      	add	r2, pc, #4	@ (adr r2, 800fcdc <UART_SetConfig+0x218>)
 800fcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcdc:	0800fcf5 	.word	0x0800fcf5
 800fce0:	0800fcfd 	.word	0x0800fcfd
 800fce4:	0800fd05 	.word	0x0800fd05
 800fce8:	0800fd0d 	.word	0x0800fd0d
 800fcec:	0800fd15 	.word	0x0800fd15
 800fcf0:	0800fd1d 	.word	0x0800fd1d
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcfa:	e2ba      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fcfc:	2304      	movs	r3, #4
 800fcfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd02:	e2b6      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd04:	2308      	movs	r3, #8
 800fd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd0a:	e2b2      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd0c:	2310      	movs	r3, #16
 800fd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd12:	e2ae      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd14:	2320      	movs	r3, #32
 800fd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd1a:	e2aa      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd1c:	2340      	movs	r3, #64	@ 0x40
 800fd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd22:	e2a6      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd24:	2380      	movs	r3, #128	@ 0x80
 800fd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd2a:	e2a2      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4a35      	ldr	r2, [pc, #212]	@ (800fe08 <UART_SetConfig+0x344>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d130      	bne.n	800fd98 <UART_SetConfig+0x2d4>
 800fd36:	4b31      	ldr	r3, [pc, #196]	@ (800fdfc <UART_SetConfig+0x338>)
 800fd38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd3a:	f003 0307 	and.w	r3, r3, #7
 800fd3e:	2b05      	cmp	r3, #5
 800fd40:	d826      	bhi.n	800fd90 <UART_SetConfig+0x2cc>
 800fd42:	a201      	add	r2, pc, #4	@ (adr r2, 800fd48 <UART_SetConfig+0x284>)
 800fd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd48:	0800fd61 	.word	0x0800fd61
 800fd4c:	0800fd69 	.word	0x0800fd69
 800fd50:	0800fd71 	.word	0x0800fd71
 800fd54:	0800fd79 	.word	0x0800fd79
 800fd58:	0800fd81 	.word	0x0800fd81
 800fd5c:	0800fd89 	.word	0x0800fd89
 800fd60:	2300      	movs	r3, #0
 800fd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd66:	e284      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd68:	2304      	movs	r3, #4
 800fd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd6e:	e280      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd70:	2308      	movs	r3, #8
 800fd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd76:	e27c      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd78:	2310      	movs	r3, #16
 800fd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd7e:	e278      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd80:	2320      	movs	r3, #32
 800fd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd86:	e274      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd88:	2340      	movs	r3, #64	@ 0x40
 800fd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd8e:	e270      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd90:	2380      	movs	r3, #128	@ 0x80
 800fd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd96:	e26c      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4a1b      	ldr	r2, [pc, #108]	@ (800fe0c <UART_SetConfig+0x348>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d142      	bne.n	800fe28 <UART_SetConfig+0x364>
 800fda2:	4b16      	ldr	r3, [pc, #88]	@ (800fdfc <UART_SetConfig+0x338>)
 800fda4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fda6:	f003 0307 	and.w	r3, r3, #7
 800fdaa:	2b05      	cmp	r3, #5
 800fdac:	d838      	bhi.n	800fe20 <UART_SetConfig+0x35c>
 800fdae:	a201      	add	r2, pc, #4	@ (adr r2, 800fdb4 <UART_SetConfig+0x2f0>)
 800fdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdb4:	0800fdcd 	.word	0x0800fdcd
 800fdb8:	0800fdd5 	.word	0x0800fdd5
 800fdbc:	0800fddd 	.word	0x0800fddd
 800fdc0:	0800fde5 	.word	0x0800fde5
 800fdc4:	0800fe11 	.word	0x0800fe11
 800fdc8:	0800fe19 	.word	0x0800fe19
 800fdcc:	2300      	movs	r3, #0
 800fdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdd2:	e24e      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fdd4:	2304      	movs	r3, #4
 800fdd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdda:	e24a      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fddc:	2308      	movs	r3, #8
 800fdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fde2:	e246      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fde4:	2310      	movs	r3, #16
 800fde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdea:	e242      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fdec:	cfff69f3 	.word	0xcfff69f3
 800fdf0:	58000c00 	.word	0x58000c00
 800fdf4:	11fff4ff 	.word	0x11fff4ff
 800fdf8:	40011000 	.word	0x40011000
 800fdfc:	58024400 	.word	0x58024400
 800fe00:	40004400 	.word	0x40004400
 800fe04:	40004800 	.word	0x40004800
 800fe08:	40004c00 	.word	0x40004c00
 800fe0c:	40005000 	.word	0x40005000
 800fe10:	2320      	movs	r3, #32
 800fe12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe16:	e22c      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fe18:	2340      	movs	r3, #64	@ 0x40
 800fe1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe1e:	e228      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fe20:	2380      	movs	r3, #128	@ 0x80
 800fe22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe26:	e224      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4ab1      	ldr	r2, [pc, #708]	@ (80100f4 <UART_SetConfig+0x630>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d176      	bne.n	800ff20 <UART_SetConfig+0x45c>
 800fe32:	4bb1      	ldr	r3, [pc, #708]	@ (80100f8 <UART_SetConfig+0x634>)
 800fe34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe3a:	2b28      	cmp	r3, #40	@ 0x28
 800fe3c:	d86c      	bhi.n	800ff18 <UART_SetConfig+0x454>
 800fe3e:	a201      	add	r2, pc, #4	@ (adr r2, 800fe44 <UART_SetConfig+0x380>)
 800fe40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe44:	0800fee9 	.word	0x0800fee9
 800fe48:	0800ff19 	.word	0x0800ff19
 800fe4c:	0800ff19 	.word	0x0800ff19
 800fe50:	0800ff19 	.word	0x0800ff19
 800fe54:	0800ff19 	.word	0x0800ff19
 800fe58:	0800ff19 	.word	0x0800ff19
 800fe5c:	0800ff19 	.word	0x0800ff19
 800fe60:	0800ff19 	.word	0x0800ff19
 800fe64:	0800fef1 	.word	0x0800fef1
 800fe68:	0800ff19 	.word	0x0800ff19
 800fe6c:	0800ff19 	.word	0x0800ff19
 800fe70:	0800ff19 	.word	0x0800ff19
 800fe74:	0800ff19 	.word	0x0800ff19
 800fe78:	0800ff19 	.word	0x0800ff19
 800fe7c:	0800ff19 	.word	0x0800ff19
 800fe80:	0800ff19 	.word	0x0800ff19
 800fe84:	0800fef9 	.word	0x0800fef9
 800fe88:	0800ff19 	.word	0x0800ff19
 800fe8c:	0800ff19 	.word	0x0800ff19
 800fe90:	0800ff19 	.word	0x0800ff19
 800fe94:	0800ff19 	.word	0x0800ff19
 800fe98:	0800ff19 	.word	0x0800ff19
 800fe9c:	0800ff19 	.word	0x0800ff19
 800fea0:	0800ff19 	.word	0x0800ff19
 800fea4:	0800ff01 	.word	0x0800ff01
 800fea8:	0800ff19 	.word	0x0800ff19
 800feac:	0800ff19 	.word	0x0800ff19
 800feb0:	0800ff19 	.word	0x0800ff19
 800feb4:	0800ff19 	.word	0x0800ff19
 800feb8:	0800ff19 	.word	0x0800ff19
 800febc:	0800ff19 	.word	0x0800ff19
 800fec0:	0800ff19 	.word	0x0800ff19
 800fec4:	0800ff09 	.word	0x0800ff09
 800fec8:	0800ff19 	.word	0x0800ff19
 800fecc:	0800ff19 	.word	0x0800ff19
 800fed0:	0800ff19 	.word	0x0800ff19
 800fed4:	0800ff19 	.word	0x0800ff19
 800fed8:	0800ff19 	.word	0x0800ff19
 800fedc:	0800ff19 	.word	0x0800ff19
 800fee0:	0800ff19 	.word	0x0800ff19
 800fee4:	0800ff11 	.word	0x0800ff11
 800fee8:	2301      	movs	r3, #1
 800feea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feee:	e1c0      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fef0:	2304      	movs	r3, #4
 800fef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fef6:	e1bc      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fef8:	2308      	movs	r3, #8
 800fefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fefe:	e1b8      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff00:	2310      	movs	r3, #16
 800ff02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff06:	e1b4      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff08:	2320      	movs	r3, #32
 800ff0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff0e:	e1b0      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff10:	2340      	movs	r3, #64	@ 0x40
 800ff12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff16:	e1ac      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff18:	2380      	movs	r3, #128	@ 0x80
 800ff1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff1e:	e1a8      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	4a75      	ldr	r2, [pc, #468]	@ (80100fc <UART_SetConfig+0x638>)
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d130      	bne.n	800ff8c <UART_SetConfig+0x4c8>
 800ff2a:	4b73      	ldr	r3, [pc, #460]	@ (80100f8 <UART_SetConfig+0x634>)
 800ff2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff2e:	f003 0307 	and.w	r3, r3, #7
 800ff32:	2b05      	cmp	r3, #5
 800ff34:	d826      	bhi.n	800ff84 <UART_SetConfig+0x4c0>
 800ff36:	a201      	add	r2, pc, #4	@ (adr r2, 800ff3c <UART_SetConfig+0x478>)
 800ff38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff3c:	0800ff55 	.word	0x0800ff55
 800ff40:	0800ff5d 	.word	0x0800ff5d
 800ff44:	0800ff65 	.word	0x0800ff65
 800ff48:	0800ff6d 	.word	0x0800ff6d
 800ff4c:	0800ff75 	.word	0x0800ff75
 800ff50:	0800ff7d 	.word	0x0800ff7d
 800ff54:	2300      	movs	r3, #0
 800ff56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff5a:	e18a      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff5c:	2304      	movs	r3, #4
 800ff5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff62:	e186      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff64:	2308      	movs	r3, #8
 800ff66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff6a:	e182      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff6c:	2310      	movs	r3, #16
 800ff6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff72:	e17e      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff74:	2320      	movs	r3, #32
 800ff76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff7a:	e17a      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff7c:	2340      	movs	r3, #64	@ 0x40
 800ff7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff82:	e176      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff84:	2380      	movs	r3, #128	@ 0x80
 800ff86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff8a:	e172      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	4a5b      	ldr	r2, [pc, #364]	@ (8010100 <UART_SetConfig+0x63c>)
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d130      	bne.n	800fff8 <UART_SetConfig+0x534>
 800ff96:	4b58      	ldr	r3, [pc, #352]	@ (80100f8 <UART_SetConfig+0x634>)
 800ff98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff9a:	f003 0307 	and.w	r3, r3, #7
 800ff9e:	2b05      	cmp	r3, #5
 800ffa0:	d826      	bhi.n	800fff0 <UART_SetConfig+0x52c>
 800ffa2:	a201      	add	r2, pc, #4	@ (adr r2, 800ffa8 <UART_SetConfig+0x4e4>)
 800ffa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffa8:	0800ffc1 	.word	0x0800ffc1
 800ffac:	0800ffc9 	.word	0x0800ffc9
 800ffb0:	0800ffd1 	.word	0x0800ffd1
 800ffb4:	0800ffd9 	.word	0x0800ffd9
 800ffb8:	0800ffe1 	.word	0x0800ffe1
 800ffbc:	0800ffe9 	.word	0x0800ffe9
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffc6:	e154      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ffc8:	2304      	movs	r3, #4
 800ffca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffce:	e150      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ffd0:	2308      	movs	r3, #8
 800ffd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffd6:	e14c      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ffd8:	2310      	movs	r3, #16
 800ffda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffde:	e148      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ffe0:	2320      	movs	r3, #32
 800ffe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffe6:	e144      	b.n	8010272 <UART_SetConfig+0x7ae>
 800ffe8:	2340      	movs	r3, #64	@ 0x40
 800ffea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ffee:	e140      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fff0:	2380      	movs	r3, #128	@ 0x80
 800fff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fff6:	e13c      	b.n	8010272 <UART_SetConfig+0x7ae>
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4a41      	ldr	r2, [pc, #260]	@ (8010104 <UART_SetConfig+0x640>)
 800fffe:	4293      	cmp	r3, r2
 8010000:	f040 8082 	bne.w	8010108 <UART_SetConfig+0x644>
 8010004:	4b3c      	ldr	r3, [pc, #240]	@ (80100f8 <UART_SetConfig+0x634>)
 8010006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010008:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801000c:	2b28      	cmp	r3, #40	@ 0x28
 801000e:	d86d      	bhi.n	80100ec <UART_SetConfig+0x628>
 8010010:	a201      	add	r2, pc, #4	@ (adr r2, 8010018 <UART_SetConfig+0x554>)
 8010012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010016:	bf00      	nop
 8010018:	080100bd 	.word	0x080100bd
 801001c:	080100ed 	.word	0x080100ed
 8010020:	080100ed 	.word	0x080100ed
 8010024:	080100ed 	.word	0x080100ed
 8010028:	080100ed 	.word	0x080100ed
 801002c:	080100ed 	.word	0x080100ed
 8010030:	080100ed 	.word	0x080100ed
 8010034:	080100ed 	.word	0x080100ed
 8010038:	080100c5 	.word	0x080100c5
 801003c:	080100ed 	.word	0x080100ed
 8010040:	080100ed 	.word	0x080100ed
 8010044:	080100ed 	.word	0x080100ed
 8010048:	080100ed 	.word	0x080100ed
 801004c:	080100ed 	.word	0x080100ed
 8010050:	080100ed 	.word	0x080100ed
 8010054:	080100ed 	.word	0x080100ed
 8010058:	080100cd 	.word	0x080100cd
 801005c:	080100ed 	.word	0x080100ed
 8010060:	080100ed 	.word	0x080100ed
 8010064:	080100ed 	.word	0x080100ed
 8010068:	080100ed 	.word	0x080100ed
 801006c:	080100ed 	.word	0x080100ed
 8010070:	080100ed 	.word	0x080100ed
 8010074:	080100ed 	.word	0x080100ed
 8010078:	080100d5 	.word	0x080100d5
 801007c:	080100ed 	.word	0x080100ed
 8010080:	080100ed 	.word	0x080100ed
 8010084:	080100ed 	.word	0x080100ed
 8010088:	080100ed 	.word	0x080100ed
 801008c:	080100ed 	.word	0x080100ed
 8010090:	080100ed 	.word	0x080100ed
 8010094:	080100ed 	.word	0x080100ed
 8010098:	080100dd 	.word	0x080100dd
 801009c:	080100ed 	.word	0x080100ed
 80100a0:	080100ed 	.word	0x080100ed
 80100a4:	080100ed 	.word	0x080100ed
 80100a8:	080100ed 	.word	0x080100ed
 80100ac:	080100ed 	.word	0x080100ed
 80100b0:	080100ed 	.word	0x080100ed
 80100b4:	080100ed 	.word	0x080100ed
 80100b8:	080100e5 	.word	0x080100e5
 80100bc:	2301      	movs	r3, #1
 80100be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100c2:	e0d6      	b.n	8010272 <UART_SetConfig+0x7ae>
 80100c4:	2304      	movs	r3, #4
 80100c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100ca:	e0d2      	b.n	8010272 <UART_SetConfig+0x7ae>
 80100cc:	2308      	movs	r3, #8
 80100ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100d2:	e0ce      	b.n	8010272 <UART_SetConfig+0x7ae>
 80100d4:	2310      	movs	r3, #16
 80100d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100da:	e0ca      	b.n	8010272 <UART_SetConfig+0x7ae>
 80100dc:	2320      	movs	r3, #32
 80100de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100e2:	e0c6      	b.n	8010272 <UART_SetConfig+0x7ae>
 80100e4:	2340      	movs	r3, #64	@ 0x40
 80100e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100ea:	e0c2      	b.n	8010272 <UART_SetConfig+0x7ae>
 80100ec:	2380      	movs	r3, #128	@ 0x80
 80100ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100f2:	e0be      	b.n	8010272 <UART_SetConfig+0x7ae>
 80100f4:	40011400 	.word	0x40011400
 80100f8:	58024400 	.word	0x58024400
 80100fc:	40007800 	.word	0x40007800
 8010100:	40007c00 	.word	0x40007c00
 8010104:	40011800 	.word	0x40011800
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4aad      	ldr	r2, [pc, #692]	@ (80103c4 <UART_SetConfig+0x900>)
 801010e:	4293      	cmp	r3, r2
 8010110:	d176      	bne.n	8010200 <UART_SetConfig+0x73c>
 8010112:	4bad      	ldr	r3, [pc, #692]	@ (80103c8 <UART_SetConfig+0x904>)
 8010114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801011a:	2b28      	cmp	r3, #40	@ 0x28
 801011c:	d86c      	bhi.n	80101f8 <UART_SetConfig+0x734>
 801011e:	a201      	add	r2, pc, #4	@ (adr r2, 8010124 <UART_SetConfig+0x660>)
 8010120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010124:	080101c9 	.word	0x080101c9
 8010128:	080101f9 	.word	0x080101f9
 801012c:	080101f9 	.word	0x080101f9
 8010130:	080101f9 	.word	0x080101f9
 8010134:	080101f9 	.word	0x080101f9
 8010138:	080101f9 	.word	0x080101f9
 801013c:	080101f9 	.word	0x080101f9
 8010140:	080101f9 	.word	0x080101f9
 8010144:	080101d1 	.word	0x080101d1
 8010148:	080101f9 	.word	0x080101f9
 801014c:	080101f9 	.word	0x080101f9
 8010150:	080101f9 	.word	0x080101f9
 8010154:	080101f9 	.word	0x080101f9
 8010158:	080101f9 	.word	0x080101f9
 801015c:	080101f9 	.word	0x080101f9
 8010160:	080101f9 	.word	0x080101f9
 8010164:	080101d9 	.word	0x080101d9
 8010168:	080101f9 	.word	0x080101f9
 801016c:	080101f9 	.word	0x080101f9
 8010170:	080101f9 	.word	0x080101f9
 8010174:	080101f9 	.word	0x080101f9
 8010178:	080101f9 	.word	0x080101f9
 801017c:	080101f9 	.word	0x080101f9
 8010180:	080101f9 	.word	0x080101f9
 8010184:	080101e1 	.word	0x080101e1
 8010188:	080101f9 	.word	0x080101f9
 801018c:	080101f9 	.word	0x080101f9
 8010190:	080101f9 	.word	0x080101f9
 8010194:	080101f9 	.word	0x080101f9
 8010198:	080101f9 	.word	0x080101f9
 801019c:	080101f9 	.word	0x080101f9
 80101a0:	080101f9 	.word	0x080101f9
 80101a4:	080101e9 	.word	0x080101e9
 80101a8:	080101f9 	.word	0x080101f9
 80101ac:	080101f9 	.word	0x080101f9
 80101b0:	080101f9 	.word	0x080101f9
 80101b4:	080101f9 	.word	0x080101f9
 80101b8:	080101f9 	.word	0x080101f9
 80101bc:	080101f9 	.word	0x080101f9
 80101c0:	080101f9 	.word	0x080101f9
 80101c4:	080101f1 	.word	0x080101f1
 80101c8:	2301      	movs	r3, #1
 80101ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101ce:	e050      	b.n	8010272 <UART_SetConfig+0x7ae>
 80101d0:	2304      	movs	r3, #4
 80101d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101d6:	e04c      	b.n	8010272 <UART_SetConfig+0x7ae>
 80101d8:	2308      	movs	r3, #8
 80101da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101de:	e048      	b.n	8010272 <UART_SetConfig+0x7ae>
 80101e0:	2310      	movs	r3, #16
 80101e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101e6:	e044      	b.n	8010272 <UART_SetConfig+0x7ae>
 80101e8:	2320      	movs	r3, #32
 80101ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101ee:	e040      	b.n	8010272 <UART_SetConfig+0x7ae>
 80101f0:	2340      	movs	r3, #64	@ 0x40
 80101f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101f6:	e03c      	b.n	8010272 <UART_SetConfig+0x7ae>
 80101f8:	2380      	movs	r3, #128	@ 0x80
 80101fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101fe:	e038      	b.n	8010272 <UART_SetConfig+0x7ae>
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4a71      	ldr	r2, [pc, #452]	@ (80103cc <UART_SetConfig+0x908>)
 8010206:	4293      	cmp	r3, r2
 8010208:	d130      	bne.n	801026c <UART_SetConfig+0x7a8>
 801020a:	4b6f      	ldr	r3, [pc, #444]	@ (80103c8 <UART_SetConfig+0x904>)
 801020c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801020e:	f003 0307 	and.w	r3, r3, #7
 8010212:	2b05      	cmp	r3, #5
 8010214:	d826      	bhi.n	8010264 <UART_SetConfig+0x7a0>
 8010216:	a201      	add	r2, pc, #4	@ (adr r2, 801021c <UART_SetConfig+0x758>)
 8010218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801021c:	08010235 	.word	0x08010235
 8010220:	0801023d 	.word	0x0801023d
 8010224:	08010245 	.word	0x08010245
 8010228:	0801024d 	.word	0x0801024d
 801022c:	08010255 	.word	0x08010255
 8010230:	0801025d 	.word	0x0801025d
 8010234:	2302      	movs	r3, #2
 8010236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801023a:	e01a      	b.n	8010272 <UART_SetConfig+0x7ae>
 801023c:	2304      	movs	r3, #4
 801023e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010242:	e016      	b.n	8010272 <UART_SetConfig+0x7ae>
 8010244:	2308      	movs	r3, #8
 8010246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801024a:	e012      	b.n	8010272 <UART_SetConfig+0x7ae>
 801024c:	2310      	movs	r3, #16
 801024e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010252:	e00e      	b.n	8010272 <UART_SetConfig+0x7ae>
 8010254:	2320      	movs	r3, #32
 8010256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801025a:	e00a      	b.n	8010272 <UART_SetConfig+0x7ae>
 801025c:	2340      	movs	r3, #64	@ 0x40
 801025e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010262:	e006      	b.n	8010272 <UART_SetConfig+0x7ae>
 8010264:	2380      	movs	r3, #128	@ 0x80
 8010266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801026a:	e002      	b.n	8010272 <UART_SetConfig+0x7ae>
 801026c:	2380      	movs	r3, #128	@ 0x80
 801026e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4a55      	ldr	r2, [pc, #340]	@ (80103cc <UART_SetConfig+0x908>)
 8010278:	4293      	cmp	r3, r2
 801027a:	f040 80f8 	bne.w	801046e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801027e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010282:	2b20      	cmp	r3, #32
 8010284:	dc46      	bgt.n	8010314 <UART_SetConfig+0x850>
 8010286:	2b02      	cmp	r3, #2
 8010288:	db75      	blt.n	8010376 <UART_SetConfig+0x8b2>
 801028a:	3b02      	subs	r3, #2
 801028c:	2b1e      	cmp	r3, #30
 801028e:	d872      	bhi.n	8010376 <UART_SetConfig+0x8b2>
 8010290:	a201      	add	r2, pc, #4	@ (adr r2, 8010298 <UART_SetConfig+0x7d4>)
 8010292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010296:	bf00      	nop
 8010298:	0801031b 	.word	0x0801031b
 801029c:	08010377 	.word	0x08010377
 80102a0:	08010323 	.word	0x08010323
 80102a4:	08010377 	.word	0x08010377
 80102a8:	08010377 	.word	0x08010377
 80102ac:	08010377 	.word	0x08010377
 80102b0:	08010333 	.word	0x08010333
 80102b4:	08010377 	.word	0x08010377
 80102b8:	08010377 	.word	0x08010377
 80102bc:	08010377 	.word	0x08010377
 80102c0:	08010377 	.word	0x08010377
 80102c4:	08010377 	.word	0x08010377
 80102c8:	08010377 	.word	0x08010377
 80102cc:	08010377 	.word	0x08010377
 80102d0:	08010343 	.word	0x08010343
 80102d4:	08010377 	.word	0x08010377
 80102d8:	08010377 	.word	0x08010377
 80102dc:	08010377 	.word	0x08010377
 80102e0:	08010377 	.word	0x08010377
 80102e4:	08010377 	.word	0x08010377
 80102e8:	08010377 	.word	0x08010377
 80102ec:	08010377 	.word	0x08010377
 80102f0:	08010377 	.word	0x08010377
 80102f4:	08010377 	.word	0x08010377
 80102f8:	08010377 	.word	0x08010377
 80102fc:	08010377 	.word	0x08010377
 8010300:	08010377 	.word	0x08010377
 8010304:	08010377 	.word	0x08010377
 8010308:	08010377 	.word	0x08010377
 801030c:	08010377 	.word	0x08010377
 8010310:	08010369 	.word	0x08010369
 8010314:	2b40      	cmp	r3, #64	@ 0x40
 8010316:	d02a      	beq.n	801036e <UART_SetConfig+0x8aa>
 8010318:	e02d      	b.n	8010376 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801031a:	f7fb fd79 	bl	800be10 <HAL_RCCEx_GetD3PCLK1Freq>
 801031e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010320:	e02f      	b.n	8010382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010326:	4618      	mov	r0, r3
 8010328:	f7fb fd88 	bl	800be3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801032c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801032e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010330:	e027      	b.n	8010382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010332:	f107 0318 	add.w	r3, r7, #24
 8010336:	4618      	mov	r0, r3
 8010338:	f7fb fed4 	bl	800c0e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801033c:	69fb      	ldr	r3, [r7, #28]
 801033e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010340:	e01f      	b.n	8010382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010342:	4b21      	ldr	r3, [pc, #132]	@ (80103c8 <UART_SetConfig+0x904>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f003 0320 	and.w	r3, r3, #32
 801034a:	2b00      	cmp	r3, #0
 801034c:	d009      	beq.n	8010362 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801034e:	4b1e      	ldr	r3, [pc, #120]	@ (80103c8 <UART_SetConfig+0x904>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	08db      	lsrs	r3, r3, #3
 8010354:	f003 0303 	and.w	r3, r3, #3
 8010358:	4a1d      	ldr	r2, [pc, #116]	@ (80103d0 <UART_SetConfig+0x90c>)
 801035a:	fa22 f303 	lsr.w	r3, r2, r3
 801035e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010360:	e00f      	b.n	8010382 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010362:	4b1b      	ldr	r3, [pc, #108]	@ (80103d0 <UART_SetConfig+0x90c>)
 8010364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010366:	e00c      	b.n	8010382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010368:	4b1a      	ldr	r3, [pc, #104]	@ (80103d4 <UART_SetConfig+0x910>)
 801036a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801036c:	e009      	b.n	8010382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801036e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010374:	e005      	b.n	8010382 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010376:	2300      	movs	r3, #0
 8010378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801037a:	2301      	movs	r3, #1
 801037c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010380:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010384:	2b00      	cmp	r3, #0
 8010386:	f000 81ee 	beq.w	8010766 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801038e:	4a12      	ldr	r2, [pc, #72]	@ (80103d8 <UART_SetConfig+0x914>)
 8010390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010394:	461a      	mov	r2, r3
 8010396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010398:	fbb3 f3f2 	udiv	r3, r3, r2
 801039c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	685a      	ldr	r2, [r3, #4]
 80103a2:	4613      	mov	r3, r2
 80103a4:	005b      	lsls	r3, r3, #1
 80103a6:	4413      	add	r3, r2
 80103a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d305      	bcc.n	80103ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d910      	bls.n	80103dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80103ba:	2301      	movs	r3, #1
 80103bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80103c0:	e1d1      	b.n	8010766 <UART_SetConfig+0xca2>
 80103c2:	bf00      	nop
 80103c4:	40011c00 	.word	0x40011c00
 80103c8:	58024400 	.word	0x58024400
 80103cc:	58000c00 	.word	0x58000c00
 80103d0:	03d09000 	.word	0x03d09000
 80103d4:	003d0900 	.word	0x003d0900
 80103d8:	080191dc 	.word	0x080191dc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103de:	2200      	movs	r2, #0
 80103e0:	60bb      	str	r3, [r7, #8]
 80103e2:	60fa      	str	r2, [r7, #12]
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103e8:	4ac0      	ldr	r2, [pc, #768]	@ (80106ec <UART_SetConfig+0xc28>)
 80103ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	2200      	movs	r2, #0
 80103f2:	603b      	str	r3, [r7, #0]
 80103f4:	607a      	str	r2, [r7, #4]
 80103f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80103fe:	f7f0 f9e3 	bl	80007c8 <__aeabi_uldivmod>
 8010402:	4602      	mov	r2, r0
 8010404:	460b      	mov	r3, r1
 8010406:	4610      	mov	r0, r2
 8010408:	4619      	mov	r1, r3
 801040a:	f04f 0200 	mov.w	r2, #0
 801040e:	f04f 0300 	mov.w	r3, #0
 8010412:	020b      	lsls	r3, r1, #8
 8010414:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010418:	0202      	lsls	r2, r0, #8
 801041a:	6979      	ldr	r1, [r7, #20]
 801041c:	6849      	ldr	r1, [r1, #4]
 801041e:	0849      	lsrs	r1, r1, #1
 8010420:	2000      	movs	r0, #0
 8010422:	460c      	mov	r4, r1
 8010424:	4605      	mov	r5, r0
 8010426:	eb12 0804 	adds.w	r8, r2, r4
 801042a:	eb43 0905 	adc.w	r9, r3, r5
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	2200      	movs	r2, #0
 8010434:	469a      	mov	sl, r3
 8010436:	4693      	mov	fp, r2
 8010438:	4652      	mov	r2, sl
 801043a:	465b      	mov	r3, fp
 801043c:	4640      	mov	r0, r8
 801043e:	4649      	mov	r1, r9
 8010440:	f7f0 f9c2 	bl	80007c8 <__aeabi_uldivmod>
 8010444:	4602      	mov	r2, r0
 8010446:	460b      	mov	r3, r1
 8010448:	4613      	mov	r3, r2
 801044a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801044c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801044e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010452:	d308      	bcc.n	8010466 <UART_SetConfig+0x9a2>
 8010454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801045a:	d204      	bcs.n	8010466 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010462:	60da      	str	r2, [r3, #12]
 8010464:	e17f      	b.n	8010766 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010466:	2301      	movs	r3, #1
 8010468:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801046c:	e17b      	b.n	8010766 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	69db      	ldr	r3, [r3, #28]
 8010472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010476:	f040 80bd 	bne.w	80105f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801047a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801047e:	2b20      	cmp	r3, #32
 8010480:	dc48      	bgt.n	8010514 <UART_SetConfig+0xa50>
 8010482:	2b00      	cmp	r3, #0
 8010484:	db7b      	blt.n	801057e <UART_SetConfig+0xaba>
 8010486:	2b20      	cmp	r3, #32
 8010488:	d879      	bhi.n	801057e <UART_SetConfig+0xaba>
 801048a:	a201      	add	r2, pc, #4	@ (adr r2, 8010490 <UART_SetConfig+0x9cc>)
 801048c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010490:	0801051b 	.word	0x0801051b
 8010494:	08010523 	.word	0x08010523
 8010498:	0801057f 	.word	0x0801057f
 801049c:	0801057f 	.word	0x0801057f
 80104a0:	0801052b 	.word	0x0801052b
 80104a4:	0801057f 	.word	0x0801057f
 80104a8:	0801057f 	.word	0x0801057f
 80104ac:	0801057f 	.word	0x0801057f
 80104b0:	0801053b 	.word	0x0801053b
 80104b4:	0801057f 	.word	0x0801057f
 80104b8:	0801057f 	.word	0x0801057f
 80104bc:	0801057f 	.word	0x0801057f
 80104c0:	0801057f 	.word	0x0801057f
 80104c4:	0801057f 	.word	0x0801057f
 80104c8:	0801057f 	.word	0x0801057f
 80104cc:	0801057f 	.word	0x0801057f
 80104d0:	0801054b 	.word	0x0801054b
 80104d4:	0801057f 	.word	0x0801057f
 80104d8:	0801057f 	.word	0x0801057f
 80104dc:	0801057f 	.word	0x0801057f
 80104e0:	0801057f 	.word	0x0801057f
 80104e4:	0801057f 	.word	0x0801057f
 80104e8:	0801057f 	.word	0x0801057f
 80104ec:	0801057f 	.word	0x0801057f
 80104f0:	0801057f 	.word	0x0801057f
 80104f4:	0801057f 	.word	0x0801057f
 80104f8:	0801057f 	.word	0x0801057f
 80104fc:	0801057f 	.word	0x0801057f
 8010500:	0801057f 	.word	0x0801057f
 8010504:	0801057f 	.word	0x0801057f
 8010508:	0801057f 	.word	0x0801057f
 801050c:	0801057f 	.word	0x0801057f
 8010510:	08010571 	.word	0x08010571
 8010514:	2b40      	cmp	r3, #64	@ 0x40
 8010516:	d02e      	beq.n	8010576 <UART_SetConfig+0xab2>
 8010518:	e031      	b.n	801057e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801051a:	f7fa fa4d 	bl	800a9b8 <HAL_RCC_GetPCLK1Freq>
 801051e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010520:	e033      	b.n	801058a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010522:	f7fa fa5f 	bl	800a9e4 <HAL_RCC_GetPCLK2Freq>
 8010526:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010528:	e02f      	b.n	801058a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801052a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801052e:	4618      	mov	r0, r3
 8010530:	f7fb fc84 	bl	800be3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010538:	e027      	b.n	801058a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801053a:	f107 0318 	add.w	r3, r7, #24
 801053e:	4618      	mov	r0, r3
 8010540:	f7fb fdd0 	bl	800c0e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010548:	e01f      	b.n	801058a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801054a:	4b69      	ldr	r3, [pc, #420]	@ (80106f0 <UART_SetConfig+0xc2c>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f003 0320 	and.w	r3, r3, #32
 8010552:	2b00      	cmp	r3, #0
 8010554:	d009      	beq.n	801056a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010556:	4b66      	ldr	r3, [pc, #408]	@ (80106f0 <UART_SetConfig+0xc2c>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	08db      	lsrs	r3, r3, #3
 801055c:	f003 0303 	and.w	r3, r3, #3
 8010560:	4a64      	ldr	r2, [pc, #400]	@ (80106f4 <UART_SetConfig+0xc30>)
 8010562:	fa22 f303 	lsr.w	r3, r2, r3
 8010566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010568:	e00f      	b.n	801058a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801056a:	4b62      	ldr	r3, [pc, #392]	@ (80106f4 <UART_SetConfig+0xc30>)
 801056c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801056e:	e00c      	b.n	801058a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010570:	4b61      	ldr	r3, [pc, #388]	@ (80106f8 <UART_SetConfig+0xc34>)
 8010572:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010574:	e009      	b.n	801058a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801057a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801057c:	e005      	b.n	801058a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801057e:	2300      	movs	r3, #0
 8010580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801058a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801058c:	2b00      	cmp	r3, #0
 801058e:	f000 80ea 	beq.w	8010766 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010596:	4a55      	ldr	r2, [pc, #340]	@ (80106ec <UART_SetConfig+0xc28>)
 8010598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801059c:	461a      	mov	r2, r3
 801059e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80105a4:	005a      	lsls	r2, r3, #1
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	085b      	lsrs	r3, r3, #1
 80105ac:	441a      	add	r2, r3
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80105b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80105b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ba:	2b0f      	cmp	r3, #15
 80105bc:	d916      	bls.n	80105ec <UART_SetConfig+0xb28>
 80105be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80105c4:	d212      	bcs.n	80105ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80105c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	f023 030f 	bic.w	r3, r3, #15
 80105ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80105d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d2:	085b      	lsrs	r3, r3, #1
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	f003 0307 	and.w	r3, r3, #7
 80105da:	b29a      	uxth	r2, r3
 80105dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80105de:	4313      	orrs	r3, r2
 80105e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80105e8:	60da      	str	r2, [r3, #12]
 80105ea:	e0bc      	b.n	8010766 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80105ec:	2301      	movs	r3, #1
 80105ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80105f2:	e0b8      	b.n	8010766 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80105f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80105f8:	2b20      	cmp	r3, #32
 80105fa:	dc4b      	bgt.n	8010694 <UART_SetConfig+0xbd0>
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f2c0 8087 	blt.w	8010710 <UART_SetConfig+0xc4c>
 8010602:	2b20      	cmp	r3, #32
 8010604:	f200 8084 	bhi.w	8010710 <UART_SetConfig+0xc4c>
 8010608:	a201      	add	r2, pc, #4	@ (adr r2, 8010610 <UART_SetConfig+0xb4c>)
 801060a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801060e:	bf00      	nop
 8010610:	0801069b 	.word	0x0801069b
 8010614:	080106a3 	.word	0x080106a3
 8010618:	08010711 	.word	0x08010711
 801061c:	08010711 	.word	0x08010711
 8010620:	080106ab 	.word	0x080106ab
 8010624:	08010711 	.word	0x08010711
 8010628:	08010711 	.word	0x08010711
 801062c:	08010711 	.word	0x08010711
 8010630:	080106bb 	.word	0x080106bb
 8010634:	08010711 	.word	0x08010711
 8010638:	08010711 	.word	0x08010711
 801063c:	08010711 	.word	0x08010711
 8010640:	08010711 	.word	0x08010711
 8010644:	08010711 	.word	0x08010711
 8010648:	08010711 	.word	0x08010711
 801064c:	08010711 	.word	0x08010711
 8010650:	080106cb 	.word	0x080106cb
 8010654:	08010711 	.word	0x08010711
 8010658:	08010711 	.word	0x08010711
 801065c:	08010711 	.word	0x08010711
 8010660:	08010711 	.word	0x08010711
 8010664:	08010711 	.word	0x08010711
 8010668:	08010711 	.word	0x08010711
 801066c:	08010711 	.word	0x08010711
 8010670:	08010711 	.word	0x08010711
 8010674:	08010711 	.word	0x08010711
 8010678:	08010711 	.word	0x08010711
 801067c:	08010711 	.word	0x08010711
 8010680:	08010711 	.word	0x08010711
 8010684:	08010711 	.word	0x08010711
 8010688:	08010711 	.word	0x08010711
 801068c:	08010711 	.word	0x08010711
 8010690:	08010703 	.word	0x08010703
 8010694:	2b40      	cmp	r3, #64	@ 0x40
 8010696:	d037      	beq.n	8010708 <UART_SetConfig+0xc44>
 8010698:	e03a      	b.n	8010710 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801069a:	f7fa f98d 	bl	800a9b8 <HAL_RCC_GetPCLK1Freq>
 801069e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80106a0:	e03c      	b.n	801071c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106a2:	f7fa f99f 	bl	800a9e4 <HAL_RCC_GetPCLK2Freq>
 80106a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80106a8:	e038      	b.n	801071c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7fb fbc4 	bl	800be3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80106b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80106b8:	e030      	b.n	801071c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106ba:	f107 0318 	add.w	r3, r7, #24
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fb fd10 	bl	800c0e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80106c4:	69fb      	ldr	r3, [r7, #28]
 80106c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80106c8:	e028      	b.n	801071c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80106ca:	4b09      	ldr	r3, [pc, #36]	@ (80106f0 <UART_SetConfig+0xc2c>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	f003 0320 	and.w	r3, r3, #32
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d012      	beq.n	80106fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80106d6:	4b06      	ldr	r3, [pc, #24]	@ (80106f0 <UART_SetConfig+0xc2c>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	08db      	lsrs	r3, r3, #3
 80106dc:	f003 0303 	and.w	r3, r3, #3
 80106e0:	4a04      	ldr	r2, [pc, #16]	@ (80106f4 <UART_SetConfig+0xc30>)
 80106e2:	fa22 f303 	lsr.w	r3, r2, r3
 80106e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80106e8:	e018      	b.n	801071c <UART_SetConfig+0xc58>
 80106ea:	bf00      	nop
 80106ec:	080191dc 	.word	0x080191dc
 80106f0:	58024400 	.word	0x58024400
 80106f4:	03d09000 	.word	0x03d09000
 80106f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80106fc:	4b24      	ldr	r3, [pc, #144]	@ (8010790 <UART_SetConfig+0xccc>)
 80106fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010700:	e00c      	b.n	801071c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010702:	4b24      	ldr	r3, [pc, #144]	@ (8010794 <UART_SetConfig+0xcd0>)
 8010704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010706:	e009      	b.n	801071c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010708:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801070c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801070e:	e005      	b.n	801071c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010710:	2300      	movs	r3, #0
 8010712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010714:	2301      	movs	r3, #1
 8010716:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801071a:	bf00      	nop
    }

    if (pclk != 0U)
 801071c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801071e:	2b00      	cmp	r3, #0
 8010720:	d021      	beq.n	8010766 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010726:	4a1c      	ldr	r2, [pc, #112]	@ (8010798 <UART_SetConfig+0xcd4>)
 8010728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801072c:	461a      	mov	r2, r3
 801072e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010730:	fbb3 f2f2 	udiv	r2, r3, r2
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	085b      	lsrs	r3, r3, #1
 801073a:	441a      	add	r2, r3
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	fbb2 f3f3 	udiv	r3, r2, r3
 8010744:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010748:	2b0f      	cmp	r3, #15
 801074a:	d909      	bls.n	8010760 <UART_SetConfig+0xc9c>
 801074c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801074e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010752:	d205      	bcs.n	8010760 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010756:	b29a      	uxth	r2, r3
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	60da      	str	r2, [r3, #12]
 801075e:	e002      	b.n	8010766 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010760:	2301      	movs	r3, #1
 8010762:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	2201      	movs	r2, #1
 801076a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	2201      	movs	r2, #1
 8010772:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	2200      	movs	r2, #0
 801077a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	2200      	movs	r2, #0
 8010780:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010782:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010786:	4618      	mov	r0, r3
 8010788:	3748      	adds	r7, #72	@ 0x48
 801078a:	46bd      	mov	sp, r7
 801078c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010790:	03d09000 	.word	0x03d09000
 8010794:	003d0900 	.word	0x003d0900
 8010798:	080191dc 	.word	0x080191dc

0801079c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801079c:	b480      	push	{r7}
 801079e:	b083      	sub	sp, #12
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107a8:	f003 0308 	and.w	r3, r3, #8
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d00a      	beq.n	80107c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	430a      	orrs	r2, r1
 80107c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107ca:	f003 0301 	and.w	r3, r3, #1
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d00a      	beq.n	80107e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	430a      	orrs	r2, r1
 80107e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107ec:	f003 0302 	and.w	r3, r3, #2
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00a      	beq.n	801080a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	430a      	orrs	r2, r1
 8010808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801080e:	f003 0304 	and.w	r3, r3, #4
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00a      	beq.n	801082c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	430a      	orrs	r2, r1
 801082a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010830:	f003 0310 	and.w	r3, r3, #16
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00a      	beq.n	801084e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	430a      	orrs	r2, r1
 801084c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010852:	f003 0320 	and.w	r3, r3, #32
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00a      	beq.n	8010870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	430a      	orrs	r2, r1
 801086e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010878:	2b00      	cmp	r3, #0
 801087a:	d01a      	beq.n	80108b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	430a      	orrs	r2, r1
 8010890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801089a:	d10a      	bne.n	80108b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	430a      	orrs	r2, r1
 80108b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d00a      	beq.n	80108d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	430a      	orrs	r2, r1
 80108d2:	605a      	str	r2, [r3, #4]
  }
}
 80108d4:	bf00      	nop
 80108d6:	370c      	adds	r7, #12
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b098      	sub	sp, #96	@ 0x60
 80108e4:	af02      	add	r7, sp, #8
 80108e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2200      	movs	r2, #0
 80108ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80108f0:	f7f5 f9c2 	bl	8005c78 <HAL_GetTick>
 80108f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f003 0308 	and.w	r3, r3, #8
 8010900:	2b08      	cmp	r3, #8
 8010902:	d12f      	bne.n	8010964 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010904:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010908:	9300      	str	r3, [sp, #0]
 801090a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801090c:	2200      	movs	r2, #0
 801090e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f88e 	bl	8010a34 <UART_WaitOnFlagUntilTimeout>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d022      	beq.n	8010964 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010926:	e853 3f00 	ldrex	r3, [r3]
 801092a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801092c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801092e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010932:	653b      	str	r3, [r7, #80]	@ 0x50
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	461a      	mov	r2, r3
 801093a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801093c:	647b      	str	r3, [r7, #68]	@ 0x44
 801093e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010942:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010944:	e841 2300 	strex	r3, r2, [r1]
 8010948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801094a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801094c:	2b00      	cmp	r3, #0
 801094e:	d1e6      	bne.n	801091e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2220      	movs	r2, #32
 8010954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2200      	movs	r2, #0
 801095c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010960:	2303      	movs	r3, #3
 8010962:	e063      	b.n	8010a2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	f003 0304 	and.w	r3, r3, #4
 801096e:	2b04      	cmp	r3, #4
 8010970:	d149      	bne.n	8010a06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010972:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010976:	9300      	str	r3, [sp, #0]
 8010978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801097a:	2200      	movs	r2, #0
 801097c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f000 f857 	bl	8010a34 <UART_WaitOnFlagUntilTimeout>
 8010986:	4603      	mov	r3, r0
 8010988:	2b00      	cmp	r3, #0
 801098a:	d03c      	beq.n	8010a06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010994:	e853 3f00 	ldrex	r3, [r3]
 8010998:	623b      	str	r3, [r7, #32]
   return(result);
 801099a:	6a3b      	ldr	r3, [r7, #32]
 801099c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80109a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	461a      	mov	r2, r3
 80109a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80109ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80109b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109b2:	e841 2300 	strex	r3, r2, [r1]
 80109b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80109b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d1e6      	bne.n	801098c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	3308      	adds	r3, #8
 80109c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	e853 3f00 	ldrex	r3, [r3]
 80109cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f023 0301 	bic.w	r3, r3, #1
 80109d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	3308      	adds	r3, #8
 80109dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80109de:	61fa      	str	r2, [r7, #28]
 80109e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109e2:	69b9      	ldr	r1, [r7, #24]
 80109e4:	69fa      	ldr	r2, [r7, #28]
 80109e6:	e841 2300 	strex	r3, r2, [r1]
 80109ea:	617b      	str	r3, [r7, #20]
   return(result);
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d1e5      	bne.n	80109be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2220      	movs	r2, #32
 80109f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2200      	movs	r2, #0
 80109fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a02:	2303      	movs	r3, #3
 8010a04:	e012      	b.n	8010a2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2220      	movs	r2, #32
 8010a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2220      	movs	r2, #32
 8010a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2200      	movs	r2, #0
 8010a26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a2a:	2300      	movs	r3, #0
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3758      	adds	r7, #88	@ 0x58
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	603b      	str	r3, [r7, #0]
 8010a40:	4613      	mov	r3, r2
 8010a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a44:	e04f      	b.n	8010ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a46:	69bb      	ldr	r3, [r7, #24]
 8010a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a4c:	d04b      	beq.n	8010ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a4e:	f7f5 f913 	bl	8005c78 <HAL_GetTick>
 8010a52:	4602      	mov	r2, r0
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	69ba      	ldr	r2, [r7, #24]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d302      	bcc.n	8010a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8010a5e:	69bb      	ldr	r3, [r7, #24]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d101      	bne.n	8010a68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010a64:	2303      	movs	r3, #3
 8010a66:	e04e      	b.n	8010b06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	f003 0304 	and.w	r3, r3, #4
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d037      	beq.n	8010ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	2b80      	cmp	r3, #128	@ 0x80
 8010a7a:	d034      	beq.n	8010ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	2b40      	cmp	r3, #64	@ 0x40
 8010a80:	d031      	beq.n	8010ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	69db      	ldr	r3, [r3, #28]
 8010a88:	f003 0308 	and.w	r3, r3, #8
 8010a8c:	2b08      	cmp	r3, #8
 8010a8e:	d110      	bne.n	8010ab2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	2208      	movs	r2, #8
 8010a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010a98:	68f8      	ldr	r0, [r7, #12]
 8010a9a:	f000 fa43 	bl	8010f24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2208      	movs	r2, #8
 8010aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010aae:	2301      	movs	r3, #1
 8010ab0:	e029      	b.n	8010b06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	69db      	ldr	r3, [r3, #28]
 8010ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010ac0:	d111      	bne.n	8010ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f000 fa29 	bl	8010f24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2220      	movs	r2, #32
 8010ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2200      	movs	r2, #0
 8010ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010ae2:	2303      	movs	r3, #3
 8010ae4:	e00f      	b.n	8010b06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	69da      	ldr	r2, [r3, #28]
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	4013      	ands	r3, r2
 8010af0:	68ba      	ldr	r2, [r7, #8]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	bf0c      	ite	eq
 8010af6:	2301      	moveq	r3, #1
 8010af8:	2300      	movne	r3, #0
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	461a      	mov	r2, r3
 8010afe:	79fb      	ldrb	r3, [r7, #7]
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d0a0      	beq.n	8010a46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
	...

08010b10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010b10:	b480      	push	{r7}
 8010b12:	b0a3      	sub	sp, #140	@ 0x8c
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	60f8      	str	r0, [r7, #12]
 8010b18:	60b9      	str	r1, [r7, #8]
 8010b1a:	4613      	mov	r3, r2
 8010b1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	68ba      	ldr	r2, [r7, #8]
 8010b22:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	88fa      	ldrh	r2, [r7, #6]
 8010b28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	88fa      	ldrh	r2, [r7, #6]
 8010b30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2200      	movs	r2, #0
 8010b38:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	689b      	ldr	r3, [r3, #8]
 8010b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010b42:	d10e      	bne.n	8010b62 <UART_Start_Receive_IT+0x52>
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	691b      	ldr	r3, [r3, #16]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d105      	bne.n	8010b58 <UART_Start_Receive_IT+0x48>
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010b52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010b56:	e02d      	b.n	8010bb4 <UART_Start_Receive_IT+0xa4>
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	22ff      	movs	r2, #255	@ 0xff
 8010b5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010b60:	e028      	b.n	8010bb4 <UART_Start_Receive_IT+0xa4>
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d10d      	bne.n	8010b86 <UART_Start_Receive_IT+0x76>
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	691b      	ldr	r3, [r3, #16]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d104      	bne.n	8010b7c <UART_Start_Receive_IT+0x6c>
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	22ff      	movs	r2, #255	@ 0xff
 8010b76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010b7a:	e01b      	b.n	8010bb4 <UART_Start_Receive_IT+0xa4>
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	227f      	movs	r2, #127	@ 0x7f
 8010b80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010b84:	e016      	b.n	8010bb4 <UART_Start_Receive_IT+0xa4>
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	689b      	ldr	r3, [r3, #8]
 8010b8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010b8e:	d10d      	bne.n	8010bac <UART_Start_Receive_IT+0x9c>
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	691b      	ldr	r3, [r3, #16]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d104      	bne.n	8010ba2 <UART_Start_Receive_IT+0x92>
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	227f      	movs	r2, #127	@ 0x7f
 8010b9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010ba0:	e008      	b.n	8010bb4 <UART_Start_Receive_IT+0xa4>
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	223f      	movs	r2, #63	@ 0x3f
 8010ba6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010baa:	e003      	b.n	8010bb4 <UART_Start_Receive_IT+0xa4>
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2222      	movs	r2, #34	@ 0x22
 8010bc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	3308      	adds	r3, #8
 8010bca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010bce:	e853 3f00 	ldrex	r3, [r3]
 8010bd2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010bd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010bd6:	f043 0301 	orr.w	r3, r3, #1
 8010bda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3308      	adds	r3, #8
 8010be4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010be8:	673a      	str	r2, [r7, #112]	@ 0x70
 8010bea:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010bee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010bf0:	e841 2300 	strex	r3, r2, [r1]
 8010bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8010bf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d1e3      	bne.n	8010bc4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c04:	d14f      	bne.n	8010ca6 <UART_Start_Receive_IT+0x196>
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010c0c:	88fa      	ldrh	r2, [r7, #6]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d349      	bcc.n	8010ca6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	689b      	ldr	r3, [r3, #8]
 8010c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010c1a:	d107      	bne.n	8010c2c <UART_Start_Receive_IT+0x11c>
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	691b      	ldr	r3, [r3, #16]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d103      	bne.n	8010c2c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	4a47      	ldr	r2, [pc, #284]	@ (8010d44 <UART_Start_Receive_IT+0x234>)
 8010c28:	675a      	str	r2, [r3, #116]	@ 0x74
 8010c2a:	e002      	b.n	8010c32 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	4a46      	ldr	r2, [pc, #280]	@ (8010d48 <UART_Start_Receive_IT+0x238>)
 8010c30:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	691b      	ldr	r3, [r3, #16]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d01a      	beq.n	8010c70 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c42:	e853 3f00 	ldrex	r3, [r3]
 8010c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010c4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	461a      	mov	r2, r3
 8010c58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010c5e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c60:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010c62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010c64:	e841 2300 	strex	r3, r2, [r1]
 8010c68:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8010c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d1e4      	bne.n	8010c3a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	3308      	adds	r3, #8
 8010c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c7a:	e853 3f00 	ldrex	r3, [r3]
 8010c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	3308      	adds	r3, #8
 8010c8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010c90:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010c92:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c94:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010c96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c98:	e841 2300 	strex	r3, r2, [r1]
 8010c9c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d1e5      	bne.n	8010c70 <UART_Start_Receive_IT+0x160>
 8010ca4:	e046      	b.n	8010d34 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	689b      	ldr	r3, [r3, #8]
 8010caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010cae:	d107      	bne.n	8010cc0 <UART_Start_Receive_IT+0x1b0>
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	691b      	ldr	r3, [r3, #16]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d103      	bne.n	8010cc0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	4a24      	ldr	r2, [pc, #144]	@ (8010d4c <UART_Start_Receive_IT+0x23c>)
 8010cbc:	675a      	str	r2, [r3, #116]	@ 0x74
 8010cbe:	e002      	b.n	8010cc6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	4a23      	ldr	r2, [pc, #140]	@ (8010d50 <UART_Start_Receive_IT+0x240>)
 8010cc4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	691b      	ldr	r3, [r3, #16]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d019      	beq.n	8010d02 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cd6:	e853 3f00 	ldrex	r3, [r3]
 8010cda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cde:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8010ce2:	677b      	str	r3, [r7, #116]	@ 0x74
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	461a      	mov	r2, r3
 8010cea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8010cee:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010cf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cf4:	e841 2300 	strex	r3, r2, [r1]
 8010cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d1e6      	bne.n	8010cce <UART_Start_Receive_IT+0x1be>
 8010d00:	e018      	b.n	8010d34 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	e853 3f00 	ldrex	r3, [r3]
 8010d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	f043 0320 	orr.w	r3, r3, #32
 8010d16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d20:	623b      	str	r3, [r7, #32]
 8010d22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d24:	69f9      	ldr	r1, [r7, #28]
 8010d26:	6a3a      	ldr	r2, [r7, #32]
 8010d28:	e841 2300 	strex	r3, r2, [r1]
 8010d2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d1e6      	bne.n	8010d02 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8010d34:	2300      	movs	r3, #0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	378c      	adds	r7, #140	@ 0x8c
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	08011d79 	.word	0x08011d79
 8010d48:	08011a19 	.word	0x08011a19
 8010d4c:	08011861 	.word	0x08011861
 8010d50:	080116a9 	.word	0x080116a9

08010d54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b096      	sub	sp, #88	@ 0x58
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	68ba      	ldr	r2, [r7, #8]
 8010d66:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	88fa      	ldrh	r2, [r7, #6]
 8010d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2200      	movs	r2, #0
 8010d74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	2222      	movs	r2, #34	@ 0x22
 8010d7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d02d      	beq.n	8010de6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d90:	4a40      	ldr	r2, [pc, #256]	@ (8010e94 <UART_Start_Receive_DMA+0x140>)
 8010d92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d9a:	4a3f      	ldr	r2, [pc, #252]	@ (8010e98 <UART_Start_Receive_DMA+0x144>)
 8010d9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010da4:	4a3d      	ldr	r2, [pc, #244]	@ (8010e9c <UART_Start_Receive_DMA+0x148>)
 8010da6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010dae:	2200      	movs	r2, #0
 8010db0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	3324      	adds	r3, #36	@ 0x24
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	88fb      	ldrh	r3, [r7, #6]
 8010dc8:	f7f5 fc6c 	bl	80066a4 <HAL_DMA_Start_IT>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d009      	beq.n	8010de6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2210      	movs	r2, #16
 8010dd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2220      	movs	r2, #32
 8010dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010de2:	2301      	movs	r3, #1
 8010de4:	e051      	b.n	8010e8a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	691b      	ldr	r3, [r3, #16]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d018      	beq.n	8010e20 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010df6:	e853 3f00 	ldrex	r3, [r3]
 8010dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010e02:	657b      	str	r3, [r7, #84]	@ 0x54
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	461a      	mov	r2, r3
 8010e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e0e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e14:	e841 2300 	strex	r3, r2, [r1]
 8010e18:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d1e6      	bne.n	8010dee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	3308      	adds	r3, #8
 8010e26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e2a:	e853 3f00 	ldrex	r3, [r3]
 8010e2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e32:	f043 0301 	orr.w	r3, r3, #1
 8010e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	3308      	adds	r3, #8
 8010e3e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010e40:	637a      	str	r2, [r7, #52]	@ 0x34
 8010e42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e44:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010e46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e48:	e841 2300 	strex	r3, r2, [r1]
 8010e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d1e5      	bne.n	8010e20 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	3308      	adds	r3, #8
 8010e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	e853 3f00 	ldrex	r3, [r3]
 8010e62:	613b      	str	r3, [r7, #16]
   return(result);
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	3308      	adds	r3, #8
 8010e72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010e74:	623a      	str	r2, [r7, #32]
 8010e76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e78:	69f9      	ldr	r1, [r7, #28]
 8010e7a:	6a3a      	ldr	r2, [r7, #32]
 8010e7c:	e841 2300 	strex	r3, r2, [r1]
 8010e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8010e82:	69bb      	ldr	r3, [r7, #24]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d1e5      	bne.n	8010e54 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010e88:	2300      	movs	r3, #0
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	3758      	adds	r7, #88	@ 0x58
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	bd80      	pop	{r7, pc}
 8010e92:	bf00      	nop
 8010e94:	08010ff1 	.word	0x08010ff1
 8010e98:	08011119 	.word	0x08011119
 8010e9c:	08011157 	.word	0x08011157

08010ea0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b08f      	sub	sp, #60	@ 0x3c
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eae:	6a3b      	ldr	r3, [r7, #32]
 8010eb0:	e853 3f00 	ldrex	r3, [r3]
 8010eb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8010eb6:	69fb      	ldr	r3, [r7, #28]
 8010eb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010ec8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ecc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ece:	e841 2300 	strex	r3, r2, [r1]
 8010ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d1e6      	bne.n	8010ea8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	3308      	adds	r3, #8
 8010ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	e853 3f00 	ldrex	r3, [r3]
 8010ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	3308      	adds	r3, #8
 8010ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010efa:	61ba      	str	r2, [r7, #24]
 8010efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010efe:	6979      	ldr	r1, [r7, #20]
 8010f00:	69ba      	ldr	r2, [r7, #24]
 8010f02:	e841 2300 	strex	r3, r2, [r1]
 8010f06:	613b      	str	r3, [r7, #16]
   return(result);
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d1e5      	bne.n	8010eda <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2220      	movs	r2, #32
 8010f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010f16:	bf00      	nop
 8010f18:	373c      	adds	r7, #60	@ 0x3c
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr
	...

08010f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b095      	sub	sp, #84	@ 0x54
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f34:	e853 3f00 	ldrex	r3, [r3]
 8010f38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010f40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	461a      	mov	r2, r3
 8010f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010f4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f52:	e841 2300 	strex	r3, r2, [r1]
 8010f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d1e6      	bne.n	8010f2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	3308      	adds	r3, #8
 8010f64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f66:	6a3b      	ldr	r3, [r7, #32]
 8010f68:	e853 3f00 	ldrex	r3, [r3]
 8010f6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010f6e:	69fa      	ldr	r2, [r7, #28]
 8010f70:	4b1e      	ldr	r3, [pc, #120]	@ (8010fec <UART_EndRxTransfer+0xc8>)
 8010f72:	4013      	ands	r3, r2
 8010f74:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	3308      	adds	r3, #8
 8010f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010f80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010f84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f86:	e841 2300 	strex	r3, r2, [r1]
 8010f8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d1e5      	bne.n	8010f5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d118      	bne.n	8010fcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	e853 3f00 	ldrex	r3, [r3]
 8010fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	f023 0310 	bic.w	r3, r3, #16
 8010fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	461a      	mov	r2, r3
 8010fb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fb8:	61bb      	str	r3, [r7, #24]
 8010fba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fbc:	6979      	ldr	r1, [r7, #20]
 8010fbe:	69ba      	ldr	r2, [r7, #24]
 8010fc0:	e841 2300 	strex	r3, r2, [r1]
 8010fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d1e6      	bne.n	8010f9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2220      	movs	r2, #32
 8010fd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010fe0:	bf00      	nop
 8010fe2:	3754      	adds	r7, #84	@ 0x54
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr
 8010fec:	effffffe 	.word	0xeffffffe

08010ff0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b09c      	sub	sp, #112	@ 0x70
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ffc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	69db      	ldr	r3, [r3, #28]
 8011002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011006:	d071      	beq.n	80110ec <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801100a:	2200      	movs	r2, #0
 801100c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011018:	e853 3f00 	ldrex	r3, [r3]
 801101c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801101e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011024:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	461a      	mov	r2, r3
 801102c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801102e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011030:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011032:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011034:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011036:	e841 2300 	strex	r3, r2, [r1]
 801103a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801103c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801103e:	2b00      	cmp	r3, #0
 8011040:	d1e6      	bne.n	8011010 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011042:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	3308      	adds	r3, #8
 8011048:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801104a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801104c:	e853 3f00 	ldrex	r3, [r3]
 8011050:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011054:	f023 0301 	bic.w	r3, r3, #1
 8011058:	667b      	str	r3, [r7, #100]	@ 0x64
 801105a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	3308      	adds	r3, #8
 8011060:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011062:	647a      	str	r2, [r7, #68]	@ 0x44
 8011064:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011066:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011068:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801106a:	e841 2300 	strex	r3, r2, [r1]
 801106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011072:	2b00      	cmp	r3, #0
 8011074:	d1e5      	bne.n	8011042 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	3308      	adds	r3, #8
 801107c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011080:	e853 3f00 	ldrex	r3, [r3]
 8011084:	623b      	str	r3, [r7, #32]
   return(result);
 8011086:	6a3b      	ldr	r3, [r7, #32]
 8011088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801108c:	663b      	str	r3, [r7, #96]	@ 0x60
 801108e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	3308      	adds	r3, #8
 8011094:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011096:	633a      	str	r2, [r7, #48]	@ 0x30
 8011098:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801109c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801109e:	e841 2300 	strex	r3, r2, [r1]
 80110a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80110a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1e5      	bne.n	8011076 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80110aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110ac:	2220      	movs	r2, #32
 80110ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	d118      	bne.n	80110ec <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	e853 3f00 	ldrex	r3, [r3]
 80110c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	f023 0310 	bic.w	r3, r3, #16
 80110ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80110d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	461a      	mov	r2, r3
 80110d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80110d8:	61fb      	str	r3, [r7, #28]
 80110da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110dc:	69b9      	ldr	r1, [r7, #24]
 80110de:	69fa      	ldr	r2, [r7, #28]
 80110e0:	e841 2300 	strex	r3, r2, [r1]
 80110e4:	617b      	str	r3, [r7, #20]
   return(result);
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1e6      	bne.n	80110ba <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80110ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110ee:	2200      	movs	r2, #0
 80110f0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	d107      	bne.n	801110a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80110fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80110fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011100:	4619      	mov	r1, r3
 8011102:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011104:	f7fe fcd2 	bl	800faac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011108:	e002      	b.n	8011110 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801110a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801110c:	f7f1 f9c0 	bl	8002490 <HAL_UART_RxCpltCallback>
}
 8011110:	bf00      	nop
 8011112:	3770      	adds	r7, #112	@ 0x70
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b084      	sub	sp, #16
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011124:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2201      	movs	r2, #1
 801112a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011130:	2b01      	cmp	r3, #1
 8011132:	d109      	bne.n	8011148 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801113a:	085b      	lsrs	r3, r3, #1
 801113c:	b29b      	uxth	r3, r3
 801113e:	4619      	mov	r1, r3
 8011140:	68f8      	ldr	r0, [r7, #12]
 8011142:	f7fe fcb3 	bl	800faac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011146:	e002      	b.n	801114e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011148:	68f8      	ldr	r0, [r7, #12]
 801114a:	f7fe fc91 	bl	800fa70 <HAL_UART_RxHalfCpltCallback>
}
 801114e:	bf00      	nop
 8011150:	3710      	adds	r7, #16
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}

08011156 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011156:	b580      	push	{r7, lr}
 8011158:	b086      	sub	sp, #24
 801115a:	af00      	add	r7, sp, #0
 801115c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011162:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801116a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011172:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	689b      	ldr	r3, [r3, #8]
 801117a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801117e:	2b80      	cmp	r3, #128	@ 0x80
 8011180:	d109      	bne.n	8011196 <UART_DMAError+0x40>
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	2b21      	cmp	r3, #33	@ 0x21
 8011186:	d106      	bne.n	8011196 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	2200      	movs	r2, #0
 801118c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011190:	6978      	ldr	r0, [r7, #20]
 8011192:	f7ff fe85 	bl	8010ea0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	689b      	ldr	r3, [r3, #8]
 801119c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111a0:	2b40      	cmp	r3, #64	@ 0x40
 80111a2:	d109      	bne.n	80111b8 <UART_DMAError+0x62>
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2b22      	cmp	r3, #34	@ 0x22
 80111a8:	d106      	bne.n	80111b8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	2200      	movs	r2, #0
 80111ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80111b2:	6978      	ldr	r0, [r7, #20]
 80111b4:	f7ff feb6 	bl	8010f24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80111be:	f043 0210 	orr.w	r2, r3, #16
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80111c8:	6978      	ldr	r0, [r7, #20]
 80111ca:	f7fe fc5b 	bl	800fa84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80111ce:	bf00      	nop
 80111d0:	3718      	adds	r7, #24
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}

080111d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b084      	sub	sp, #16
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2200      	movs	r2, #0
 80111e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2200      	movs	r2, #0
 80111f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80111f4:	68f8      	ldr	r0, [r7, #12]
 80111f6:	f7fe fc45 	bl	800fa84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80111fa:	bf00      	nop
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b084      	sub	sp, #16
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801120e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011214:	2200      	movs	r2, #0
 8011216:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801121e:	2b00      	cmp	r3, #0
 8011220:	d005      	beq.n	801122e <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801122a:	2b00      	cmp	r3, #0
 801122c:	d12b      	bne.n	8011286 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2200      	movs	r2, #0
 8011232:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2200      	movs	r2, #0
 801123a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2200      	movs	r2, #0
 8011242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	220f      	movs	r2, #15
 801124c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011256:	d107      	bne.n	8011268 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	699a      	ldr	r2, [r3, #24]
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	f042 0210 	orr.w	r2, r2, #16
 8011266:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2220      	movs	r2, #32
 801126c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	2220      	movs	r2, #32
 8011274:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	2200      	movs	r2, #0
 801127c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f7fe fc0a 	bl	800fa98 <HAL_UART_AbortCpltCallback>
 8011284:	e000      	b.n	8011288 <UART_DMATxAbortCallback+0x86>
      return;
 8011286:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}

0801128e <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801128e:	b580      	push	{r7, lr}
 8011290:	b084      	sub	sp, #16
 8011292:	af00      	add	r7, sp, #0
 8011294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801129a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80112a2:	2200      	movs	r2, #0
 80112a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d004      	beq.n	80112b8 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80112b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d126      	bne.n	8011306 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2200      	movs	r2, #0
 80112bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2200      	movs	r2, #0
 80112c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2200      	movs	r2, #0
 80112cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	220f      	movs	r2, #15
 80112d6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	699a      	ldr	r2, [r3, #24]
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	f042 0208 	orr.w	r2, r2, #8
 80112e6:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2220      	movs	r2, #32
 80112ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	2220      	movs	r2, #32
 80112f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	2200      	movs	r2, #0
 80112fc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	f7fe fbca 	bl	800fa98 <HAL_UART_AbortCpltCallback>
 8011304:	e000      	b.n	8011308 <UART_DMARxAbortCallback+0x7a>
      return;
 8011306:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801130e:	b480      	push	{r7}
 8011310:	b08f      	sub	sp, #60	@ 0x3c
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801131c:	2b21      	cmp	r3, #33	@ 0x21
 801131e:	d14c      	bne.n	80113ba <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011326:	b29b      	uxth	r3, r3
 8011328:	2b00      	cmp	r3, #0
 801132a:	d132      	bne.n	8011392 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011332:	6a3b      	ldr	r3, [r7, #32]
 8011334:	e853 3f00 	ldrex	r3, [r3]
 8011338:	61fb      	str	r3, [r7, #28]
   return(result);
 801133a:	69fb      	ldr	r3, [r7, #28]
 801133c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011340:	637b      	str	r3, [r7, #52]	@ 0x34
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	461a      	mov	r2, r3
 8011348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801134c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801134e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011352:	e841 2300 	strex	r3, r2, [r1]
 8011356:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801135a:	2b00      	cmp	r3, #0
 801135c:	d1e6      	bne.n	801132c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	e853 3f00 	ldrex	r3, [r3]
 801136a:	60bb      	str	r3, [r7, #8]
   return(result);
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011372:	633b      	str	r3, [r7, #48]	@ 0x30
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	461a      	mov	r2, r3
 801137a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801137c:	61bb      	str	r3, [r7, #24]
 801137e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011380:	6979      	ldr	r1, [r7, #20]
 8011382:	69ba      	ldr	r2, [r7, #24]
 8011384:	e841 2300 	strex	r3, r2, [r1]
 8011388:	613b      	str	r3, [r7, #16]
   return(result);
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d1e6      	bne.n	801135e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8011390:	e013      	b.n	80113ba <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011396:	781a      	ldrb	r2, [r3, #0]
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113a2:	1c5a      	adds	r2, r3, #1
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	3b01      	subs	r3, #1
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80113ba:	bf00      	nop
 80113bc:	373c      	adds	r7, #60	@ 0x3c
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr

080113c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80113c6:	b480      	push	{r7}
 80113c8:	b091      	sub	sp, #68	@ 0x44
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80113d4:	2b21      	cmp	r3, #33	@ 0x21
 80113d6:	d151      	bne.n	801147c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80113de:	b29b      	uxth	r3, r3
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d132      	bne.n	801144a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ec:	e853 3f00 	ldrex	r3, [r3]
 80113f0:	623b      	str	r3, [r7, #32]
   return(result);
 80113f2:	6a3b      	ldr	r3, [r7, #32]
 80113f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80113f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	461a      	mov	r2, r3
 8011400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011402:	633b      	str	r3, [r7, #48]	@ 0x30
 8011404:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801140a:	e841 2300 	strex	r3, r2, [r1]
 801140e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011412:	2b00      	cmp	r3, #0
 8011414:	d1e6      	bne.n	80113e4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	e853 3f00 	ldrex	r3, [r3]
 8011422:	60fb      	str	r3, [r7, #12]
   return(result);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801142a:	637b      	str	r3, [r7, #52]	@ 0x34
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	461a      	mov	r2, r3
 8011432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011434:	61fb      	str	r3, [r7, #28]
 8011436:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011438:	69b9      	ldr	r1, [r7, #24]
 801143a:	69fa      	ldr	r2, [r7, #28]
 801143c:	e841 2300 	strex	r3, r2, [r1]
 8011440:	617b      	str	r3, [r7, #20]
   return(result);
 8011442:	697b      	ldr	r3, [r7, #20]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d1e6      	bne.n	8011416 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8011448:	e018      	b.n	801147c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801144e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8011450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011452:	881b      	ldrh	r3, [r3, #0]
 8011454:	461a      	mov	r2, r3
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801145e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011464:	1c9a      	adds	r2, r3, #2
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011470:	b29b      	uxth	r3, r3
 8011472:	3b01      	subs	r3, #1
 8011474:	b29a      	uxth	r2, r3
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 801147c:	bf00      	nop
 801147e:	3744      	adds	r7, #68	@ 0x44
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr

08011488 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011488:	b480      	push	{r7}
 801148a:	b091      	sub	sp, #68	@ 0x44
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011496:	2b21      	cmp	r3, #33	@ 0x21
 8011498:	d160      	bne.n	801155c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80114a0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80114a2:	e057      	b.n	8011554 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d133      	bne.n	8011518 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	3308      	adds	r3, #8
 80114b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ba:	e853 3f00 	ldrex	r3, [r3]
 80114be:	623b      	str	r3, [r7, #32]
   return(result);
 80114c0:	6a3b      	ldr	r3, [r7, #32]
 80114c2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80114c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	3308      	adds	r3, #8
 80114ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80114d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80114d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80114d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114d8:	e841 2300 	strex	r3, r2, [r1]
 80114dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80114de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d1e5      	bne.n	80114b0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	e853 3f00 	ldrex	r3, [r3]
 80114f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80114f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	461a      	mov	r2, r3
 8011500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011502:	61fb      	str	r3, [r7, #28]
 8011504:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011506:	69b9      	ldr	r1, [r7, #24]
 8011508:	69fa      	ldr	r2, [r7, #28]
 801150a:	e841 2300 	strex	r3, r2, [r1]
 801150e:	617b      	str	r3, [r7, #20]
   return(result);
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d1e6      	bne.n	80114e4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8011516:	e021      	b.n	801155c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	69db      	ldr	r3, [r3, #28]
 801151e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011522:	2b00      	cmp	r3, #0
 8011524:	d013      	beq.n	801154e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801152a:	781a      	ldrb	r2, [r3, #0]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011536:	1c5a      	adds	r2, r3, #1
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8011542:	b29b      	uxth	r3, r3
 8011544:	3b01      	subs	r3, #1
 8011546:	b29a      	uxth	r2, r3
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801154e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011550:	3b01      	subs	r3, #1
 8011552:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011554:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011556:	2b00      	cmp	r3, #0
 8011558:	d1a4      	bne.n	80114a4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801155a:	e7ff      	b.n	801155c <UART_TxISR_8BIT_FIFOEN+0xd4>
 801155c:	bf00      	nop
 801155e:	3744      	adds	r7, #68	@ 0x44
 8011560:	46bd      	mov	sp, r7
 8011562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011566:	4770      	bx	lr

08011568 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011568:	b480      	push	{r7}
 801156a:	b091      	sub	sp, #68	@ 0x44
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011576:	2b21      	cmp	r3, #33	@ 0x21
 8011578:	d165      	bne.n	8011646 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011580:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8011582:	e05c      	b.n	801163e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801158a:	b29b      	uxth	r3, r3
 801158c:	2b00      	cmp	r3, #0
 801158e:	d133      	bne.n	80115f8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	3308      	adds	r3, #8
 8011596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011598:	6a3b      	ldr	r3, [r7, #32]
 801159a:	e853 3f00 	ldrex	r3, [r3]
 801159e:	61fb      	str	r3, [r7, #28]
   return(result);
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80115a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	3308      	adds	r3, #8
 80115ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80115b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80115b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80115b8:	e841 2300 	strex	r3, r2, [r1]
 80115bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80115be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d1e5      	bne.n	8011590 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	e853 3f00 	ldrex	r3, [r3]
 80115d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	461a      	mov	r2, r3
 80115e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115e2:	61bb      	str	r3, [r7, #24]
 80115e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115e6:	6979      	ldr	r1, [r7, #20]
 80115e8:	69ba      	ldr	r2, [r7, #24]
 80115ea:	e841 2300 	strex	r3, r2, [r1]
 80115ee:	613b      	str	r3, [r7, #16]
   return(result);
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d1e6      	bne.n	80115c4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80115f6:	e026      	b.n	8011646 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	69db      	ldr	r3, [r3, #28]
 80115fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011602:	2b00      	cmp	r3, #0
 8011604:	d018      	beq.n	8011638 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801160a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801160c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160e:	881b      	ldrh	r3, [r3, #0]
 8011610:	461a      	mov	r2, r3
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801161a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011620:	1c9a      	adds	r2, r3, #2
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801162c:	b29b      	uxth	r3, r3
 801162e:	3b01      	subs	r3, #1
 8011630:	b29a      	uxth	r2, r3
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8011638:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801163a:	3b01      	subs	r3, #1
 801163c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 801163e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011640:	2b00      	cmp	r3, #0
 8011642:	d19f      	bne.n	8011584 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8011644:	e7ff      	b.n	8011646 <UART_TxISR_16BIT_FIFOEN+0xde>
 8011646:	bf00      	nop
 8011648:	3744      	adds	r7, #68	@ 0x44
 801164a:	46bd      	mov	sp, r7
 801164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011650:	4770      	bx	lr

08011652 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011652:	b580      	push	{r7, lr}
 8011654:	b088      	sub	sp, #32
 8011656:	af00      	add	r7, sp, #0
 8011658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	e853 3f00 	ldrex	r3, [r3]
 8011666:	60bb      	str	r3, [r7, #8]
   return(result);
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801166e:	61fb      	str	r3, [r7, #28]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	461a      	mov	r2, r3
 8011676:	69fb      	ldr	r3, [r7, #28]
 8011678:	61bb      	str	r3, [r7, #24]
 801167a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801167c:	6979      	ldr	r1, [r7, #20]
 801167e:	69ba      	ldr	r2, [r7, #24]
 8011680:	e841 2300 	strex	r3, r2, [r1]
 8011684:	613b      	str	r3, [r7, #16]
   return(result);
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d1e6      	bne.n	801165a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2220      	movs	r2, #32
 8011690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2200      	movs	r2, #0
 8011698:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f7fe f9de 	bl	800fa5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116a0:	bf00      	nop
 80116a2:	3720      	adds	r7, #32
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b09c      	sub	sp, #112	@ 0x70
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80116b6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80116c0:	2b22      	cmp	r3, #34	@ 0x22
 80116c2:	f040 80be 	bne.w	8011842 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116cc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80116d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80116d4:	b2d9      	uxtb	r1, r3
 80116d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80116da:	b2da      	uxtb	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116e0:	400a      	ands	r2, r1
 80116e2:	b2d2      	uxtb	r2, r2
 80116e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80116ea:	1c5a      	adds	r2, r3, #1
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	3b01      	subs	r3, #1
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011708:	b29b      	uxth	r3, r3
 801170a:	2b00      	cmp	r3, #0
 801170c:	f040 80a1 	bne.w	8011852 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011718:	e853 3f00 	ldrex	r3, [r3]
 801171c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801171e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	461a      	mov	r2, r3
 801172c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801172e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011730:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011736:	e841 2300 	strex	r3, r2, [r1]
 801173a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801173c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1e6      	bne.n	8011710 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	3308      	adds	r3, #8
 8011748:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801174a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801174c:	e853 3f00 	ldrex	r3, [r3]
 8011750:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011754:	f023 0301 	bic.w	r3, r3, #1
 8011758:	667b      	str	r3, [r7, #100]	@ 0x64
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	3308      	adds	r3, #8
 8011760:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011762:	647a      	str	r2, [r7, #68]	@ 0x44
 8011764:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011766:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801176a:	e841 2300 	strex	r3, r2, [r1]
 801176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011772:	2b00      	cmp	r3, #0
 8011774:	d1e5      	bne.n	8011742 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2220      	movs	r2, #32
 801177a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2200      	movs	r2, #0
 8011788:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	4a33      	ldr	r2, [pc, #204]	@ (801185c <UART_RxISR_8BIT+0x1b4>)
 8011790:	4293      	cmp	r3, r2
 8011792:	d01f      	beq.n	80117d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d018      	beq.n	80117d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117aa:	e853 3f00 	ldrex	r3, [r3]
 80117ae:	623b      	str	r3, [r7, #32]
   return(result);
 80117b0:	6a3b      	ldr	r3, [r7, #32]
 80117b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80117b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	461a      	mov	r2, r3
 80117be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80117c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80117c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80117c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117c8:	e841 2300 	strex	r3, r2, [r1]
 80117cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80117ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d1e6      	bne.n	80117a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117d8:	2b01      	cmp	r3, #1
 80117da:	d12e      	bne.n	801183a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2200      	movs	r2, #0
 80117e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	e853 3f00 	ldrex	r3, [r3]
 80117ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	f023 0310 	bic.w	r3, r3, #16
 80117f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	461a      	mov	r2, r3
 80117fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011800:	61fb      	str	r3, [r7, #28]
 8011802:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011804:	69b9      	ldr	r1, [r7, #24]
 8011806:	69fa      	ldr	r2, [r7, #28]
 8011808:	e841 2300 	strex	r3, r2, [r1]
 801180c:	617b      	str	r3, [r7, #20]
   return(result);
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d1e6      	bne.n	80117e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	69db      	ldr	r3, [r3, #28]
 801181a:	f003 0310 	and.w	r3, r3, #16
 801181e:	2b10      	cmp	r3, #16
 8011820:	d103      	bne.n	801182a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	2210      	movs	r2, #16
 8011828:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011830:	4619      	mov	r1, r3
 8011832:	6878      	ldr	r0, [r7, #4]
 8011834:	f7fe f93a 	bl	800faac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011838:	e00b      	b.n	8011852 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f7f0 fe28 	bl	8002490 <HAL_UART_RxCpltCallback>
}
 8011840:	e007      	b.n	8011852 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	699a      	ldr	r2, [r3, #24]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	f042 0208 	orr.w	r2, r2, #8
 8011850:	619a      	str	r2, [r3, #24]
}
 8011852:	bf00      	nop
 8011854:	3770      	adds	r7, #112	@ 0x70
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	58000c00 	.word	0x58000c00

08011860 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b09c      	sub	sp, #112	@ 0x70
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801186e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011878:	2b22      	cmp	r3, #34	@ 0x22
 801187a:	f040 80be 	bne.w	80119fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011884:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801188c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801188e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8011892:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011896:	4013      	ands	r3, r2
 8011898:	b29a      	uxth	r2, r3
 801189a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801189c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118a2:	1c9a      	adds	r2, r3, #2
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	3b01      	subs	r3, #1
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80118c0:	b29b      	uxth	r3, r3
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	f040 80a1 	bne.w	8011a0a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118d0:	e853 3f00 	ldrex	r3, [r3]
 80118d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80118d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80118dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	461a      	mov	r2, r3
 80118e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80118e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80118ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80118ee:	e841 2300 	strex	r3, r2, [r1]
 80118f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80118f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d1e6      	bne.n	80118c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	3308      	adds	r3, #8
 8011900:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011904:	e853 3f00 	ldrex	r3, [r3]
 8011908:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801190c:	f023 0301 	bic.w	r3, r3, #1
 8011910:	663b      	str	r3, [r7, #96]	@ 0x60
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	3308      	adds	r3, #8
 8011918:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801191a:	643a      	str	r2, [r7, #64]	@ 0x40
 801191c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801191e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011920:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011922:	e841 2300 	strex	r3, r2, [r1]
 8011926:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192a:	2b00      	cmp	r3, #0
 801192c:	d1e5      	bne.n	80118fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2220      	movs	r2, #32
 8011932:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2200      	movs	r2, #0
 801193a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2200      	movs	r2, #0
 8011940:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	4a33      	ldr	r2, [pc, #204]	@ (8011a14 <UART_RxISR_16BIT+0x1b4>)
 8011948:	4293      	cmp	r3, r2
 801194a:	d01f      	beq.n	801198c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011956:	2b00      	cmp	r3, #0
 8011958:	d018      	beq.n	801198c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011960:	6a3b      	ldr	r3, [r7, #32]
 8011962:	e853 3f00 	ldrex	r3, [r3]
 8011966:	61fb      	str	r3, [r7, #28]
   return(result);
 8011968:	69fb      	ldr	r3, [r7, #28]
 801196a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801196e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	461a      	mov	r2, r3
 8011976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801197a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801197c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801197e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011980:	e841 2300 	strex	r3, r2, [r1]
 8011984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011988:	2b00      	cmp	r3, #0
 801198a:	d1e6      	bne.n	801195a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011990:	2b01      	cmp	r3, #1
 8011992:	d12e      	bne.n	80119f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	e853 3f00 	ldrex	r3, [r3]
 80119a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	f023 0310 	bic.w	r3, r3, #16
 80119ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	461a      	mov	r2, r3
 80119b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119b8:	61bb      	str	r3, [r7, #24]
 80119ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119bc:	6979      	ldr	r1, [r7, #20]
 80119be:	69ba      	ldr	r2, [r7, #24]
 80119c0:	e841 2300 	strex	r3, r2, [r1]
 80119c4:	613b      	str	r3, [r7, #16]
   return(result);
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d1e6      	bne.n	801199a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	69db      	ldr	r3, [r3, #28]
 80119d2:	f003 0310 	and.w	r3, r3, #16
 80119d6:	2b10      	cmp	r3, #16
 80119d8:	d103      	bne.n	80119e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2210      	movs	r2, #16
 80119e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80119e8:	4619      	mov	r1, r3
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7fe f85e 	bl	800faac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80119f0:	e00b      	b.n	8011a0a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f7f0 fd4c 	bl	8002490 <HAL_UART_RxCpltCallback>
}
 80119f8:	e007      	b.n	8011a0a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	699a      	ldr	r2, [r3, #24]
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	f042 0208 	orr.w	r2, r2, #8
 8011a08:	619a      	str	r2, [r3, #24]
}
 8011a0a:	bf00      	nop
 8011a0c:	3770      	adds	r7, #112	@ 0x70
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	58000c00 	.word	0x58000c00

08011a18 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b0ac      	sub	sp, #176	@ 0xb0
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011a26:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	69db      	ldr	r3, [r3, #28]
 8011a30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	689b      	ldr	r3, [r3, #8]
 8011a44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011a4e:	2b22      	cmp	r3, #34	@ 0x22
 8011a50:	f040 8180 	bne.w	8011d54 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011a5a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011a5e:	e123      	b.n	8011ca8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a66:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011a6a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8011a6e:	b2d9      	uxtb	r1, r3
 8011a70:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8011a74:	b2da      	uxtb	r2, r3
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a7a:	400a      	ands	r2, r1
 8011a7c:	b2d2      	uxtb	r2, r2
 8011a7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a84:	1c5a      	adds	r2, r3, #1
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011a90:	b29b      	uxth	r3, r3
 8011a92:	3b01      	subs	r3, #1
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	69db      	ldr	r3, [r3, #28]
 8011aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011aa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011aaa:	f003 0307 	and.w	r3, r3, #7
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d053      	beq.n	8011b5a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ab6:	f003 0301 	and.w	r3, r3, #1
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d011      	beq.n	8011ae2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8011abe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d00b      	beq.n	8011ae2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2201      	movs	r2, #1
 8011ad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ad8:	f043 0201 	orr.w	r2, r3, #1
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ae6:	f003 0302 	and.w	r3, r3, #2
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d011      	beq.n	8011b12 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011af2:	f003 0301 	and.w	r3, r3, #1
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d00b      	beq.n	8011b12 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2202      	movs	r2, #2
 8011b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b08:	f043 0204 	orr.w	r2, r3, #4
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011b16:	f003 0304 	and.w	r3, r3, #4
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d011      	beq.n	8011b42 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011b22:	f003 0301 	and.w	r3, r3, #1
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d00b      	beq.n	8011b42 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	2204      	movs	r2, #4
 8011b30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b38:	f043 0202 	orr.w	r2, r3, #2
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d006      	beq.n	8011b5a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f7fd ff99 	bl	800fa84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2200      	movs	r2, #0
 8011b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	f040 80a0 	bne.w	8011ca8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011b70:	e853 3f00 	ldrex	r3, [r3]
 8011b74:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8011b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	461a      	mov	r2, r3
 8011b86:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011b8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011b8c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b8e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011b90:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011b92:	e841 2300 	strex	r3, r2, [r1]
 8011b96:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8011b98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d1e4      	bne.n	8011b68 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	3308      	adds	r3, #8
 8011ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ba8:	e853 3f00 	ldrex	r3, [r3]
 8011bac:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8011bae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011bb0:	4b6e      	ldr	r3, [pc, #440]	@ (8011d6c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011bb2:	4013      	ands	r3, r2
 8011bb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	3308      	adds	r3, #8
 8011bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011bc2:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011bc4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bc6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8011bc8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011bca:	e841 2300 	strex	r3, r2, [r1]
 8011bce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8011bd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d1e3      	bne.n	8011b9e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	2220      	movs	r2, #32
 8011bda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2200      	movs	r2, #0
 8011be2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	4a60      	ldr	r2, [pc, #384]	@ (8011d70 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011bf0:	4293      	cmp	r3, r2
 8011bf2:	d021      	beq.n	8011c38 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d01a      	beq.n	8011c38 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c0a:	e853 3f00 	ldrex	r3, [r3]
 8011c0e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	461a      	mov	r2, r3
 8011c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011c24:	657b      	str	r3, [r7, #84]	@ 0x54
 8011c26:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c28:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011c2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011c2c:	e841 2300 	strex	r3, r2, [r1]
 8011c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d1e4      	bne.n	8011c02 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c3c:	2b01      	cmp	r3, #1
 8011c3e:	d130      	bne.n	8011ca2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c4e:	e853 3f00 	ldrex	r3, [r3]
 8011c52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c56:	f023 0310 	bic.w	r3, r3, #16
 8011c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	461a      	mov	r2, r3
 8011c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c70:	e841 2300 	strex	r3, r2, [r1]
 8011c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d1e4      	bne.n	8011c46 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	69db      	ldr	r3, [r3, #28]
 8011c82:	f003 0310 	and.w	r3, r3, #16
 8011c86:	2b10      	cmp	r3, #16
 8011c88:	d103      	bne.n	8011c92 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	2210      	movs	r2, #16
 8011c90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011c98:	4619      	mov	r1, r3
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f7fd ff06 	bl	800faac <HAL_UARTEx_RxEventCallback>
 8011ca0:	e002      	b.n	8011ca8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f7f0 fbf4 	bl	8002490 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011ca8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d006      	beq.n	8011cbe <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cb4:	f003 0320 	and.w	r3, r3, #32
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	f47f aed1 	bne.w	8011a60 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011cc4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011cc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d049      	beq.n	8011d64 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011cd6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d242      	bcs.n	8011d64 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	3308      	adds	r3, #8
 8011ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ce6:	6a3b      	ldr	r3, [r7, #32]
 8011ce8:	e853 3f00 	ldrex	r3, [r3]
 8011cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8011cee:	69fb      	ldr	r3, [r7, #28]
 8011cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011cf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	3308      	adds	r3, #8
 8011cfe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011d02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d0a:	e841 2300 	strex	r3, r2, [r1]
 8011d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d1e3      	bne.n	8011cde <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	4a16      	ldr	r2, [pc, #88]	@ (8011d74 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011d1a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	e853 3f00 	ldrex	r3, [r3]
 8011d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	f043 0320 	orr.w	r3, r3, #32
 8011d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	461a      	mov	r2, r3
 8011d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011d3e:	61bb      	str	r3, [r7, #24]
 8011d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d42:	6979      	ldr	r1, [r7, #20]
 8011d44:	69ba      	ldr	r2, [r7, #24]
 8011d46:	e841 2300 	strex	r3, r2, [r1]
 8011d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d1e4      	bne.n	8011d1c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011d52:	e007      	b.n	8011d64 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	699a      	ldr	r2, [r3, #24]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	f042 0208 	orr.w	r2, r2, #8
 8011d62:	619a      	str	r2, [r3, #24]
}
 8011d64:	bf00      	nop
 8011d66:	37b0      	adds	r7, #176	@ 0xb0
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	effffffe 	.word	0xeffffffe
 8011d70:	58000c00 	.word	0x58000c00
 8011d74:	080116a9 	.word	0x080116a9

08011d78 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b0ae      	sub	sp, #184	@ 0xb8
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011d86:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	69db      	ldr	r3, [r3, #28]
 8011d90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	689b      	ldr	r3, [r3, #8]
 8011da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011dae:	2b22      	cmp	r3, #34	@ 0x22
 8011db0:	f040 8184 	bne.w	80120bc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011dba:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011dbe:	e127      	b.n	8012010 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dc6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011dd2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8011dd6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8011dda:	4013      	ands	r3, r2
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011de2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011de8:	1c9a      	adds	r2, r3, #2
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011df4:	b29b      	uxth	r3, r3
 8011df6:	3b01      	subs	r3, #1
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	69db      	ldr	r3, [r3, #28]
 8011e06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011e0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011e0e:	f003 0307 	and.w	r3, r3, #7
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d053      	beq.n	8011ebe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011e1a:	f003 0301 	and.w	r3, r3, #1
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d011      	beq.n	8011e46 <UART_RxISR_16BIT_FIFOEN+0xce>
 8011e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d00b      	beq.n	8011e46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	2201      	movs	r2, #1
 8011e34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011e3c:	f043 0201 	orr.w	r2, r3, #1
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011e4a:	f003 0302 	and.w	r3, r3, #2
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d011      	beq.n	8011e76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011e52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011e56:	f003 0301 	and.w	r3, r3, #1
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d00b      	beq.n	8011e76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	2202      	movs	r2, #2
 8011e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011e6c:	f043 0204 	orr.w	r2, r3, #4
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011e76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011e7a:	f003 0304 	and.w	r3, r3, #4
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d011      	beq.n	8011ea6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011e86:	f003 0301 	and.w	r3, r3, #1
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d00b      	beq.n	8011ea6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	2204      	movs	r2, #4
 8011e94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011e9c:	f043 0202 	orr.w	r2, r3, #2
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d006      	beq.n	8011ebe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f7fd fde7 	bl	800fa84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2200      	movs	r2, #0
 8011eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	f040 80a2 	bne.w	8012010 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011ed4:	e853 3f00 	ldrex	r3, [r3]
 8011ed8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011eda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	461a      	mov	r2, r3
 8011eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011eee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011ef2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ef4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011ef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011efa:	e841 2300 	strex	r3, r2, [r1]
 8011efe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011f00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d1e2      	bne.n	8011ecc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	3308      	adds	r3, #8
 8011f0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f10:	e853 3f00 	ldrex	r3, [r3]
 8011f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011f16:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011f18:	4b6e      	ldr	r3, [pc, #440]	@ (80120d4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8011f1a:	4013      	ands	r3, r2
 8011f1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	3308      	adds	r3, #8
 8011f26:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011f2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011f30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f32:	e841 2300 	strex	r3, r2, [r1]
 8011f36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011f38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d1e3      	bne.n	8011f06 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2220      	movs	r2, #32
 8011f42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2200      	movs	r2, #0
 8011f50:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	4a60      	ldr	r2, [pc, #384]	@ (80120d8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8011f58:	4293      	cmp	r3, r2
 8011f5a:	d021      	beq.n	8011fa0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	685b      	ldr	r3, [r3, #4]
 8011f62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d01a      	beq.n	8011fa0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f72:	e853 3f00 	ldrex	r3, [r3]
 8011f76:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011f7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011f7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	461a      	mov	r2, r3
 8011f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011f8e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011f92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011f94:	e841 2300 	strex	r3, r2, [r1]
 8011f98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d1e4      	bne.n	8011f6a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011fa4:	2b01      	cmp	r3, #1
 8011fa6:	d130      	bne.n	801200a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fb6:	e853 3f00 	ldrex	r3, [r3]
 8011fba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fbe:	f023 0310 	bic.w	r3, r3, #16
 8011fc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	461a      	mov	r2, r3
 8011fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8011fd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011fd8:	e841 2300 	strex	r3, r2, [r1]
 8011fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d1e4      	bne.n	8011fae <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	69db      	ldr	r3, [r3, #28]
 8011fea:	f003 0310 	and.w	r3, r3, #16
 8011fee:	2b10      	cmp	r3, #16
 8011ff0:	d103      	bne.n	8011ffa <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2210      	movs	r2, #16
 8011ff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012000:	4619      	mov	r1, r3
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f7fd fd52 	bl	800faac <HAL_UARTEx_RxEventCallback>
 8012008:	e002      	b.n	8012010 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f7f0 fa40 	bl	8002490 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012010:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8012014:	2b00      	cmp	r3, #0
 8012016:	d006      	beq.n	8012026 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012018:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801201c:	f003 0320 	and.w	r3, r3, #32
 8012020:	2b00      	cmp	r3, #0
 8012022:	f47f aecd 	bne.w	8011dc0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801202c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012030:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8012034:	2b00      	cmp	r3, #0
 8012036:	d049      	beq.n	80120cc <UART_RxISR_16BIT_FIFOEN+0x354>
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801203e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8012042:	429a      	cmp	r2, r3
 8012044:	d242      	bcs.n	80120cc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	3308      	adds	r3, #8
 801204c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012050:	e853 3f00 	ldrex	r3, [r3]
 8012054:	623b      	str	r3, [r7, #32]
   return(result);
 8012056:	6a3b      	ldr	r3, [r7, #32]
 8012058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801205c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	3308      	adds	r3, #8
 8012066:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801206a:	633a      	str	r2, [r7, #48]	@ 0x30
 801206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801206e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012072:	e841 2300 	strex	r3, r2, [r1]
 8012076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801207a:	2b00      	cmp	r3, #0
 801207c:	d1e3      	bne.n	8012046 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	4a16      	ldr	r2, [pc, #88]	@ (80120dc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012082:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	e853 3f00 	ldrex	r3, [r3]
 8012090:	60fb      	str	r3, [r7, #12]
   return(result);
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	f043 0320 	orr.w	r3, r3, #32
 8012098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	461a      	mov	r2, r3
 80120a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80120a6:	61fb      	str	r3, [r7, #28]
 80120a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120aa:	69b9      	ldr	r1, [r7, #24]
 80120ac:	69fa      	ldr	r2, [r7, #28]
 80120ae:	e841 2300 	strex	r3, r2, [r1]
 80120b2:	617b      	str	r3, [r7, #20]
   return(result);
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d1e4      	bne.n	8012084 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80120ba:	e007      	b.n	80120cc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	699a      	ldr	r2, [r3, #24]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	f042 0208 	orr.w	r2, r2, #8
 80120ca:	619a      	str	r2, [r3, #24]
}
 80120cc:	bf00      	nop
 80120ce:	37b8      	adds	r7, #184	@ 0xb8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	effffffe 	.word	0xeffffffe
 80120d8:	58000c00 	.word	0x58000c00
 80120dc:	08011861 	.word	0x08011861

080120e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80120e8:	bf00      	nop
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr

080120f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80120fc:	bf00      	nop
 80120fe:	370c      	adds	r7, #12
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr

08012108 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012110:	bf00      	nop
 8012112:	370c      	adds	r7, #12
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr

0801211c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801211c:	b480      	push	{r7}
 801211e:	b085      	sub	sp, #20
 8012120:	af00      	add	r7, sp, #0
 8012122:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801212a:	2b01      	cmp	r3, #1
 801212c:	d101      	bne.n	8012132 <HAL_UARTEx_DisableFifoMode+0x16>
 801212e:	2302      	movs	r3, #2
 8012130:	e027      	b.n	8012182 <HAL_UARTEx_DisableFifoMode+0x66>
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2201      	movs	r2, #1
 8012136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2224      	movs	r2, #36	@ 0x24
 801213e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	681a      	ldr	r2, [r3, #0]
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f022 0201 	bic.w	r2, r2, #1
 8012158:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012160:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2200      	movs	r2, #0
 8012166:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	68fa      	ldr	r2, [r7, #12]
 801216e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2220      	movs	r2, #32
 8012174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012180:	2300      	movs	r3, #0
}
 8012182:	4618      	mov	r0, r3
 8012184:	3714      	adds	r7, #20
 8012186:	46bd      	mov	sp, r7
 8012188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218c:	4770      	bx	lr

0801218e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801218e:	b580      	push	{r7, lr}
 8012190:	b084      	sub	sp, #16
 8012192:	af00      	add	r7, sp, #0
 8012194:	6078      	str	r0, [r7, #4]
 8012196:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d101      	bne.n	80121a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80121a2:	2302      	movs	r3, #2
 80121a4:	e02d      	b.n	8012202 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2201      	movs	r2, #1
 80121aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2224      	movs	r2, #36	@ 0x24
 80121b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	681a      	ldr	r2, [r3, #0]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f022 0201 	bic.w	r2, r2, #1
 80121cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	689b      	ldr	r3, [r3, #8]
 80121d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	683a      	ldr	r2, [r7, #0]
 80121de:	430a      	orrs	r2, r1
 80121e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f000 f850 	bl	8012288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	68fa      	ldr	r2, [r7, #12]
 80121ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2220      	movs	r2, #32
 80121f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2200      	movs	r2, #0
 80121fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012200:	2300      	movs	r3, #0
}
 8012202:	4618      	mov	r0, r3
 8012204:	3710      	adds	r7, #16
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801220a:	b580      	push	{r7, lr}
 801220c:	b084      	sub	sp, #16
 801220e:	af00      	add	r7, sp, #0
 8012210:	6078      	str	r0, [r7, #4]
 8012212:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801221a:	2b01      	cmp	r3, #1
 801221c:	d101      	bne.n	8012222 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801221e:	2302      	movs	r3, #2
 8012220:	e02d      	b.n	801227e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2201      	movs	r2, #1
 8012226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2224      	movs	r2, #36	@ 0x24
 801222e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	681a      	ldr	r2, [r3, #0]
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	f022 0201 	bic.w	r2, r2, #1
 8012248:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	689b      	ldr	r3, [r3, #8]
 8012250:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	683a      	ldr	r2, [r7, #0]
 801225a:	430a      	orrs	r2, r1
 801225c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f000 f812 	bl	8012288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	68fa      	ldr	r2, [r7, #12]
 801226a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2220      	movs	r2, #32
 8012270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2200      	movs	r2, #0
 8012278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801227c:	2300      	movs	r3, #0
}
 801227e:	4618      	mov	r0, r3
 8012280:	3710      	adds	r7, #16
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
	...

08012288 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012288:	b480      	push	{r7}
 801228a:	b085      	sub	sp, #20
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012294:	2b00      	cmp	r3, #0
 8012296:	d108      	bne.n	80122aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2201      	movs	r2, #1
 801229c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2201      	movs	r2, #1
 80122a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80122a8:	e031      	b.n	801230e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80122aa:	2310      	movs	r3, #16
 80122ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80122ae:	2310      	movs	r3, #16
 80122b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	689b      	ldr	r3, [r3, #8]
 80122b8:	0e5b      	lsrs	r3, r3, #25
 80122ba:	b2db      	uxtb	r3, r3
 80122bc:	f003 0307 	and.w	r3, r3, #7
 80122c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	689b      	ldr	r3, [r3, #8]
 80122c8:	0f5b      	lsrs	r3, r3, #29
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	f003 0307 	and.w	r3, r3, #7
 80122d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80122d2:	7bbb      	ldrb	r3, [r7, #14]
 80122d4:	7b3a      	ldrb	r2, [r7, #12]
 80122d6:	4911      	ldr	r1, [pc, #68]	@ (801231c <UARTEx_SetNbDataToProcess+0x94>)
 80122d8:	5c8a      	ldrb	r2, [r1, r2]
 80122da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80122de:	7b3a      	ldrb	r2, [r7, #12]
 80122e0:	490f      	ldr	r1, [pc, #60]	@ (8012320 <UARTEx_SetNbDataToProcess+0x98>)
 80122e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80122e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80122e8:	b29a      	uxth	r2, r3
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80122f0:	7bfb      	ldrb	r3, [r7, #15]
 80122f2:	7b7a      	ldrb	r2, [r7, #13]
 80122f4:	4909      	ldr	r1, [pc, #36]	@ (801231c <UARTEx_SetNbDataToProcess+0x94>)
 80122f6:	5c8a      	ldrb	r2, [r1, r2]
 80122f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80122fc:	7b7a      	ldrb	r2, [r7, #13]
 80122fe:	4908      	ldr	r1, [pc, #32]	@ (8012320 <UARTEx_SetNbDataToProcess+0x98>)
 8012300:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012302:	fb93 f3f2 	sdiv	r3, r3, r2
 8012306:	b29a      	uxth	r2, r3
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801230e:	bf00      	nop
 8012310:	3714      	adds	r7, #20
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	080191f4 	.word	0x080191f4
 8012320:	080191fc 	.word	0x080191fc

08012324 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8012328:	4904      	ldr	r1, [pc, #16]	@ (801233c <MX_FATFS_Init+0x18>)
 801232a:	4805      	ldr	r0, [pc, #20]	@ (8012340 <MX_FATFS_Init+0x1c>)
 801232c:	f001 fcd0 	bl	8013cd0 <FATFS_LinkDriver>
 8012330:	4603      	mov	r3, r0
 8012332:	461a      	mov	r2, r3
 8012334:	4b03      	ldr	r3, [pc, #12]	@ (8012344 <MX_FATFS_Init+0x20>)
 8012336:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012338:	bf00      	nop
 801233a:	bd80      	pop	{r7, pc}
 801233c:	24002a5c 	.word	0x24002a5c
 8012340:	240000ac 	.word	0x240000ac
 8012344:	24002a58 	.word	0x24002a58

08012348 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012348:	b480      	push	{r7}
 801234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801234c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801234e:	4618      	mov	r0, r3
 8012350:	46bd      	mov	sp, r7
 8012352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012356:	4770      	bx	lr

08012358 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	4603      	mov	r3, r0
 8012360:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8012362:	79fb      	ldrb	r3, [r7, #7]
 8012364:	4618      	mov	r0, r3
 8012366:	f000 f9fd 	bl	8012764 <SD_disk_initialize>
 801236a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 801236c:	4618      	mov	r0, r3
 801236e:	3708      	adds	r7, #8
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}

08012374 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	4603      	mov	r3, r0
 801237c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 801237e:	79fb      	ldrb	r3, [r7, #7]
 8012380:	4618      	mov	r0, r3
 8012382:	f000 fad5 	bl	8012930 <SD_disk_status>
 8012386:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8012388:	4618      	mov	r0, r3
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	60b9      	str	r1, [r7, #8]
 8012398:	607a      	str	r2, [r7, #4]
 801239a:	603b      	str	r3, [r7, #0]
 801239c:	4603      	mov	r3, r0
 801239e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80123a0:	7bf8      	ldrb	r0, [r7, #15]
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	68b9      	ldr	r1, [r7, #8]
 80123a8:	f000 fad8 	bl	801295c <SD_disk_read>
 80123ac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3710      	adds	r7, #16
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}

080123b6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80123b6:	b580      	push	{r7, lr}
 80123b8:	b084      	sub	sp, #16
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	60b9      	str	r1, [r7, #8]
 80123be:	607a      	str	r2, [r7, #4]
 80123c0:	603b      	str	r3, [r7, #0]
 80123c2:	4603      	mov	r3, r0
 80123c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80123c6:	7bf8      	ldrb	r0, [r7, #15]
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	687a      	ldr	r2, [r7, #4]
 80123cc:	68b9      	ldr	r1, [r7, #8]
 80123ce:	f000 fb2f 	bl	8012a30 <SD_disk_write>
 80123d2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3710      	adds	r7, #16
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	4603      	mov	r3, r0
 80123e4:	603a      	str	r2, [r7, #0]
 80123e6:	71fb      	strb	r3, [r7, #7]
 80123e8:	460b      	mov	r3, r1
 80123ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80123ec:	79b9      	ldrb	r1, [r7, #6]
 80123ee:	79fb      	ldrb	r3, [r7, #7]
 80123f0:	683a      	ldr	r2, [r7, #0]
 80123f2:	4618      	mov	r0, r3
 80123f4:	f000 fba0 	bl	8012b38 <SD_disk_ioctl>
 80123f8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3708      	adds	r7, #8
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
	...

08012404 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8012408:	2200      	movs	r2, #0
 801240a:	2110      	movs	r1, #16
 801240c:	4802      	ldr	r0, [pc, #8]	@ (8012418 <SELECT+0x14>)
 801240e:	f7f7 f9b9 	bl	8009784 <HAL_GPIO_WritePin>
}
 8012412:	bf00      	nop
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	58020000 	.word	0x58020000

0801241c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8012420:	2201      	movs	r2, #1
 8012422:	2110      	movs	r1, #16
 8012424:	4802      	ldr	r0, [pc, #8]	@ (8012430 <DESELECT+0x14>)
 8012426:	f7f7 f9ad 	bl	8009784 <HAL_GPIO_WritePin>
}
 801242a:	bf00      	nop
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	58020000 	.word	0x58020000

08012434 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	4603      	mov	r3, r0
 801243c:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 801243e:	bf00      	nop
 8012440:	4b08      	ldr	r3, [pc, #32]	@ (8012464 <SPI_TxByte+0x30>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	695b      	ldr	r3, [r3, #20]
 8012446:	f003 0302 	and.w	r3, r3, #2
 801244a:	2b02      	cmp	r3, #2
 801244c:	d1f8      	bne.n	8012440 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 801244e:	1df9      	adds	r1, r7, #7
 8012450:	2364      	movs	r3, #100	@ 0x64
 8012452:	2201      	movs	r2, #1
 8012454:	4803      	ldr	r0, [pc, #12]	@ (8012464 <SPI_TxByte+0x30>)
 8012456:	f7fa fa21 	bl	800c89c <HAL_SPI_Transmit>
}
 801245a:	bf00      	nop
 801245c:	3708      	adds	r7, #8
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
 8012462:	bf00      	nop
 8012464:	24000e98 	.word	0x24000e98

08012468 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b082      	sub	sp, #8
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
 8012470:	460b      	mov	r3, r1
 8012472:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8012474:	bf00      	nop
 8012476:	4b08      	ldr	r3, [pc, #32]	@ (8012498 <SPI_TxBuffer+0x30>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	695b      	ldr	r3, [r3, #20]
 801247c:	f003 0302 	and.w	r3, r3, #2
 8012480:	2b02      	cmp	r3, #2
 8012482:	d1f8      	bne.n	8012476 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8012484:	887a      	ldrh	r2, [r7, #2]
 8012486:	2364      	movs	r3, #100	@ 0x64
 8012488:	6879      	ldr	r1, [r7, #4]
 801248a:	4803      	ldr	r0, [pc, #12]	@ (8012498 <SPI_TxBuffer+0x30>)
 801248c:	f7fa fa06 	bl	800c89c <HAL_SPI_Transmit>
}
 8012490:	bf00      	nop
 8012492:	3708      	adds	r7, #8
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}
 8012498:	24000e98 	.word	0x24000e98

0801249c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b084      	sub	sp, #16
 80124a0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80124a2:	23ff      	movs	r3, #255	@ 0xff
 80124a4:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80124a6:	bf00      	nop
 80124a8:	4b09      	ldr	r3, [pc, #36]	@ (80124d0 <SPI_RxByte+0x34>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	695b      	ldr	r3, [r3, #20]
 80124ae:	f003 0302 	and.w	r3, r3, #2
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d1f8      	bne.n	80124a8 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80124b6:	1dba      	adds	r2, r7, #6
 80124b8:	1df9      	adds	r1, r7, #7
 80124ba:	2364      	movs	r3, #100	@ 0x64
 80124bc:	9300      	str	r3, [sp, #0]
 80124be:	2301      	movs	r3, #1
 80124c0:	4803      	ldr	r0, [pc, #12]	@ (80124d0 <SPI_RxByte+0x34>)
 80124c2:	f7fa fe4b 	bl	800d15c <HAL_SPI_TransmitReceive>
  return data;
 80124c6:	79bb      	ldrb	r3, [r7, #6]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	24000e98 	.word	0x24000e98

080124d4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b082      	sub	sp, #8
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80124dc:	f7ff ffde 	bl	801249c <SPI_RxByte>
 80124e0:	4603      	mov	r3, r0
 80124e2:	461a      	mov	r2, r3
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	701a      	strb	r2, [r3, #0]
}
 80124e8:	bf00      	nop
 80124ea:	3708      	adds	r7, #8
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}

080124f0 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80124f6:	4b0a      	ldr	r3, [pc, #40]	@ (8012520 <SD_ReadyWait+0x30>)
 80124f8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80124fc:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80124fe:	f7ff ffcd 	bl	801249c <SPI_RxByte>
 8012502:	4603      	mov	r3, r0
 8012504:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8012506:	79fb      	ldrb	r3, [r7, #7]
 8012508:	2bff      	cmp	r3, #255	@ 0xff
 801250a:	d003      	beq.n	8012514 <SD_ReadyWait+0x24>
 801250c:	4b04      	ldr	r3, [pc, #16]	@ (8012520 <SD_ReadyWait+0x30>)
 801250e:	881b      	ldrh	r3, [r3, #0]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d1f4      	bne.n	80124fe <SD_ReadyWait+0xe>
  return res;
 8012514:	79fb      	ldrb	r3, [r7, #7]
}
 8012516:	4618      	mov	r0, r3
 8012518:	3708      	adds	r7, #8
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	24002a62 	.word	0x24002a62

08012524 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b084      	sub	sp, #16
 8012528:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 801252a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 801252e:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8012530:	f7ff ff74 	bl	801241c <DESELECT>
  for(int i = 0; i < 10; i++)
 8012534:	2300      	movs	r3, #0
 8012536:	60bb      	str	r3, [r7, #8]
 8012538:	e005      	b.n	8012546 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 801253a:	20ff      	movs	r0, #255	@ 0xff
 801253c:	f7ff ff7a 	bl	8012434 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	3301      	adds	r3, #1
 8012544:	60bb      	str	r3, [r7, #8]
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	2b09      	cmp	r3, #9
 801254a:	ddf6      	ble.n	801253a <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 801254c:	f7ff ff5a 	bl	8012404 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8012550:	2340      	movs	r3, #64	@ 0x40
 8012552:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8012554:	2300      	movs	r3, #0
 8012556:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8012558:	2300      	movs	r3, #0
 801255a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 801255c:	2300      	movs	r3, #0
 801255e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8012560:	2300      	movs	r3, #0
 8012562:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8012564:	2395      	movs	r3, #149	@ 0x95
 8012566:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 8012568:	463b      	mov	r3, r7
 801256a:	2106      	movs	r1, #6
 801256c:	4618      	mov	r0, r3
 801256e:	f7ff ff7b 	bl	8012468 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8012572:	e002      	b.n	801257a <SD_PowerOn+0x56>
  {
    cnt--;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	3b01      	subs	r3, #1
 8012578:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 801257a:	f7ff ff8f 	bl	801249c <SPI_RxByte>
 801257e:	4603      	mov	r3, r0
 8012580:	2b01      	cmp	r3, #1
 8012582:	d002      	beq.n	801258a <SD_PowerOn+0x66>
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d1f4      	bne.n	8012574 <SD_PowerOn+0x50>
  }
  DESELECT();
 801258a:	f7ff ff47 	bl	801241c <DESELECT>
  SPI_TxByte(0XFF);
 801258e:	20ff      	movs	r0, #255	@ 0xff
 8012590:	f7ff ff50 	bl	8012434 <SPI_TxByte>
  PowerFlag = 1;
 8012594:	4b03      	ldr	r3, [pc, #12]	@ (80125a4 <SD_PowerOn+0x80>)
 8012596:	2201      	movs	r2, #1
 8012598:	701a      	strb	r2, [r3, #0]
}
 801259a:	bf00      	nop
 801259c:	3710      	adds	r7, #16
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	24002a65 	.word	0x24002a65

080125a8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80125a8:	b480      	push	{r7}
 80125aa:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80125ac:	4b03      	ldr	r3, [pc, #12]	@ (80125bc <SD_PowerOff+0x14>)
 80125ae:	2200      	movs	r2, #0
 80125b0:	701a      	strb	r2, [r3, #0]
}
 80125b2:	bf00      	nop
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr
 80125bc:	24002a65 	.word	0x24002a65

080125c0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80125c0:	b480      	push	{r7}
 80125c2:	af00      	add	r7, sp, #0
  return PowerFlag;
 80125c4:	4b03      	ldr	r3, [pc, #12]	@ (80125d4 <SD_CheckPower+0x14>)
 80125c6:	781b      	ldrb	r3, [r3, #0]
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	46bd      	mov	sp, r7
 80125cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d0:	4770      	bx	lr
 80125d2:	bf00      	nop
 80125d4:	24002a65 	.word	0x24002a65

080125d8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b084      	sub	sp, #16
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80125e2:	4b13      	ldr	r3, [pc, #76]	@ (8012630 <SD_RxDataBlock+0x58>)
 80125e4:	22c8      	movs	r2, #200	@ 0xc8
 80125e6:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80125e8:	f7ff ff58 	bl	801249c <SPI_RxByte>
 80125ec:	4603      	mov	r3, r0
 80125ee:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80125f0:	7bfb      	ldrb	r3, [r7, #15]
 80125f2:	2bff      	cmp	r3, #255	@ 0xff
 80125f4:	d103      	bne.n	80125fe <SD_RxDataBlock+0x26>
 80125f6:	4b0e      	ldr	r3, [pc, #56]	@ (8012630 <SD_RxDataBlock+0x58>)
 80125f8:	881b      	ldrh	r3, [r3, #0]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d1f4      	bne.n	80125e8 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80125fe:	7bfb      	ldrb	r3, [r7, #15]
 8012600:	2bfe      	cmp	r3, #254	@ 0xfe
 8012602:	d001      	beq.n	8012608 <SD_RxDataBlock+0x30>
 8012604:	2300      	movs	r3, #0
 8012606:	e00f      	b.n	8012628 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	1c5a      	adds	r2, r3, #1
 801260c:	607a      	str	r2, [r7, #4]
 801260e:	4618      	mov	r0, r3
 8012610:	f7ff ff60 	bl	80124d4 <SPI_RxBytePtr>
  } while(len--);
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	1e5a      	subs	r2, r3, #1
 8012618:	603a      	str	r2, [r7, #0]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d1f4      	bne.n	8012608 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 801261e:	f7ff ff3d 	bl	801249c <SPI_RxByte>
  SPI_RxByte();
 8012622:	f7ff ff3b 	bl	801249c <SPI_RxByte>
  return TRUE;
 8012626:	2301      	movs	r3, #1
}
 8012628:	4618      	mov	r0, r3
 801262a:	3710      	adds	r7, #16
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}
 8012630:	24002a60 	.word	0x24002a60

08012634 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	460b      	mov	r3, r1
 801263e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8012640:	2300      	movs	r3, #0
 8012642:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8012644:	f7ff ff54 	bl	80124f0 <SD_ReadyWait>
 8012648:	4603      	mov	r3, r0
 801264a:	2bff      	cmp	r3, #255	@ 0xff
 801264c:	d001      	beq.n	8012652 <SD_TxDataBlock+0x1e>
 801264e:	2300      	movs	r3, #0
 8012650:	e02f      	b.n	80126b2 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8012652:	78fb      	ldrb	r3, [r7, #3]
 8012654:	4618      	mov	r0, r3
 8012656:	f7ff feed 	bl	8012434 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 801265a:	78fb      	ldrb	r3, [r7, #3]
 801265c:	2bfd      	cmp	r3, #253	@ 0xfd
 801265e:	d020      	beq.n	80126a2 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8012660:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f7ff feff 	bl	8012468 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 801266a:	f7ff ff17 	bl	801249c <SPI_RxByte>
    SPI_RxByte();
 801266e:	f7ff ff15 	bl	801249c <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8012672:	e00b      	b.n	801268c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8012674:	f7ff ff12 	bl	801249c <SPI_RxByte>
 8012678:	4603      	mov	r3, r0
 801267a:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 801267c:	7bfb      	ldrb	r3, [r7, #15]
 801267e:	f003 031f 	and.w	r3, r3, #31
 8012682:	2b05      	cmp	r3, #5
 8012684:	d006      	beq.n	8012694 <SD_TxDataBlock+0x60>
      i++;
 8012686:	7bbb      	ldrb	r3, [r7, #14]
 8012688:	3301      	adds	r3, #1
 801268a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 801268c:	7bbb      	ldrb	r3, [r7, #14]
 801268e:	2b40      	cmp	r3, #64	@ 0x40
 8012690:	d9f0      	bls.n	8012674 <SD_TxDataBlock+0x40>
 8012692:	e000      	b.n	8012696 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8012694:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8012696:	bf00      	nop
 8012698:	f7ff ff00 	bl	801249c <SPI_RxByte>
 801269c:	4603      	mov	r3, r0
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d0fa      	beq.n	8012698 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 80126a2:	7bfb      	ldrb	r3, [r7, #15]
 80126a4:	f003 031f 	and.w	r3, r3, #31
 80126a8:	2b05      	cmp	r3, #5
 80126aa:	d101      	bne.n	80126b0 <SD_TxDataBlock+0x7c>
 80126ac:	2301      	movs	r3, #1
 80126ae:	e000      	b.n	80126b2 <SD_TxDataBlock+0x7e>

  return FALSE;
 80126b0:	2300      	movs	r3, #0
}
 80126b2:	4618      	mov	r0, r3
 80126b4:	3710      	adds	r7, #16
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}

080126ba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80126ba:	b580      	push	{r7, lr}
 80126bc:	b084      	sub	sp, #16
 80126be:	af00      	add	r7, sp, #0
 80126c0:	4603      	mov	r3, r0
 80126c2:	6039      	str	r1, [r7, #0]
 80126c4:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 80126c6:	f7ff ff13 	bl	80124f0 <SD_ReadyWait>
 80126ca:	4603      	mov	r3, r0
 80126cc:	2bff      	cmp	r3, #255	@ 0xff
 80126ce:	d001      	beq.n	80126d4 <SD_SendCmd+0x1a>
 80126d0:	23ff      	movs	r3, #255	@ 0xff
 80126d2:	e042      	b.n	801275a <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80126d4:	79fb      	ldrb	r3, [r7, #7]
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7ff feac 	bl	8012434 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	0e1b      	lsrs	r3, r3, #24
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7ff fea6 	bl	8012434 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	0c1b      	lsrs	r3, r3, #16
 80126ec:	b2db      	uxtb	r3, r3
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7ff fea0 	bl	8012434 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	0a1b      	lsrs	r3, r3, #8
 80126f8:	b2db      	uxtb	r3, r3
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7ff fe9a 	bl	8012434 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	b2db      	uxtb	r3, r3
 8012704:	4618      	mov	r0, r3
 8012706:	f7ff fe95 	bl	8012434 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 801270a:	79fb      	ldrb	r3, [r7, #7]
 801270c:	2b40      	cmp	r3, #64	@ 0x40
 801270e:	d102      	bne.n	8012716 <SD_SendCmd+0x5c>
 8012710:	2395      	movs	r3, #149	@ 0x95
 8012712:	73fb      	strb	r3, [r7, #15]
 8012714:	e007      	b.n	8012726 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8012716:	79fb      	ldrb	r3, [r7, #7]
 8012718:	2b48      	cmp	r3, #72	@ 0x48
 801271a:	d102      	bne.n	8012722 <SD_SendCmd+0x68>
 801271c:	2387      	movs	r3, #135	@ 0x87
 801271e:	73fb      	strb	r3, [r7, #15]
 8012720:	e001      	b.n	8012726 <SD_SendCmd+0x6c>
  else crc = 1;
 8012722:	2301      	movs	r3, #1
 8012724:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 8012726:	7bfb      	ldrb	r3, [r7, #15]
 8012728:	4618      	mov	r0, r3
 801272a:	f7ff fe83 	bl	8012434 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 801272e:	79fb      	ldrb	r3, [r7, #7]
 8012730:	2b4c      	cmp	r3, #76	@ 0x4c
 8012732:	d101      	bne.n	8012738 <SD_SendCmd+0x7e>
 8012734:	f7ff feb2 	bl	801249c <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8012738:	230a      	movs	r3, #10
 801273a:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 801273c:	f7ff feae 	bl	801249c <SPI_RxByte>
 8012740:	4603      	mov	r3, r0
 8012742:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8012744:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012748:	2b00      	cmp	r3, #0
 801274a:	da05      	bge.n	8012758 <SD_SendCmd+0x9e>
 801274c:	7bbb      	ldrb	r3, [r7, #14]
 801274e:	3b01      	subs	r3, #1
 8012750:	73bb      	strb	r3, [r7, #14]
 8012752:	7bbb      	ldrb	r3, [r7, #14]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1f1      	bne.n	801273c <SD_SendCmd+0x82>

  return res;
 8012758:	7b7b      	ldrb	r3, [r7, #13]
}
 801275a:	4618      	mov	r0, r3
 801275c:	3710      	adds	r7, #16
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
	...

08012764 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8012764:	b590      	push	{r4, r7, lr}
 8012766:	b085      	sub	sp, #20
 8012768:	af00      	add	r7, sp, #0
 801276a:	4603      	mov	r3, r0
 801276c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 801276e:	79fb      	ldrb	r3, [r7, #7]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d001      	beq.n	8012778 <SD_disk_initialize+0x14>
 8012774:	2301      	movs	r3, #1
 8012776:	e0d1      	b.n	801291c <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8012778:	4b6a      	ldr	r3, [pc, #424]	@ (8012924 <SD_disk_initialize+0x1c0>)
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	b2db      	uxtb	r3, r3
 801277e:	f003 0302 	and.w	r3, r3, #2
 8012782:	2b00      	cmp	r3, #0
 8012784:	d003      	beq.n	801278e <SD_disk_initialize+0x2a>
 8012786:	4b67      	ldr	r3, [pc, #412]	@ (8012924 <SD_disk_initialize+0x1c0>)
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	b2db      	uxtb	r3, r3
 801278c:	e0c6      	b.n	801291c <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 801278e:	f7ff fec9 	bl	8012524 <SD_PowerOn>
  /* slave select */
  SELECT();
 8012792:	f7ff fe37 	bl	8012404 <SELECT>
  /* check disk type */
  type = 0;
 8012796:	2300      	movs	r3, #0
 8012798:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 801279a:	2100      	movs	r1, #0
 801279c:	2040      	movs	r0, #64	@ 0x40
 801279e:	f7ff ff8c 	bl	80126ba <SD_SendCmd>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	f040 80a1 	bne.w	80128ec <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 80127aa:	4b5f      	ldr	r3, [pc, #380]	@ (8012928 <SD_disk_initialize+0x1c4>)
 80127ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80127b0:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80127b2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80127b6:	2048      	movs	r0, #72	@ 0x48
 80127b8:	f7ff ff7f 	bl	80126ba <SD_SendCmd>
 80127bc:	4603      	mov	r3, r0
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d155      	bne.n	801286e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 80127c2:	2300      	movs	r3, #0
 80127c4:	73fb      	strb	r3, [r7, #15]
 80127c6:	e00c      	b.n	80127e2 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 80127c8:	7bfc      	ldrb	r4, [r7, #15]
 80127ca:	f7ff fe67 	bl	801249c <SPI_RxByte>
 80127ce:	4603      	mov	r3, r0
 80127d0:	461a      	mov	r2, r3
 80127d2:	f104 0310 	add.w	r3, r4, #16
 80127d6:	443b      	add	r3, r7
 80127d8:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80127dc:	7bfb      	ldrb	r3, [r7, #15]
 80127de:	3301      	adds	r3, #1
 80127e0:	73fb      	strb	r3, [r7, #15]
 80127e2:	7bfb      	ldrb	r3, [r7, #15]
 80127e4:	2b03      	cmp	r3, #3
 80127e6:	d9ef      	bls.n	80127c8 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80127e8:	7abb      	ldrb	r3, [r7, #10]
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	d17e      	bne.n	80128ec <SD_disk_initialize+0x188>
 80127ee:	7afb      	ldrb	r3, [r7, #11]
 80127f0:	2baa      	cmp	r3, #170	@ 0xaa
 80127f2:	d17b      	bne.n	80128ec <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80127f4:	2100      	movs	r1, #0
 80127f6:	2077      	movs	r0, #119	@ 0x77
 80127f8:	f7ff ff5f 	bl	80126ba <SD_SendCmd>
 80127fc:	4603      	mov	r3, r0
 80127fe:	2b01      	cmp	r3, #1
 8012800:	d807      	bhi.n	8012812 <SD_disk_initialize+0xae>
 8012802:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8012806:	2069      	movs	r0, #105	@ 0x69
 8012808:	f7ff ff57 	bl	80126ba <SD_SendCmd>
 801280c:	4603      	mov	r3, r0
 801280e:	2b00      	cmp	r3, #0
 8012810:	d004      	beq.n	801281c <SD_disk_initialize+0xb8>
        } while (Timer1);
 8012812:	4b45      	ldr	r3, [pc, #276]	@ (8012928 <SD_disk_initialize+0x1c4>)
 8012814:	881b      	ldrh	r3, [r3, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d1ec      	bne.n	80127f4 <SD_disk_initialize+0x90>
 801281a:	e000      	b.n	801281e <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 801281c:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 801281e:	4b42      	ldr	r3, [pc, #264]	@ (8012928 <SD_disk_initialize+0x1c4>)
 8012820:	881b      	ldrh	r3, [r3, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d062      	beq.n	80128ec <SD_disk_initialize+0x188>
 8012826:	2100      	movs	r1, #0
 8012828:	207a      	movs	r0, #122	@ 0x7a
 801282a:	f7ff ff46 	bl	80126ba <SD_SendCmd>
 801282e:	4603      	mov	r3, r0
 8012830:	2b00      	cmp	r3, #0
 8012832:	d15b      	bne.n	80128ec <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8012834:	2300      	movs	r3, #0
 8012836:	73fb      	strb	r3, [r7, #15]
 8012838:	e00c      	b.n	8012854 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 801283a:	7bfc      	ldrb	r4, [r7, #15]
 801283c:	f7ff fe2e 	bl	801249c <SPI_RxByte>
 8012840:	4603      	mov	r3, r0
 8012842:	461a      	mov	r2, r3
 8012844:	f104 0310 	add.w	r3, r4, #16
 8012848:	443b      	add	r3, r7
 801284a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 801284e:	7bfb      	ldrb	r3, [r7, #15]
 8012850:	3301      	adds	r3, #1
 8012852:	73fb      	strb	r3, [r7, #15]
 8012854:	7bfb      	ldrb	r3, [r7, #15]
 8012856:	2b03      	cmp	r3, #3
 8012858:	d9ef      	bls.n	801283a <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 801285a:	7a3b      	ldrb	r3, [r7, #8]
 801285c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012860:	2b00      	cmp	r3, #0
 8012862:	d001      	beq.n	8012868 <SD_disk_initialize+0x104>
 8012864:	230c      	movs	r3, #12
 8012866:	e000      	b.n	801286a <SD_disk_initialize+0x106>
 8012868:	2304      	movs	r3, #4
 801286a:	73bb      	strb	r3, [r7, #14]
 801286c:	e03e      	b.n	80128ec <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 801286e:	2100      	movs	r1, #0
 8012870:	2077      	movs	r0, #119	@ 0x77
 8012872:	f7ff ff22 	bl	80126ba <SD_SendCmd>
 8012876:	4603      	mov	r3, r0
 8012878:	2b01      	cmp	r3, #1
 801287a:	d808      	bhi.n	801288e <SD_disk_initialize+0x12a>
 801287c:	2100      	movs	r1, #0
 801287e:	2069      	movs	r0, #105	@ 0x69
 8012880:	f7ff ff1b 	bl	80126ba <SD_SendCmd>
 8012884:	4603      	mov	r3, r0
 8012886:	2b01      	cmp	r3, #1
 8012888:	d801      	bhi.n	801288e <SD_disk_initialize+0x12a>
 801288a:	2302      	movs	r3, #2
 801288c:	e000      	b.n	8012890 <SD_disk_initialize+0x12c>
 801288e:	2301      	movs	r3, #1
 8012890:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8012892:	7bbb      	ldrb	r3, [r7, #14]
 8012894:	2b02      	cmp	r3, #2
 8012896:	d10e      	bne.n	80128b6 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8012898:	2100      	movs	r1, #0
 801289a:	2077      	movs	r0, #119	@ 0x77
 801289c:	f7ff ff0d 	bl	80126ba <SD_SendCmd>
 80128a0:	4603      	mov	r3, r0
 80128a2:	2b01      	cmp	r3, #1
 80128a4:	d80e      	bhi.n	80128c4 <SD_disk_initialize+0x160>
 80128a6:	2100      	movs	r1, #0
 80128a8:	2069      	movs	r0, #105	@ 0x69
 80128aa:	f7ff ff06 	bl	80126ba <SD_SendCmd>
 80128ae:	4603      	mov	r3, r0
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d107      	bne.n	80128c4 <SD_disk_initialize+0x160>
 80128b4:	e00c      	b.n	80128d0 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80128b6:	2100      	movs	r1, #0
 80128b8:	2041      	movs	r0, #65	@ 0x41
 80128ba:	f7ff fefe 	bl	80126ba <SD_SendCmd>
 80128be:	4603      	mov	r3, r0
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d004      	beq.n	80128ce <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 80128c4:	4b18      	ldr	r3, [pc, #96]	@ (8012928 <SD_disk_initialize+0x1c4>)
 80128c6:	881b      	ldrh	r3, [r3, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d1e2      	bne.n	8012892 <SD_disk_initialize+0x12e>
 80128cc:	e000      	b.n	80128d0 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80128ce:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80128d0:	4b15      	ldr	r3, [pc, #84]	@ (8012928 <SD_disk_initialize+0x1c4>)
 80128d2:	881b      	ldrh	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d007      	beq.n	80128e8 <SD_disk_initialize+0x184>
 80128d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80128dc:	2050      	movs	r0, #80	@ 0x50
 80128de:	f7ff feec 	bl	80126ba <SD_SendCmd>
 80128e2:	4603      	mov	r3, r0
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d001      	beq.n	80128ec <SD_disk_initialize+0x188>
 80128e8:	2300      	movs	r3, #0
 80128ea:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 80128ec:	4a0f      	ldr	r2, [pc, #60]	@ (801292c <SD_disk_initialize+0x1c8>)
 80128ee:	7bbb      	ldrb	r3, [r7, #14]
 80128f0:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 80128f2:	f7ff fd93 	bl	801241c <DESELECT>
  SPI_RxByte();
 80128f6:	f7ff fdd1 	bl	801249c <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80128fa:	7bbb      	ldrb	r3, [r7, #14]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d008      	beq.n	8012912 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8012900:	4b08      	ldr	r3, [pc, #32]	@ (8012924 <SD_disk_initialize+0x1c0>)
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	b2db      	uxtb	r3, r3
 8012906:	f023 0301 	bic.w	r3, r3, #1
 801290a:	b2da      	uxtb	r2, r3
 801290c:	4b05      	ldr	r3, [pc, #20]	@ (8012924 <SD_disk_initialize+0x1c0>)
 801290e:	701a      	strb	r2, [r3, #0]
 8012910:	e001      	b.n	8012916 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8012912:	f7ff fe49 	bl	80125a8 <SD_PowerOff>
  }
  return Stat;
 8012916:	4b03      	ldr	r3, [pc, #12]	@ (8012924 <SD_disk_initialize+0x1c0>)
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	b2db      	uxtb	r3, r3
}
 801291c:	4618      	mov	r0, r3
 801291e:	3714      	adds	r7, #20
 8012920:	46bd      	mov	sp, r7
 8012922:	bd90      	pop	{r4, r7, pc}
 8012924:	240000c0 	.word	0x240000c0
 8012928:	24002a60 	.word	0x24002a60
 801292c:	24002a64 	.word	0x24002a64

08012930 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8012930:	b480      	push	{r7}
 8012932:	b083      	sub	sp, #12
 8012934:	af00      	add	r7, sp, #0
 8012936:	4603      	mov	r3, r0
 8012938:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 801293a:	79fb      	ldrb	r3, [r7, #7]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d001      	beq.n	8012944 <SD_disk_status+0x14>
 8012940:	2301      	movs	r3, #1
 8012942:	e002      	b.n	801294a <SD_disk_status+0x1a>
  return Stat;
 8012944:	4b04      	ldr	r3, [pc, #16]	@ (8012958 <SD_disk_status+0x28>)
 8012946:	781b      	ldrb	r3, [r3, #0]
 8012948:	b2db      	uxtb	r3, r3
}
 801294a:	4618      	mov	r0, r3
 801294c:	370c      	adds	r7, #12
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop
 8012958:	240000c0 	.word	0x240000c0

0801295c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b084      	sub	sp, #16
 8012960:	af00      	add	r7, sp, #0
 8012962:	60b9      	str	r1, [r7, #8]
 8012964:	607a      	str	r2, [r7, #4]
 8012966:	603b      	str	r3, [r7, #0]
 8012968:	4603      	mov	r3, r0
 801296a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 801296c:	7bfb      	ldrb	r3, [r7, #15]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d102      	bne.n	8012978 <SD_disk_read+0x1c>
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d101      	bne.n	801297c <SD_disk_read+0x20>
 8012978:	2304      	movs	r3, #4
 801297a:	e051      	b.n	8012a20 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801297c:	4b2a      	ldr	r3, [pc, #168]	@ (8012a28 <SD_disk_read+0xcc>)
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	b2db      	uxtb	r3, r3
 8012982:	f003 0301 	and.w	r3, r3, #1
 8012986:	2b00      	cmp	r3, #0
 8012988:	d001      	beq.n	801298e <SD_disk_read+0x32>
 801298a:	2303      	movs	r3, #3
 801298c:	e048      	b.n	8012a20 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 801298e:	4b27      	ldr	r3, [pc, #156]	@ (8012a2c <SD_disk_read+0xd0>)
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	f003 0304 	and.w	r3, r3, #4
 8012996:	2b00      	cmp	r3, #0
 8012998:	d102      	bne.n	80129a0 <SD_disk_read+0x44>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	025b      	lsls	r3, r3, #9
 801299e:	607b      	str	r3, [r7, #4]

  SELECT();
 80129a0:	f7ff fd30 	bl	8012404 <SELECT>

  if (count == 1)
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	2b01      	cmp	r3, #1
 80129a8:	d111      	bne.n	80129ce <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80129aa:	6879      	ldr	r1, [r7, #4]
 80129ac:	2051      	movs	r0, #81	@ 0x51
 80129ae:	f7ff fe84 	bl	80126ba <SD_SendCmd>
 80129b2:	4603      	mov	r3, r0
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d129      	bne.n	8012a0c <SD_disk_read+0xb0>
 80129b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80129bc:	68b8      	ldr	r0, [r7, #8]
 80129be:	f7ff fe0b 	bl	80125d8 <SD_RxDataBlock>
 80129c2:	4603      	mov	r3, r0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d021      	beq.n	8012a0c <SD_disk_read+0xb0>
 80129c8:	2300      	movs	r3, #0
 80129ca:	603b      	str	r3, [r7, #0]
 80129cc:	e01e      	b.n	8012a0c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80129ce:	6879      	ldr	r1, [r7, #4]
 80129d0:	2052      	movs	r0, #82	@ 0x52
 80129d2:	f7ff fe72 	bl	80126ba <SD_SendCmd>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d117      	bne.n	8012a0c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80129dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80129e0:	68b8      	ldr	r0, [r7, #8]
 80129e2:	f7ff fdf9 	bl	80125d8 <SD_RxDataBlock>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d00a      	beq.n	8012a02 <SD_disk_read+0xa6>
        buff += 512;
 80129ec:	68bb      	ldr	r3, [r7, #8]
 80129ee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80129f2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	3b01      	subs	r3, #1
 80129f8:	603b      	str	r3, [r7, #0]
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d1ed      	bne.n	80129dc <SD_disk_read+0x80>
 8012a00:	e000      	b.n	8012a04 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8012a02:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8012a04:	2100      	movs	r1, #0
 8012a06:	204c      	movs	r0, #76	@ 0x4c
 8012a08:	f7ff fe57 	bl	80126ba <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8012a0c:	f7ff fd06 	bl	801241c <DESELECT>
  SPI_RxByte();
 8012a10:	f7ff fd44 	bl	801249c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	bf14      	ite	ne
 8012a1a:	2301      	movne	r3, #1
 8012a1c:	2300      	moveq	r3, #0
 8012a1e:	b2db      	uxtb	r3, r3
}
 8012a20:	4618      	mov	r0, r3
 8012a22:	3710      	adds	r7, #16
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	240000c0 	.word	0x240000c0
 8012a2c:	24002a64 	.word	0x24002a64

08012a30 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60b9      	str	r1, [r7, #8]
 8012a38:	607a      	str	r2, [r7, #4]
 8012a3a:	603b      	str	r3, [r7, #0]
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8012a40:	7bfb      	ldrb	r3, [r7, #15]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d102      	bne.n	8012a4c <SD_disk_write+0x1c>
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d101      	bne.n	8012a50 <SD_disk_write+0x20>
 8012a4c:	2304      	movs	r3, #4
 8012a4e:	e06b      	b.n	8012b28 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012a50:	4b37      	ldr	r3, [pc, #220]	@ (8012b30 <SD_disk_write+0x100>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	b2db      	uxtb	r3, r3
 8012a56:	f003 0301 	and.w	r3, r3, #1
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d001      	beq.n	8012a62 <SD_disk_write+0x32>
 8012a5e:	2303      	movs	r3, #3
 8012a60:	e062      	b.n	8012b28 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8012a62:	4b33      	ldr	r3, [pc, #204]	@ (8012b30 <SD_disk_write+0x100>)
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	f003 0304 	and.w	r3, r3, #4
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d001      	beq.n	8012a74 <SD_disk_write+0x44>
 8012a70:	2302      	movs	r3, #2
 8012a72:	e059      	b.n	8012b28 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8012a74:	4b2f      	ldr	r3, [pc, #188]	@ (8012b34 <SD_disk_write+0x104>)
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	f003 0304 	and.w	r3, r3, #4
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d102      	bne.n	8012a86 <SD_disk_write+0x56>
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	025b      	lsls	r3, r3, #9
 8012a84:	607b      	str	r3, [r7, #4]

  SELECT();
 8012a86:	f7ff fcbd 	bl	8012404 <SELECT>

  if (count == 1)
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	2b01      	cmp	r3, #1
 8012a8e:	d110      	bne.n	8012ab2 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8012a90:	6879      	ldr	r1, [r7, #4]
 8012a92:	2058      	movs	r0, #88	@ 0x58
 8012a94:	f7ff fe11 	bl	80126ba <SD_SendCmd>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d13a      	bne.n	8012b14 <SD_disk_write+0xe4>
 8012a9e:	21fe      	movs	r1, #254	@ 0xfe
 8012aa0:	68b8      	ldr	r0, [r7, #8]
 8012aa2:	f7ff fdc7 	bl	8012634 <SD_TxDataBlock>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d033      	beq.n	8012b14 <SD_disk_write+0xe4>
      count = 0;
 8012aac:	2300      	movs	r3, #0
 8012aae:	603b      	str	r3, [r7, #0]
 8012ab0:	e030      	b.n	8012b14 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8012ab2:	4b20      	ldr	r3, [pc, #128]	@ (8012b34 <SD_disk_write+0x104>)
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	f003 0302 	and.w	r3, r3, #2
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d007      	beq.n	8012ace <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8012abe:	2100      	movs	r1, #0
 8012ac0:	2077      	movs	r0, #119	@ 0x77
 8012ac2:	f7ff fdfa 	bl	80126ba <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8012ac6:	6839      	ldr	r1, [r7, #0]
 8012ac8:	2057      	movs	r0, #87	@ 0x57
 8012aca:	f7ff fdf6 	bl	80126ba <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8012ace:	6879      	ldr	r1, [r7, #4]
 8012ad0:	2059      	movs	r0, #89	@ 0x59
 8012ad2:	f7ff fdf2 	bl	80126ba <SD_SendCmd>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d11b      	bne.n	8012b14 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8012adc:	21fc      	movs	r1, #252	@ 0xfc
 8012ade:	68b8      	ldr	r0, [r7, #8]
 8012ae0:	f7ff fda8 	bl	8012634 <SD_TxDataBlock>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d00a      	beq.n	8012b00 <SD_disk_write+0xd0>
        buff += 512;
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8012af0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	3b01      	subs	r3, #1
 8012af6:	603b      	str	r3, [r7, #0]
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d1ee      	bne.n	8012adc <SD_disk_write+0xac>
 8012afe:	e000      	b.n	8012b02 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8012b00:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8012b02:	21fd      	movs	r1, #253	@ 0xfd
 8012b04:	2000      	movs	r0, #0
 8012b06:	f7ff fd95 	bl	8012634 <SD_TxDataBlock>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d101      	bne.n	8012b14 <SD_disk_write+0xe4>
      {
        count = 1;
 8012b10:	2301      	movs	r3, #1
 8012b12:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8012b14:	f7ff fc82 	bl	801241c <DESELECT>
  SPI_RxByte();
 8012b18:	f7ff fcc0 	bl	801249c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	bf14      	ite	ne
 8012b22:	2301      	movne	r3, #1
 8012b24:	2300      	moveq	r3, #0
 8012b26:	b2db      	uxtb	r3, r3
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	3710      	adds	r7, #16
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}
 8012b30:	240000c0 	.word	0x240000c0
 8012b34:	24002a64 	.word	0x24002a64

08012b38 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8012b38:	b590      	push	{r4, r7, lr}
 8012b3a:	b08b      	sub	sp, #44	@ 0x2c
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	4603      	mov	r3, r0
 8012b40:	603a      	str	r2, [r7, #0]
 8012b42:	71fb      	strb	r3, [r7, #7]
 8012b44:	460b      	mov	r3, r1
 8012b46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8012b4c:	79fb      	ldrb	r3, [r7, #7]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d001      	beq.n	8012b56 <SD_disk_ioctl+0x1e>
 8012b52:	2304      	movs	r3, #4
 8012b54:	e113      	b.n	8012d7e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8012b56:	2301      	movs	r3, #1
 8012b58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8012b5c:	79bb      	ldrb	r3, [r7, #6]
 8012b5e:	2b05      	cmp	r3, #5
 8012b60:	d124      	bne.n	8012bac <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8012b62:	6a3b      	ldr	r3, [r7, #32]
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	2b02      	cmp	r3, #2
 8012b68:	d012      	beq.n	8012b90 <SD_disk_ioctl+0x58>
 8012b6a:	2b02      	cmp	r3, #2
 8012b6c:	dc1a      	bgt.n	8012ba4 <SD_disk_ioctl+0x6c>
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d002      	beq.n	8012b78 <SD_disk_ioctl+0x40>
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d006      	beq.n	8012b84 <SD_disk_ioctl+0x4c>
 8012b76:	e015      	b.n	8012ba4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8012b78:	f7ff fd16 	bl	80125a8 <SD_PowerOff>
      res = RES_OK;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012b82:	e0fa      	b.n	8012d7a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8012b84:	f7ff fcce 	bl	8012524 <SD_PowerOn>
      res = RES_OK;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012b8e:	e0f4      	b.n	8012d7a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8012b90:	6a3b      	ldr	r3, [r7, #32]
 8012b92:	1c5c      	adds	r4, r3, #1
 8012b94:	f7ff fd14 	bl	80125c0 <SD_CheckPower>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012ba2:	e0ea      	b.n	8012d7a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8012ba4:	2304      	movs	r3, #4
 8012ba6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012baa:	e0e6      	b.n	8012d7a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8012bac:	4b76      	ldr	r3, [pc, #472]	@ (8012d88 <SD_disk_ioctl+0x250>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	b2db      	uxtb	r3, r3
 8012bb2:	f003 0301 	and.w	r3, r3, #1
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d001      	beq.n	8012bbe <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8012bba:	2303      	movs	r3, #3
 8012bbc:	e0df      	b.n	8012d7e <SD_disk_ioctl+0x246>
    }
    SELECT();
 8012bbe:	f7ff fc21 	bl	8012404 <SELECT>
    switch (ctrl)
 8012bc2:	79bb      	ldrb	r3, [r7, #6]
 8012bc4:	2b0d      	cmp	r3, #13
 8012bc6:	f200 80c9 	bhi.w	8012d5c <SD_disk_ioctl+0x224>
 8012bca:	a201      	add	r2, pc, #4	@ (adr r2, 8012bd0 <SD_disk_ioctl+0x98>)
 8012bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bd0:	08012cc7 	.word	0x08012cc7
 8012bd4:	08012c09 	.word	0x08012c09
 8012bd8:	08012cb7 	.word	0x08012cb7
 8012bdc:	08012d5d 	.word	0x08012d5d
 8012be0:	08012d5d 	.word	0x08012d5d
 8012be4:	08012d5d 	.word	0x08012d5d
 8012be8:	08012d5d 	.word	0x08012d5d
 8012bec:	08012d5d 	.word	0x08012d5d
 8012bf0:	08012d5d 	.word	0x08012d5d
 8012bf4:	08012d5d 	.word	0x08012d5d
 8012bf8:	08012d5d 	.word	0x08012d5d
 8012bfc:	08012cd9 	.word	0x08012cd9
 8012c00:	08012cfd 	.word	0x08012cfd
 8012c04:	08012d21 	.word	0x08012d21
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8012c08:	2100      	movs	r1, #0
 8012c0a:	2049      	movs	r0, #73	@ 0x49
 8012c0c:	f7ff fd55 	bl	80126ba <SD_SendCmd>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	f040 80a6 	bne.w	8012d64 <SD_disk_ioctl+0x22c>
 8012c18:	f107 030c 	add.w	r3, r7, #12
 8012c1c:	2110      	movs	r1, #16
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7ff fcda 	bl	80125d8 <SD_RxDataBlock>
 8012c24:	4603      	mov	r3, r0
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	f000 809c 	beq.w	8012d64 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8012c2c:	7b3b      	ldrb	r3, [r7, #12]
 8012c2e:	099b      	lsrs	r3, r3, #6
 8012c30:	b2db      	uxtb	r3, r3
 8012c32:	2b01      	cmp	r3, #1
 8012c34:	d10d      	bne.n	8012c52 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8012c36:	7d7b      	ldrb	r3, [r7, #21]
 8012c38:	461a      	mov	r2, r3
 8012c3a:	7d3b      	ldrb	r3, [r7, #20]
 8012c3c:	021b      	lsls	r3, r3, #8
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	4413      	add	r3, r2
 8012c42:	b29b      	uxth	r3, r3
 8012c44:	3301      	adds	r3, #1
 8012c46:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8012c48:	8bfb      	ldrh	r3, [r7, #30]
 8012c4a:	029a      	lsls	r2, r3, #10
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	601a      	str	r2, [r3, #0]
 8012c50:	e02d      	b.n	8012cae <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8012c52:	7c7b      	ldrb	r3, [r7, #17]
 8012c54:	f003 030f 	and.w	r3, r3, #15
 8012c58:	b2da      	uxtb	r2, r3
 8012c5a:	7dbb      	ldrb	r3, [r7, #22]
 8012c5c:	09db      	lsrs	r3, r3, #7
 8012c5e:	b2db      	uxtb	r3, r3
 8012c60:	4413      	add	r3, r2
 8012c62:	b2da      	uxtb	r2, r3
 8012c64:	7d7b      	ldrb	r3, [r7, #21]
 8012c66:	005b      	lsls	r3, r3, #1
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	f003 0306 	and.w	r3, r3, #6
 8012c6e:	b2db      	uxtb	r3, r3
 8012c70:	4413      	add	r3, r2
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	3302      	adds	r3, #2
 8012c76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8012c7a:	7d3b      	ldrb	r3, [r7, #20]
 8012c7c:	099b      	lsrs	r3, r3, #6
 8012c7e:	b2db      	uxtb	r3, r3
 8012c80:	461a      	mov	r2, r3
 8012c82:	7cfb      	ldrb	r3, [r7, #19]
 8012c84:	009b      	lsls	r3, r3, #2
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	4413      	add	r3, r2
 8012c8a:	b29a      	uxth	r2, r3
 8012c8c:	7cbb      	ldrb	r3, [r7, #18]
 8012c8e:	029b      	lsls	r3, r3, #10
 8012c90:	b29b      	uxth	r3, r3
 8012c92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8012c96:	b29b      	uxth	r3, r3
 8012c98:	4413      	add	r3, r2
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8012ca0:	8bfa      	ldrh	r2, [r7, #30]
 8012ca2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ca6:	3b09      	subs	r3, #9
 8012ca8:	409a      	lsls	r2, r3
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8012cb4:	e056      	b.n	8012d64 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012cbc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012cc4:	e055      	b.n	8012d72 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8012cc6:	f7ff fc13 	bl	80124f0 <SD_ReadyWait>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	2bff      	cmp	r3, #255	@ 0xff
 8012cce:	d14b      	bne.n	8012d68 <SD_disk_ioctl+0x230>
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012cd6:	e047      	b.n	8012d68 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8012cd8:	2100      	movs	r1, #0
 8012cda:	2049      	movs	r0, #73	@ 0x49
 8012cdc:	f7ff fced 	bl	80126ba <SD_SendCmd>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d142      	bne.n	8012d6c <SD_disk_ioctl+0x234>
 8012ce6:	2110      	movs	r1, #16
 8012ce8:	6a38      	ldr	r0, [r7, #32]
 8012cea:	f7ff fc75 	bl	80125d8 <SD_RxDataBlock>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d03b      	beq.n	8012d6c <SD_disk_ioctl+0x234>
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012cfa:	e037      	b.n	8012d6c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8012cfc:	2100      	movs	r1, #0
 8012cfe:	204a      	movs	r0, #74	@ 0x4a
 8012d00:	f7ff fcdb 	bl	80126ba <SD_SendCmd>
 8012d04:	4603      	mov	r3, r0
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d132      	bne.n	8012d70 <SD_disk_ioctl+0x238>
 8012d0a:	2110      	movs	r1, #16
 8012d0c:	6a38      	ldr	r0, [r7, #32]
 8012d0e:	f7ff fc63 	bl	80125d8 <SD_RxDataBlock>
 8012d12:	4603      	mov	r3, r0
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d02b      	beq.n	8012d70 <SD_disk_ioctl+0x238>
 8012d18:	2300      	movs	r3, #0
 8012d1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8012d1e:	e027      	b.n	8012d70 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8012d20:	2100      	movs	r1, #0
 8012d22:	207a      	movs	r0, #122	@ 0x7a
 8012d24:	f7ff fcc9 	bl	80126ba <SD_SendCmd>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d116      	bne.n	8012d5c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8012d2e:	2300      	movs	r3, #0
 8012d30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012d34:	e00b      	b.n	8012d4e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8012d36:	6a3c      	ldr	r4, [r7, #32]
 8012d38:	1c63      	adds	r3, r4, #1
 8012d3a:	623b      	str	r3, [r7, #32]
 8012d3c:	f7ff fbae 	bl	801249c <SPI_RxByte>
 8012d40:	4603      	mov	r3, r0
 8012d42:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8012d44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d48:	3301      	adds	r3, #1
 8012d4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012d52:	2b03      	cmp	r3, #3
 8012d54:	d9ef      	bls.n	8012d36 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8012d56:	2300      	movs	r3, #0
 8012d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8012d5c:	2304      	movs	r3, #4
 8012d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012d62:	e006      	b.n	8012d72 <SD_disk_ioctl+0x23a>
      break;
 8012d64:	bf00      	nop
 8012d66:	e004      	b.n	8012d72 <SD_disk_ioctl+0x23a>
      break;
 8012d68:	bf00      	nop
 8012d6a:	e002      	b.n	8012d72 <SD_disk_ioctl+0x23a>
      break;
 8012d6c:	bf00      	nop
 8012d6e:	e000      	b.n	8012d72 <SD_disk_ioctl+0x23a>
      break;
 8012d70:	bf00      	nop
    }
    DESELECT();
 8012d72:	f7ff fb53 	bl	801241c <DESELECT>
    SPI_RxByte();
 8012d76:	f7ff fb91 	bl	801249c <SPI_RxByte>
  }
  return res;
 8012d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	372c      	adds	r7, #44	@ 0x2c
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd90      	pop	{r4, r7, pc}
 8012d86:	bf00      	nop
 8012d88:	240000c0 	.word	0x240000c0

08012d8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b084      	sub	sp, #16
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	4603      	mov	r3, r0
 8012d94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012d96:	79fb      	ldrb	r3, [r7, #7]
 8012d98:	4a08      	ldr	r2, [pc, #32]	@ (8012dbc <disk_status+0x30>)
 8012d9a:	009b      	lsls	r3, r3, #2
 8012d9c:	4413      	add	r3, r2
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	79fa      	ldrb	r2, [r7, #7]
 8012da4:	4905      	ldr	r1, [pc, #20]	@ (8012dbc <disk_status+0x30>)
 8012da6:	440a      	add	r2, r1
 8012da8:	7a12      	ldrb	r2, [r2, #8]
 8012daa:	4610      	mov	r0, r2
 8012dac:	4798      	blx	r3
 8012dae:	4603      	mov	r3, r0
 8012db0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3710      	adds	r7, #16
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	24002a68 	.word	0x24002a68

08012dc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012dc0:	b590      	push	{r4, r7, lr}
 8012dc2:	b087      	sub	sp, #28
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	60b9      	str	r1, [r7, #8]
 8012dc8:	607a      	str	r2, [r7, #4]
 8012dca:	603b      	str	r3, [r7, #0]
 8012dcc:	4603      	mov	r3, r0
 8012dce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012dd0:	7bfb      	ldrb	r3, [r7, #15]
 8012dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8012dfc <disk_read+0x3c>)
 8012dd4:	009b      	lsls	r3, r3, #2
 8012dd6:	4413      	add	r3, r2
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	689c      	ldr	r4, [r3, #8]
 8012ddc:	7bfb      	ldrb	r3, [r7, #15]
 8012dde:	4a07      	ldr	r2, [pc, #28]	@ (8012dfc <disk_read+0x3c>)
 8012de0:	4413      	add	r3, r2
 8012de2:	7a18      	ldrb	r0, [r3, #8]
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	68b9      	ldr	r1, [r7, #8]
 8012dea:	47a0      	blx	r4
 8012dec:	4603      	mov	r3, r0
 8012dee:	75fb      	strb	r3, [r7, #23]
  return res;
 8012df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	371c      	adds	r7, #28
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd90      	pop	{r4, r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	24002a68 	.word	0x24002a68

08012e00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012e00:	b590      	push	{r4, r7, lr}
 8012e02:	b087      	sub	sp, #28
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	60b9      	str	r1, [r7, #8]
 8012e08:	607a      	str	r2, [r7, #4]
 8012e0a:	603b      	str	r3, [r7, #0]
 8012e0c:	4603      	mov	r3, r0
 8012e0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012e10:	7bfb      	ldrb	r3, [r7, #15]
 8012e12:	4a0a      	ldr	r2, [pc, #40]	@ (8012e3c <disk_write+0x3c>)
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	4413      	add	r3, r2
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	68dc      	ldr	r4, [r3, #12]
 8012e1c:	7bfb      	ldrb	r3, [r7, #15]
 8012e1e:	4a07      	ldr	r2, [pc, #28]	@ (8012e3c <disk_write+0x3c>)
 8012e20:	4413      	add	r3, r2
 8012e22:	7a18      	ldrb	r0, [r3, #8]
 8012e24:	683b      	ldr	r3, [r7, #0]
 8012e26:	687a      	ldr	r2, [r7, #4]
 8012e28:	68b9      	ldr	r1, [r7, #8]
 8012e2a:	47a0      	blx	r4
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8012e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	371c      	adds	r7, #28
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd90      	pop	{r4, r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	24002a68 	.word	0x24002a68

08012e40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	4603      	mov	r3, r0
 8012e48:	603a      	str	r2, [r7, #0]
 8012e4a:	71fb      	strb	r3, [r7, #7]
 8012e4c:	460b      	mov	r3, r1
 8012e4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012e50:	79fb      	ldrb	r3, [r7, #7]
 8012e52:	4a09      	ldr	r2, [pc, #36]	@ (8012e78 <disk_ioctl+0x38>)
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	4413      	add	r3, r2
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	691b      	ldr	r3, [r3, #16]
 8012e5c:	79fa      	ldrb	r2, [r7, #7]
 8012e5e:	4906      	ldr	r1, [pc, #24]	@ (8012e78 <disk_ioctl+0x38>)
 8012e60:	440a      	add	r2, r1
 8012e62:	7a10      	ldrb	r0, [r2, #8]
 8012e64:	79b9      	ldrb	r1, [r7, #6]
 8012e66:	683a      	ldr	r2, [r7, #0]
 8012e68:	4798      	blx	r3
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	73fb      	strb	r3, [r7, #15]
  return res;
 8012e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	3710      	adds	r7, #16
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}
 8012e78:	24002a68 	.word	0x24002a68

08012e7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012e7c:	b480      	push	{r7}
 8012e7e:	b085      	sub	sp, #20
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	3301      	adds	r3, #1
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012e8c:	89fb      	ldrh	r3, [r7, #14]
 8012e8e:	021b      	lsls	r3, r3, #8
 8012e90:	b21a      	sxth	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	b21b      	sxth	r3, r3
 8012e98:	4313      	orrs	r3, r2
 8012e9a:	b21b      	sxth	r3, r3
 8012e9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3714      	adds	r7, #20
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eaa:	4770      	bx	lr

08012eac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012eac:	b480      	push	{r7}
 8012eae:	b085      	sub	sp, #20
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	3303      	adds	r3, #3
 8012eb8:	781b      	ldrb	r3, [r3, #0]
 8012eba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	021b      	lsls	r3, r3, #8
 8012ec0:	687a      	ldr	r2, [r7, #4]
 8012ec2:	3202      	adds	r2, #2
 8012ec4:	7812      	ldrb	r2, [r2, #0]
 8012ec6:	4313      	orrs	r3, r2
 8012ec8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	021b      	lsls	r3, r3, #8
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	3201      	adds	r2, #1
 8012ed2:	7812      	ldrb	r2, [r2, #0]
 8012ed4:	4313      	orrs	r3, r2
 8012ed6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	021b      	lsls	r3, r3, #8
 8012edc:	687a      	ldr	r2, [r7, #4]
 8012ede:	7812      	ldrb	r2, [r2, #0]
 8012ee0:	4313      	orrs	r3, r2
 8012ee2:	60fb      	str	r3, [r7, #12]
	return rv;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3714      	adds	r7, #20
 8012eea:	46bd      	mov	sp, r7
 8012eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef0:	4770      	bx	lr

08012ef2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012ef2:	b480      	push	{r7}
 8012ef4:	b083      	sub	sp, #12
 8012ef6:	af00      	add	r7, sp, #0
 8012ef8:	6078      	str	r0, [r7, #4]
 8012efa:	460b      	mov	r3, r1
 8012efc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	1c5a      	adds	r2, r3, #1
 8012f02:	607a      	str	r2, [r7, #4]
 8012f04:	887a      	ldrh	r2, [r7, #2]
 8012f06:	b2d2      	uxtb	r2, r2
 8012f08:	701a      	strb	r2, [r3, #0]
 8012f0a:	887b      	ldrh	r3, [r7, #2]
 8012f0c:	0a1b      	lsrs	r3, r3, #8
 8012f0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	1c5a      	adds	r2, r3, #1
 8012f14:	607a      	str	r2, [r7, #4]
 8012f16:	887a      	ldrh	r2, [r7, #2]
 8012f18:	b2d2      	uxtb	r2, r2
 8012f1a:	701a      	strb	r2, [r3, #0]
}
 8012f1c:	bf00      	nop
 8012f1e:	370c      	adds	r7, #12
 8012f20:	46bd      	mov	sp, r7
 8012f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f26:	4770      	bx	lr

08012f28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012f28:	b480      	push	{r7}
 8012f2a:	b083      	sub	sp, #12
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
 8012f30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	1c5a      	adds	r2, r3, #1
 8012f36:	607a      	str	r2, [r7, #4]
 8012f38:	683a      	ldr	r2, [r7, #0]
 8012f3a:	b2d2      	uxtb	r2, r2
 8012f3c:	701a      	strb	r2, [r3, #0]
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	0a1b      	lsrs	r3, r3, #8
 8012f42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	1c5a      	adds	r2, r3, #1
 8012f48:	607a      	str	r2, [r7, #4]
 8012f4a:	683a      	ldr	r2, [r7, #0]
 8012f4c:	b2d2      	uxtb	r2, r2
 8012f4e:	701a      	strb	r2, [r3, #0]
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	0a1b      	lsrs	r3, r3, #8
 8012f54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	1c5a      	adds	r2, r3, #1
 8012f5a:	607a      	str	r2, [r7, #4]
 8012f5c:	683a      	ldr	r2, [r7, #0]
 8012f5e:	b2d2      	uxtb	r2, r2
 8012f60:	701a      	strb	r2, [r3, #0]
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	0a1b      	lsrs	r3, r3, #8
 8012f66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	1c5a      	adds	r2, r3, #1
 8012f6c:	607a      	str	r2, [r7, #4]
 8012f6e:	683a      	ldr	r2, [r7, #0]
 8012f70:	b2d2      	uxtb	r2, r2
 8012f72:	701a      	strb	r2, [r3, #0]
}
 8012f74:	bf00      	nop
 8012f76:	370c      	adds	r7, #12
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr

08012f80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012f80:	b480      	push	{r7}
 8012f82:	b087      	sub	sp, #28
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012f8c:	68fb      	ldr	r3, [r7, #12]
 8012f8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d00d      	beq.n	8012fb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012f9a:	693a      	ldr	r2, [r7, #16]
 8012f9c:	1c53      	adds	r3, r2, #1
 8012f9e:	613b      	str	r3, [r7, #16]
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	1c59      	adds	r1, r3, #1
 8012fa4:	6179      	str	r1, [r7, #20]
 8012fa6:	7812      	ldrb	r2, [r2, #0]
 8012fa8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	3b01      	subs	r3, #1
 8012fae:	607b      	str	r3, [r7, #4]
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d1f1      	bne.n	8012f9a <mem_cpy+0x1a>
	}
}
 8012fb6:	bf00      	nop
 8012fb8:	371c      	adds	r7, #28
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc0:	4770      	bx	lr

08012fc2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012fc2:	b480      	push	{r7}
 8012fc4:	b087      	sub	sp, #28
 8012fc6:	af00      	add	r7, sp, #0
 8012fc8:	60f8      	str	r0, [r7, #12]
 8012fca:	60b9      	str	r1, [r7, #8]
 8012fcc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	1c5a      	adds	r2, r3, #1
 8012fd6:	617a      	str	r2, [r7, #20]
 8012fd8:	68ba      	ldr	r2, [r7, #8]
 8012fda:	b2d2      	uxtb	r2, r2
 8012fdc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	607b      	str	r3, [r7, #4]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d1f3      	bne.n	8012fd2 <mem_set+0x10>
}
 8012fea:	bf00      	nop
 8012fec:	bf00      	nop
 8012fee:	371c      	adds	r7, #28
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff6:	4770      	bx	lr

08012ff8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d009      	beq.n	801301a <lock_fs+0x22>
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	691b      	ldr	r3, [r3, #16]
 801300a:	4618      	mov	r0, r3
 801300c:	f000 fe6f 	bl	8013cee <ff_req_grant>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d001      	beq.n	801301a <lock_fs+0x22>
 8013016:	2301      	movs	r3, #1
 8013018:	e000      	b.n	801301c <lock_fs+0x24>
 801301a:	2300      	movs	r3, #0
}
 801301c:	4618      	mov	r0, r3
 801301e:	3708      	adds	r7, #8
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	460b      	mov	r3, r1
 801302e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d00d      	beq.n	8013052 <unlock_fs+0x2e>
 8013036:	78fb      	ldrb	r3, [r7, #3]
 8013038:	2b0c      	cmp	r3, #12
 801303a:	d00a      	beq.n	8013052 <unlock_fs+0x2e>
 801303c:	78fb      	ldrb	r3, [r7, #3]
 801303e:	2b0b      	cmp	r3, #11
 8013040:	d007      	beq.n	8013052 <unlock_fs+0x2e>
 8013042:	78fb      	ldrb	r3, [r7, #3]
 8013044:	2b0f      	cmp	r3, #15
 8013046:	d004      	beq.n	8013052 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	691b      	ldr	r3, [r3, #16]
 801304c:	4618      	mov	r0, r3
 801304e:	f000 fe63 	bl	8013d18 <ff_rel_grant>
	}
}
 8013052:	bf00      	nop
 8013054:	3708      	adds	r7, #8
 8013056:	46bd      	mov	sp, r7
 8013058:	bd80      	pop	{r7, pc}

0801305a <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801305a:	b580      	push	{r7, lr}
 801305c:	b086      	sub	sp, #24
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013062:	2300      	movs	r3, #0
 8013064:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	78db      	ldrb	r3, [r3, #3]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d034      	beq.n	80130d8 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013072:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	7858      	ldrb	r0, [r3, #1]
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801307e:	2301      	movs	r3, #1
 8013080:	697a      	ldr	r2, [r7, #20]
 8013082:	f7ff febd 	bl	8012e00 <disk_write>
 8013086:	4603      	mov	r3, r0
 8013088:	2b00      	cmp	r3, #0
 801308a:	d002      	beq.n	8013092 <sync_window+0x38>
			res = FR_DISK_ERR;
 801308c:	2301      	movs	r3, #1
 801308e:	73fb      	strb	r3, [r7, #15]
 8013090:	e022      	b.n	80130d8 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2200      	movs	r2, #0
 8013096:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801309c:	697a      	ldr	r2, [r7, #20]
 801309e:	1ad2      	subs	r2, r2, r3
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	6a1b      	ldr	r3, [r3, #32]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d217      	bcs.n	80130d8 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	789b      	ldrb	r3, [r3, #2]
 80130ac:	613b      	str	r3, [r7, #16]
 80130ae:	e010      	b.n	80130d2 <sync_window+0x78>
					wsect += fs->fsize;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6a1b      	ldr	r3, [r3, #32]
 80130b4:	697a      	ldr	r2, [r7, #20]
 80130b6:	4413      	add	r3, r2
 80130b8:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	7858      	ldrb	r0, [r3, #1]
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80130c4:	2301      	movs	r3, #1
 80130c6:	697a      	ldr	r2, [r7, #20]
 80130c8:	f7ff fe9a 	bl	8012e00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	3b01      	subs	r3, #1
 80130d0:	613b      	str	r3, [r7, #16]
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	2b01      	cmp	r3, #1
 80130d6:	d8eb      	bhi.n	80130b0 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80130d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3718      	adds	r7, #24
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}

080130e2 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80130e2:	b580      	push	{r7, lr}
 80130e4:	b084      	sub	sp, #16
 80130e6:	af00      	add	r7, sp, #0
 80130e8:	6078      	str	r0, [r7, #4]
 80130ea:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80130ec:	2300      	movs	r3, #0
 80130ee:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80130f4:	683a      	ldr	r2, [r7, #0]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d01b      	beq.n	8013132 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f7ff ffad 	bl	801305a <sync_window>
 8013100:	4603      	mov	r3, r0
 8013102:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013104:	7bfb      	ldrb	r3, [r7, #15]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d113      	bne.n	8013132 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	7858      	ldrb	r0, [r3, #1]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013114:	2301      	movs	r3, #1
 8013116:	683a      	ldr	r2, [r7, #0]
 8013118:	f7ff fe52 	bl	8012dc0 <disk_read>
 801311c:	4603      	mov	r3, r0
 801311e:	2b00      	cmp	r3, #0
 8013120:	d004      	beq.n	801312c <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013122:	f04f 33ff 	mov.w	r3, #4294967295
 8013126:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013128:	2301      	movs	r3, #1
 801312a:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	683a      	ldr	r2, [r7, #0]
 8013130:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8013132:	7bfb      	ldrb	r3, [r7, #15]
}
 8013134:	4618      	mov	r0, r3
 8013136:	3710      	adds	r7, #16
 8013138:	46bd      	mov	sp, r7
 801313a:	bd80      	pop	{r7, pc}

0801313c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b084      	sub	sp, #16
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f7ff ff88 	bl	801305a <sync_window>
 801314a:	4603      	mov	r3, r0
 801314c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801314e:	7bfb      	ldrb	r3, [r7, #15]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d158      	bne.n	8013206 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	2b03      	cmp	r3, #3
 801315a:	d148      	bne.n	80131ee <sync_fs+0xb2>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	791b      	ldrb	r3, [r3, #4]
 8013160:	2b01      	cmp	r3, #1
 8013162:	d144      	bne.n	80131ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	3338      	adds	r3, #56	@ 0x38
 8013168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801316c:	2100      	movs	r1, #0
 801316e:	4618      	mov	r0, r3
 8013170:	f7ff ff27 	bl	8012fc2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	3338      	adds	r3, #56	@ 0x38
 8013178:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801317c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8013180:	4618      	mov	r0, r3
 8013182:	f7ff feb6 	bl	8012ef2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	3338      	adds	r3, #56	@ 0x38
 801318a:	4921      	ldr	r1, [pc, #132]	@ (8013210 <sync_fs+0xd4>)
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff fecb 	bl	8012f28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	3338      	adds	r3, #56	@ 0x38
 8013196:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801319a:	491e      	ldr	r1, [pc, #120]	@ (8013214 <sync_fs+0xd8>)
 801319c:	4618      	mov	r0, r3
 801319e:	f7ff fec3 	bl	8012f28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	3338      	adds	r3, #56	@ 0x38
 80131a6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	699b      	ldr	r3, [r3, #24]
 80131ae:	4619      	mov	r1, r3
 80131b0:	4610      	mov	r0, r2
 80131b2:	f7ff feb9 	bl	8012f28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	3338      	adds	r3, #56	@ 0x38
 80131ba:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	695b      	ldr	r3, [r3, #20]
 80131c2:	4619      	mov	r1, r3
 80131c4:	4610      	mov	r0, r2
 80131c6:	f7ff feaf 	bl	8012f28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131ce:	1c5a      	adds	r2, r3, #1
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	7858      	ldrb	r0, [r3, #1]
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80131e2:	2301      	movs	r3, #1
 80131e4:	f7ff fe0c 	bl	8012e00 <disk_write>
			fs->fsi_flag = 0;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2200      	movs	r2, #0
 80131ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	785b      	ldrb	r3, [r3, #1]
 80131f2:	2200      	movs	r2, #0
 80131f4:	2100      	movs	r1, #0
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7ff fe22 	bl	8012e40 <disk_ioctl>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d001      	beq.n	8013206 <sync_fs+0xca>
 8013202:	2301      	movs	r3, #1
 8013204:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013206:	7bfb      	ldrb	r3, [r7, #15]
}
 8013208:	4618      	mov	r0, r3
 801320a:	3710      	adds	r7, #16
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}
 8013210:	41615252 	.word	0x41615252
 8013214:	61417272 	.word	0x61417272

08013218 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013218:	b480      	push	{r7}
 801321a:	b083      	sub	sp, #12
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	3b02      	subs	r3, #2
 8013226:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	69db      	ldr	r3, [r3, #28]
 801322c:	3b02      	subs	r3, #2
 801322e:	683a      	ldr	r2, [r7, #0]
 8013230:	429a      	cmp	r2, r3
 8013232:	d301      	bcc.n	8013238 <clust2sect+0x20>
 8013234:	2300      	movs	r3, #0
 8013236:	e008      	b.n	801324a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	895b      	ldrh	r3, [r3, #10]
 801323c:	461a      	mov	r2, r3
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	fb03 f202 	mul.w	r2, r3, r2
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013248:	4413      	add	r3, r2
}
 801324a:	4618      	mov	r0, r3
 801324c:	370c      	adds	r7, #12
 801324e:	46bd      	mov	sp, r7
 8013250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013254:	4770      	bx	lr

08013256 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013256:	b580      	push	{r7, lr}
 8013258:	b086      	sub	sp, #24
 801325a:	af00      	add	r7, sp, #0
 801325c:	6078      	str	r0, [r7, #4]
 801325e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	2b01      	cmp	r3, #1
 801326a:	d904      	bls.n	8013276 <get_fat+0x20>
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	69db      	ldr	r3, [r3, #28]
 8013270:	683a      	ldr	r2, [r7, #0]
 8013272:	429a      	cmp	r2, r3
 8013274:	d302      	bcc.n	801327c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013276:	2301      	movs	r3, #1
 8013278:	617b      	str	r3, [r7, #20]
 801327a:	e08e      	b.n	801339a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801327c:	f04f 33ff 	mov.w	r3, #4294967295
 8013280:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	2b03      	cmp	r3, #3
 8013288:	d061      	beq.n	801334e <get_fat+0xf8>
 801328a:	2b03      	cmp	r3, #3
 801328c:	dc7b      	bgt.n	8013386 <get_fat+0x130>
 801328e:	2b01      	cmp	r3, #1
 8013290:	d002      	beq.n	8013298 <get_fat+0x42>
 8013292:	2b02      	cmp	r3, #2
 8013294:	d041      	beq.n	801331a <get_fat+0xc4>
 8013296:	e076      	b.n	8013386 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	60fb      	str	r3, [r7, #12]
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	085b      	lsrs	r3, r3, #1
 80132a0:	68fa      	ldr	r2, [r7, #12]
 80132a2:	4413      	add	r3, r2
 80132a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	0a5b      	lsrs	r3, r3, #9
 80132ae:	4413      	add	r3, r2
 80132b0:	4619      	mov	r1, r3
 80132b2:	6938      	ldr	r0, [r7, #16]
 80132b4:	f7ff ff15 	bl	80130e2 <move_window>
 80132b8:	4603      	mov	r3, r0
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d166      	bne.n	801338c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	1c5a      	adds	r2, r3, #1
 80132c2:	60fa      	str	r2, [r7, #12]
 80132c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132c8:	693a      	ldr	r2, [r7, #16]
 80132ca:	4413      	add	r3, r2
 80132cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80132d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	0a5b      	lsrs	r3, r3, #9
 80132da:	4413      	add	r3, r2
 80132dc:	4619      	mov	r1, r3
 80132de:	6938      	ldr	r0, [r7, #16]
 80132e0:	f7ff feff 	bl	80130e2 <move_window>
 80132e4:	4603      	mov	r3, r0
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d152      	bne.n	8013390 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132f0:	693a      	ldr	r2, [r7, #16]
 80132f2:	4413      	add	r3, r2
 80132f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80132f8:	021b      	lsls	r3, r3, #8
 80132fa:	68ba      	ldr	r2, [r7, #8]
 80132fc:	4313      	orrs	r3, r2
 80132fe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	f003 0301 	and.w	r3, r3, #1
 8013306:	2b00      	cmp	r3, #0
 8013308:	d002      	beq.n	8013310 <get_fat+0xba>
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	091b      	lsrs	r3, r3, #4
 801330e:	e002      	b.n	8013316 <get_fat+0xc0>
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013316:	617b      	str	r3, [r7, #20]
			break;
 8013318:	e03f      	b.n	801339a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	0a1b      	lsrs	r3, r3, #8
 8013322:	4413      	add	r3, r2
 8013324:	4619      	mov	r1, r3
 8013326:	6938      	ldr	r0, [r7, #16]
 8013328:	f7ff fedb 	bl	80130e2 <move_window>
 801332c:	4603      	mov	r3, r0
 801332e:	2b00      	cmp	r3, #0
 8013330:	d130      	bne.n	8013394 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	005b      	lsls	r3, r3, #1
 801333c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013340:	4413      	add	r3, r2
 8013342:	4618      	mov	r0, r3
 8013344:	f7ff fd9a 	bl	8012e7c <ld_word>
 8013348:	4603      	mov	r3, r0
 801334a:	617b      	str	r3, [r7, #20]
			break;
 801334c:	e025      	b.n	801339a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	09db      	lsrs	r3, r3, #7
 8013356:	4413      	add	r3, r2
 8013358:	4619      	mov	r1, r3
 801335a:	6938      	ldr	r0, [r7, #16]
 801335c:	f7ff fec1 	bl	80130e2 <move_window>
 8013360:	4603      	mov	r3, r0
 8013362:	2b00      	cmp	r3, #0
 8013364:	d118      	bne.n	8013398 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	009b      	lsls	r3, r3, #2
 8013370:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013374:	4413      	add	r3, r2
 8013376:	4618      	mov	r0, r3
 8013378:	f7ff fd98 	bl	8012eac <ld_dword>
 801337c:	4603      	mov	r3, r0
 801337e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013382:	617b      	str	r3, [r7, #20]
			break;
 8013384:	e009      	b.n	801339a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013386:	2301      	movs	r3, #1
 8013388:	617b      	str	r3, [r7, #20]
 801338a:	e006      	b.n	801339a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801338c:	bf00      	nop
 801338e:	e004      	b.n	801339a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013390:	bf00      	nop
 8013392:	e002      	b.n	801339a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013394:	bf00      	nop
 8013396:	e000      	b.n	801339a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013398:	bf00      	nop
		}
	}

	return val;
 801339a:	697b      	ldr	r3, [r7, #20]
}
 801339c:	4618      	mov	r0, r3
 801339e:	3718      	adds	r7, #24
 80133a0:	46bd      	mov	sp, r7
 80133a2:	bd80      	pop	{r7, pc}

080133a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80133a4:	b590      	push	{r4, r7, lr}
 80133a6:	b089      	sub	sp, #36	@ 0x24
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80133b0:	2302      	movs	r3, #2
 80133b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	2b01      	cmp	r3, #1
 80133b8:	f240 80d9 	bls.w	801356e <put_fat+0x1ca>
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	69db      	ldr	r3, [r3, #28]
 80133c0:	68ba      	ldr	r2, [r7, #8]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	f080 80d3 	bcs.w	801356e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	2b03      	cmp	r3, #3
 80133ce:	f000 8096 	beq.w	80134fe <put_fat+0x15a>
 80133d2:	2b03      	cmp	r3, #3
 80133d4:	f300 80cb 	bgt.w	801356e <put_fat+0x1ca>
 80133d8:	2b01      	cmp	r3, #1
 80133da:	d002      	beq.n	80133e2 <put_fat+0x3e>
 80133dc:	2b02      	cmp	r3, #2
 80133de:	d06e      	beq.n	80134be <put_fat+0x11a>
 80133e0:	e0c5      	b.n	801356e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	61bb      	str	r3, [r7, #24]
 80133e6:	69bb      	ldr	r3, [r7, #24]
 80133e8:	085b      	lsrs	r3, r3, #1
 80133ea:	69ba      	ldr	r2, [r7, #24]
 80133ec:	4413      	add	r3, r2
 80133ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	0a5b      	lsrs	r3, r3, #9
 80133f8:	4413      	add	r3, r2
 80133fa:	4619      	mov	r1, r3
 80133fc:	68f8      	ldr	r0, [r7, #12]
 80133fe:	f7ff fe70 	bl	80130e2 <move_window>
 8013402:	4603      	mov	r3, r0
 8013404:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013406:	7ffb      	ldrb	r3, [r7, #31]
 8013408:	2b00      	cmp	r3, #0
 801340a:	f040 80a9 	bne.w	8013560 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	1c59      	adds	r1, r3, #1
 8013418:	61b9      	str	r1, [r7, #24]
 801341a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801341e:	4413      	add	r3, r2
 8013420:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	f003 0301 	and.w	r3, r3, #1
 8013428:	2b00      	cmp	r3, #0
 801342a:	d00d      	beq.n	8013448 <put_fat+0xa4>
 801342c:	697b      	ldr	r3, [r7, #20]
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	b25b      	sxtb	r3, r3
 8013432:	f003 030f 	and.w	r3, r3, #15
 8013436:	b25a      	sxtb	r2, r3
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	b2db      	uxtb	r3, r3
 801343c:	011b      	lsls	r3, r3, #4
 801343e:	b25b      	sxtb	r3, r3
 8013440:	4313      	orrs	r3, r2
 8013442:	b25b      	sxtb	r3, r3
 8013444:	b2db      	uxtb	r3, r3
 8013446:	e001      	b.n	801344c <put_fat+0xa8>
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	b2db      	uxtb	r3, r3
 801344c:	697a      	ldr	r2, [r7, #20]
 801344e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	2201      	movs	r2, #1
 8013454:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801345a:	69bb      	ldr	r3, [r7, #24]
 801345c:	0a5b      	lsrs	r3, r3, #9
 801345e:	4413      	add	r3, r2
 8013460:	4619      	mov	r1, r3
 8013462:	68f8      	ldr	r0, [r7, #12]
 8013464:	f7ff fe3d 	bl	80130e2 <move_window>
 8013468:	4603      	mov	r3, r0
 801346a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801346c:	7ffb      	ldrb	r3, [r7, #31]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d178      	bne.n	8013564 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801347e:	4413      	add	r3, r2
 8013480:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	f003 0301 	and.w	r3, r3, #1
 8013488:	2b00      	cmp	r3, #0
 801348a:	d003      	beq.n	8013494 <put_fat+0xf0>
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	091b      	lsrs	r3, r3, #4
 8013490:	b2db      	uxtb	r3, r3
 8013492:	e00e      	b.n	80134b2 <put_fat+0x10e>
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	781b      	ldrb	r3, [r3, #0]
 8013498:	b25b      	sxtb	r3, r3
 801349a:	f023 030f 	bic.w	r3, r3, #15
 801349e:	b25a      	sxtb	r2, r3
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	0a1b      	lsrs	r3, r3, #8
 80134a4:	b25b      	sxtb	r3, r3
 80134a6:	f003 030f 	and.w	r3, r3, #15
 80134aa:	b25b      	sxtb	r3, r3
 80134ac:	4313      	orrs	r3, r2
 80134ae:	b25b      	sxtb	r3, r3
 80134b0:	b2db      	uxtb	r3, r3
 80134b2:	697a      	ldr	r2, [r7, #20]
 80134b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	2201      	movs	r2, #1
 80134ba:	70da      	strb	r2, [r3, #3]
			break;
 80134bc:	e057      	b.n	801356e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	0a1b      	lsrs	r3, r3, #8
 80134c6:	4413      	add	r3, r2
 80134c8:	4619      	mov	r1, r3
 80134ca:	68f8      	ldr	r0, [r7, #12]
 80134cc:	f7ff fe09 	bl	80130e2 <move_window>
 80134d0:	4603      	mov	r3, r0
 80134d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80134d4:	7ffb      	ldrb	r3, [r7, #31]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d146      	bne.n	8013568 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	005b      	lsls	r3, r3, #1
 80134e4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80134e8:	4413      	add	r3, r2
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	b292      	uxth	r2, r2
 80134ee:	4611      	mov	r1, r2
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7ff fcfe 	bl	8012ef2 <st_word>
			fs->wflag = 1;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	2201      	movs	r2, #1
 80134fa:	70da      	strb	r2, [r3, #3]
			break;
 80134fc:	e037      	b.n	801356e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	09db      	lsrs	r3, r3, #7
 8013506:	4413      	add	r3, r2
 8013508:	4619      	mov	r1, r3
 801350a:	68f8      	ldr	r0, [r7, #12]
 801350c:	f7ff fde9 	bl	80130e2 <move_window>
 8013510:	4603      	mov	r3, r0
 8013512:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013514:	7ffb      	ldrb	r3, [r7, #31]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d128      	bne.n	801356c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	009b      	lsls	r3, r3, #2
 801352a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801352e:	4413      	add	r3, r2
 8013530:	4618      	mov	r0, r3
 8013532:	f7ff fcbb 	bl	8012eac <ld_dword>
 8013536:	4603      	mov	r3, r0
 8013538:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 801353c:	4323      	orrs	r3, r4
 801353e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	009b      	lsls	r3, r3, #2
 801354a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801354e:	4413      	add	r3, r2
 8013550:	6879      	ldr	r1, [r7, #4]
 8013552:	4618      	mov	r0, r3
 8013554:	f7ff fce8 	bl	8012f28 <st_dword>
			fs->wflag = 1;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2201      	movs	r2, #1
 801355c:	70da      	strb	r2, [r3, #3]
			break;
 801355e:	e006      	b.n	801356e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013560:	bf00      	nop
 8013562:	e004      	b.n	801356e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013564:	bf00      	nop
 8013566:	e002      	b.n	801356e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013568:	bf00      	nop
 801356a:	e000      	b.n	801356e <put_fat+0x1ca>
			if (res != FR_OK) break;
 801356c:	bf00      	nop
		}
	}
	return res;
 801356e:	7ffb      	ldrb	r3, [r7, #31]
}
 8013570:	4618      	mov	r0, r3
 8013572:	3724      	adds	r7, #36	@ 0x24
 8013574:	46bd      	mov	sp, r7
 8013576:	bd90      	pop	{r4, r7, pc}

08013578 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b088      	sub	sp, #32
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013588:	683b      	ldr	r3, [r7, #0]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d10d      	bne.n	80135aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801358e:	693b      	ldr	r3, [r7, #16]
 8013590:	695b      	ldr	r3, [r3, #20]
 8013592:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013594:	69bb      	ldr	r3, [r7, #24]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d004      	beq.n	80135a4 <create_chain+0x2c>
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	69db      	ldr	r3, [r3, #28]
 801359e:	69ba      	ldr	r2, [r7, #24]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d31b      	bcc.n	80135dc <create_chain+0x64>
 80135a4:	2301      	movs	r3, #1
 80135a6:	61bb      	str	r3, [r7, #24]
 80135a8:	e018      	b.n	80135dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80135aa:	6839      	ldr	r1, [r7, #0]
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f7ff fe52 	bl	8013256 <get_fat>
 80135b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2b01      	cmp	r3, #1
 80135b8:	d801      	bhi.n	80135be <create_chain+0x46>
 80135ba:	2301      	movs	r3, #1
 80135bc:	e070      	b.n	80136a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135c4:	d101      	bne.n	80135ca <create_chain+0x52>
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	e06a      	b.n	80136a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	69db      	ldr	r3, [r3, #28]
 80135ce:	68fa      	ldr	r2, [r7, #12]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d201      	bcs.n	80135d8 <create_chain+0x60>
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	e063      	b.n	80136a0 <create_chain+0x128>
		scl = clst;
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80135dc:	69bb      	ldr	r3, [r7, #24]
 80135de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80135e0:	69fb      	ldr	r3, [r7, #28]
 80135e2:	3301      	adds	r3, #1
 80135e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	69db      	ldr	r3, [r3, #28]
 80135ea:	69fa      	ldr	r2, [r7, #28]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d307      	bcc.n	8013600 <create_chain+0x88>
				ncl = 2;
 80135f0:	2302      	movs	r3, #2
 80135f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80135f4:	69fa      	ldr	r2, [r7, #28]
 80135f6:	69bb      	ldr	r3, [r7, #24]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d901      	bls.n	8013600 <create_chain+0x88>
 80135fc:	2300      	movs	r3, #0
 80135fe:	e04f      	b.n	80136a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013600:	69f9      	ldr	r1, [r7, #28]
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f7ff fe27 	bl	8013256 <get_fat>
 8013608:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d00e      	beq.n	801362e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	2b01      	cmp	r3, #1
 8013614:	d003      	beq.n	801361e <create_chain+0xa6>
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	f1b3 3fff 	cmp.w	r3, #4294967295
 801361c:	d101      	bne.n	8013622 <create_chain+0xaa>
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	e03e      	b.n	80136a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013622:	69fa      	ldr	r2, [r7, #28]
 8013624:	69bb      	ldr	r3, [r7, #24]
 8013626:	429a      	cmp	r2, r3
 8013628:	d1da      	bne.n	80135e0 <create_chain+0x68>
 801362a:	2300      	movs	r3, #0
 801362c:	e038      	b.n	80136a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801362e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013630:	f04f 32ff 	mov.w	r2, #4294967295
 8013634:	69f9      	ldr	r1, [r7, #28]
 8013636:	6938      	ldr	r0, [r7, #16]
 8013638:	f7ff feb4 	bl	80133a4 <put_fat>
 801363c:	4603      	mov	r3, r0
 801363e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013640:	7dfb      	ldrb	r3, [r7, #23]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d109      	bne.n	801365a <create_chain+0xe2>
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d006      	beq.n	801365a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801364c:	69fa      	ldr	r2, [r7, #28]
 801364e:	6839      	ldr	r1, [r7, #0]
 8013650:	6938      	ldr	r0, [r7, #16]
 8013652:	f7ff fea7 	bl	80133a4 <put_fat>
 8013656:	4603      	mov	r3, r0
 8013658:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801365a:	7dfb      	ldrb	r3, [r7, #23]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d116      	bne.n	801368e <create_chain+0x116>
		fs->last_clst = ncl;
 8013660:	693b      	ldr	r3, [r7, #16]
 8013662:	69fa      	ldr	r2, [r7, #28]
 8013664:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013666:	693b      	ldr	r3, [r7, #16]
 8013668:	699a      	ldr	r2, [r3, #24]
 801366a:	693b      	ldr	r3, [r7, #16]
 801366c:	69db      	ldr	r3, [r3, #28]
 801366e:	3b02      	subs	r3, #2
 8013670:	429a      	cmp	r2, r3
 8013672:	d804      	bhi.n	801367e <create_chain+0x106>
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	699b      	ldr	r3, [r3, #24]
 8013678:	1e5a      	subs	r2, r3, #1
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801367e:	693b      	ldr	r3, [r7, #16]
 8013680:	791b      	ldrb	r3, [r3, #4]
 8013682:	f043 0301 	orr.w	r3, r3, #1
 8013686:	b2da      	uxtb	r2, r3
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	711a      	strb	r2, [r3, #4]
 801368c:	e007      	b.n	801369e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801368e:	7dfb      	ldrb	r3, [r7, #23]
 8013690:	2b01      	cmp	r3, #1
 8013692:	d102      	bne.n	801369a <create_chain+0x122>
 8013694:	f04f 33ff 	mov.w	r3, #4294967295
 8013698:	e000      	b.n	801369c <create_chain+0x124>
 801369a:	2301      	movs	r3, #1
 801369c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801369e:	69fb      	ldr	r3, [r7, #28]
}
 80136a0:	4618      	mov	r0, r3
 80136a2:	3720      	adds	r7, #32
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}

080136a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80136a8:	b480      	push	{r7}
 80136aa:	b087      	sub	sp, #28
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136bc:	3304      	adds	r3, #4
 80136be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80136c0:	683b      	ldr	r3, [r7, #0]
 80136c2:	0a5b      	lsrs	r3, r3, #9
 80136c4:	68fa      	ldr	r2, [r7, #12]
 80136c6:	8952      	ldrh	r2, [r2, #10]
 80136c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80136cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	1d1a      	adds	r2, r3, #4
 80136d2:	613a      	str	r2, [r7, #16]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d101      	bne.n	80136e2 <clmt_clust+0x3a>
 80136de:	2300      	movs	r3, #0
 80136e0:	e010      	b.n	8013704 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80136e2:	697a      	ldr	r2, [r7, #20]
 80136e4:	68bb      	ldr	r3, [r7, #8]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d307      	bcc.n	80136fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80136ea:	697a      	ldr	r2, [r7, #20]
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	1ad3      	subs	r3, r2, r3
 80136f0:	617b      	str	r3, [r7, #20]
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	3304      	adds	r3, #4
 80136f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80136f8:	e7e9      	b.n	80136ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80136fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	4413      	add	r3, r2
}
 8013704:	4618      	mov	r0, r3
 8013706:	371c      	adds	r7, #28
 8013708:	46bd      	mov	sp, r7
 801370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370e:	4770      	bx	lr

08013710 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
 8013716:	60f8      	str	r0, [r7, #12]
 8013718:	60b9      	str	r1, [r7, #8]
 801371a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	331a      	adds	r3, #26
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	b292      	uxth	r2, r2
 8013724:	4611      	mov	r1, r2
 8013726:	4618      	mov	r0, r3
 8013728:	f7ff fbe3 	bl	8012ef2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	2b03      	cmp	r3, #3
 8013732:	d109      	bne.n	8013748 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	f103 0214 	add.w	r2, r3, #20
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	0c1b      	lsrs	r3, r3, #16
 801373e:	b29b      	uxth	r3, r3
 8013740:	4619      	mov	r1, r3
 8013742:	4610      	mov	r0, r2
 8013744:	f7ff fbd5 	bl	8012ef2 <st_word>
	}
}
 8013748:	bf00      	nop
 801374a:	3710      	adds	r7, #16
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}

08013750 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801375a:	2309      	movs	r3, #9
 801375c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d02e      	beq.n	80137c2 <validate+0x72>
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d02a      	beq.n	80137c2 <validate+0x72>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d025      	beq.n	80137c2 <validate+0x72>
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	889a      	ldrh	r2, [r3, #4]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	88db      	ldrh	r3, [r3, #6]
 8013780:	429a      	cmp	r2, r3
 8013782:	d11e      	bne.n	80137c2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	4618      	mov	r0, r3
 801378a:	f7ff fc35 	bl	8012ff8 <lock_fs>
 801378e:	4603      	mov	r3, r0
 8013790:	2b00      	cmp	r3, #0
 8013792:	d014      	beq.n	80137be <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	785b      	ldrb	r3, [r3, #1]
 801379a:	4618      	mov	r0, r3
 801379c:	f7ff faf6 	bl	8012d8c <disk_status>
 80137a0:	4603      	mov	r3, r0
 80137a2:	f003 0301 	and.w	r3, r3, #1
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d102      	bne.n	80137b0 <validate+0x60>
				res = FR_OK;
 80137aa:	2300      	movs	r3, #0
 80137ac:	73fb      	strb	r3, [r7, #15]
 80137ae:	e008      	b.n	80137c2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2100      	movs	r1, #0
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7ff fc34 	bl	8013024 <unlock_fs>
 80137bc:	e001      	b.n	80137c2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80137be:	230f      	movs	r3, #15
 80137c0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80137c2:	7bfb      	ldrb	r3, [r7, #15]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d102      	bne.n	80137ce <validate+0x7e>
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	e000      	b.n	80137d0 <validate+0x80>
 80137ce:	2300      	movs	r3, #0
 80137d0:	683a      	ldr	r2, [r7, #0]
 80137d2:	6013      	str	r3, [r2, #0]
	return res;
 80137d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}

080137de <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80137de:	b580      	push	{r7, lr}
 80137e0:	b08c      	sub	sp, #48	@ 0x30
 80137e2:	af00      	add	r7, sp, #0
 80137e4:	60f8      	str	r0, [r7, #12]
 80137e6:	60b9      	str	r1, [r7, #8]
 80137e8:	607a      	str	r2, [r7, #4]
 80137ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2200      	movs	r2, #0
 80137f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	f107 0210 	add.w	r2, r7, #16
 80137fc:	4611      	mov	r1, r2
 80137fe:	4618      	mov	r0, r3
 8013800:	f7ff ffa6 	bl	8013750 <validate>
 8013804:	4603      	mov	r3, r0
 8013806:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801380a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801380e:	2b00      	cmp	r3, #0
 8013810:	d107      	bne.n	8013822 <f_write+0x44>
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	7d5b      	ldrb	r3, [r3, #21]
 8013816:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801381a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801381e:	2b00      	cmp	r3, #0
 8013820:	d009      	beq.n	8013836 <f_write+0x58>
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8013828:	4611      	mov	r1, r2
 801382a:	4618      	mov	r0, r3
 801382c:	f7ff fbfa 	bl	8013024 <unlock_fs>
 8013830:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013834:	e173      	b.n	8013b1e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	7d1b      	ldrb	r3, [r3, #20]
 801383a:	f003 0302 	and.w	r3, r3, #2
 801383e:	2b00      	cmp	r3, #0
 8013840:	d106      	bne.n	8013850 <f_write+0x72>
 8013842:	693b      	ldr	r3, [r7, #16]
 8013844:	2107      	movs	r1, #7
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff fbec 	bl	8013024 <unlock_fs>
 801384c:	2307      	movs	r3, #7
 801384e:	e166      	b.n	8013b1e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	699a      	ldr	r2, [r3, #24]
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	441a      	add	r2, r3
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	699b      	ldr	r3, [r3, #24]
 801385c:	429a      	cmp	r2, r3
 801385e:	f080 814b 	bcs.w	8013af8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	699b      	ldr	r3, [r3, #24]
 8013866:	43db      	mvns	r3, r3
 8013868:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801386a:	e145      	b.n	8013af8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	699b      	ldr	r3, [r3, #24]
 8013870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013874:	2b00      	cmp	r3, #0
 8013876:	f040 8101 	bne.w	8013a7c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	699b      	ldr	r3, [r3, #24]
 801387e:	0a5b      	lsrs	r3, r3, #9
 8013880:	693a      	ldr	r2, [r7, #16]
 8013882:	8952      	ldrh	r2, [r2, #10]
 8013884:	3a01      	subs	r2, #1
 8013886:	4013      	ands	r3, r2
 8013888:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801388a:	69bb      	ldr	r3, [r7, #24]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d14d      	bne.n	801392c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	699b      	ldr	r3, [r3, #24]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d10c      	bne.n	80138b2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	689b      	ldr	r3, [r3, #8]
 801389c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d11a      	bne.n	80138da <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	2100      	movs	r1, #0
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7ff fe65 	bl	8013578 <create_chain>
 80138ae:	62b8      	str	r0, [r7, #40]	@ 0x28
 80138b0:	e013      	b.n	80138da <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d007      	beq.n	80138ca <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	699b      	ldr	r3, [r3, #24]
 80138be:	4619      	mov	r1, r3
 80138c0:	68f8      	ldr	r0, [r7, #12]
 80138c2:	f7ff fef1 	bl	80136a8 <clmt_clust>
 80138c6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80138c8:	e007      	b.n	80138da <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80138ca:	68fa      	ldr	r2, [r7, #12]
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	69db      	ldr	r3, [r3, #28]
 80138d0:	4619      	mov	r1, r3
 80138d2:	4610      	mov	r0, r2
 80138d4:	f7ff fe50 	bl	8013578 <create_chain>
 80138d8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80138da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138dc:	2b00      	cmp	r3, #0
 80138de:	f000 8110 	beq.w	8013b02 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80138e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e4:	2b01      	cmp	r3, #1
 80138e6:	d109      	bne.n	80138fc <f_write+0x11e>
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2202      	movs	r2, #2
 80138ec:	755a      	strb	r2, [r3, #21]
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	2102      	movs	r1, #2
 80138f2:	4618      	mov	r0, r3
 80138f4:	f7ff fb96 	bl	8013024 <unlock_fs>
 80138f8:	2302      	movs	r3, #2
 80138fa:	e110      	b.n	8013b1e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013902:	d109      	bne.n	8013918 <f_write+0x13a>
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2201      	movs	r2, #1
 8013908:	755a      	strb	r2, [r3, #21]
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	2101      	movs	r1, #1
 801390e:	4618      	mov	r0, r3
 8013910:	f7ff fb88 	bl	8013024 <unlock_fs>
 8013914:	2301      	movs	r3, #1
 8013916:	e102      	b.n	8013b1e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801391c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	689b      	ldr	r3, [r3, #8]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d102      	bne.n	801392c <f_write+0x14e>
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801392a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	7d1b      	ldrb	r3, [r3, #20]
 8013930:	b25b      	sxtb	r3, r3
 8013932:	2b00      	cmp	r3, #0
 8013934:	da1d      	bge.n	8013972 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	7858      	ldrb	r0, [r3, #1]
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	6a1a      	ldr	r2, [r3, #32]
 8013944:	2301      	movs	r3, #1
 8013946:	f7ff fa5b 	bl	8012e00 <disk_write>
 801394a:	4603      	mov	r3, r0
 801394c:	2b00      	cmp	r3, #0
 801394e:	d009      	beq.n	8013964 <f_write+0x186>
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	2201      	movs	r2, #1
 8013954:	755a      	strb	r2, [r3, #21]
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	2101      	movs	r1, #1
 801395a:	4618      	mov	r0, r3
 801395c:	f7ff fb62 	bl	8013024 <unlock_fs>
 8013960:	2301      	movs	r3, #1
 8013962:	e0dc      	b.n	8013b1e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	7d1b      	ldrb	r3, [r3, #20]
 8013968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801396c:	b2da      	uxtb	r2, r3
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013972:	693a      	ldr	r2, [r7, #16]
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	69db      	ldr	r3, [r3, #28]
 8013978:	4619      	mov	r1, r3
 801397a:	4610      	mov	r0, r2
 801397c:	f7ff fc4c 	bl	8013218 <clust2sect>
 8013980:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d109      	bne.n	801399c <f_write+0x1be>
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	2202      	movs	r2, #2
 801398c:	755a      	strb	r2, [r3, #21]
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	2102      	movs	r1, #2
 8013992:	4618      	mov	r0, r3
 8013994:	f7ff fb46 	bl	8013024 <unlock_fs>
 8013998:	2302      	movs	r3, #2
 801399a:	e0c0      	b.n	8013b1e <f_write+0x340>
			sect += csect;
 801399c:	697a      	ldr	r2, [r7, #20]
 801399e:	69bb      	ldr	r3, [r7, #24]
 80139a0:	4413      	add	r3, r2
 80139a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	0a5b      	lsrs	r3, r3, #9
 80139a8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80139aa:	6a3b      	ldr	r3, [r7, #32]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d041      	beq.n	8013a34 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80139b0:	69ba      	ldr	r2, [r7, #24]
 80139b2:	6a3b      	ldr	r3, [r7, #32]
 80139b4:	4413      	add	r3, r2
 80139b6:	693a      	ldr	r2, [r7, #16]
 80139b8:	8952      	ldrh	r2, [r2, #10]
 80139ba:	4293      	cmp	r3, r2
 80139bc:	d905      	bls.n	80139ca <f_write+0x1ec>
					cc = fs->csize - csect;
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	895b      	ldrh	r3, [r3, #10]
 80139c2:	461a      	mov	r2, r3
 80139c4:	69bb      	ldr	r3, [r7, #24]
 80139c6:	1ad3      	subs	r3, r2, r3
 80139c8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	7858      	ldrb	r0, [r3, #1]
 80139ce:	6a3b      	ldr	r3, [r7, #32]
 80139d0:	697a      	ldr	r2, [r7, #20]
 80139d2:	69f9      	ldr	r1, [r7, #28]
 80139d4:	f7ff fa14 	bl	8012e00 <disk_write>
 80139d8:	4603      	mov	r3, r0
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d009      	beq.n	80139f2 <f_write+0x214>
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2201      	movs	r2, #1
 80139e2:	755a      	strb	r2, [r3, #21]
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	2101      	movs	r1, #1
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7ff fb1b 	bl	8013024 <unlock_fs>
 80139ee:	2301      	movs	r3, #1
 80139f0:	e095      	b.n	8013b1e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	6a1a      	ldr	r2, [r3, #32]
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	1ad3      	subs	r3, r2, r3
 80139fa:	6a3a      	ldr	r2, [r7, #32]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d915      	bls.n	8013a2c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	6a1a      	ldr	r2, [r3, #32]
 8013a0a:	697b      	ldr	r3, [r7, #20]
 8013a0c:	1ad3      	subs	r3, r2, r3
 8013a0e:	025b      	lsls	r3, r3, #9
 8013a10:	69fa      	ldr	r2, [r7, #28]
 8013a12:	4413      	add	r3, r2
 8013a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a18:	4619      	mov	r1, r3
 8013a1a:	f7ff fab1 	bl	8012f80 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	7d1b      	ldrb	r3, [r3, #20]
 8013a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a26:	b2da      	uxtb	r2, r3
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013a2c:	6a3b      	ldr	r3, [r7, #32]
 8013a2e:	025b      	lsls	r3, r3, #9
 8013a30:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013a32:	e044      	b.n	8013abe <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	6a1b      	ldr	r3, [r3, #32]
 8013a38:	697a      	ldr	r2, [r7, #20]
 8013a3a:	429a      	cmp	r2, r3
 8013a3c:	d01b      	beq.n	8013a76 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	699a      	ldr	r2, [r3, #24]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d215      	bcs.n	8013a76 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	7858      	ldrb	r0, [r3, #1]
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013a54:	2301      	movs	r3, #1
 8013a56:	697a      	ldr	r2, [r7, #20]
 8013a58:	f7ff f9b2 	bl	8012dc0 <disk_read>
 8013a5c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d009      	beq.n	8013a76 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	2201      	movs	r2, #1
 8013a66:	755a      	strb	r2, [r3, #21]
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	2101      	movs	r1, #1
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7ff fad9 	bl	8013024 <unlock_fs>
 8013a72:	2301      	movs	r3, #1
 8013a74:	e053      	b.n	8013b1e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	697a      	ldr	r2, [r7, #20]
 8013a7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	699b      	ldr	r3, [r3, #24]
 8013a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a84:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013a88:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d901      	bls.n	8013a96 <f_write+0x2b8>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	699b      	ldr	r3, [r3, #24]
 8013aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013aa4:	4413      	add	r3, r2
 8013aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013aa8:	69f9      	ldr	r1, [r7, #28]
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7ff fa68 	bl	8012f80 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	7d1b      	ldrb	r3, [r3, #20]
 8013ab4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013ab8:	b2da      	uxtb	r2, r3
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013abe:	69fa      	ldr	r2, [r7, #28]
 8013ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ac2:	4413      	add	r3, r2
 8013ac4:	61fb      	str	r3, [r7, #28]
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	699a      	ldr	r2, [r3, #24]
 8013aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013acc:	441a      	add	r2, r3
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	619a      	str	r2, [r3, #24]
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	68da      	ldr	r2, [r3, #12]
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	699b      	ldr	r3, [r3, #24]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	bf38      	it	cc
 8013ade:	461a      	movcc	r2, r3
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	60da      	str	r2, [r3, #12]
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	681a      	ldr	r2, [r3, #0]
 8013ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aea:	441a      	add	r2, r3
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	601a      	str	r2, [r3, #0]
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013af4:	1ad3      	subs	r3, r2, r3
 8013af6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	f47f aeb6 	bne.w	801386c <f_write+0x8e>
 8013b00:	e000      	b.n	8013b04 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b02:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	7d1b      	ldrb	r3, [r3, #20]
 8013b08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b0c:	b2da      	uxtb	r2, r3
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	2100      	movs	r1, #0
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7ff fa84 	bl	8013024 <unlock_fs>
 8013b1c:	2300      	movs	r3, #0
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3730      	adds	r7, #48	@ 0x30
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}

08013b26 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b086      	sub	sp, #24
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f107 0208 	add.w	r2, r7, #8
 8013b34:	4611      	mov	r1, r2
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7ff fe0a 	bl	8013750 <validate>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013b40:	7dfb      	ldrb	r3, [r7, #23]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d16d      	bne.n	8013c22 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	7d1b      	ldrb	r3, [r3, #20]
 8013b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d067      	beq.n	8013c22 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	7d1b      	ldrb	r3, [r3, #20]
 8013b56:	b25b      	sxtb	r3, r3
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	da1a      	bge.n	8013b92 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	7858      	ldrb	r0, [r3, #1]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6a1a      	ldr	r2, [r3, #32]
 8013b6a:	2301      	movs	r3, #1
 8013b6c:	f7ff f948 	bl	8012e00 <disk_write>
 8013b70:	4603      	mov	r3, r0
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d006      	beq.n	8013b84 <f_sync+0x5e>
 8013b76:	68bb      	ldr	r3, [r7, #8]
 8013b78:	2101      	movs	r1, #1
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7ff fa52 	bl	8013024 <unlock_fs>
 8013b80:	2301      	movs	r3, #1
 8013b82:	e055      	b.n	8013c30 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	7d1b      	ldrb	r3, [r3, #20]
 8013b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b8c:	b2da      	uxtb	r2, r3
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013b92:	f7fe fbd9 	bl	8012348 <get_fattime>
 8013b96:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013b98:	68ba      	ldr	r2, [r7, #8]
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	4610      	mov	r0, r2
 8013ba2:	f7ff fa9e 	bl	80130e2 <move_window>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013baa:	7dfb      	ldrb	r3, [r7, #23]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d138      	bne.n	8013c22 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bb4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	330b      	adds	r3, #11
 8013bba:	781a      	ldrb	r2, [r3, #0]
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	330b      	adds	r3, #11
 8013bc0:	f042 0220 	orr.w	r2, r2, #32
 8013bc4:	b2d2      	uxtb	r2, r2
 8013bc6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	6818      	ldr	r0, [r3, #0]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	689b      	ldr	r3, [r3, #8]
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	68f9      	ldr	r1, [r7, #12]
 8013bd4:	f7ff fd9c 	bl	8013710 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	f103 021c 	add.w	r2, r3, #28
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	4619      	mov	r1, r3
 8013be4:	4610      	mov	r0, r2
 8013be6:	f7ff f99f 	bl	8012f28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	3316      	adds	r3, #22
 8013bee:	6939      	ldr	r1, [r7, #16]
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7ff f999 	bl	8012f28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	3312      	adds	r3, #18
 8013bfa:	2100      	movs	r1, #0
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7ff f978 	bl	8012ef2 <st_word>
					fs->wflag = 1;
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	2201      	movs	r2, #1
 8013c06:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7ff fa96 	bl	801313c <sync_fs>
 8013c10:	4603      	mov	r3, r0
 8013c12:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	7d1b      	ldrb	r3, [r3, #20]
 8013c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013c1c:	b2da      	uxtb	r2, r3
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	7dfa      	ldrb	r2, [r7, #23]
 8013c26:	4611      	mov	r1, r2
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7ff f9fb 	bl	8013024 <unlock_fs>
 8013c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	3718      	adds	r7, #24
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}

08013c38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013c38:	b480      	push	{r7}
 8013c3a:	b087      	sub	sp, #28
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	60b9      	str	r1, [r7, #8]
 8013c42:	4613      	mov	r3, r2
 8013c44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013c46:	2301      	movs	r3, #1
 8013c48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8013ccc <FATFS_LinkDriverEx+0x94>)
 8013c50:	7a5b      	ldrb	r3, [r3, #9]
 8013c52:	b2db      	uxtb	r3, r3
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d131      	bne.n	8013cbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013c58:	4b1c      	ldr	r3, [pc, #112]	@ (8013ccc <FATFS_LinkDriverEx+0x94>)
 8013c5a:	7a5b      	ldrb	r3, [r3, #9]
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	461a      	mov	r2, r3
 8013c60:	4b1a      	ldr	r3, [pc, #104]	@ (8013ccc <FATFS_LinkDriverEx+0x94>)
 8013c62:	2100      	movs	r1, #0
 8013c64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013c66:	4b19      	ldr	r3, [pc, #100]	@ (8013ccc <FATFS_LinkDriverEx+0x94>)
 8013c68:	7a5b      	ldrb	r3, [r3, #9]
 8013c6a:	b2db      	uxtb	r3, r3
 8013c6c:	4a17      	ldr	r2, [pc, #92]	@ (8013ccc <FATFS_LinkDriverEx+0x94>)
 8013c6e:	009b      	lsls	r3, r3, #2
 8013c70:	4413      	add	r3, r2
 8013c72:	68fa      	ldr	r2, [r7, #12]
 8013c74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013c76:	4b15      	ldr	r3, [pc, #84]	@ (8013ccc <FATFS_LinkDriverEx+0x94>)
 8013c78:	7a5b      	ldrb	r3, [r3, #9]
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	461a      	mov	r2, r3
 8013c7e:	4b13      	ldr	r3, [pc, #76]	@ (8013ccc <FATFS_LinkDriverEx+0x94>)
 8013c80:	4413      	add	r3, r2
 8013c82:	79fa      	ldrb	r2, [r7, #7]
 8013c84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013c86:	4b11      	ldr	r3, [pc, #68]	@ (8013ccc <FATFS_LinkDriverEx+0x94>)
 8013c88:	7a5b      	ldrb	r3, [r3, #9]
 8013c8a:	b2db      	uxtb	r3, r3
 8013c8c:	1c5a      	adds	r2, r3, #1
 8013c8e:	b2d1      	uxtb	r1, r2
 8013c90:	4a0e      	ldr	r2, [pc, #56]	@ (8013ccc <FATFS_LinkDriverEx+0x94>)
 8013c92:	7251      	strb	r1, [r2, #9]
 8013c94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013c96:	7dbb      	ldrb	r3, [r7, #22]
 8013c98:	3330      	adds	r3, #48	@ 0x30
 8013c9a:	b2da      	uxtb	r2, r3
 8013c9c:	68bb      	ldr	r3, [r7, #8]
 8013c9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	223a      	movs	r2, #58	@ 0x3a
 8013ca6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	3302      	adds	r3, #2
 8013cac:	222f      	movs	r2, #47	@ 0x2f
 8013cae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	3303      	adds	r3, #3
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	371c      	adds	r7, #28
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr
 8013cca:	bf00      	nop
 8013ccc:	24002a68 	.word	0x24002a68

08013cd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013cda:	2200      	movs	r2, #0
 8013cdc:	6839      	ldr	r1, [r7, #0]
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f7ff ffaa 	bl	8013c38 <FATFS_LinkDriverEx>
 8013ce4:	4603      	mov	r3, r0
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3708      	adds	r7, #8
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013cee:	b580      	push	{r7, lr}
 8013cf0:	b084      	sub	sp, #16
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8013cfa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f000 f8a6 	bl	8013e50 <osSemaphoreWait>
 8013d04:	4603      	mov	r3, r0
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d101      	bne.n	8013d0e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013d0e:	68fb      	ldr	r3, [r7, #12]
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	3710      	adds	r7, #16
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}

08013d18 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b082      	sub	sp, #8
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f000 f8e3 	bl	8013eec <osSemaphoreRelease>
#endif
}
 8013d26:	bf00      	nop
 8013d28:	3708      	adds	r7, #8
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}

08013d2e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8013d2e:	b480      	push	{r7}
 8013d30:	b085      	sub	sp, #20
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	4603      	mov	r3, r0
 8013d36:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8013d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013d40:	2b84      	cmp	r3, #132	@ 0x84
 8013d42:	d005      	beq.n	8013d50 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8013d44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	3303      	adds	r3, #3
 8013d4e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8013d50:	68fb      	ldr	r3, [r7, #12]
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3714      	adds	r7, #20
 8013d56:	46bd      	mov	sp, r7
 8013d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5c:	4770      	bx	lr

08013d5e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8013d5e:	b480      	push	{r7}
 8013d60:	b083      	sub	sp, #12
 8013d62:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013d64:	f3ef 8305 	mrs	r3, IPSR
 8013d68:	607b      	str	r3, [r7, #4]
  return(result);
 8013d6a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	bf14      	ite	ne
 8013d70:	2301      	movne	r3, #1
 8013d72:	2300      	moveq	r3, #0
 8013d74:	b2db      	uxtb	r3, r3
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	370c      	adds	r7, #12
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d80:	4770      	bx	lr

08013d82 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8013d82:	b580      	push	{r7, lr}
 8013d84:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8013d86:	f000 ffb5 	bl	8014cf4 <vTaskStartScheduler>
  
  return osOK;
 8013d8a:	2300      	movs	r3, #0
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	bd80      	pop	{r7, pc}

08013d90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8013d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d92:	b089      	sub	sp, #36	@ 0x24
 8013d94:	af04      	add	r7, sp, #16
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	695b      	ldr	r3, [r3, #20]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d020      	beq.n	8013de4 <osThreadCreate+0x54>
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	699b      	ldr	r3, [r3, #24]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d01c      	beq.n	8013de4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	685c      	ldr	r4, [r3, #4]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	691e      	ldr	r6, [r3, #16]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7ff ffb6 	bl	8013d2e <makeFreeRtosPriority>
 8013dc2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	695b      	ldr	r3, [r3, #20]
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013dcc:	9202      	str	r2, [sp, #8]
 8013dce:	9301      	str	r3, [sp, #4]
 8013dd0:	9100      	str	r1, [sp, #0]
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	4632      	mov	r2, r6
 8013dd6:	4629      	mov	r1, r5
 8013dd8:	4620      	mov	r0, r4
 8013dda:	f000 fdbd 	bl	8014958 <xTaskCreateStatic>
 8013dde:	4603      	mov	r3, r0
 8013de0:	60fb      	str	r3, [r7, #12]
 8013de2:	e01c      	b.n	8013e1e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	685c      	ldr	r4, [r3, #4]
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013df0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7ff ff98 	bl	8013d2e <makeFreeRtosPriority>
 8013dfe:	4602      	mov	r2, r0
 8013e00:	f107 030c 	add.w	r3, r7, #12
 8013e04:	9301      	str	r3, [sp, #4]
 8013e06:	9200      	str	r2, [sp, #0]
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	4632      	mov	r2, r6
 8013e0c:	4629      	mov	r1, r5
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f000 fe02 	bl	8014a18 <xTaskCreate>
 8013e14:	4603      	mov	r3, r0
 8013e16:	2b01      	cmp	r3, #1
 8013e18:	d001      	beq.n	8013e1e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	e000      	b.n	8013e20 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	3714      	adds	r7, #20
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e28 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b084      	sub	sp, #16
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d001      	beq.n	8013e3e <osDelay+0x16>
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	e000      	b.n	8013e40 <osDelay+0x18>
 8013e3e:	2301      	movs	r3, #1
 8013e40:	4618      	mov	r0, r3
 8013e42:	f000 ff21 	bl	8014c88 <vTaskDelay>
  
  return osOK;
 8013e46:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013e48:	4618      	mov	r0, r3
 8013e4a:	3710      	adds	r7, #16
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}

08013e50 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b084      	sub	sp, #16
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d101      	bne.n	8013e68 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8013e64:	2380      	movs	r3, #128	@ 0x80
 8013e66:	e03a      	b.n	8013ede <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e72:	d103      	bne.n	8013e7c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8013e74:	f04f 33ff 	mov.w	r3, #4294967295
 8013e78:	60fb      	str	r3, [r7, #12]
 8013e7a:	e009      	b.n	8013e90 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d006      	beq.n	8013e90 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d101      	bne.n	8013e90 <osSemaphoreWait+0x40>
      ticks = 1;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8013e90:	f7ff ff65 	bl	8013d5e <inHandlerMode>
 8013e94:	4603      	mov	r3, r0
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d017      	beq.n	8013eca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013e9a:	f107 0308 	add.w	r3, r7, #8
 8013e9e:	461a      	mov	r2, r3
 8013ea0:	2100      	movs	r1, #0
 8013ea2:	6878      	ldr	r0, [r7, #4]
 8013ea4:	f000 fbae 	bl	8014604 <xQueueReceiveFromISR>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	2b01      	cmp	r3, #1
 8013eac:	d001      	beq.n	8013eb2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8013eae:	23ff      	movs	r3, #255	@ 0xff
 8013eb0:	e015      	b.n	8013ede <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d011      	beq.n	8013edc <osSemaphoreWait+0x8c>
 8013eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8013ee8 <osSemaphoreWait+0x98>)
 8013eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ebe:	601a      	str	r2, [r3, #0]
 8013ec0:	f3bf 8f4f 	dsb	sy
 8013ec4:	f3bf 8f6f 	isb	sy
 8013ec8:	e008      	b.n	8013edc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8013eca:	68f9      	ldr	r1, [r7, #12]
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f000 fa89 	bl	80143e4 <xQueueSemaphoreTake>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	d001      	beq.n	8013edc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8013ed8:	23ff      	movs	r3, #255	@ 0xff
 8013eda:	e000      	b.n	8013ede <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8013edc:	2300      	movs	r3, #0
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3710      	adds	r7, #16
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	e000ed04 	.word	0xe000ed04

08013eec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b084      	sub	sp, #16
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8013efc:	f7ff ff2f 	bl	8013d5e <inHandlerMode>
 8013f00:	4603      	mov	r3, r0
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d016      	beq.n	8013f34 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8013f06:	f107 0308 	add.w	r3, r7, #8
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f000 f9d9 	bl	80142c4 <xQueueGiveFromISR>
 8013f12:	4603      	mov	r3, r0
 8013f14:	2b01      	cmp	r3, #1
 8013f16:	d001      	beq.n	8013f1c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8013f18:	23ff      	movs	r3, #255	@ 0xff
 8013f1a:	e017      	b.n	8013f4c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d013      	beq.n	8013f4a <osSemaphoreRelease+0x5e>
 8013f22:	4b0c      	ldr	r3, [pc, #48]	@ (8013f54 <osSemaphoreRelease+0x68>)
 8013f24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013f28:	601a      	str	r2, [r3, #0]
 8013f2a:	f3bf 8f4f 	dsb	sy
 8013f2e:	f3bf 8f6f 	isb	sy
 8013f32:	e00a      	b.n	8013f4a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8013f34:	2300      	movs	r3, #0
 8013f36:	2200      	movs	r2, #0
 8013f38:	2100      	movs	r1, #0
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f000 f8c0 	bl	80140c0 <xQueueGenericSend>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d001      	beq.n	8013f4a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8013f46:	23ff      	movs	r3, #255	@ 0xff
 8013f48:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3710      	adds	r7, #16
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	e000ed04 	.word	0xe000ed04

08013f58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b083      	sub	sp, #12
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f103 0208 	add.w	r2, r3, #8
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f103 0208 	add.w	r2, r3, #8
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f103 0208 	add.w	r2, r3, #8
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013f8c:	bf00      	nop
 8013f8e:	370c      	adds	r7, #12
 8013f90:	46bd      	mov	sp, r7
 8013f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f96:	4770      	bx	lr

08013f98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013fa6:	bf00      	nop
 8013fa8:	370c      	adds	r7, #12
 8013faa:	46bd      	mov	sp, r7
 8013fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb0:	4770      	bx	lr

08013fb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013fb2:	b480      	push	{r7}
 8013fb4:	b085      	sub	sp, #20
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6078      	str	r0, [r7, #4]
 8013fba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	685b      	ldr	r3, [r3, #4]
 8013fc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	68fa      	ldr	r2, [r7, #12]
 8013fc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	689a      	ldr	r2, [r3, #8]
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	689b      	ldr	r3, [r3, #8]
 8013fd4:	683a      	ldr	r2, [r7, #0]
 8013fd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	683a      	ldr	r2, [r7, #0]
 8013fdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	687a      	ldr	r2, [r7, #4]
 8013fe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	1c5a      	adds	r2, r3, #1
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	601a      	str	r2, [r3, #0]
}
 8013fee:	bf00      	nop
 8013ff0:	3714      	adds	r7, #20
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff8:	4770      	bx	lr

08013ffa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013ffa:	b480      	push	{r7}
 8013ffc:	b085      	sub	sp, #20
 8013ffe:	af00      	add	r7, sp, #0
 8014000:	6078      	str	r0, [r7, #4]
 8014002:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014010:	d103      	bne.n	801401a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	691b      	ldr	r3, [r3, #16]
 8014016:	60fb      	str	r3, [r7, #12]
 8014018:	e00c      	b.n	8014034 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	3308      	adds	r3, #8
 801401e:	60fb      	str	r3, [r7, #12]
 8014020:	e002      	b.n	8014028 <vListInsert+0x2e>
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	685b      	ldr	r3, [r3, #4]
 8014026:	60fb      	str	r3, [r7, #12]
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	685b      	ldr	r3, [r3, #4]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	68ba      	ldr	r2, [r7, #8]
 8014030:	429a      	cmp	r2, r3
 8014032:	d2f6      	bcs.n	8014022 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	685a      	ldr	r2, [r3, #4]
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	685b      	ldr	r3, [r3, #4]
 8014040:	683a      	ldr	r2, [r7, #0]
 8014042:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	68fa      	ldr	r2, [r7, #12]
 8014048:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	683a      	ldr	r2, [r7, #0]
 801404e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	687a      	ldr	r2, [r7, #4]
 8014054:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	1c5a      	adds	r2, r3, #1
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	601a      	str	r2, [r3, #0]
}
 8014060:	bf00      	nop
 8014062:	3714      	adds	r7, #20
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr

0801406c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801406c:	b480      	push	{r7}
 801406e:	b085      	sub	sp, #20
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	691b      	ldr	r3, [r3, #16]
 8014078:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	685b      	ldr	r3, [r3, #4]
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	6892      	ldr	r2, [r2, #8]
 8014082:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	689b      	ldr	r3, [r3, #8]
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	6852      	ldr	r2, [r2, #4]
 801408c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	685b      	ldr	r3, [r3, #4]
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	429a      	cmp	r2, r3
 8014096:	d103      	bne.n	80140a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	689a      	ldr	r2, [r3, #8]
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2200      	movs	r2, #0
 80140a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	1e5a      	subs	r2, r3, #1
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	681b      	ldr	r3, [r3, #0]
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3714      	adds	r7, #20
 80140b8:	46bd      	mov	sp, r7
 80140ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140be:	4770      	bx	lr

080140c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b08e      	sub	sp, #56	@ 0x38
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	60f8      	str	r0, [r7, #12]
 80140c8:	60b9      	str	r1, [r7, #8]
 80140ca:	607a      	str	r2, [r7, #4]
 80140cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80140ce:	2300      	movs	r3, #0
 80140d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80140d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d10b      	bne.n	80140f4 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80140dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140e0:	f383 8811 	msr	BASEPRI, r3
 80140e4:	f3bf 8f6f 	isb	sy
 80140e8:	f3bf 8f4f 	dsb	sy
 80140ec:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80140ee:	bf00      	nop
 80140f0:	bf00      	nop
 80140f2:	e7fd      	b.n	80140f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d103      	bne.n	8014102 <xQueueGenericSend+0x42>
 80140fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80140fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d101      	bne.n	8014106 <xQueueGenericSend+0x46>
 8014102:	2301      	movs	r3, #1
 8014104:	e000      	b.n	8014108 <xQueueGenericSend+0x48>
 8014106:	2300      	movs	r3, #0
 8014108:	2b00      	cmp	r3, #0
 801410a:	d10b      	bne.n	8014124 <xQueueGenericSend+0x64>
	__asm volatile
 801410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014110:	f383 8811 	msr	BASEPRI, r3
 8014114:	f3bf 8f6f 	isb	sy
 8014118:	f3bf 8f4f 	dsb	sy
 801411c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801411e:	bf00      	nop
 8014120:	bf00      	nop
 8014122:	e7fd      	b.n	8014120 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014124:	683b      	ldr	r3, [r7, #0]
 8014126:	2b02      	cmp	r3, #2
 8014128:	d103      	bne.n	8014132 <xQueueGenericSend+0x72>
 801412a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801412c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801412e:	2b01      	cmp	r3, #1
 8014130:	d101      	bne.n	8014136 <xQueueGenericSend+0x76>
 8014132:	2301      	movs	r3, #1
 8014134:	e000      	b.n	8014138 <xQueueGenericSend+0x78>
 8014136:	2300      	movs	r3, #0
 8014138:	2b00      	cmp	r3, #0
 801413a:	d10b      	bne.n	8014154 <xQueueGenericSend+0x94>
	__asm volatile
 801413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014140:	f383 8811 	msr	BASEPRI, r3
 8014144:	f3bf 8f6f 	isb	sy
 8014148:	f3bf 8f4f 	dsb	sy
 801414c:	623b      	str	r3, [r7, #32]
}
 801414e:	bf00      	nop
 8014150:	bf00      	nop
 8014152:	e7fd      	b.n	8014150 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014154:	f001 f9d8 	bl	8015508 <xTaskGetSchedulerState>
 8014158:	4603      	mov	r3, r0
 801415a:	2b00      	cmp	r3, #0
 801415c:	d102      	bne.n	8014164 <xQueueGenericSend+0xa4>
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d101      	bne.n	8014168 <xQueueGenericSend+0xa8>
 8014164:	2301      	movs	r3, #1
 8014166:	e000      	b.n	801416a <xQueueGenericSend+0xaa>
 8014168:	2300      	movs	r3, #0
 801416a:	2b00      	cmp	r3, #0
 801416c:	d10b      	bne.n	8014186 <xQueueGenericSend+0xc6>
	__asm volatile
 801416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014172:	f383 8811 	msr	BASEPRI, r3
 8014176:	f3bf 8f6f 	isb	sy
 801417a:	f3bf 8f4f 	dsb	sy
 801417e:	61fb      	str	r3, [r7, #28]
}
 8014180:	bf00      	nop
 8014182:	bf00      	nop
 8014184:	e7fd      	b.n	8014182 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014186:	f001 fd17 	bl	8015bb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801418c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014192:	429a      	cmp	r2, r3
 8014194:	d302      	bcc.n	801419c <xQueueGenericSend+0xdc>
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	2b02      	cmp	r3, #2
 801419a:	d129      	bne.n	80141f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801419c:	683a      	ldr	r2, [r7, #0]
 801419e:	68b9      	ldr	r1, [r7, #8]
 80141a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80141a2:	f000 fac9 	bl	8014738 <prvCopyDataToQueue>
 80141a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80141a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d010      	beq.n	80141d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80141b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141b2:	3324      	adds	r3, #36	@ 0x24
 80141b4:	4618      	mov	r0, r3
 80141b6:	f000 ffe7 	bl	8015188 <xTaskRemoveFromEventList>
 80141ba:	4603      	mov	r3, r0
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d013      	beq.n	80141e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80141c0:	4b3f      	ldr	r3, [pc, #252]	@ (80142c0 <xQueueGenericSend+0x200>)
 80141c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141c6:	601a      	str	r2, [r3, #0]
 80141c8:	f3bf 8f4f 	dsb	sy
 80141cc:	f3bf 8f6f 	isb	sy
 80141d0:	e00a      	b.n	80141e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80141d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d007      	beq.n	80141e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80141d8:	4b39      	ldr	r3, [pc, #228]	@ (80142c0 <xQueueGenericSend+0x200>)
 80141da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80141de:	601a      	str	r2, [r3, #0]
 80141e0:	f3bf 8f4f 	dsb	sy
 80141e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80141e8:	f001 fd18 	bl	8015c1c <vPortExitCritical>
				return pdPASS;
 80141ec:	2301      	movs	r3, #1
 80141ee:	e063      	b.n	80142b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d103      	bne.n	80141fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80141f6:	f001 fd11 	bl	8015c1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80141fa:	2300      	movs	r3, #0
 80141fc:	e05c      	b.n	80142b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80141fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014200:	2b00      	cmp	r3, #0
 8014202:	d106      	bne.n	8014212 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014204:	f107 0314 	add.w	r3, r7, #20
 8014208:	4618      	mov	r0, r3
 801420a:	f001 f821 	bl	8015250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801420e:	2301      	movs	r3, #1
 8014210:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014212:	f001 fd03 	bl	8015c1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014216:	f000 fdcf 	bl	8014db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801421a:	f001 fccd 	bl	8015bb8 <vPortEnterCritical>
 801421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014224:	b25b      	sxtb	r3, r3
 8014226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801422a:	d103      	bne.n	8014234 <xQueueGenericSend+0x174>
 801422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801422e:	2200      	movs	r2, #0
 8014230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014236:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801423a:	b25b      	sxtb	r3, r3
 801423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014240:	d103      	bne.n	801424a <xQueueGenericSend+0x18a>
 8014242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014244:	2200      	movs	r2, #0
 8014246:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801424a:	f001 fce7 	bl	8015c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801424e:	1d3a      	adds	r2, r7, #4
 8014250:	f107 0314 	add.w	r3, r7, #20
 8014254:	4611      	mov	r1, r2
 8014256:	4618      	mov	r0, r3
 8014258:	f001 f810 	bl	801527c <xTaskCheckForTimeOut>
 801425c:	4603      	mov	r3, r0
 801425e:	2b00      	cmp	r3, #0
 8014260:	d124      	bne.n	80142ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014262:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014264:	f000 fb60 	bl	8014928 <prvIsQueueFull>
 8014268:	4603      	mov	r3, r0
 801426a:	2b00      	cmp	r3, #0
 801426c:	d018      	beq.n	80142a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014270:	3310      	adds	r3, #16
 8014272:	687a      	ldr	r2, [r7, #4]
 8014274:	4611      	mov	r1, r2
 8014276:	4618      	mov	r0, r3
 8014278:	f000 ff60 	bl	801513c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801427c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801427e:	f000 faeb 	bl	8014858 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014282:	f000 fda7 	bl	8014dd4 <xTaskResumeAll>
 8014286:	4603      	mov	r3, r0
 8014288:	2b00      	cmp	r3, #0
 801428a:	f47f af7c 	bne.w	8014186 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801428e:	4b0c      	ldr	r3, [pc, #48]	@ (80142c0 <xQueueGenericSend+0x200>)
 8014290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014294:	601a      	str	r2, [r3, #0]
 8014296:	f3bf 8f4f 	dsb	sy
 801429a:	f3bf 8f6f 	isb	sy
 801429e:	e772      	b.n	8014186 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80142a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142a2:	f000 fad9 	bl	8014858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80142a6:	f000 fd95 	bl	8014dd4 <xTaskResumeAll>
 80142aa:	e76c      	b.n	8014186 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80142ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142ae:	f000 fad3 	bl	8014858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80142b2:	f000 fd8f 	bl	8014dd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80142b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80142b8:	4618      	mov	r0, r3
 80142ba:	3738      	adds	r7, #56	@ 0x38
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}
 80142c0:	e000ed04 	.word	0xe000ed04

080142c4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b08e      	sub	sp, #56	@ 0x38
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
 80142cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80142d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d10b      	bne.n	80142f0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80142d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142dc:	f383 8811 	msr	BASEPRI, r3
 80142e0:	f3bf 8f6f 	isb	sy
 80142e4:	f3bf 8f4f 	dsb	sy
 80142e8:	623b      	str	r3, [r7, #32]
}
 80142ea:	bf00      	nop
 80142ec:	bf00      	nop
 80142ee:	e7fd      	b.n	80142ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80142f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d00b      	beq.n	8014310 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80142f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142fc:	f383 8811 	msr	BASEPRI, r3
 8014300:	f3bf 8f6f 	isb	sy
 8014304:	f3bf 8f4f 	dsb	sy
 8014308:	61fb      	str	r3, [r7, #28]
}
 801430a:	bf00      	nop
 801430c:	bf00      	nop
 801430e:	e7fd      	b.n	801430c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d103      	bne.n	8014320 <xQueueGiveFromISR+0x5c>
 8014318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801431a:	689b      	ldr	r3, [r3, #8]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d101      	bne.n	8014324 <xQueueGiveFromISR+0x60>
 8014320:	2301      	movs	r3, #1
 8014322:	e000      	b.n	8014326 <xQueueGiveFromISR+0x62>
 8014324:	2300      	movs	r3, #0
 8014326:	2b00      	cmp	r3, #0
 8014328:	d10b      	bne.n	8014342 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801432e:	f383 8811 	msr	BASEPRI, r3
 8014332:	f3bf 8f6f 	isb	sy
 8014336:	f3bf 8f4f 	dsb	sy
 801433a:	61bb      	str	r3, [r7, #24]
}
 801433c:	bf00      	nop
 801433e:	bf00      	nop
 8014340:	e7fd      	b.n	801433e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014342:	f001 fd19 	bl	8015d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014346:	f3ef 8211 	mrs	r2, BASEPRI
 801434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801434e:	f383 8811 	msr	BASEPRI, r3
 8014352:	f3bf 8f6f 	isb	sy
 8014356:	f3bf 8f4f 	dsb	sy
 801435a:	617a      	str	r2, [r7, #20]
 801435c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801435e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014360:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014366:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801436a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801436c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801436e:	429a      	cmp	r2, r3
 8014370:	d22b      	bcs.n	80143ca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801437e:	1c5a      	adds	r2, r3, #1
 8014380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014382:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014384:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801438c:	d112      	bne.n	80143b4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014392:	2b00      	cmp	r3, #0
 8014394:	d016      	beq.n	80143c4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014398:	3324      	adds	r3, #36	@ 0x24
 801439a:	4618      	mov	r0, r3
 801439c:	f000 fef4 	bl	8015188 <xTaskRemoveFromEventList>
 80143a0:	4603      	mov	r3, r0
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d00e      	beq.n	80143c4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d00b      	beq.n	80143c4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	2201      	movs	r2, #1
 80143b0:	601a      	str	r2, [r3, #0]
 80143b2:	e007      	b.n	80143c4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80143b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143b8:	3301      	adds	r3, #1
 80143ba:	b2db      	uxtb	r3, r3
 80143bc:	b25a      	sxtb	r2, r3
 80143be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80143c4:	2301      	movs	r3, #1
 80143c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80143c8:	e001      	b.n	80143ce <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80143ca:	2300      	movs	r3, #0
 80143cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80143ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80143d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80143da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80143dc:	4618      	mov	r0, r3
 80143de:	3738      	adds	r7, #56	@ 0x38
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}

080143e4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b08e      	sub	sp, #56	@ 0x38
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
 80143ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80143ee:	2300      	movs	r3, #0
 80143f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80143f6:	2300      	movs	r3, #0
 80143f8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80143fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d10b      	bne.n	8014418 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8014400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014404:	f383 8811 	msr	BASEPRI, r3
 8014408:	f3bf 8f6f 	isb	sy
 801440c:	f3bf 8f4f 	dsb	sy
 8014410:	623b      	str	r3, [r7, #32]
}
 8014412:	bf00      	nop
 8014414:	bf00      	nop
 8014416:	e7fd      	b.n	8014414 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801441a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801441c:	2b00      	cmp	r3, #0
 801441e:	d00b      	beq.n	8014438 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014424:	f383 8811 	msr	BASEPRI, r3
 8014428:	f3bf 8f6f 	isb	sy
 801442c:	f3bf 8f4f 	dsb	sy
 8014430:	61fb      	str	r3, [r7, #28]
}
 8014432:	bf00      	nop
 8014434:	bf00      	nop
 8014436:	e7fd      	b.n	8014434 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014438:	f001 f866 	bl	8015508 <xTaskGetSchedulerState>
 801443c:	4603      	mov	r3, r0
 801443e:	2b00      	cmp	r3, #0
 8014440:	d102      	bne.n	8014448 <xQueueSemaphoreTake+0x64>
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d101      	bne.n	801444c <xQueueSemaphoreTake+0x68>
 8014448:	2301      	movs	r3, #1
 801444a:	e000      	b.n	801444e <xQueueSemaphoreTake+0x6a>
 801444c:	2300      	movs	r3, #0
 801444e:	2b00      	cmp	r3, #0
 8014450:	d10b      	bne.n	801446a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8014452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014456:	f383 8811 	msr	BASEPRI, r3
 801445a:	f3bf 8f6f 	isb	sy
 801445e:	f3bf 8f4f 	dsb	sy
 8014462:	61bb      	str	r3, [r7, #24]
}
 8014464:	bf00      	nop
 8014466:	bf00      	nop
 8014468:	e7fd      	b.n	8014466 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801446a:	f001 fba5 	bl	8015bb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801446e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014472:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014476:	2b00      	cmp	r3, #0
 8014478:	d024      	beq.n	80144c4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801447c:	1e5a      	subs	r2, r3, #1
 801447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014480:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d104      	bne.n	8014494 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801448a:	f001 f9e9 	bl	8015860 <pvTaskIncrementMutexHeldCount>
 801448e:	4602      	mov	r2, r0
 8014490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014492:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014496:	691b      	ldr	r3, [r3, #16]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d00f      	beq.n	80144bc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801449c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801449e:	3310      	adds	r3, #16
 80144a0:	4618      	mov	r0, r3
 80144a2:	f000 fe71 	bl	8015188 <xTaskRemoveFromEventList>
 80144a6:	4603      	mov	r3, r0
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d007      	beq.n	80144bc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80144ac:	4b54      	ldr	r3, [pc, #336]	@ (8014600 <xQueueSemaphoreTake+0x21c>)
 80144ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144b2:	601a      	str	r2, [r3, #0]
 80144b4:	f3bf 8f4f 	dsb	sy
 80144b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80144bc:	f001 fbae 	bl	8015c1c <vPortExitCritical>
				return pdPASS;
 80144c0:	2301      	movs	r3, #1
 80144c2:	e098      	b.n	80145f6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80144c4:	683b      	ldr	r3, [r7, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d112      	bne.n	80144f0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80144ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d00b      	beq.n	80144e8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80144d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144d4:	f383 8811 	msr	BASEPRI, r3
 80144d8:	f3bf 8f6f 	isb	sy
 80144dc:	f3bf 8f4f 	dsb	sy
 80144e0:	617b      	str	r3, [r7, #20]
}
 80144e2:	bf00      	nop
 80144e4:	bf00      	nop
 80144e6:	e7fd      	b.n	80144e4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80144e8:	f001 fb98 	bl	8015c1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80144ec:	2300      	movs	r3, #0
 80144ee:	e082      	b.n	80145f6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80144f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d106      	bne.n	8014504 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80144f6:	f107 030c 	add.w	r3, r7, #12
 80144fa:	4618      	mov	r0, r3
 80144fc:	f000 fea8 	bl	8015250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014500:	2301      	movs	r3, #1
 8014502:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014504:	f001 fb8a 	bl	8015c1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014508:	f000 fc56 	bl	8014db8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801450c:	f001 fb54 	bl	8015bb8 <vPortEnterCritical>
 8014510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014512:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014516:	b25b      	sxtb	r3, r3
 8014518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801451c:	d103      	bne.n	8014526 <xQueueSemaphoreTake+0x142>
 801451e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014520:	2200      	movs	r2, #0
 8014522:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014528:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801452c:	b25b      	sxtb	r3, r3
 801452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014532:	d103      	bne.n	801453c <xQueueSemaphoreTake+0x158>
 8014534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014536:	2200      	movs	r2, #0
 8014538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801453c:	f001 fb6e 	bl	8015c1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014540:	463a      	mov	r2, r7
 8014542:	f107 030c 	add.w	r3, r7, #12
 8014546:	4611      	mov	r1, r2
 8014548:	4618      	mov	r0, r3
 801454a:	f000 fe97 	bl	801527c <xTaskCheckForTimeOut>
 801454e:	4603      	mov	r3, r0
 8014550:	2b00      	cmp	r3, #0
 8014552:	d132      	bne.n	80145ba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014554:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014556:	f000 f9d1 	bl	80148fc <prvIsQueueEmpty>
 801455a:	4603      	mov	r3, r0
 801455c:	2b00      	cmp	r3, #0
 801455e:	d026      	beq.n	80145ae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d109      	bne.n	801457c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014568:	f001 fb26 	bl	8015bb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801456c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801456e:	689b      	ldr	r3, [r3, #8]
 8014570:	4618      	mov	r0, r3
 8014572:	f000 ffe7 	bl	8015544 <xTaskPriorityInherit>
 8014576:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8014578:	f001 fb50 	bl	8015c1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801457c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801457e:	3324      	adds	r3, #36	@ 0x24
 8014580:	683a      	ldr	r2, [r7, #0]
 8014582:	4611      	mov	r1, r2
 8014584:	4618      	mov	r0, r3
 8014586:	f000 fdd9 	bl	801513c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801458a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801458c:	f000 f964 	bl	8014858 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014590:	f000 fc20 	bl	8014dd4 <xTaskResumeAll>
 8014594:	4603      	mov	r3, r0
 8014596:	2b00      	cmp	r3, #0
 8014598:	f47f af67 	bne.w	801446a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801459c:	4b18      	ldr	r3, [pc, #96]	@ (8014600 <xQueueSemaphoreTake+0x21c>)
 801459e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80145a2:	601a      	str	r2, [r3, #0]
 80145a4:	f3bf 8f4f 	dsb	sy
 80145a8:	f3bf 8f6f 	isb	sy
 80145ac:	e75d      	b.n	801446a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80145ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80145b0:	f000 f952 	bl	8014858 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80145b4:	f000 fc0e 	bl	8014dd4 <xTaskResumeAll>
 80145b8:	e757      	b.n	801446a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80145ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80145bc:	f000 f94c 	bl	8014858 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80145c0:	f000 fc08 	bl	8014dd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80145c6:	f000 f999 	bl	80148fc <prvIsQueueEmpty>
 80145ca:	4603      	mov	r3, r0
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	f43f af4c 	beq.w	801446a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80145d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d00d      	beq.n	80145f4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80145d8:	f001 faee 	bl	8015bb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80145dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80145de:	f000 f893 	bl	8014708 <prvGetDisinheritPriorityAfterTimeout>
 80145e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80145e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145e6:	689b      	ldr	r3, [r3, #8]
 80145e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80145ea:	4618      	mov	r0, r3
 80145ec:	f001 f8a8 	bl	8015740 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80145f0:	f001 fb14 	bl	8015c1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80145f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3738      	adds	r7, #56	@ 0x38
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	e000ed04 	.word	0xe000ed04

08014604 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b08e      	sub	sp, #56	@ 0x38
 8014608:	af00      	add	r7, sp, #0
 801460a:	60f8      	str	r0, [r7, #12]
 801460c:	60b9      	str	r1, [r7, #8]
 801460e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014616:	2b00      	cmp	r3, #0
 8014618:	d10b      	bne.n	8014632 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801461a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801461e:	f383 8811 	msr	BASEPRI, r3
 8014622:	f3bf 8f6f 	isb	sy
 8014626:	f3bf 8f4f 	dsb	sy
 801462a:	623b      	str	r3, [r7, #32]
}
 801462c:	bf00      	nop
 801462e:	bf00      	nop
 8014630:	e7fd      	b.n	801462e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014632:	68bb      	ldr	r3, [r7, #8]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d103      	bne.n	8014640 <xQueueReceiveFromISR+0x3c>
 8014638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801463c:	2b00      	cmp	r3, #0
 801463e:	d101      	bne.n	8014644 <xQueueReceiveFromISR+0x40>
 8014640:	2301      	movs	r3, #1
 8014642:	e000      	b.n	8014646 <xQueueReceiveFromISR+0x42>
 8014644:	2300      	movs	r3, #0
 8014646:	2b00      	cmp	r3, #0
 8014648:	d10b      	bne.n	8014662 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801464e:	f383 8811 	msr	BASEPRI, r3
 8014652:	f3bf 8f6f 	isb	sy
 8014656:	f3bf 8f4f 	dsb	sy
 801465a:	61fb      	str	r3, [r7, #28]
}
 801465c:	bf00      	nop
 801465e:	bf00      	nop
 8014660:	e7fd      	b.n	801465e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014662:	f001 fb89 	bl	8015d78 <vPortValidateInterruptPriority>
	__asm volatile
 8014666:	f3ef 8211 	mrs	r2, BASEPRI
 801466a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801466e:	f383 8811 	msr	BASEPRI, r3
 8014672:	f3bf 8f6f 	isb	sy
 8014676:	f3bf 8f4f 	dsb	sy
 801467a:	61ba      	str	r2, [r7, #24]
 801467c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801467e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014680:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014686:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801468a:	2b00      	cmp	r3, #0
 801468c:	d02f      	beq.n	80146ee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014690:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014698:	68b9      	ldr	r1, [r7, #8]
 801469a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801469c:	f000 f8b6 	bl	801480c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80146a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146a2:	1e5a      	subs	r2, r3, #1
 80146a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80146a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80146ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146b0:	d112      	bne.n	80146d8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80146b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146b4:	691b      	ldr	r3, [r3, #16]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d016      	beq.n	80146e8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80146ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146bc:	3310      	adds	r3, #16
 80146be:	4618      	mov	r0, r3
 80146c0:	f000 fd62 	bl	8015188 <xTaskRemoveFromEventList>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d00e      	beq.n	80146e8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d00b      	beq.n	80146e8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2201      	movs	r2, #1
 80146d4:	601a      	str	r2, [r3, #0]
 80146d6:	e007      	b.n	80146e8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80146d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80146dc:	3301      	adds	r3, #1
 80146de:	b2db      	uxtb	r3, r3
 80146e0:	b25a      	sxtb	r2, r3
 80146e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80146e8:	2301      	movs	r3, #1
 80146ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80146ec:	e001      	b.n	80146f2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80146ee:	2300      	movs	r3, #0
 80146f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80146f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80146f6:	693b      	ldr	r3, [r7, #16]
 80146f8:	f383 8811 	msr	BASEPRI, r3
}
 80146fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80146fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8014700:	4618      	mov	r0, r3
 8014702:	3738      	adds	r7, #56	@ 0x38
 8014704:	46bd      	mov	sp, r7
 8014706:	bd80      	pop	{r7, pc}

08014708 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014708:	b480      	push	{r7}
 801470a:	b085      	sub	sp, #20
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014714:	2b00      	cmp	r3, #0
 8014716:	d006      	beq.n	8014726 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	f1c3 0307 	rsb	r3, r3, #7
 8014722:	60fb      	str	r3, [r7, #12]
 8014724:	e001      	b.n	801472a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014726:	2300      	movs	r3, #0
 8014728:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801472a:	68fb      	ldr	r3, [r7, #12]
	}
 801472c:	4618      	mov	r0, r3
 801472e:	3714      	adds	r7, #20
 8014730:	46bd      	mov	sp, r7
 8014732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014736:	4770      	bx	lr

08014738 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b086      	sub	sp, #24
 801473c:	af00      	add	r7, sp, #0
 801473e:	60f8      	str	r0, [r7, #12]
 8014740:	60b9      	str	r1, [r7, #8]
 8014742:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014744:	2300      	movs	r3, #0
 8014746:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801474c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014752:	2b00      	cmp	r3, #0
 8014754:	d10d      	bne.n	8014772 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d14d      	bne.n	80147fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	689b      	ldr	r3, [r3, #8]
 8014762:	4618      	mov	r0, r3
 8014764:	f000 ff64 	bl	8015630 <xTaskPriorityDisinherit>
 8014768:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2200      	movs	r2, #0
 801476e:	609a      	str	r2, [r3, #8]
 8014770:	e043      	b.n	80147fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d119      	bne.n	80147ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	6858      	ldr	r0, [r3, #4]
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014780:	461a      	mov	r2, r3
 8014782:	68b9      	ldr	r1, [r7, #8]
 8014784:	f002 fd11 	bl	80171aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	685a      	ldr	r2, [r3, #4]
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014790:	441a      	add	r2, r3
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	685a      	ldr	r2, [r3, #4]
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	689b      	ldr	r3, [r3, #8]
 801479e:	429a      	cmp	r2, r3
 80147a0:	d32b      	bcc.n	80147fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	681a      	ldr	r2, [r3, #0]
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	605a      	str	r2, [r3, #4]
 80147aa:	e026      	b.n	80147fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	68d8      	ldr	r0, [r3, #12]
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147b4:	461a      	mov	r2, r3
 80147b6:	68b9      	ldr	r1, [r7, #8]
 80147b8:	f002 fcf7 	bl	80171aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	68da      	ldr	r2, [r3, #12]
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147c4:	425b      	negs	r3, r3
 80147c6:	441a      	add	r2, r3
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	68da      	ldr	r2, [r3, #12]
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d207      	bcs.n	80147e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	689a      	ldr	r2, [r3, #8]
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147e0:	425b      	negs	r3, r3
 80147e2:	441a      	add	r2, r3
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2b02      	cmp	r3, #2
 80147ec:	d105      	bne.n	80147fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d002      	beq.n	80147fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80147f4:	693b      	ldr	r3, [r7, #16]
 80147f6:	3b01      	subs	r3, #1
 80147f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80147fa:	693b      	ldr	r3, [r7, #16]
 80147fc:	1c5a      	adds	r2, r3, #1
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014802:	697b      	ldr	r3, [r7, #20]
}
 8014804:	4618      	mov	r0, r3
 8014806:	3718      	adds	r7, #24
 8014808:	46bd      	mov	sp, r7
 801480a:	bd80      	pop	{r7, pc}

0801480c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b082      	sub	sp, #8
 8014810:	af00      	add	r7, sp, #0
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801481a:	2b00      	cmp	r3, #0
 801481c:	d018      	beq.n	8014850 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	68da      	ldr	r2, [r3, #12]
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014826:	441a      	add	r2, r3
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	68da      	ldr	r2, [r3, #12]
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	689b      	ldr	r3, [r3, #8]
 8014834:	429a      	cmp	r2, r3
 8014836:	d303      	bcc.n	8014840 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	68d9      	ldr	r1, [r3, #12]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014848:	461a      	mov	r2, r3
 801484a:	6838      	ldr	r0, [r7, #0]
 801484c:	f002 fcad 	bl	80171aa <memcpy>
	}
}
 8014850:	bf00      	nop
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b084      	sub	sp, #16
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014860:	f001 f9aa 	bl	8015bb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801486a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801486c:	e011      	b.n	8014892 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014872:	2b00      	cmp	r3, #0
 8014874:	d012      	beq.n	801489c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	3324      	adds	r3, #36	@ 0x24
 801487a:	4618      	mov	r0, r3
 801487c:	f000 fc84 	bl	8015188 <xTaskRemoveFromEventList>
 8014880:	4603      	mov	r3, r0
 8014882:	2b00      	cmp	r3, #0
 8014884:	d001      	beq.n	801488a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014886:	f000 fd5d 	bl	8015344 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801488a:	7bfb      	ldrb	r3, [r7, #15]
 801488c:	3b01      	subs	r3, #1
 801488e:	b2db      	uxtb	r3, r3
 8014890:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014896:	2b00      	cmp	r3, #0
 8014898:	dce9      	bgt.n	801486e <prvUnlockQueue+0x16>
 801489a:	e000      	b.n	801489e <prvUnlockQueue+0x46>
					break;
 801489c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	22ff      	movs	r2, #255	@ 0xff
 80148a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80148a6:	f001 f9b9 	bl	8015c1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80148aa:	f001 f985 	bl	8015bb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80148b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80148b6:	e011      	b.n	80148dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	691b      	ldr	r3, [r3, #16]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d012      	beq.n	80148e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	3310      	adds	r3, #16
 80148c4:	4618      	mov	r0, r3
 80148c6:	f000 fc5f 	bl	8015188 <xTaskRemoveFromEventList>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d001      	beq.n	80148d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80148d0:	f000 fd38 	bl	8015344 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80148d4:	7bbb      	ldrb	r3, [r7, #14]
 80148d6:	3b01      	subs	r3, #1
 80148d8:	b2db      	uxtb	r3, r3
 80148da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80148dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	dce9      	bgt.n	80148b8 <prvUnlockQueue+0x60>
 80148e4:	e000      	b.n	80148e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80148e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	22ff      	movs	r2, #255	@ 0xff
 80148ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80148f0:	f001 f994 	bl	8015c1c <vPortExitCritical>
}
 80148f4:	bf00      	nop
 80148f6:	3710      	adds	r7, #16
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}

080148fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b084      	sub	sp, #16
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014904:	f001 f958 	bl	8015bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801490c:	2b00      	cmp	r3, #0
 801490e:	d102      	bne.n	8014916 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014910:	2301      	movs	r3, #1
 8014912:	60fb      	str	r3, [r7, #12]
 8014914:	e001      	b.n	801491a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014916:	2300      	movs	r3, #0
 8014918:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801491a:	f001 f97f 	bl	8015c1c <vPortExitCritical>

	return xReturn;
 801491e:	68fb      	ldr	r3, [r7, #12]
}
 8014920:	4618      	mov	r0, r3
 8014922:	3710      	adds	r7, #16
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b084      	sub	sp, #16
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014930:	f001 f942 	bl	8015bb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801493c:	429a      	cmp	r2, r3
 801493e:	d102      	bne.n	8014946 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014940:	2301      	movs	r3, #1
 8014942:	60fb      	str	r3, [r7, #12]
 8014944:	e001      	b.n	801494a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014946:	2300      	movs	r3, #0
 8014948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801494a:	f001 f967 	bl	8015c1c <vPortExitCritical>

	return xReturn;
 801494e:	68fb      	ldr	r3, [r7, #12]
}
 8014950:	4618      	mov	r0, r3
 8014952:	3710      	adds	r7, #16
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014958:	b580      	push	{r7, lr}
 801495a:	b08e      	sub	sp, #56	@ 0x38
 801495c:	af04      	add	r7, sp, #16
 801495e:	60f8      	str	r0, [r7, #12]
 8014960:	60b9      	str	r1, [r7, #8]
 8014962:	607a      	str	r2, [r7, #4]
 8014964:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014968:	2b00      	cmp	r3, #0
 801496a:	d10b      	bne.n	8014984 <xTaskCreateStatic+0x2c>
	__asm volatile
 801496c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014970:	f383 8811 	msr	BASEPRI, r3
 8014974:	f3bf 8f6f 	isb	sy
 8014978:	f3bf 8f4f 	dsb	sy
 801497c:	623b      	str	r3, [r7, #32]
}
 801497e:	bf00      	nop
 8014980:	bf00      	nop
 8014982:	e7fd      	b.n	8014980 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014986:	2b00      	cmp	r3, #0
 8014988:	d10b      	bne.n	80149a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 801498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801498e:	f383 8811 	msr	BASEPRI, r3
 8014992:	f3bf 8f6f 	isb	sy
 8014996:	f3bf 8f4f 	dsb	sy
 801499a:	61fb      	str	r3, [r7, #28]
}
 801499c:	bf00      	nop
 801499e:	bf00      	nop
 80149a0:	e7fd      	b.n	801499e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80149a2:	2354      	movs	r3, #84	@ 0x54
 80149a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	2b54      	cmp	r3, #84	@ 0x54
 80149aa:	d00b      	beq.n	80149c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80149ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149b0:	f383 8811 	msr	BASEPRI, r3
 80149b4:	f3bf 8f6f 	isb	sy
 80149b8:	f3bf 8f4f 	dsb	sy
 80149bc:	61bb      	str	r3, [r7, #24]
}
 80149be:	bf00      	nop
 80149c0:	bf00      	nop
 80149c2:	e7fd      	b.n	80149c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80149c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80149c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d01e      	beq.n	8014a0a <xTaskCreateStatic+0xb2>
 80149cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d01b      	beq.n	8014a0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80149d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80149d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80149da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80149dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149de:	2202      	movs	r2, #2
 80149e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80149e4:	2300      	movs	r3, #0
 80149e6:	9303      	str	r3, [sp, #12]
 80149e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149ea:	9302      	str	r3, [sp, #8]
 80149ec:	f107 0314 	add.w	r3, r7, #20
 80149f0:	9301      	str	r3, [sp, #4]
 80149f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149f4:	9300      	str	r3, [sp, #0]
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	687a      	ldr	r2, [r7, #4]
 80149fa:	68b9      	ldr	r1, [r7, #8]
 80149fc:	68f8      	ldr	r0, [r7, #12]
 80149fe:	f000 f850 	bl	8014aa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014a04:	f000 f8d6 	bl	8014bb4 <prvAddNewTaskToReadyList>
 8014a08:	e001      	b.n	8014a0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014a0e:	697b      	ldr	r3, [r7, #20]
	}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3728      	adds	r7, #40	@ 0x28
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b08c      	sub	sp, #48	@ 0x30
 8014a1c:	af04      	add	r7, sp, #16
 8014a1e:	60f8      	str	r0, [r7, #12]
 8014a20:	60b9      	str	r1, [r7, #8]
 8014a22:	603b      	str	r3, [r7, #0]
 8014a24:	4613      	mov	r3, r2
 8014a26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014a28:	88fb      	ldrh	r3, [r7, #6]
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f001 f9e5 	bl	8015dfc <pvPortMalloc>
 8014a32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00e      	beq.n	8014a58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014a3a:	2054      	movs	r0, #84	@ 0x54
 8014a3c:	f001 f9de 	bl	8015dfc <pvPortMalloc>
 8014a40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014a42:	69fb      	ldr	r3, [r7, #28]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d003      	beq.n	8014a50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014a48:	69fb      	ldr	r3, [r7, #28]
 8014a4a:	697a      	ldr	r2, [r7, #20]
 8014a4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8014a4e:	e005      	b.n	8014a5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014a50:	6978      	ldr	r0, [r7, #20]
 8014a52:	f001 faa1 	bl	8015f98 <vPortFree>
 8014a56:	e001      	b.n	8014a5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014a58:	2300      	movs	r3, #0
 8014a5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014a5c:	69fb      	ldr	r3, [r7, #28]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d017      	beq.n	8014a92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014a62:	69fb      	ldr	r3, [r7, #28]
 8014a64:	2200      	movs	r2, #0
 8014a66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014a6a:	88fa      	ldrh	r2, [r7, #6]
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	9303      	str	r3, [sp, #12]
 8014a70:	69fb      	ldr	r3, [r7, #28]
 8014a72:	9302      	str	r3, [sp, #8]
 8014a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a76:	9301      	str	r3, [sp, #4]
 8014a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a7a:	9300      	str	r3, [sp, #0]
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	68b9      	ldr	r1, [r7, #8]
 8014a80:	68f8      	ldr	r0, [r7, #12]
 8014a82:	f000 f80e 	bl	8014aa2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a86:	69f8      	ldr	r0, [r7, #28]
 8014a88:	f000 f894 	bl	8014bb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014a8c:	2301      	movs	r3, #1
 8014a8e:	61bb      	str	r3, [r7, #24]
 8014a90:	e002      	b.n	8014a98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014a92:	f04f 33ff 	mov.w	r3, #4294967295
 8014a96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014a98:	69bb      	ldr	r3, [r7, #24]
	}
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	3720      	adds	r7, #32
 8014a9e:	46bd      	mov	sp, r7
 8014aa0:	bd80      	pop	{r7, pc}

08014aa2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014aa2:	b580      	push	{r7, lr}
 8014aa4:	b088      	sub	sp, #32
 8014aa6:	af00      	add	r7, sp, #0
 8014aa8:	60f8      	str	r0, [r7, #12]
 8014aaa:	60b9      	str	r1, [r7, #8]
 8014aac:	607a      	str	r2, [r7, #4]
 8014aae:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ab2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014ab4:	6879      	ldr	r1, [r7, #4]
 8014ab6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8014aba:	440b      	add	r3, r1
 8014abc:	009b      	lsls	r3, r3, #2
 8014abe:	4413      	add	r3, r2
 8014ac0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014ac2:	69bb      	ldr	r3, [r7, #24]
 8014ac4:	f023 0307 	bic.w	r3, r3, #7
 8014ac8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014aca:	69bb      	ldr	r3, [r7, #24]
 8014acc:	f003 0307 	and.w	r3, r3, #7
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d00b      	beq.n	8014aec <prvInitialiseNewTask+0x4a>
	__asm volatile
 8014ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ad8:	f383 8811 	msr	BASEPRI, r3
 8014adc:	f3bf 8f6f 	isb	sy
 8014ae0:	f3bf 8f4f 	dsb	sy
 8014ae4:	617b      	str	r3, [r7, #20]
}
 8014ae6:	bf00      	nop
 8014ae8:	bf00      	nop
 8014aea:	e7fd      	b.n	8014ae8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d01f      	beq.n	8014b32 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014af2:	2300      	movs	r3, #0
 8014af4:	61fb      	str	r3, [r7, #28]
 8014af6:	e012      	b.n	8014b1e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014af8:	68ba      	ldr	r2, [r7, #8]
 8014afa:	69fb      	ldr	r3, [r7, #28]
 8014afc:	4413      	add	r3, r2
 8014afe:	7819      	ldrb	r1, [r3, #0]
 8014b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b02:	69fb      	ldr	r3, [r7, #28]
 8014b04:	4413      	add	r3, r2
 8014b06:	3334      	adds	r3, #52	@ 0x34
 8014b08:	460a      	mov	r2, r1
 8014b0a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014b0c:	68ba      	ldr	r2, [r7, #8]
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	4413      	add	r3, r2
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d006      	beq.n	8014b26 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b18:	69fb      	ldr	r3, [r7, #28]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	61fb      	str	r3, [r7, #28]
 8014b1e:	69fb      	ldr	r3, [r7, #28]
 8014b20:	2b0f      	cmp	r3, #15
 8014b22:	d9e9      	bls.n	8014af8 <prvInitialiseNewTask+0x56>
 8014b24:	e000      	b.n	8014b28 <prvInitialiseNewTask+0x86>
			{
				break;
 8014b26:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014b30:	e003      	b.n	8014b3a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b34:	2200      	movs	r2, #0
 8014b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b3c:	2b06      	cmp	r3, #6
 8014b3e:	d901      	bls.n	8014b44 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014b40:	2306      	movs	r3, #6
 8014b42:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014b48:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014b4e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8014b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b52:	2200      	movs	r2, #0
 8014b54:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b58:	3304      	adds	r3, #4
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7ff fa1c 	bl	8013f98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b62:	3318      	adds	r3, #24
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7ff fa17 	bl	8013f98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b72:	f1c3 0207 	rsb	r2, r3, #7
 8014b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014b7e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b82:	2200      	movs	r2, #0
 8014b84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b88:	2200      	movs	r2, #0
 8014b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014b8e:	683a      	ldr	r2, [r7, #0]
 8014b90:	68f9      	ldr	r1, [r7, #12]
 8014b92:	69b8      	ldr	r0, [r7, #24]
 8014b94:	f000 fede 	bl	8015954 <pxPortInitialiseStack>
 8014b98:	4602      	mov	r2, r0
 8014b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d002      	beq.n	8014baa <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014baa:	bf00      	nop
 8014bac:	3720      	adds	r7, #32
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}
	...

08014bb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b082      	sub	sp, #8
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014bbc:	f000 fffc 	bl	8015bb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8014c6c <prvAddNewTaskToReadyList+0xb8>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	4a29      	ldr	r2, [pc, #164]	@ (8014c6c <prvAddNewTaskToReadyList+0xb8>)
 8014bc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014bca:	4b29      	ldr	r3, [pc, #164]	@ (8014c70 <prvAddNewTaskToReadyList+0xbc>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d109      	bne.n	8014be6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014bd2:	4a27      	ldr	r2, [pc, #156]	@ (8014c70 <prvAddNewTaskToReadyList+0xbc>)
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014bd8:	4b24      	ldr	r3, [pc, #144]	@ (8014c6c <prvAddNewTaskToReadyList+0xb8>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	2b01      	cmp	r3, #1
 8014bde:	d110      	bne.n	8014c02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014be0:	f000 fbd4 	bl	801538c <prvInitialiseTaskLists>
 8014be4:	e00d      	b.n	8014c02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014be6:	4b23      	ldr	r3, [pc, #140]	@ (8014c74 <prvAddNewTaskToReadyList+0xc0>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d109      	bne.n	8014c02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014bee:	4b20      	ldr	r3, [pc, #128]	@ (8014c70 <prvAddNewTaskToReadyList+0xbc>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bf8:	429a      	cmp	r2, r3
 8014bfa:	d802      	bhi.n	8014c02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8014c70 <prvAddNewTaskToReadyList+0xbc>)
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014c02:	4b1d      	ldr	r3, [pc, #116]	@ (8014c78 <prvAddNewTaskToReadyList+0xc4>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	3301      	adds	r3, #1
 8014c08:	4a1b      	ldr	r2, [pc, #108]	@ (8014c78 <prvAddNewTaskToReadyList+0xc4>)
 8014c0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c10:	2201      	movs	r2, #1
 8014c12:	409a      	lsls	r2, r3
 8014c14:	4b19      	ldr	r3, [pc, #100]	@ (8014c7c <prvAddNewTaskToReadyList+0xc8>)
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	4313      	orrs	r3, r2
 8014c1a:	4a18      	ldr	r2, [pc, #96]	@ (8014c7c <prvAddNewTaskToReadyList+0xc8>)
 8014c1c:	6013      	str	r3, [r2, #0]
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c22:	4613      	mov	r3, r2
 8014c24:	009b      	lsls	r3, r3, #2
 8014c26:	4413      	add	r3, r2
 8014c28:	009b      	lsls	r3, r3, #2
 8014c2a:	4a15      	ldr	r2, [pc, #84]	@ (8014c80 <prvAddNewTaskToReadyList+0xcc>)
 8014c2c:	441a      	add	r2, r3
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	3304      	adds	r3, #4
 8014c32:	4619      	mov	r1, r3
 8014c34:	4610      	mov	r0, r2
 8014c36:	f7ff f9bc 	bl	8013fb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014c3a:	f000 ffef 	bl	8015c1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8014c74 <prvAddNewTaskToReadyList+0xc0>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00e      	beq.n	8014c64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014c46:	4b0a      	ldr	r3, [pc, #40]	@ (8014c70 <prvAddNewTaskToReadyList+0xbc>)
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c50:	429a      	cmp	r2, r3
 8014c52:	d207      	bcs.n	8014c64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014c54:	4b0b      	ldr	r3, [pc, #44]	@ (8014c84 <prvAddNewTaskToReadyList+0xd0>)
 8014c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014c5a:	601a      	str	r2, [r3, #0]
 8014c5c:	f3bf 8f4f 	dsb	sy
 8014c60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c64:	bf00      	nop
 8014c66:	3708      	adds	r7, #8
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}
 8014c6c:	24002b74 	.word	0x24002b74
 8014c70:	24002a74 	.word	0x24002a74
 8014c74:	24002b80 	.word	0x24002b80
 8014c78:	24002b90 	.word	0x24002b90
 8014c7c:	24002b7c 	.word	0x24002b7c
 8014c80:	24002a78 	.word	0x24002a78
 8014c84:	e000ed04 	.word	0xe000ed04

08014c88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014c88:	b580      	push	{r7, lr}
 8014c8a:	b084      	sub	sp, #16
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014c90:	2300      	movs	r3, #0
 8014c92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d018      	beq.n	8014ccc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014c9a:	4b14      	ldr	r3, [pc, #80]	@ (8014cec <vTaskDelay+0x64>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d00b      	beq.n	8014cba <vTaskDelay+0x32>
	__asm volatile
 8014ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ca6:	f383 8811 	msr	BASEPRI, r3
 8014caa:	f3bf 8f6f 	isb	sy
 8014cae:	f3bf 8f4f 	dsb	sy
 8014cb2:	60bb      	str	r3, [r7, #8]
}
 8014cb4:	bf00      	nop
 8014cb6:	bf00      	nop
 8014cb8:	e7fd      	b.n	8014cb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014cba:	f000 f87d 	bl	8014db8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014cbe:	2100      	movs	r1, #0
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f000 fde1 	bl	8015888 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014cc6:	f000 f885 	bl	8014dd4 <xTaskResumeAll>
 8014cca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d107      	bne.n	8014ce2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014cd2:	4b07      	ldr	r3, [pc, #28]	@ (8014cf0 <vTaskDelay+0x68>)
 8014cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014cd8:	601a      	str	r2, [r3, #0]
 8014cda:	f3bf 8f4f 	dsb	sy
 8014cde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014ce2:	bf00      	nop
 8014ce4:	3710      	adds	r7, #16
 8014ce6:	46bd      	mov	sp, r7
 8014ce8:	bd80      	pop	{r7, pc}
 8014cea:	bf00      	nop
 8014cec:	24002b9c 	.word	0x24002b9c
 8014cf0:	e000ed04 	.word	0xe000ed04

08014cf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b08a      	sub	sp, #40	@ 0x28
 8014cf8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014d02:	463a      	mov	r2, r7
 8014d04:	1d39      	adds	r1, r7, #4
 8014d06:	f107 0308 	add.w	r3, r7, #8
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7ec fc94 	bl	8001638 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014d10:	6839      	ldr	r1, [r7, #0]
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	68ba      	ldr	r2, [r7, #8]
 8014d16:	9202      	str	r2, [sp, #8]
 8014d18:	9301      	str	r3, [sp, #4]
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	9300      	str	r3, [sp, #0]
 8014d1e:	2300      	movs	r3, #0
 8014d20:	460a      	mov	r2, r1
 8014d22:	491f      	ldr	r1, [pc, #124]	@ (8014da0 <vTaskStartScheduler+0xac>)
 8014d24:	481f      	ldr	r0, [pc, #124]	@ (8014da4 <vTaskStartScheduler+0xb0>)
 8014d26:	f7ff fe17 	bl	8014958 <xTaskCreateStatic>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	4a1e      	ldr	r2, [pc, #120]	@ (8014da8 <vTaskStartScheduler+0xb4>)
 8014d2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014d30:	4b1d      	ldr	r3, [pc, #116]	@ (8014da8 <vTaskStartScheduler+0xb4>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d002      	beq.n	8014d3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014d38:	2301      	movs	r3, #1
 8014d3a:	617b      	str	r3, [r7, #20]
 8014d3c:	e001      	b.n	8014d42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	2b01      	cmp	r3, #1
 8014d46:	d116      	bne.n	8014d76 <vTaskStartScheduler+0x82>
	__asm volatile
 8014d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d4c:	f383 8811 	msr	BASEPRI, r3
 8014d50:	f3bf 8f6f 	isb	sy
 8014d54:	f3bf 8f4f 	dsb	sy
 8014d58:	613b      	str	r3, [r7, #16]
}
 8014d5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014d5c:	4b13      	ldr	r3, [pc, #76]	@ (8014dac <vTaskStartScheduler+0xb8>)
 8014d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8014d62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014d64:	4b12      	ldr	r3, [pc, #72]	@ (8014db0 <vTaskStartScheduler+0xbc>)
 8014d66:	2201      	movs	r2, #1
 8014d68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014d6a:	4b12      	ldr	r3, [pc, #72]	@ (8014db4 <vTaskStartScheduler+0xc0>)
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014d70:	f000 fe7e 	bl	8015a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014d74:	e00f      	b.n	8014d96 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014d76:	697b      	ldr	r3, [r7, #20]
 8014d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d7c:	d10b      	bne.n	8014d96 <vTaskStartScheduler+0xa2>
	__asm volatile
 8014d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d82:	f383 8811 	msr	BASEPRI, r3
 8014d86:	f3bf 8f6f 	isb	sy
 8014d8a:	f3bf 8f4f 	dsb	sy
 8014d8e:	60fb      	str	r3, [r7, #12]
}
 8014d90:	bf00      	nop
 8014d92:	bf00      	nop
 8014d94:	e7fd      	b.n	8014d92 <vTaskStartScheduler+0x9e>
}
 8014d96:	bf00      	nop
 8014d98:	3718      	adds	r7, #24
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}
 8014d9e:	bf00      	nop
 8014da0:	080191bc 	.word	0x080191bc
 8014da4:	0801535d 	.word	0x0801535d
 8014da8:	24002b98 	.word	0x24002b98
 8014dac:	24002b94 	.word	0x24002b94
 8014db0:	24002b80 	.word	0x24002b80
 8014db4:	24002b78 	.word	0x24002b78

08014db8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014db8:	b480      	push	{r7}
 8014dba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014dbc:	4b04      	ldr	r3, [pc, #16]	@ (8014dd0 <vTaskSuspendAll+0x18>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	3301      	adds	r3, #1
 8014dc2:	4a03      	ldr	r2, [pc, #12]	@ (8014dd0 <vTaskSuspendAll+0x18>)
 8014dc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014dc6:	bf00      	nop
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dce:	4770      	bx	lr
 8014dd0:	24002b9c 	.word	0x24002b9c

08014dd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b084      	sub	sp, #16
 8014dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014dda:	2300      	movs	r3, #0
 8014ddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014dde:	2300      	movs	r3, #0
 8014de0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014de2:	4b42      	ldr	r3, [pc, #264]	@ (8014eec <xTaskResumeAll+0x118>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d10b      	bne.n	8014e02 <xTaskResumeAll+0x2e>
	__asm volatile
 8014dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dee:	f383 8811 	msr	BASEPRI, r3
 8014df2:	f3bf 8f6f 	isb	sy
 8014df6:	f3bf 8f4f 	dsb	sy
 8014dfa:	603b      	str	r3, [r7, #0]
}
 8014dfc:	bf00      	nop
 8014dfe:	bf00      	nop
 8014e00:	e7fd      	b.n	8014dfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014e02:	f000 fed9 	bl	8015bb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014e06:	4b39      	ldr	r3, [pc, #228]	@ (8014eec <xTaskResumeAll+0x118>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	3b01      	subs	r3, #1
 8014e0c:	4a37      	ldr	r2, [pc, #220]	@ (8014eec <xTaskResumeAll+0x118>)
 8014e0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014e10:	4b36      	ldr	r3, [pc, #216]	@ (8014eec <xTaskResumeAll+0x118>)
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d161      	bne.n	8014edc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014e18:	4b35      	ldr	r3, [pc, #212]	@ (8014ef0 <xTaskResumeAll+0x11c>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d05d      	beq.n	8014edc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014e20:	e02e      	b.n	8014e80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e22:	4b34      	ldr	r3, [pc, #208]	@ (8014ef4 <xTaskResumeAll+0x120>)
 8014e24:	68db      	ldr	r3, [r3, #12]
 8014e26:	68db      	ldr	r3, [r3, #12]
 8014e28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	3318      	adds	r3, #24
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f7ff f91c 	bl	801406c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	3304      	adds	r3, #4
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7ff f917 	bl	801406c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e42:	2201      	movs	r2, #1
 8014e44:	409a      	lsls	r2, r3
 8014e46:	4b2c      	ldr	r3, [pc, #176]	@ (8014ef8 <xTaskResumeAll+0x124>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	4313      	orrs	r3, r2
 8014e4c:	4a2a      	ldr	r2, [pc, #168]	@ (8014ef8 <xTaskResumeAll+0x124>)
 8014e4e:	6013      	str	r3, [r2, #0]
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e54:	4613      	mov	r3, r2
 8014e56:	009b      	lsls	r3, r3, #2
 8014e58:	4413      	add	r3, r2
 8014e5a:	009b      	lsls	r3, r3, #2
 8014e5c:	4a27      	ldr	r2, [pc, #156]	@ (8014efc <xTaskResumeAll+0x128>)
 8014e5e:	441a      	add	r2, r3
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	3304      	adds	r3, #4
 8014e64:	4619      	mov	r1, r3
 8014e66:	4610      	mov	r0, r2
 8014e68:	f7ff f8a3 	bl	8013fb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e70:	4b23      	ldr	r3, [pc, #140]	@ (8014f00 <xTaskResumeAll+0x12c>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e76:	429a      	cmp	r2, r3
 8014e78:	d302      	bcc.n	8014e80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014e7a:	4b22      	ldr	r3, [pc, #136]	@ (8014f04 <xTaskResumeAll+0x130>)
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014e80:	4b1c      	ldr	r3, [pc, #112]	@ (8014ef4 <xTaskResumeAll+0x120>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d1cc      	bne.n	8014e22 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d001      	beq.n	8014e92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014e8e:	f000 fb1b 	bl	80154c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014e92:	4b1d      	ldr	r3, [pc, #116]	@ (8014f08 <xTaskResumeAll+0x134>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d010      	beq.n	8014ec0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014e9e:	f000 f837 	bl	8014f10 <xTaskIncrementTick>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d002      	beq.n	8014eae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014ea8:	4b16      	ldr	r3, [pc, #88]	@ (8014f04 <xTaskResumeAll+0x130>)
 8014eaa:	2201      	movs	r2, #1
 8014eac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	3b01      	subs	r3, #1
 8014eb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d1f1      	bne.n	8014e9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014eba:	4b13      	ldr	r3, [pc, #76]	@ (8014f08 <xTaskResumeAll+0x134>)
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014ec0:	4b10      	ldr	r3, [pc, #64]	@ (8014f04 <xTaskResumeAll+0x130>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d009      	beq.n	8014edc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014ec8:	2301      	movs	r3, #1
 8014eca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8014f0c <xTaskResumeAll+0x138>)
 8014ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ed2:	601a      	str	r2, [r3, #0]
 8014ed4:	f3bf 8f4f 	dsb	sy
 8014ed8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014edc:	f000 fe9e 	bl	8015c1c <vPortExitCritical>

	return xAlreadyYielded;
 8014ee0:	68bb      	ldr	r3, [r7, #8]
}
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	3710      	adds	r7, #16
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	24002b9c 	.word	0x24002b9c
 8014ef0:	24002b74 	.word	0x24002b74
 8014ef4:	24002b34 	.word	0x24002b34
 8014ef8:	24002b7c 	.word	0x24002b7c
 8014efc:	24002a78 	.word	0x24002a78
 8014f00:	24002a74 	.word	0x24002a74
 8014f04:	24002b88 	.word	0x24002b88
 8014f08:	24002b84 	.word	0x24002b84
 8014f0c:	e000ed04 	.word	0xe000ed04

08014f10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b086      	sub	sp, #24
 8014f14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014f16:	2300      	movs	r3, #0
 8014f18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f1a:	4b4f      	ldr	r3, [pc, #316]	@ (8015058 <xTaskIncrementTick+0x148>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	f040 808f 	bne.w	8015042 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014f24:	4b4d      	ldr	r3, [pc, #308]	@ (801505c <xTaskIncrementTick+0x14c>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	3301      	adds	r3, #1
 8014f2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014f2c:	4a4b      	ldr	r2, [pc, #300]	@ (801505c <xTaskIncrementTick+0x14c>)
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014f32:	693b      	ldr	r3, [r7, #16]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d121      	bne.n	8014f7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8014f38:	4b49      	ldr	r3, [pc, #292]	@ (8015060 <xTaskIncrementTick+0x150>)
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d00b      	beq.n	8014f5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8014f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f46:	f383 8811 	msr	BASEPRI, r3
 8014f4a:	f3bf 8f6f 	isb	sy
 8014f4e:	f3bf 8f4f 	dsb	sy
 8014f52:	603b      	str	r3, [r7, #0]
}
 8014f54:	bf00      	nop
 8014f56:	bf00      	nop
 8014f58:	e7fd      	b.n	8014f56 <xTaskIncrementTick+0x46>
 8014f5a:	4b41      	ldr	r3, [pc, #260]	@ (8015060 <xTaskIncrementTick+0x150>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	60fb      	str	r3, [r7, #12]
 8014f60:	4b40      	ldr	r3, [pc, #256]	@ (8015064 <xTaskIncrementTick+0x154>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	4a3e      	ldr	r2, [pc, #248]	@ (8015060 <xTaskIncrementTick+0x150>)
 8014f66:	6013      	str	r3, [r2, #0]
 8014f68:	4a3e      	ldr	r2, [pc, #248]	@ (8015064 <xTaskIncrementTick+0x154>)
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	6013      	str	r3, [r2, #0]
 8014f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8015068 <xTaskIncrementTick+0x158>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	3301      	adds	r3, #1
 8014f74:	4a3c      	ldr	r2, [pc, #240]	@ (8015068 <xTaskIncrementTick+0x158>)
 8014f76:	6013      	str	r3, [r2, #0]
 8014f78:	f000 faa6 	bl	80154c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014f7c:	4b3b      	ldr	r3, [pc, #236]	@ (801506c <xTaskIncrementTick+0x15c>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	693a      	ldr	r2, [r7, #16]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d348      	bcc.n	8015018 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f86:	4b36      	ldr	r3, [pc, #216]	@ (8015060 <xTaskIncrementTick+0x150>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d104      	bne.n	8014f9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f90:	4b36      	ldr	r3, [pc, #216]	@ (801506c <xTaskIncrementTick+0x15c>)
 8014f92:	f04f 32ff 	mov.w	r2, #4294967295
 8014f96:	601a      	str	r2, [r3, #0]
					break;
 8014f98:	e03e      	b.n	8015018 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f9a:	4b31      	ldr	r3, [pc, #196]	@ (8015060 <xTaskIncrementTick+0x150>)
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	68db      	ldr	r3, [r3, #12]
 8014fa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	685b      	ldr	r3, [r3, #4]
 8014fa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014faa:	693a      	ldr	r2, [r7, #16]
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	d203      	bcs.n	8014fba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014fb2:	4a2e      	ldr	r2, [pc, #184]	@ (801506c <xTaskIncrementTick+0x15c>)
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014fb8:	e02e      	b.n	8015018 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	3304      	adds	r3, #4
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7ff f854 	bl	801406c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014fc4:	68bb      	ldr	r3, [r7, #8]
 8014fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d004      	beq.n	8014fd6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	3318      	adds	r3, #24
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7ff f84b 	bl	801406c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014fd6:	68bb      	ldr	r3, [r7, #8]
 8014fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fda:	2201      	movs	r2, #1
 8014fdc:	409a      	lsls	r2, r3
 8014fde:	4b24      	ldr	r3, [pc, #144]	@ (8015070 <xTaskIncrementTick+0x160>)
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	4313      	orrs	r3, r2
 8014fe4:	4a22      	ldr	r2, [pc, #136]	@ (8015070 <xTaskIncrementTick+0x160>)
 8014fe6:	6013      	str	r3, [r2, #0]
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014fec:	4613      	mov	r3, r2
 8014fee:	009b      	lsls	r3, r3, #2
 8014ff0:	4413      	add	r3, r2
 8014ff2:	009b      	lsls	r3, r3, #2
 8014ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8015074 <xTaskIncrementTick+0x164>)
 8014ff6:	441a      	add	r2, r3
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	3304      	adds	r3, #4
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	4610      	mov	r0, r2
 8015000:	f7fe ffd7 	bl	8013fb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015004:	68bb      	ldr	r3, [r7, #8]
 8015006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015008:	4b1b      	ldr	r3, [pc, #108]	@ (8015078 <xTaskIncrementTick+0x168>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801500e:	429a      	cmp	r2, r3
 8015010:	d3b9      	bcc.n	8014f86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015012:	2301      	movs	r3, #1
 8015014:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015016:	e7b6      	b.n	8014f86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015018:	4b17      	ldr	r3, [pc, #92]	@ (8015078 <xTaskIncrementTick+0x168>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801501e:	4915      	ldr	r1, [pc, #84]	@ (8015074 <xTaskIncrementTick+0x164>)
 8015020:	4613      	mov	r3, r2
 8015022:	009b      	lsls	r3, r3, #2
 8015024:	4413      	add	r3, r2
 8015026:	009b      	lsls	r3, r3, #2
 8015028:	440b      	add	r3, r1
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	2b01      	cmp	r3, #1
 801502e:	d901      	bls.n	8015034 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8015030:	2301      	movs	r3, #1
 8015032:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015034:	4b11      	ldr	r3, [pc, #68]	@ (801507c <xTaskIncrementTick+0x16c>)
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d007      	beq.n	801504c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801503c:	2301      	movs	r3, #1
 801503e:	617b      	str	r3, [r7, #20]
 8015040:	e004      	b.n	801504c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015042:	4b0f      	ldr	r3, [pc, #60]	@ (8015080 <xTaskIncrementTick+0x170>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	3301      	adds	r3, #1
 8015048:	4a0d      	ldr	r2, [pc, #52]	@ (8015080 <xTaskIncrementTick+0x170>)
 801504a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801504c:	697b      	ldr	r3, [r7, #20]
}
 801504e:	4618      	mov	r0, r3
 8015050:	3718      	adds	r7, #24
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}
 8015056:	bf00      	nop
 8015058:	24002b9c 	.word	0x24002b9c
 801505c:	24002b78 	.word	0x24002b78
 8015060:	24002b2c 	.word	0x24002b2c
 8015064:	24002b30 	.word	0x24002b30
 8015068:	24002b8c 	.word	0x24002b8c
 801506c:	24002b94 	.word	0x24002b94
 8015070:	24002b7c 	.word	0x24002b7c
 8015074:	24002a78 	.word	0x24002a78
 8015078:	24002a74 	.word	0x24002a74
 801507c:	24002b88 	.word	0x24002b88
 8015080:	24002b84 	.word	0x24002b84

08015084 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015084:	b480      	push	{r7}
 8015086:	b087      	sub	sp, #28
 8015088:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801508a:	4b27      	ldr	r3, [pc, #156]	@ (8015128 <vTaskSwitchContext+0xa4>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d003      	beq.n	801509a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015092:	4b26      	ldr	r3, [pc, #152]	@ (801512c <vTaskSwitchContext+0xa8>)
 8015094:	2201      	movs	r2, #1
 8015096:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015098:	e040      	b.n	801511c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801509a:	4b24      	ldr	r3, [pc, #144]	@ (801512c <vTaskSwitchContext+0xa8>)
 801509c:	2200      	movs	r2, #0
 801509e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150a0:	4b23      	ldr	r3, [pc, #140]	@ (8015130 <vTaskSwitchContext+0xac>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	fab3 f383 	clz	r3, r3
 80150ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80150ae:	7afb      	ldrb	r3, [r7, #11]
 80150b0:	f1c3 031f 	rsb	r3, r3, #31
 80150b4:	617b      	str	r3, [r7, #20]
 80150b6:	491f      	ldr	r1, [pc, #124]	@ (8015134 <vTaskSwitchContext+0xb0>)
 80150b8:	697a      	ldr	r2, [r7, #20]
 80150ba:	4613      	mov	r3, r2
 80150bc:	009b      	lsls	r3, r3, #2
 80150be:	4413      	add	r3, r2
 80150c0:	009b      	lsls	r3, r3, #2
 80150c2:	440b      	add	r3, r1
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d10b      	bne.n	80150e2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80150ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150ce:	f383 8811 	msr	BASEPRI, r3
 80150d2:	f3bf 8f6f 	isb	sy
 80150d6:	f3bf 8f4f 	dsb	sy
 80150da:	607b      	str	r3, [r7, #4]
}
 80150dc:	bf00      	nop
 80150de:	bf00      	nop
 80150e0:	e7fd      	b.n	80150de <vTaskSwitchContext+0x5a>
 80150e2:	697a      	ldr	r2, [r7, #20]
 80150e4:	4613      	mov	r3, r2
 80150e6:	009b      	lsls	r3, r3, #2
 80150e8:	4413      	add	r3, r2
 80150ea:	009b      	lsls	r3, r3, #2
 80150ec:	4a11      	ldr	r2, [pc, #68]	@ (8015134 <vTaskSwitchContext+0xb0>)
 80150ee:	4413      	add	r3, r2
 80150f0:	613b      	str	r3, [r7, #16]
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	685a      	ldr	r2, [r3, #4]
 80150f8:	693b      	ldr	r3, [r7, #16]
 80150fa:	605a      	str	r2, [r3, #4]
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	685a      	ldr	r2, [r3, #4]
 8015100:	693b      	ldr	r3, [r7, #16]
 8015102:	3308      	adds	r3, #8
 8015104:	429a      	cmp	r2, r3
 8015106:	d104      	bne.n	8015112 <vTaskSwitchContext+0x8e>
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	685b      	ldr	r3, [r3, #4]
 801510c:	685a      	ldr	r2, [r3, #4]
 801510e:	693b      	ldr	r3, [r7, #16]
 8015110:	605a      	str	r2, [r3, #4]
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	68db      	ldr	r3, [r3, #12]
 8015118:	4a07      	ldr	r2, [pc, #28]	@ (8015138 <vTaskSwitchContext+0xb4>)
 801511a:	6013      	str	r3, [r2, #0]
}
 801511c:	bf00      	nop
 801511e:	371c      	adds	r7, #28
 8015120:	46bd      	mov	sp, r7
 8015122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015126:	4770      	bx	lr
 8015128:	24002b9c 	.word	0x24002b9c
 801512c:	24002b88 	.word	0x24002b88
 8015130:	24002b7c 	.word	0x24002b7c
 8015134:	24002a78 	.word	0x24002a78
 8015138:	24002a74 	.word	0x24002a74

0801513c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b084      	sub	sp, #16
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d10b      	bne.n	8015164 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 801514c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015150:	f383 8811 	msr	BASEPRI, r3
 8015154:	f3bf 8f6f 	isb	sy
 8015158:	f3bf 8f4f 	dsb	sy
 801515c:	60fb      	str	r3, [r7, #12]
}
 801515e:	bf00      	nop
 8015160:	bf00      	nop
 8015162:	e7fd      	b.n	8015160 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015164:	4b07      	ldr	r3, [pc, #28]	@ (8015184 <vTaskPlaceOnEventList+0x48>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	3318      	adds	r3, #24
 801516a:	4619      	mov	r1, r3
 801516c:	6878      	ldr	r0, [r7, #4]
 801516e:	f7fe ff44 	bl	8013ffa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015172:	2101      	movs	r1, #1
 8015174:	6838      	ldr	r0, [r7, #0]
 8015176:	f000 fb87 	bl	8015888 <prvAddCurrentTaskToDelayedList>
}
 801517a:	bf00      	nop
 801517c:	3710      	adds	r7, #16
 801517e:	46bd      	mov	sp, r7
 8015180:	bd80      	pop	{r7, pc}
 8015182:	bf00      	nop
 8015184:	24002a74 	.word	0x24002a74

08015188 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b086      	sub	sp, #24
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	68db      	ldr	r3, [r3, #12]
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d10b      	bne.n	80151b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151a2:	f383 8811 	msr	BASEPRI, r3
 80151a6:	f3bf 8f6f 	isb	sy
 80151aa:	f3bf 8f4f 	dsb	sy
 80151ae:	60fb      	str	r3, [r7, #12]
}
 80151b0:	bf00      	nop
 80151b2:	bf00      	nop
 80151b4:	e7fd      	b.n	80151b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	3318      	adds	r3, #24
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7fe ff56 	bl	801406c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80151c0:	4b1d      	ldr	r3, [pc, #116]	@ (8015238 <xTaskRemoveFromEventList+0xb0>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d11c      	bne.n	8015202 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	3304      	adds	r3, #4
 80151cc:	4618      	mov	r0, r3
 80151ce:	f7fe ff4d 	bl	801406c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80151d2:	693b      	ldr	r3, [r7, #16]
 80151d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151d6:	2201      	movs	r2, #1
 80151d8:	409a      	lsls	r2, r3
 80151da:	4b18      	ldr	r3, [pc, #96]	@ (801523c <xTaskRemoveFromEventList+0xb4>)
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	4313      	orrs	r3, r2
 80151e0:	4a16      	ldr	r2, [pc, #88]	@ (801523c <xTaskRemoveFromEventList+0xb4>)
 80151e2:	6013      	str	r3, [r2, #0]
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151e8:	4613      	mov	r3, r2
 80151ea:	009b      	lsls	r3, r3, #2
 80151ec:	4413      	add	r3, r2
 80151ee:	009b      	lsls	r3, r3, #2
 80151f0:	4a13      	ldr	r2, [pc, #76]	@ (8015240 <xTaskRemoveFromEventList+0xb8>)
 80151f2:	441a      	add	r2, r3
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	3304      	adds	r3, #4
 80151f8:	4619      	mov	r1, r3
 80151fa:	4610      	mov	r0, r2
 80151fc:	f7fe fed9 	bl	8013fb2 <vListInsertEnd>
 8015200:	e005      	b.n	801520e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	3318      	adds	r3, #24
 8015206:	4619      	mov	r1, r3
 8015208:	480e      	ldr	r0, [pc, #56]	@ (8015244 <xTaskRemoveFromEventList+0xbc>)
 801520a:	f7fe fed2 	bl	8013fb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015212:	4b0d      	ldr	r3, [pc, #52]	@ (8015248 <xTaskRemoveFromEventList+0xc0>)
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015218:	429a      	cmp	r2, r3
 801521a:	d905      	bls.n	8015228 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801521c:	2301      	movs	r3, #1
 801521e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015220:	4b0a      	ldr	r3, [pc, #40]	@ (801524c <xTaskRemoveFromEventList+0xc4>)
 8015222:	2201      	movs	r2, #1
 8015224:	601a      	str	r2, [r3, #0]
 8015226:	e001      	b.n	801522c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015228:	2300      	movs	r3, #0
 801522a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801522c:	697b      	ldr	r3, [r7, #20]
}
 801522e:	4618      	mov	r0, r3
 8015230:	3718      	adds	r7, #24
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}
 8015236:	bf00      	nop
 8015238:	24002b9c 	.word	0x24002b9c
 801523c:	24002b7c 	.word	0x24002b7c
 8015240:	24002a78 	.word	0x24002a78
 8015244:	24002b34 	.word	0x24002b34
 8015248:	24002a74 	.word	0x24002a74
 801524c:	24002b88 	.word	0x24002b88

08015250 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015250:	b480      	push	{r7}
 8015252:	b083      	sub	sp, #12
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015258:	4b06      	ldr	r3, [pc, #24]	@ (8015274 <vTaskInternalSetTimeOutState+0x24>)
 801525a:	681a      	ldr	r2, [r3, #0]
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015260:	4b05      	ldr	r3, [pc, #20]	@ (8015278 <vTaskInternalSetTimeOutState+0x28>)
 8015262:	681a      	ldr	r2, [r3, #0]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	605a      	str	r2, [r3, #4]
}
 8015268:	bf00      	nop
 801526a:	370c      	adds	r7, #12
 801526c:	46bd      	mov	sp, r7
 801526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015272:	4770      	bx	lr
 8015274:	24002b8c 	.word	0x24002b8c
 8015278:	24002b78 	.word	0x24002b78

0801527c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b088      	sub	sp, #32
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
 8015284:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d10b      	bne.n	80152a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801528c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015290:	f383 8811 	msr	BASEPRI, r3
 8015294:	f3bf 8f6f 	isb	sy
 8015298:	f3bf 8f4f 	dsb	sy
 801529c:	613b      	str	r3, [r7, #16]
}
 801529e:	bf00      	nop
 80152a0:	bf00      	nop
 80152a2:	e7fd      	b.n	80152a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80152a4:	683b      	ldr	r3, [r7, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d10b      	bne.n	80152c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80152aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ae:	f383 8811 	msr	BASEPRI, r3
 80152b2:	f3bf 8f6f 	isb	sy
 80152b6:	f3bf 8f4f 	dsb	sy
 80152ba:	60fb      	str	r3, [r7, #12]
}
 80152bc:	bf00      	nop
 80152be:	bf00      	nop
 80152c0:	e7fd      	b.n	80152be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80152c2:	f000 fc79 	bl	8015bb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80152c6:	4b1d      	ldr	r3, [pc, #116]	@ (801533c <xTaskCheckForTimeOut+0xc0>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	685b      	ldr	r3, [r3, #4]
 80152d0:	69ba      	ldr	r2, [r7, #24]
 80152d2:	1ad3      	subs	r3, r2, r3
 80152d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152de:	d102      	bne.n	80152e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80152e0:	2300      	movs	r3, #0
 80152e2:	61fb      	str	r3, [r7, #28]
 80152e4:	e023      	b.n	801532e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	4b15      	ldr	r3, [pc, #84]	@ (8015340 <xTaskCheckForTimeOut+0xc4>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d007      	beq.n	8015302 <xTaskCheckForTimeOut+0x86>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	685b      	ldr	r3, [r3, #4]
 80152f6:	69ba      	ldr	r2, [r7, #24]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d302      	bcc.n	8015302 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80152fc:	2301      	movs	r3, #1
 80152fe:	61fb      	str	r3, [r7, #28]
 8015300:	e015      	b.n	801532e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	697a      	ldr	r2, [r7, #20]
 8015308:	429a      	cmp	r2, r3
 801530a:	d20b      	bcs.n	8015324 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	681a      	ldr	r2, [r3, #0]
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	1ad2      	subs	r2, r2, r3
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f7ff ff99 	bl	8015250 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801531e:	2300      	movs	r3, #0
 8015320:	61fb      	str	r3, [r7, #28]
 8015322:	e004      	b.n	801532e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	2200      	movs	r2, #0
 8015328:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801532a:	2301      	movs	r3, #1
 801532c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801532e:	f000 fc75 	bl	8015c1c <vPortExitCritical>

	return xReturn;
 8015332:	69fb      	ldr	r3, [r7, #28]
}
 8015334:	4618      	mov	r0, r3
 8015336:	3720      	adds	r7, #32
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}
 801533c:	24002b78 	.word	0x24002b78
 8015340:	24002b8c 	.word	0x24002b8c

08015344 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015344:	b480      	push	{r7}
 8015346:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015348:	4b03      	ldr	r3, [pc, #12]	@ (8015358 <vTaskMissedYield+0x14>)
 801534a:	2201      	movs	r2, #1
 801534c:	601a      	str	r2, [r3, #0]
}
 801534e:	bf00      	nop
 8015350:	46bd      	mov	sp, r7
 8015352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015356:	4770      	bx	lr
 8015358:	24002b88 	.word	0x24002b88

0801535c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015364:	f000 f852 	bl	801540c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015368:	4b06      	ldr	r3, [pc, #24]	@ (8015384 <prvIdleTask+0x28>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	2b01      	cmp	r3, #1
 801536e:	d9f9      	bls.n	8015364 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015370:	4b05      	ldr	r3, [pc, #20]	@ (8015388 <prvIdleTask+0x2c>)
 8015372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015376:	601a      	str	r2, [r3, #0]
 8015378:	f3bf 8f4f 	dsb	sy
 801537c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015380:	e7f0      	b.n	8015364 <prvIdleTask+0x8>
 8015382:	bf00      	nop
 8015384:	24002a78 	.word	0x24002a78
 8015388:	e000ed04 	.word	0xe000ed04

0801538c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015392:	2300      	movs	r3, #0
 8015394:	607b      	str	r3, [r7, #4]
 8015396:	e00c      	b.n	80153b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015398:	687a      	ldr	r2, [r7, #4]
 801539a:	4613      	mov	r3, r2
 801539c:	009b      	lsls	r3, r3, #2
 801539e:	4413      	add	r3, r2
 80153a0:	009b      	lsls	r3, r3, #2
 80153a2:	4a12      	ldr	r2, [pc, #72]	@ (80153ec <prvInitialiseTaskLists+0x60>)
 80153a4:	4413      	add	r3, r2
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7fe fdd6 	bl	8013f58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	3301      	adds	r3, #1
 80153b0:	607b      	str	r3, [r7, #4]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2b06      	cmp	r3, #6
 80153b6:	d9ef      	bls.n	8015398 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80153b8:	480d      	ldr	r0, [pc, #52]	@ (80153f0 <prvInitialiseTaskLists+0x64>)
 80153ba:	f7fe fdcd 	bl	8013f58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80153be:	480d      	ldr	r0, [pc, #52]	@ (80153f4 <prvInitialiseTaskLists+0x68>)
 80153c0:	f7fe fdca 	bl	8013f58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80153c4:	480c      	ldr	r0, [pc, #48]	@ (80153f8 <prvInitialiseTaskLists+0x6c>)
 80153c6:	f7fe fdc7 	bl	8013f58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80153ca:	480c      	ldr	r0, [pc, #48]	@ (80153fc <prvInitialiseTaskLists+0x70>)
 80153cc:	f7fe fdc4 	bl	8013f58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80153d0:	480b      	ldr	r0, [pc, #44]	@ (8015400 <prvInitialiseTaskLists+0x74>)
 80153d2:	f7fe fdc1 	bl	8013f58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80153d6:	4b0b      	ldr	r3, [pc, #44]	@ (8015404 <prvInitialiseTaskLists+0x78>)
 80153d8:	4a05      	ldr	r2, [pc, #20]	@ (80153f0 <prvInitialiseTaskLists+0x64>)
 80153da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80153dc:	4b0a      	ldr	r3, [pc, #40]	@ (8015408 <prvInitialiseTaskLists+0x7c>)
 80153de:	4a05      	ldr	r2, [pc, #20]	@ (80153f4 <prvInitialiseTaskLists+0x68>)
 80153e0:	601a      	str	r2, [r3, #0]
}
 80153e2:	bf00      	nop
 80153e4:	3708      	adds	r7, #8
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	24002a78 	.word	0x24002a78
 80153f0:	24002b04 	.word	0x24002b04
 80153f4:	24002b18 	.word	0x24002b18
 80153f8:	24002b34 	.word	0x24002b34
 80153fc:	24002b48 	.word	0x24002b48
 8015400:	24002b60 	.word	0x24002b60
 8015404:	24002b2c 	.word	0x24002b2c
 8015408:	24002b30 	.word	0x24002b30

0801540c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015412:	e019      	b.n	8015448 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015414:	f000 fbd0 	bl	8015bb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015418:	4b10      	ldr	r3, [pc, #64]	@ (801545c <prvCheckTasksWaitingTermination+0x50>)
 801541a:	68db      	ldr	r3, [r3, #12]
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	3304      	adds	r3, #4
 8015424:	4618      	mov	r0, r3
 8015426:	f7fe fe21 	bl	801406c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801542a:	4b0d      	ldr	r3, [pc, #52]	@ (8015460 <prvCheckTasksWaitingTermination+0x54>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	3b01      	subs	r3, #1
 8015430:	4a0b      	ldr	r2, [pc, #44]	@ (8015460 <prvCheckTasksWaitingTermination+0x54>)
 8015432:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015434:	4b0b      	ldr	r3, [pc, #44]	@ (8015464 <prvCheckTasksWaitingTermination+0x58>)
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	3b01      	subs	r3, #1
 801543a:	4a0a      	ldr	r2, [pc, #40]	@ (8015464 <prvCheckTasksWaitingTermination+0x58>)
 801543c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801543e:	f000 fbed 	bl	8015c1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f000 f810 	bl	8015468 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015448:	4b06      	ldr	r3, [pc, #24]	@ (8015464 <prvCheckTasksWaitingTermination+0x58>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d1e1      	bne.n	8015414 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015450:	bf00      	nop
 8015452:	bf00      	nop
 8015454:	3708      	adds	r7, #8
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	24002b48 	.word	0x24002b48
 8015460:	24002b74 	.word	0x24002b74
 8015464:	24002b5c 	.word	0x24002b5c

08015468 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8015476:	2b00      	cmp	r3, #0
 8015478:	d108      	bne.n	801548c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801547e:	4618      	mov	r0, r3
 8015480:	f000 fd8a 	bl	8015f98 <vPortFree>
				vPortFree( pxTCB );
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f000 fd87 	bl	8015f98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801548a:	e019      	b.n	80154c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8015492:	2b01      	cmp	r3, #1
 8015494:	d103      	bne.n	801549e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	f000 fd7e 	bl	8015f98 <vPortFree>
	}
 801549c:	e010      	b.n	80154c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80154a4:	2b02      	cmp	r3, #2
 80154a6:	d00b      	beq.n	80154c0 <prvDeleteTCB+0x58>
	__asm volatile
 80154a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154ac:	f383 8811 	msr	BASEPRI, r3
 80154b0:	f3bf 8f6f 	isb	sy
 80154b4:	f3bf 8f4f 	dsb	sy
 80154b8:	60fb      	str	r3, [r7, #12]
}
 80154ba:	bf00      	nop
 80154bc:	bf00      	nop
 80154be:	e7fd      	b.n	80154bc <prvDeleteTCB+0x54>
	}
 80154c0:	bf00      	nop
 80154c2:	3710      	adds	r7, #16
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}

080154c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80154c8:	b480      	push	{r7}
 80154ca:	b083      	sub	sp, #12
 80154cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80154ce:	4b0c      	ldr	r3, [pc, #48]	@ (8015500 <prvResetNextTaskUnblockTime+0x38>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d104      	bne.n	80154e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80154d8:	4b0a      	ldr	r3, [pc, #40]	@ (8015504 <prvResetNextTaskUnblockTime+0x3c>)
 80154da:	f04f 32ff 	mov.w	r2, #4294967295
 80154de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80154e0:	e008      	b.n	80154f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154e2:	4b07      	ldr	r3, [pc, #28]	@ (8015500 <prvResetNextTaskUnblockTime+0x38>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	68db      	ldr	r3, [r3, #12]
 80154e8:	68db      	ldr	r3, [r3, #12]
 80154ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	4a04      	ldr	r2, [pc, #16]	@ (8015504 <prvResetNextTaskUnblockTime+0x3c>)
 80154f2:	6013      	str	r3, [r2, #0]
}
 80154f4:	bf00      	nop
 80154f6:	370c      	adds	r7, #12
 80154f8:	46bd      	mov	sp, r7
 80154fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fe:	4770      	bx	lr
 8015500:	24002b2c 	.word	0x24002b2c
 8015504:	24002b94 	.word	0x24002b94

08015508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015508:	b480      	push	{r7}
 801550a:	b083      	sub	sp, #12
 801550c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801550e:	4b0b      	ldr	r3, [pc, #44]	@ (801553c <xTaskGetSchedulerState+0x34>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d102      	bne.n	801551c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015516:	2301      	movs	r3, #1
 8015518:	607b      	str	r3, [r7, #4]
 801551a:	e008      	b.n	801552e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801551c:	4b08      	ldr	r3, [pc, #32]	@ (8015540 <xTaskGetSchedulerState+0x38>)
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d102      	bne.n	801552a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015524:	2302      	movs	r3, #2
 8015526:	607b      	str	r3, [r7, #4]
 8015528:	e001      	b.n	801552e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801552a:	2300      	movs	r3, #0
 801552c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801552e:	687b      	ldr	r3, [r7, #4]
	}
 8015530:	4618      	mov	r0, r3
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr
 801553c:	24002b80 	.word	0x24002b80
 8015540:	24002b9c 	.word	0x24002b9c

08015544 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015544:	b580      	push	{r7, lr}
 8015546:	b084      	sub	sp, #16
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015550:	2300      	movs	r3, #0
 8015552:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d05e      	beq.n	8015618 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801555e:	4b31      	ldr	r3, [pc, #196]	@ (8015624 <xTaskPriorityInherit+0xe0>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015564:	429a      	cmp	r2, r3
 8015566:	d24e      	bcs.n	8015606 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	699b      	ldr	r3, [r3, #24]
 801556c:	2b00      	cmp	r3, #0
 801556e:	db06      	blt.n	801557e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015570:	4b2c      	ldr	r3, [pc, #176]	@ (8015624 <xTaskPriorityInherit+0xe0>)
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015576:	f1c3 0207 	rsb	r2, r3, #7
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	6959      	ldr	r1, [r3, #20]
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015586:	4613      	mov	r3, r2
 8015588:	009b      	lsls	r3, r3, #2
 801558a:	4413      	add	r3, r2
 801558c:	009b      	lsls	r3, r3, #2
 801558e:	4a26      	ldr	r2, [pc, #152]	@ (8015628 <xTaskPriorityInherit+0xe4>)
 8015590:	4413      	add	r3, r2
 8015592:	4299      	cmp	r1, r3
 8015594:	d12f      	bne.n	80155f6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	3304      	adds	r3, #4
 801559a:	4618      	mov	r0, r3
 801559c:	f7fe fd66 	bl	801406c <uxListRemove>
 80155a0:	4603      	mov	r3, r0
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d10a      	bne.n	80155bc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155aa:	2201      	movs	r2, #1
 80155ac:	fa02 f303 	lsl.w	r3, r2, r3
 80155b0:	43da      	mvns	r2, r3
 80155b2:	4b1e      	ldr	r3, [pc, #120]	@ (801562c <xTaskPriorityInherit+0xe8>)
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	4013      	ands	r3, r2
 80155b8:	4a1c      	ldr	r2, [pc, #112]	@ (801562c <xTaskPriorityInherit+0xe8>)
 80155ba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80155bc:	4b19      	ldr	r3, [pc, #100]	@ (8015624 <xTaskPriorityInherit+0xe0>)
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155ca:	2201      	movs	r2, #1
 80155cc:	409a      	lsls	r2, r3
 80155ce:	4b17      	ldr	r3, [pc, #92]	@ (801562c <xTaskPriorityInherit+0xe8>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	4313      	orrs	r3, r2
 80155d4:	4a15      	ldr	r2, [pc, #84]	@ (801562c <xTaskPriorityInherit+0xe8>)
 80155d6:	6013      	str	r3, [r2, #0]
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155dc:	4613      	mov	r3, r2
 80155de:	009b      	lsls	r3, r3, #2
 80155e0:	4413      	add	r3, r2
 80155e2:	009b      	lsls	r3, r3, #2
 80155e4:	4a10      	ldr	r2, [pc, #64]	@ (8015628 <xTaskPriorityInherit+0xe4>)
 80155e6:	441a      	add	r2, r3
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	3304      	adds	r3, #4
 80155ec:	4619      	mov	r1, r3
 80155ee:	4610      	mov	r0, r2
 80155f0:	f7fe fcdf 	bl	8013fb2 <vListInsertEnd>
 80155f4:	e004      	b.n	8015600 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80155f6:	4b0b      	ldr	r3, [pc, #44]	@ (8015624 <xTaskPriorityInherit+0xe0>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015600:	2301      	movs	r3, #1
 8015602:	60fb      	str	r3, [r7, #12]
 8015604:	e008      	b.n	8015618 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801560a:	4b06      	ldr	r3, [pc, #24]	@ (8015624 <xTaskPriorityInherit+0xe0>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015610:	429a      	cmp	r2, r3
 8015612:	d201      	bcs.n	8015618 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015614:	2301      	movs	r3, #1
 8015616:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015618:	68fb      	ldr	r3, [r7, #12]
	}
 801561a:	4618      	mov	r0, r3
 801561c:	3710      	adds	r7, #16
 801561e:	46bd      	mov	sp, r7
 8015620:	bd80      	pop	{r7, pc}
 8015622:	bf00      	nop
 8015624:	24002a74 	.word	0x24002a74
 8015628:	24002a78 	.word	0x24002a78
 801562c:	24002b7c 	.word	0x24002b7c

08015630 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015630:	b580      	push	{r7, lr}
 8015632:	b086      	sub	sp, #24
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801563c:	2300      	movs	r3, #0
 801563e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d070      	beq.n	8015728 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015646:	4b3b      	ldr	r3, [pc, #236]	@ (8015734 <xTaskPriorityDisinherit+0x104>)
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	693a      	ldr	r2, [r7, #16]
 801564c:	429a      	cmp	r2, r3
 801564e:	d00b      	beq.n	8015668 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8015650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015654:	f383 8811 	msr	BASEPRI, r3
 8015658:	f3bf 8f6f 	isb	sy
 801565c:	f3bf 8f4f 	dsb	sy
 8015660:	60fb      	str	r3, [r7, #12]
}
 8015662:	bf00      	nop
 8015664:	bf00      	nop
 8015666:	e7fd      	b.n	8015664 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801566c:	2b00      	cmp	r3, #0
 801566e:	d10b      	bne.n	8015688 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8015670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015674:	f383 8811 	msr	BASEPRI, r3
 8015678:	f3bf 8f6f 	isb	sy
 801567c:	f3bf 8f4f 	dsb	sy
 8015680:	60bb      	str	r3, [r7, #8]
}
 8015682:	bf00      	nop
 8015684:	bf00      	nop
 8015686:	e7fd      	b.n	8015684 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801568c:	1e5a      	subs	r2, r3, #1
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015692:	693b      	ldr	r3, [r7, #16]
 8015694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015696:	693b      	ldr	r3, [r7, #16]
 8015698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801569a:	429a      	cmp	r2, r3
 801569c:	d044      	beq.n	8015728 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801569e:	693b      	ldr	r3, [r7, #16]
 80156a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d140      	bne.n	8015728 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	3304      	adds	r3, #4
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7fe fcde 	bl	801406c <uxListRemove>
 80156b0:	4603      	mov	r3, r0
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d115      	bne.n	80156e2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80156b6:	693b      	ldr	r3, [r7, #16]
 80156b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80156ba:	491f      	ldr	r1, [pc, #124]	@ (8015738 <xTaskPriorityDisinherit+0x108>)
 80156bc:	4613      	mov	r3, r2
 80156be:	009b      	lsls	r3, r3, #2
 80156c0:	4413      	add	r3, r2
 80156c2:	009b      	lsls	r3, r3, #2
 80156c4:	440b      	add	r3, r1
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d10a      	bne.n	80156e2 <xTaskPriorityDisinherit+0xb2>
 80156cc:	693b      	ldr	r3, [r7, #16]
 80156ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156d0:	2201      	movs	r2, #1
 80156d2:	fa02 f303 	lsl.w	r3, r2, r3
 80156d6:	43da      	mvns	r2, r3
 80156d8:	4b18      	ldr	r3, [pc, #96]	@ (801573c <xTaskPriorityDisinherit+0x10c>)
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	4013      	ands	r3, r2
 80156de:	4a17      	ldr	r2, [pc, #92]	@ (801573c <xTaskPriorityDisinherit+0x10c>)
 80156e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80156e6:	693b      	ldr	r3, [r7, #16]
 80156e8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156ee:	f1c3 0207 	rsb	r2, r3, #7
 80156f2:	693b      	ldr	r3, [r7, #16]
 80156f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156fa:	2201      	movs	r2, #1
 80156fc:	409a      	lsls	r2, r3
 80156fe:	4b0f      	ldr	r3, [pc, #60]	@ (801573c <xTaskPriorityDisinherit+0x10c>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	4313      	orrs	r3, r2
 8015704:	4a0d      	ldr	r2, [pc, #52]	@ (801573c <xTaskPriorityDisinherit+0x10c>)
 8015706:	6013      	str	r3, [r2, #0]
 8015708:	693b      	ldr	r3, [r7, #16]
 801570a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801570c:	4613      	mov	r3, r2
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	4413      	add	r3, r2
 8015712:	009b      	lsls	r3, r3, #2
 8015714:	4a08      	ldr	r2, [pc, #32]	@ (8015738 <xTaskPriorityDisinherit+0x108>)
 8015716:	441a      	add	r2, r3
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	3304      	adds	r3, #4
 801571c:	4619      	mov	r1, r3
 801571e:	4610      	mov	r0, r2
 8015720:	f7fe fc47 	bl	8013fb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015724:	2301      	movs	r3, #1
 8015726:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015728:	697b      	ldr	r3, [r7, #20]
	}
 801572a:	4618      	mov	r0, r3
 801572c:	3718      	adds	r7, #24
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	24002a74 	.word	0x24002a74
 8015738:	24002a78 	.word	0x24002a78
 801573c:	24002b7c 	.word	0x24002b7c

08015740 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015740:	b580      	push	{r7, lr}
 8015742:	b088      	sub	sp, #32
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
 8015748:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801574e:	2301      	movs	r3, #1
 8015750:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d079      	beq.n	801584c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015758:	69bb      	ldr	r3, [r7, #24]
 801575a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801575c:	2b00      	cmp	r3, #0
 801575e:	d10b      	bne.n	8015778 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015764:	f383 8811 	msr	BASEPRI, r3
 8015768:	f3bf 8f6f 	isb	sy
 801576c:	f3bf 8f4f 	dsb	sy
 8015770:	60fb      	str	r3, [r7, #12]
}
 8015772:	bf00      	nop
 8015774:	bf00      	nop
 8015776:	e7fd      	b.n	8015774 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015778:	69bb      	ldr	r3, [r7, #24]
 801577a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801577c:	683a      	ldr	r2, [r7, #0]
 801577e:	429a      	cmp	r2, r3
 8015780:	d902      	bls.n	8015788 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	61fb      	str	r3, [r7, #28]
 8015786:	e002      	b.n	801578e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015788:	69bb      	ldr	r3, [r7, #24]
 801578a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801578c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801578e:	69bb      	ldr	r3, [r7, #24]
 8015790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015792:	69fa      	ldr	r2, [r7, #28]
 8015794:	429a      	cmp	r2, r3
 8015796:	d059      	beq.n	801584c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015798:	69bb      	ldr	r3, [r7, #24]
 801579a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801579c:	697a      	ldr	r2, [r7, #20]
 801579e:	429a      	cmp	r2, r3
 80157a0:	d154      	bne.n	801584c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80157a2:	4b2c      	ldr	r3, [pc, #176]	@ (8015854 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	69ba      	ldr	r2, [r7, #24]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d10b      	bne.n	80157c4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80157ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157b0:	f383 8811 	msr	BASEPRI, r3
 80157b4:	f3bf 8f6f 	isb	sy
 80157b8:	f3bf 8f4f 	dsb	sy
 80157bc:	60bb      	str	r3, [r7, #8]
}
 80157be:	bf00      	nop
 80157c0:	bf00      	nop
 80157c2:	e7fd      	b.n	80157c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80157c4:	69bb      	ldr	r3, [r7, #24]
 80157c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80157c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	69fa      	ldr	r2, [r7, #28]
 80157ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80157d0:	69bb      	ldr	r3, [r7, #24]
 80157d2:	699b      	ldr	r3, [r3, #24]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	db04      	blt.n	80157e2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157d8:	69fb      	ldr	r3, [r7, #28]
 80157da:	f1c3 0207 	rsb	r2, r3, #7
 80157de:	69bb      	ldr	r3, [r7, #24]
 80157e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80157e2:	69bb      	ldr	r3, [r7, #24]
 80157e4:	6959      	ldr	r1, [r3, #20]
 80157e6:	693a      	ldr	r2, [r7, #16]
 80157e8:	4613      	mov	r3, r2
 80157ea:	009b      	lsls	r3, r3, #2
 80157ec:	4413      	add	r3, r2
 80157ee:	009b      	lsls	r3, r3, #2
 80157f0:	4a19      	ldr	r2, [pc, #100]	@ (8015858 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80157f2:	4413      	add	r3, r2
 80157f4:	4299      	cmp	r1, r3
 80157f6:	d129      	bne.n	801584c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80157f8:	69bb      	ldr	r3, [r7, #24]
 80157fa:	3304      	adds	r3, #4
 80157fc:	4618      	mov	r0, r3
 80157fe:	f7fe fc35 	bl	801406c <uxListRemove>
 8015802:	4603      	mov	r3, r0
 8015804:	2b00      	cmp	r3, #0
 8015806:	d10a      	bne.n	801581e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8015808:	69bb      	ldr	r3, [r7, #24]
 801580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801580c:	2201      	movs	r2, #1
 801580e:	fa02 f303 	lsl.w	r3, r2, r3
 8015812:	43da      	mvns	r2, r3
 8015814:	4b11      	ldr	r3, [pc, #68]	@ (801585c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	4013      	ands	r3, r2
 801581a:	4a10      	ldr	r2, [pc, #64]	@ (801585c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801581c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801581e:	69bb      	ldr	r3, [r7, #24]
 8015820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015822:	2201      	movs	r2, #1
 8015824:	409a      	lsls	r2, r3
 8015826:	4b0d      	ldr	r3, [pc, #52]	@ (801585c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	4313      	orrs	r3, r2
 801582c:	4a0b      	ldr	r2, [pc, #44]	@ (801585c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 801582e:	6013      	str	r3, [r2, #0]
 8015830:	69bb      	ldr	r3, [r7, #24]
 8015832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015834:	4613      	mov	r3, r2
 8015836:	009b      	lsls	r3, r3, #2
 8015838:	4413      	add	r3, r2
 801583a:	009b      	lsls	r3, r3, #2
 801583c:	4a06      	ldr	r2, [pc, #24]	@ (8015858 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801583e:	441a      	add	r2, r3
 8015840:	69bb      	ldr	r3, [r7, #24]
 8015842:	3304      	adds	r3, #4
 8015844:	4619      	mov	r1, r3
 8015846:	4610      	mov	r0, r2
 8015848:	f7fe fbb3 	bl	8013fb2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801584c:	bf00      	nop
 801584e:	3720      	adds	r7, #32
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}
 8015854:	24002a74 	.word	0x24002a74
 8015858:	24002a78 	.word	0x24002a78
 801585c:	24002b7c 	.word	0x24002b7c

08015860 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015860:	b480      	push	{r7}
 8015862:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015864:	4b07      	ldr	r3, [pc, #28]	@ (8015884 <pvTaskIncrementMutexHeldCount+0x24>)
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d004      	beq.n	8015876 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801586c:	4b05      	ldr	r3, [pc, #20]	@ (8015884 <pvTaskIncrementMutexHeldCount+0x24>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015872:	3201      	adds	r2, #1
 8015874:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8015876:	4b03      	ldr	r3, [pc, #12]	@ (8015884 <pvTaskIncrementMutexHeldCount+0x24>)
 8015878:	681b      	ldr	r3, [r3, #0]
	}
 801587a:	4618      	mov	r0, r3
 801587c:	46bd      	mov	sp, r7
 801587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015882:	4770      	bx	lr
 8015884:	24002a74 	.word	0x24002a74

08015888 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b084      	sub	sp, #16
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
 8015890:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015892:	4b29      	ldr	r3, [pc, #164]	@ (8015938 <prvAddCurrentTaskToDelayedList+0xb0>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015898:	4b28      	ldr	r3, [pc, #160]	@ (801593c <prvAddCurrentTaskToDelayedList+0xb4>)
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	3304      	adds	r3, #4
 801589e:	4618      	mov	r0, r3
 80158a0:	f7fe fbe4 	bl	801406c <uxListRemove>
 80158a4:	4603      	mov	r3, r0
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d10b      	bne.n	80158c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80158aa:	4b24      	ldr	r3, [pc, #144]	@ (801593c <prvAddCurrentTaskToDelayedList+0xb4>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158b0:	2201      	movs	r2, #1
 80158b2:	fa02 f303 	lsl.w	r3, r2, r3
 80158b6:	43da      	mvns	r2, r3
 80158b8:	4b21      	ldr	r3, [pc, #132]	@ (8015940 <prvAddCurrentTaskToDelayedList+0xb8>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	4013      	ands	r3, r2
 80158be:	4a20      	ldr	r2, [pc, #128]	@ (8015940 <prvAddCurrentTaskToDelayedList+0xb8>)
 80158c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158c8:	d10a      	bne.n	80158e0 <prvAddCurrentTaskToDelayedList+0x58>
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d007      	beq.n	80158e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80158d0:	4b1a      	ldr	r3, [pc, #104]	@ (801593c <prvAddCurrentTaskToDelayedList+0xb4>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	3304      	adds	r3, #4
 80158d6:	4619      	mov	r1, r3
 80158d8:	481a      	ldr	r0, [pc, #104]	@ (8015944 <prvAddCurrentTaskToDelayedList+0xbc>)
 80158da:	f7fe fb6a 	bl	8013fb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80158de:	e026      	b.n	801592e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80158e0:	68fa      	ldr	r2, [r7, #12]
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	4413      	add	r3, r2
 80158e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80158e8:	4b14      	ldr	r3, [pc, #80]	@ (801593c <prvAddCurrentTaskToDelayedList+0xb4>)
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	68ba      	ldr	r2, [r7, #8]
 80158ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80158f0:	68ba      	ldr	r2, [r7, #8]
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d209      	bcs.n	801590c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80158f8:	4b13      	ldr	r3, [pc, #76]	@ (8015948 <prvAddCurrentTaskToDelayedList+0xc0>)
 80158fa:	681a      	ldr	r2, [r3, #0]
 80158fc:	4b0f      	ldr	r3, [pc, #60]	@ (801593c <prvAddCurrentTaskToDelayedList+0xb4>)
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	3304      	adds	r3, #4
 8015902:	4619      	mov	r1, r3
 8015904:	4610      	mov	r0, r2
 8015906:	f7fe fb78 	bl	8013ffa <vListInsert>
}
 801590a:	e010      	b.n	801592e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801590c:	4b0f      	ldr	r3, [pc, #60]	@ (801594c <prvAddCurrentTaskToDelayedList+0xc4>)
 801590e:	681a      	ldr	r2, [r3, #0]
 8015910:	4b0a      	ldr	r3, [pc, #40]	@ (801593c <prvAddCurrentTaskToDelayedList+0xb4>)
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	3304      	adds	r3, #4
 8015916:	4619      	mov	r1, r3
 8015918:	4610      	mov	r0, r2
 801591a:	f7fe fb6e 	bl	8013ffa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801591e:	4b0c      	ldr	r3, [pc, #48]	@ (8015950 <prvAddCurrentTaskToDelayedList+0xc8>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	68ba      	ldr	r2, [r7, #8]
 8015924:	429a      	cmp	r2, r3
 8015926:	d202      	bcs.n	801592e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8015928:	4a09      	ldr	r2, [pc, #36]	@ (8015950 <prvAddCurrentTaskToDelayedList+0xc8>)
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	6013      	str	r3, [r2, #0]
}
 801592e:	bf00      	nop
 8015930:	3710      	adds	r7, #16
 8015932:	46bd      	mov	sp, r7
 8015934:	bd80      	pop	{r7, pc}
 8015936:	bf00      	nop
 8015938:	24002b78 	.word	0x24002b78
 801593c:	24002a74 	.word	0x24002a74
 8015940:	24002b7c 	.word	0x24002b7c
 8015944:	24002b60 	.word	0x24002b60
 8015948:	24002b30 	.word	0x24002b30
 801594c:	24002b2c 	.word	0x24002b2c
 8015950:	24002b94 	.word	0x24002b94

08015954 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015954:	b480      	push	{r7}
 8015956:	b085      	sub	sp, #20
 8015958:	af00      	add	r7, sp, #0
 801595a:	60f8      	str	r0, [r7, #12]
 801595c:	60b9      	str	r1, [r7, #8]
 801595e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	3b04      	subs	r3, #4
 8015964:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801596c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	3b04      	subs	r3, #4
 8015972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	f023 0201 	bic.w	r2, r3, #1
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	3b04      	subs	r3, #4
 8015982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015984:	4a0c      	ldr	r2, [pc, #48]	@ (80159b8 <pxPortInitialiseStack+0x64>)
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	3b14      	subs	r3, #20
 801598e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015990:	687a      	ldr	r2, [r7, #4]
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	3b04      	subs	r3, #4
 801599a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	f06f 0202 	mvn.w	r2, #2
 80159a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	3b20      	subs	r3, #32
 80159a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80159aa:	68fb      	ldr	r3, [r7, #12]
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3714      	adds	r7, #20
 80159b0:	46bd      	mov	sp, r7
 80159b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b6:	4770      	bx	lr
 80159b8:	080159bd 	.word	0x080159bd

080159bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80159bc:	b480      	push	{r7}
 80159be:	b085      	sub	sp, #20
 80159c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80159c2:	2300      	movs	r3, #0
 80159c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80159c6:	4b13      	ldr	r3, [pc, #76]	@ (8015a14 <prvTaskExitError+0x58>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159ce:	d00b      	beq.n	80159e8 <prvTaskExitError+0x2c>
	__asm volatile
 80159d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159d4:	f383 8811 	msr	BASEPRI, r3
 80159d8:	f3bf 8f6f 	isb	sy
 80159dc:	f3bf 8f4f 	dsb	sy
 80159e0:	60fb      	str	r3, [r7, #12]
}
 80159e2:	bf00      	nop
 80159e4:	bf00      	nop
 80159e6:	e7fd      	b.n	80159e4 <prvTaskExitError+0x28>
	__asm volatile
 80159e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159ec:	f383 8811 	msr	BASEPRI, r3
 80159f0:	f3bf 8f6f 	isb	sy
 80159f4:	f3bf 8f4f 	dsb	sy
 80159f8:	60bb      	str	r3, [r7, #8]
}
 80159fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80159fc:	bf00      	nop
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d0fc      	beq.n	80159fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015a04:	bf00      	nop
 8015a06:	bf00      	nop
 8015a08:	3714      	adds	r7, #20
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a10:	4770      	bx	lr
 8015a12:	bf00      	nop
 8015a14:	240000c4 	.word	0x240000c4
	...

08015a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015a20:	4b07      	ldr	r3, [pc, #28]	@ (8015a40 <pxCurrentTCBConst2>)
 8015a22:	6819      	ldr	r1, [r3, #0]
 8015a24:	6808      	ldr	r0, [r1, #0]
 8015a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a2a:	f380 8809 	msr	PSP, r0
 8015a2e:	f3bf 8f6f 	isb	sy
 8015a32:	f04f 0000 	mov.w	r0, #0
 8015a36:	f380 8811 	msr	BASEPRI, r0
 8015a3a:	4770      	bx	lr
 8015a3c:	f3af 8000 	nop.w

08015a40 <pxCurrentTCBConst2>:
 8015a40:	24002a74 	.word	0x24002a74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015a44:	bf00      	nop
 8015a46:	bf00      	nop

08015a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015a48:	4808      	ldr	r0, [pc, #32]	@ (8015a6c <prvPortStartFirstTask+0x24>)
 8015a4a:	6800      	ldr	r0, [r0, #0]
 8015a4c:	6800      	ldr	r0, [r0, #0]
 8015a4e:	f380 8808 	msr	MSP, r0
 8015a52:	f04f 0000 	mov.w	r0, #0
 8015a56:	f380 8814 	msr	CONTROL, r0
 8015a5a:	b662      	cpsie	i
 8015a5c:	b661      	cpsie	f
 8015a5e:	f3bf 8f4f 	dsb	sy
 8015a62:	f3bf 8f6f 	isb	sy
 8015a66:	df00      	svc	0
 8015a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015a6a:	bf00      	nop
 8015a6c:	e000ed08 	.word	0xe000ed08

08015a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b086      	sub	sp, #24
 8015a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015a76:	4b47      	ldr	r3, [pc, #284]	@ (8015b94 <xPortStartScheduler+0x124>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	4a47      	ldr	r2, [pc, #284]	@ (8015b98 <xPortStartScheduler+0x128>)
 8015a7c:	4293      	cmp	r3, r2
 8015a7e:	d10b      	bne.n	8015a98 <xPortStartScheduler+0x28>
	__asm volatile
 8015a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a84:	f383 8811 	msr	BASEPRI, r3
 8015a88:	f3bf 8f6f 	isb	sy
 8015a8c:	f3bf 8f4f 	dsb	sy
 8015a90:	613b      	str	r3, [r7, #16]
}
 8015a92:	bf00      	nop
 8015a94:	bf00      	nop
 8015a96:	e7fd      	b.n	8015a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015a98:	4b3e      	ldr	r3, [pc, #248]	@ (8015b94 <xPortStartScheduler+0x124>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	4a3f      	ldr	r2, [pc, #252]	@ (8015b9c <xPortStartScheduler+0x12c>)
 8015a9e:	4293      	cmp	r3, r2
 8015aa0:	d10b      	bne.n	8015aba <xPortStartScheduler+0x4a>
	__asm volatile
 8015aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015aa6:	f383 8811 	msr	BASEPRI, r3
 8015aaa:	f3bf 8f6f 	isb	sy
 8015aae:	f3bf 8f4f 	dsb	sy
 8015ab2:	60fb      	str	r3, [r7, #12]
}
 8015ab4:	bf00      	nop
 8015ab6:	bf00      	nop
 8015ab8:	e7fd      	b.n	8015ab6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015aba:	4b39      	ldr	r3, [pc, #228]	@ (8015ba0 <xPortStartScheduler+0x130>)
 8015abc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	781b      	ldrb	r3, [r3, #0]
 8015ac2:	b2db      	uxtb	r3, r3
 8015ac4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	22ff      	movs	r2, #255	@ 0xff
 8015aca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	781b      	ldrb	r3, [r3, #0]
 8015ad0:	b2db      	uxtb	r3, r3
 8015ad2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015ad4:	78fb      	ldrb	r3, [r7, #3]
 8015ad6:	b2db      	uxtb	r3, r3
 8015ad8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8015adc:	b2da      	uxtb	r2, r3
 8015ade:	4b31      	ldr	r3, [pc, #196]	@ (8015ba4 <xPortStartScheduler+0x134>)
 8015ae0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015ae2:	4b31      	ldr	r3, [pc, #196]	@ (8015ba8 <xPortStartScheduler+0x138>)
 8015ae4:	2207      	movs	r2, #7
 8015ae6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015ae8:	e009      	b.n	8015afe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8015aea:	4b2f      	ldr	r3, [pc, #188]	@ (8015ba8 <xPortStartScheduler+0x138>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	3b01      	subs	r3, #1
 8015af0:	4a2d      	ldr	r2, [pc, #180]	@ (8015ba8 <xPortStartScheduler+0x138>)
 8015af2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015af4:	78fb      	ldrb	r3, [r7, #3]
 8015af6:	b2db      	uxtb	r3, r3
 8015af8:	005b      	lsls	r3, r3, #1
 8015afa:	b2db      	uxtb	r3, r3
 8015afc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015afe:	78fb      	ldrb	r3, [r7, #3]
 8015b00:	b2db      	uxtb	r3, r3
 8015b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015b06:	2b80      	cmp	r3, #128	@ 0x80
 8015b08:	d0ef      	beq.n	8015aea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015b0a:	4b27      	ldr	r3, [pc, #156]	@ (8015ba8 <xPortStartScheduler+0x138>)
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	f1c3 0307 	rsb	r3, r3, #7
 8015b12:	2b04      	cmp	r3, #4
 8015b14:	d00b      	beq.n	8015b2e <xPortStartScheduler+0xbe>
	__asm volatile
 8015b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b1a:	f383 8811 	msr	BASEPRI, r3
 8015b1e:	f3bf 8f6f 	isb	sy
 8015b22:	f3bf 8f4f 	dsb	sy
 8015b26:	60bb      	str	r3, [r7, #8]
}
 8015b28:	bf00      	nop
 8015b2a:	bf00      	nop
 8015b2c:	e7fd      	b.n	8015b2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8015ba8 <xPortStartScheduler+0x138>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	021b      	lsls	r3, r3, #8
 8015b34:	4a1c      	ldr	r2, [pc, #112]	@ (8015ba8 <xPortStartScheduler+0x138>)
 8015b36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015b38:	4b1b      	ldr	r3, [pc, #108]	@ (8015ba8 <xPortStartScheduler+0x138>)
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8015b40:	4a19      	ldr	r2, [pc, #100]	@ (8015ba8 <xPortStartScheduler+0x138>)
 8015b42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	b2da      	uxtb	r2, r3
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015b4c:	4b17      	ldr	r3, [pc, #92]	@ (8015bac <xPortStartScheduler+0x13c>)
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	4a16      	ldr	r2, [pc, #88]	@ (8015bac <xPortStartScheduler+0x13c>)
 8015b52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8015b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015b58:	4b14      	ldr	r3, [pc, #80]	@ (8015bac <xPortStartScheduler+0x13c>)
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	4a13      	ldr	r2, [pc, #76]	@ (8015bac <xPortStartScheduler+0x13c>)
 8015b5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8015b62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015b64:	f000 f8da 	bl	8015d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015b68:	4b11      	ldr	r3, [pc, #68]	@ (8015bb0 <xPortStartScheduler+0x140>)
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015b6e:	f000 f8f9 	bl	8015d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015b72:	4b10      	ldr	r3, [pc, #64]	@ (8015bb4 <xPortStartScheduler+0x144>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	4a0f      	ldr	r2, [pc, #60]	@ (8015bb4 <xPortStartScheduler+0x144>)
 8015b78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8015b7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015b7e:	f7ff ff63 	bl	8015a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015b82:	f7ff fa7f 	bl	8015084 <vTaskSwitchContext>
	prvTaskExitError();
 8015b86:	f7ff ff19 	bl	80159bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015b8a:	2300      	movs	r3, #0
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3718      	adds	r7, #24
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}
 8015b94:	e000ed00 	.word	0xe000ed00
 8015b98:	410fc271 	.word	0x410fc271
 8015b9c:	410fc270 	.word	0x410fc270
 8015ba0:	e000e400 	.word	0xe000e400
 8015ba4:	24002ba0 	.word	0x24002ba0
 8015ba8:	24002ba4 	.word	0x24002ba4
 8015bac:	e000ed20 	.word	0xe000ed20
 8015bb0:	240000c4 	.word	0x240000c4
 8015bb4:	e000ef34 	.word	0xe000ef34

08015bb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015bb8:	b480      	push	{r7}
 8015bba:	b083      	sub	sp, #12
 8015bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8015bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bc2:	f383 8811 	msr	BASEPRI, r3
 8015bc6:	f3bf 8f6f 	isb	sy
 8015bca:	f3bf 8f4f 	dsb	sy
 8015bce:	607b      	str	r3, [r7, #4]
}
 8015bd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015bd2:	4b10      	ldr	r3, [pc, #64]	@ (8015c14 <vPortEnterCritical+0x5c>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	3301      	adds	r3, #1
 8015bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8015c14 <vPortEnterCritical+0x5c>)
 8015bda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8015c14 <vPortEnterCritical+0x5c>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	2b01      	cmp	r3, #1
 8015be2:	d110      	bne.n	8015c06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015be4:	4b0c      	ldr	r3, [pc, #48]	@ (8015c18 <vPortEnterCritical+0x60>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	b2db      	uxtb	r3, r3
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d00b      	beq.n	8015c06 <vPortEnterCritical+0x4e>
	__asm volatile
 8015bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bf2:	f383 8811 	msr	BASEPRI, r3
 8015bf6:	f3bf 8f6f 	isb	sy
 8015bfa:	f3bf 8f4f 	dsb	sy
 8015bfe:	603b      	str	r3, [r7, #0]
}
 8015c00:	bf00      	nop
 8015c02:	bf00      	nop
 8015c04:	e7fd      	b.n	8015c02 <vPortEnterCritical+0x4a>
	}
}
 8015c06:	bf00      	nop
 8015c08:	370c      	adds	r7, #12
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c10:	4770      	bx	lr
 8015c12:	bf00      	nop
 8015c14:	240000c4 	.word	0x240000c4
 8015c18:	e000ed04 	.word	0xe000ed04

08015c1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015c1c:	b480      	push	{r7}
 8015c1e:	b083      	sub	sp, #12
 8015c20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015c22:	4b12      	ldr	r3, [pc, #72]	@ (8015c6c <vPortExitCritical+0x50>)
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d10b      	bne.n	8015c42 <vPortExitCritical+0x26>
	__asm volatile
 8015c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c2e:	f383 8811 	msr	BASEPRI, r3
 8015c32:	f3bf 8f6f 	isb	sy
 8015c36:	f3bf 8f4f 	dsb	sy
 8015c3a:	607b      	str	r3, [r7, #4]
}
 8015c3c:	bf00      	nop
 8015c3e:	bf00      	nop
 8015c40:	e7fd      	b.n	8015c3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015c42:	4b0a      	ldr	r3, [pc, #40]	@ (8015c6c <vPortExitCritical+0x50>)
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	3b01      	subs	r3, #1
 8015c48:	4a08      	ldr	r2, [pc, #32]	@ (8015c6c <vPortExitCritical+0x50>)
 8015c4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015c4c:	4b07      	ldr	r3, [pc, #28]	@ (8015c6c <vPortExitCritical+0x50>)
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d105      	bne.n	8015c60 <vPortExitCritical+0x44>
 8015c54:	2300      	movs	r3, #0
 8015c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	f383 8811 	msr	BASEPRI, r3
}
 8015c5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015c60:	bf00      	nop
 8015c62:	370c      	adds	r7, #12
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr
 8015c6c:	240000c4 	.word	0x240000c4

08015c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015c70:	f3ef 8009 	mrs	r0, PSP
 8015c74:	f3bf 8f6f 	isb	sy
 8015c78:	4b15      	ldr	r3, [pc, #84]	@ (8015cd0 <pxCurrentTCBConst>)
 8015c7a:	681a      	ldr	r2, [r3, #0]
 8015c7c:	f01e 0f10 	tst.w	lr, #16
 8015c80:	bf08      	it	eq
 8015c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c8a:	6010      	str	r0, [r2, #0]
 8015c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015c90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8015c94:	f380 8811 	msr	BASEPRI, r0
 8015c98:	f3bf 8f4f 	dsb	sy
 8015c9c:	f3bf 8f6f 	isb	sy
 8015ca0:	f7ff f9f0 	bl	8015084 <vTaskSwitchContext>
 8015ca4:	f04f 0000 	mov.w	r0, #0
 8015ca8:	f380 8811 	msr	BASEPRI, r0
 8015cac:	bc09      	pop	{r0, r3}
 8015cae:	6819      	ldr	r1, [r3, #0]
 8015cb0:	6808      	ldr	r0, [r1, #0]
 8015cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cb6:	f01e 0f10 	tst.w	lr, #16
 8015cba:	bf08      	it	eq
 8015cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015cc0:	f380 8809 	msr	PSP, r0
 8015cc4:	f3bf 8f6f 	isb	sy
 8015cc8:	4770      	bx	lr
 8015cca:	bf00      	nop
 8015ccc:	f3af 8000 	nop.w

08015cd0 <pxCurrentTCBConst>:
 8015cd0:	24002a74 	.word	0x24002a74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015cd4:	bf00      	nop
 8015cd6:	bf00      	nop

08015cd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b082      	sub	sp, #8
 8015cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8015cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ce2:	f383 8811 	msr	BASEPRI, r3
 8015ce6:	f3bf 8f6f 	isb	sy
 8015cea:	f3bf 8f4f 	dsb	sy
 8015cee:	607b      	str	r3, [r7, #4]
}
 8015cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015cf2:	f7ff f90d 	bl	8014f10 <xTaskIncrementTick>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d003      	beq.n	8015d04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015cfc:	4b06      	ldr	r3, [pc, #24]	@ (8015d18 <SysTick_Handler+0x40>)
 8015cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d02:	601a      	str	r2, [r3, #0]
 8015d04:	2300      	movs	r3, #0
 8015d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	f383 8811 	msr	BASEPRI, r3
}
 8015d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015d10:	bf00      	nop
 8015d12:	3708      	adds	r7, #8
 8015d14:	46bd      	mov	sp, r7
 8015d16:	bd80      	pop	{r7, pc}
 8015d18:	e000ed04 	.word	0xe000ed04

08015d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015d1c:	b480      	push	{r7}
 8015d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015d20:	4b0b      	ldr	r3, [pc, #44]	@ (8015d50 <vPortSetupTimerInterrupt+0x34>)
 8015d22:	2200      	movs	r2, #0
 8015d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015d26:	4b0b      	ldr	r3, [pc, #44]	@ (8015d54 <vPortSetupTimerInterrupt+0x38>)
 8015d28:	2200      	movs	r2, #0
 8015d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8015d58 <vPortSetupTimerInterrupt+0x3c>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	4a0a      	ldr	r2, [pc, #40]	@ (8015d5c <vPortSetupTimerInterrupt+0x40>)
 8015d32:	fba2 2303 	umull	r2, r3, r2, r3
 8015d36:	099b      	lsrs	r3, r3, #6
 8015d38:	4a09      	ldr	r2, [pc, #36]	@ (8015d60 <vPortSetupTimerInterrupt+0x44>)
 8015d3a:	3b01      	subs	r3, #1
 8015d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015d3e:	4b04      	ldr	r3, [pc, #16]	@ (8015d50 <vPortSetupTimerInterrupt+0x34>)
 8015d40:	2207      	movs	r2, #7
 8015d42:	601a      	str	r2, [r3, #0]
}
 8015d44:	bf00      	nop
 8015d46:	46bd      	mov	sp, r7
 8015d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4c:	4770      	bx	lr
 8015d4e:	bf00      	nop
 8015d50:	e000e010 	.word	0xe000e010
 8015d54:	e000e018 	.word	0xe000e018
 8015d58:	24000000 	.word	0x24000000
 8015d5c:	10624dd3 	.word	0x10624dd3
 8015d60:	e000e014 	.word	0xe000e014

08015d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015d64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8015d74 <vPortEnableVFP+0x10>
 8015d68:	6801      	ldr	r1, [r0, #0]
 8015d6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8015d6e:	6001      	str	r1, [r0, #0]
 8015d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015d72:	bf00      	nop
 8015d74:	e000ed88 	.word	0xe000ed88

08015d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015d78:	b480      	push	{r7}
 8015d7a:	b085      	sub	sp, #20
 8015d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015d7e:	f3ef 8305 	mrs	r3, IPSR
 8015d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	2b0f      	cmp	r3, #15
 8015d88:	d915      	bls.n	8015db6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015d8a:	4a18      	ldr	r2, [pc, #96]	@ (8015dec <vPortValidateInterruptPriority+0x74>)
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	4413      	add	r3, r2
 8015d90:	781b      	ldrb	r3, [r3, #0]
 8015d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015d94:	4b16      	ldr	r3, [pc, #88]	@ (8015df0 <vPortValidateInterruptPriority+0x78>)
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	7afa      	ldrb	r2, [r7, #11]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d20b      	bcs.n	8015db6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8015d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015da2:	f383 8811 	msr	BASEPRI, r3
 8015da6:	f3bf 8f6f 	isb	sy
 8015daa:	f3bf 8f4f 	dsb	sy
 8015dae:	607b      	str	r3, [r7, #4]
}
 8015db0:	bf00      	nop
 8015db2:	bf00      	nop
 8015db4:	e7fd      	b.n	8015db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015db6:	4b0f      	ldr	r3, [pc, #60]	@ (8015df4 <vPortValidateInterruptPriority+0x7c>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8015df8 <vPortValidateInterruptPriority+0x80>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	d90b      	bls.n	8015dde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8015dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015dca:	f383 8811 	msr	BASEPRI, r3
 8015dce:	f3bf 8f6f 	isb	sy
 8015dd2:	f3bf 8f4f 	dsb	sy
 8015dd6:	603b      	str	r3, [r7, #0]
}
 8015dd8:	bf00      	nop
 8015dda:	bf00      	nop
 8015ddc:	e7fd      	b.n	8015dda <vPortValidateInterruptPriority+0x62>
	}
 8015dde:	bf00      	nop
 8015de0:	3714      	adds	r7, #20
 8015de2:	46bd      	mov	sp, r7
 8015de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de8:	4770      	bx	lr
 8015dea:	bf00      	nop
 8015dec:	e000e3f0 	.word	0xe000e3f0
 8015df0:	24002ba0 	.word	0x24002ba0
 8015df4:	e000ed0c 	.word	0xe000ed0c
 8015df8:	24002ba4 	.word	0x24002ba4

08015dfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b08a      	sub	sp, #40	@ 0x28
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015e04:	2300      	movs	r3, #0
 8015e06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015e08:	f7fe ffd6 	bl	8014db8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8015f80 <pvPortMalloc+0x184>)
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d101      	bne.n	8015e18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015e14:	f000 f924 	bl	8016060 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015e18:	4b5a      	ldr	r3, [pc, #360]	@ (8015f84 <pvPortMalloc+0x188>)
 8015e1a:	681a      	ldr	r2, [r3, #0]
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	4013      	ands	r3, r2
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	f040 8095 	bne.w	8015f50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d01e      	beq.n	8015e6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8015e2c:	2208      	movs	r2, #8
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	4413      	add	r3, r2
 8015e32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f003 0307 	and.w	r3, r3, #7
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d015      	beq.n	8015e6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f023 0307 	bic.w	r3, r3, #7
 8015e44:	3308      	adds	r3, #8
 8015e46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f003 0307 	and.w	r3, r3, #7
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d00b      	beq.n	8015e6a <pvPortMalloc+0x6e>
	__asm volatile
 8015e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e56:	f383 8811 	msr	BASEPRI, r3
 8015e5a:	f3bf 8f6f 	isb	sy
 8015e5e:	f3bf 8f4f 	dsb	sy
 8015e62:	617b      	str	r3, [r7, #20]
}
 8015e64:	bf00      	nop
 8015e66:	bf00      	nop
 8015e68:	e7fd      	b.n	8015e66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d06f      	beq.n	8015f50 <pvPortMalloc+0x154>
 8015e70:	4b45      	ldr	r3, [pc, #276]	@ (8015f88 <pvPortMalloc+0x18c>)
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	687a      	ldr	r2, [r7, #4]
 8015e76:	429a      	cmp	r2, r3
 8015e78:	d86a      	bhi.n	8015f50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015e7a:	4b44      	ldr	r3, [pc, #272]	@ (8015f8c <pvPortMalloc+0x190>)
 8015e7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015e7e:	4b43      	ldr	r3, [pc, #268]	@ (8015f8c <pvPortMalloc+0x190>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e84:	e004      	b.n	8015e90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8015e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e92:	685b      	ldr	r3, [r3, #4]
 8015e94:	687a      	ldr	r2, [r7, #4]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d903      	bls.n	8015ea2 <pvPortMalloc+0xa6>
 8015e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d1f1      	bne.n	8015e86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015ea2:	4b37      	ldr	r3, [pc, #220]	@ (8015f80 <pvPortMalloc+0x184>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	d051      	beq.n	8015f50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015eac:	6a3b      	ldr	r3, [r7, #32]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	2208      	movs	r2, #8
 8015eb2:	4413      	add	r3, r2
 8015eb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	6a3b      	ldr	r3, [r7, #32]
 8015ebc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec0:	685a      	ldr	r2, [r3, #4]
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	1ad2      	subs	r2, r2, r3
 8015ec6:	2308      	movs	r3, #8
 8015ec8:	005b      	lsls	r3, r3, #1
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	d920      	bls.n	8015f10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	4413      	add	r3, r2
 8015ed4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ed6:	69bb      	ldr	r3, [r7, #24]
 8015ed8:	f003 0307 	and.w	r3, r3, #7
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d00b      	beq.n	8015ef8 <pvPortMalloc+0xfc>
	__asm volatile
 8015ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ee4:	f383 8811 	msr	BASEPRI, r3
 8015ee8:	f3bf 8f6f 	isb	sy
 8015eec:	f3bf 8f4f 	dsb	sy
 8015ef0:	613b      	str	r3, [r7, #16]
}
 8015ef2:	bf00      	nop
 8015ef4:	bf00      	nop
 8015ef6:	e7fd      	b.n	8015ef4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015efa:	685a      	ldr	r2, [r3, #4]
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	1ad2      	subs	r2, r2, r3
 8015f00:	69bb      	ldr	r3, [r7, #24]
 8015f02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f06:	687a      	ldr	r2, [r7, #4]
 8015f08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015f0a:	69b8      	ldr	r0, [r7, #24]
 8015f0c:	f000 f90a 	bl	8016124 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015f10:	4b1d      	ldr	r3, [pc, #116]	@ (8015f88 <pvPortMalloc+0x18c>)
 8015f12:	681a      	ldr	r2, [r3, #0]
 8015f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f16:	685b      	ldr	r3, [r3, #4]
 8015f18:	1ad3      	subs	r3, r2, r3
 8015f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8015f88 <pvPortMalloc+0x18c>)
 8015f1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8015f88 <pvPortMalloc+0x18c>)
 8015f20:	681a      	ldr	r2, [r3, #0]
 8015f22:	4b1b      	ldr	r3, [pc, #108]	@ (8015f90 <pvPortMalloc+0x194>)
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d203      	bcs.n	8015f32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015f2a:	4b17      	ldr	r3, [pc, #92]	@ (8015f88 <pvPortMalloc+0x18c>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	4a18      	ldr	r2, [pc, #96]	@ (8015f90 <pvPortMalloc+0x194>)
 8015f30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f34:	685a      	ldr	r2, [r3, #4]
 8015f36:	4b13      	ldr	r3, [pc, #76]	@ (8015f84 <pvPortMalloc+0x188>)
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	431a      	orrs	r2, r3
 8015f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f42:	2200      	movs	r2, #0
 8015f44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015f46:	4b13      	ldr	r3, [pc, #76]	@ (8015f94 <pvPortMalloc+0x198>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	3301      	adds	r3, #1
 8015f4c:	4a11      	ldr	r2, [pc, #68]	@ (8015f94 <pvPortMalloc+0x198>)
 8015f4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015f50:	f7fe ff40 	bl	8014dd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f54:	69fb      	ldr	r3, [r7, #28]
 8015f56:	f003 0307 	and.w	r3, r3, #7
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d00b      	beq.n	8015f76 <pvPortMalloc+0x17a>
	__asm volatile
 8015f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f62:	f383 8811 	msr	BASEPRI, r3
 8015f66:	f3bf 8f6f 	isb	sy
 8015f6a:	f3bf 8f4f 	dsb	sy
 8015f6e:	60fb      	str	r3, [r7, #12]
}
 8015f70:	bf00      	nop
 8015f72:	bf00      	nop
 8015f74:	e7fd      	b.n	8015f72 <pvPortMalloc+0x176>
	return pvReturn;
 8015f76:	69fb      	ldr	r3, [r7, #28]
}
 8015f78:	4618      	mov	r0, r3
 8015f7a:	3728      	adds	r7, #40	@ 0x28
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd80      	pop	{r7, pc}
 8015f80:	240067b0 	.word	0x240067b0
 8015f84:	240067c4 	.word	0x240067c4
 8015f88:	240067b4 	.word	0x240067b4
 8015f8c:	240067a8 	.word	0x240067a8
 8015f90:	240067b8 	.word	0x240067b8
 8015f94:	240067bc 	.word	0x240067bc

08015f98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b086      	sub	sp, #24
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d04f      	beq.n	801604a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015faa:	2308      	movs	r3, #8
 8015fac:	425b      	negs	r3, r3
 8015fae:	697a      	ldr	r2, [r7, #20]
 8015fb0:	4413      	add	r3, r2
 8015fb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015fb4:	697b      	ldr	r3, [r7, #20]
 8015fb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015fb8:	693b      	ldr	r3, [r7, #16]
 8015fba:	685a      	ldr	r2, [r3, #4]
 8015fbc:	4b25      	ldr	r3, [pc, #148]	@ (8016054 <vPortFree+0xbc>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	4013      	ands	r3, r2
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d10b      	bne.n	8015fde <vPortFree+0x46>
	__asm volatile
 8015fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fca:	f383 8811 	msr	BASEPRI, r3
 8015fce:	f3bf 8f6f 	isb	sy
 8015fd2:	f3bf 8f4f 	dsb	sy
 8015fd6:	60fb      	str	r3, [r7, #12]
}
 8015fd8:	bf00      	nop
 8015fda:	bf00      	nop
 8015fdc:	e7fd      	b.n	8015fda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015fde:	693b      	ldr	r3, [r7, #16]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d00b      	beq.n	8015ffe <vPortFree+0x66>
	__asm volatile
 8015fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fea:	f383 8811 	msr	BASEPRI, r3
 8015fee:	f3bf 8f6f 	isb	sy
 8015ff2:	f3bf 8f4f 	dsb	sy
 8015ff6:	60bb      	str	r3, [r7, #8]
}
 8015ff8:	bf00      	nop
 8015ffa:	bf00      	nop
 8015ffc:	e7fd      	b.n	8015ffa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015ffe:	693b      	ldr	r3, [r7, #16]
 8016000:	685a      	ldr	r2, [r3, #4]
 8016002:	4b14      	ldr	r3, [pc, #80]	@ (8016054 <vPortFree+0xbc>)
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	4013      	ands	r3, r2
 8016008:	2b00      	cmp	r3, #0
 801600a:	d01e      	beq.n	801604a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d11a      	bne.n	801604a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016014:	693b      	ldr	r3, [r7, #16]
 8016016:	685a      	ldr	r2, [r3, #4]
 8016018:	4b0e      	ldr	r3, [pc, #56]	@ (8016054 <vPortFree+0xbc>)
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	43db      	mvns	r3, r3
 801601e:	401a      	ands	r2, r3
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016024:	f7fe fec8 	bl	8014db8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	685a      	ldr	r2, [r3, #4]
 801602c:	4b0a      	ldr	r3, [pc, #40]	@ (8016058 <vPortFree+0xc0>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	4413      	add	r3, r2
 8016032:	4a09      	ldr	r2, [pc, #36]	@ (8016058 <vPortFree+0xc0>)
 8016034:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016036:	6938      	ldr	r0, [r7, #16]
 8016038:	f000 f874 	bl	8016124 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801603c:	4b07      	ldr	r3, [pc, #28]	@ (801605c <vPortFree+0xc4>)
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	3301      	adds	r3, #1
 8016042:	4a06      	ldr	r2, [pc, #24]	@ (801605c <vPortFree+0xc4>)
 8016044:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016046:	f7fe fec5 	bl	8014dd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801604a:	bf00      	nop
 801604c:	3718      	adds	r7, #24
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}
 8016052:	bf00      	nop
 8016054:	240067c4 	.word	0x240067c4
 8016058:	240067b4 	.word	0x240067b4
 801605c:	240067c0 	.word	0x240067c0

08016060 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016060:	b480      	push	{r7}
 8016062:	b085      	sub	sp, #20
 8016064:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016066:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801606a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801606c:	4b27      	ldr	r3, [pc, #156]	@ (801610c <prvHeapInit+0xac>)
 801606e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	f003 0307 	and.w	r3, r3, #7
 8016076:	2b00      	cmp	r3, #0
 8016078:	d00c      	beq.n	8016094 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	3307      	adds	r3, #7
 801607e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	f023 0307 	bic.w	r3, r3, #7
 8016086:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016088:	68ba      	ldr	r2, [r7, #8]
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	1ad3      	subs	r3, r2, r3
 801608e:	4a1f      	ldr	r2, [pc, #124]	@ (801610c <prvHeapInit+0xac>)
 8016090:	4413      	add	r3, r2
 8016092:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016098:	4a1d      	ldr	r2, [pc, #116]	@ (8016110 <prvHeapInit+0xb0>)
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801609e:	4b1c      	ldr	r3, [pc, #112]	@ (8016110 <prvHeapInit+0xb0>)
 80160a0:	2200      	movs	r2, #0
 80160a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	68ba      	ldr	r2, [r7, #8]
 80160a8:	4413      	add	r3, r2
 80160aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80160ac:	2208      	movs	r2, #8
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	1a9b      	subs	r3, r3, r2
 80160b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	f023 0307 	bic.w	r3, r3, #7
 80160ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	4a15      	ldr	r2, [pc, #84]	@ (8016114 <prvHeapInit+0xb4>)
 80160c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80160c2:	4b14      	ldr	r3, [pc, #80]	@ (8016114 <prvHeapInit+0xb4>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	2200      	movs	r2, #0
 80160c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80160ca:	4b12      	ldr	r3, [pc, #72]	@ (8016114 <prvHeapInit+0xb4>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	2200      	movs	r2, #0
 80160d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	68fa      	ldr	r2, [r7, #12]
 80160da:	1ad2      	subs	r2, r2, r3
 80160dc:	683b      	ldr	r3, [r7, #0]
 80160de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80160e0:	4b0c      	ldr	r3, [pc, #48]	@ (8016114 <prvHeapInit+0xb4>)
 80160e2:	681a      	ldr	r2, [r3, #0]
 80160e4:	683b      	ldr	r3, [r7, #0]
 80160e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80160e8:	683b      	ldr	r3, [r7, #0]
 80160ea:	685b      	ldr	r3, [r3, #4]
 80160ec:	4a0a      	ldr	r2, [pc, #40]	@ (8016118 <prvHeapInit+0xb8>)
 80160ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80160f0:	683b      	ldr	r3, [r7, #0]
 80160f2:	685b      	ldr	r3, [r3, #4]
 80160f4:	4a09      	ldr	r2, [pc, #36]	@ (801611c <prvHeapInit+0xbc>)
 80160f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80160f8:	4b09      	ldr	r3, [pc, #36]	@ (8016120 <prvHeapInit+0xc0>)
 80160fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80160fe:	601a      	str	r2, [r3, #0]
}
 8016100:	bf00      	nop
 8016102:	3714      	adds	r7, #20
 8016104:	46bd      	mov	sp, r7
 8016106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610a:	4770      	bx	lr
 801610c:	24002ba8 	.word	0x24002ba8
 8016110:	240067a8 	.word	0x240067a8
 8016114:	240067b0 	.word	0x240067b0
 8016118:	240067b8 	.word	0x240067b8
 801611c:	240067b4 	.word	0x240067b4
 8016120:	240067c4 	.word	0x240067c4

08016124 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016124:	b480      	push	{r7}
 8016126:	b085      	sub	sp, #20
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801612c:	4b28      	ldr	r3, [pc, #160]	@ (80161d0 <prvInsertBlockIntoFreeList+0xac>)
 801612e:	60fb      	str	r3, [r7, #12]
 8016130:	e002      	b.n	8016138 <prvInsertBlockIntoFreeList+0x14>
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	60fb      	str	r3, [r7, #12]
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	687a      	ldr	r2, [r7, #4]
 801613e:	429a      	cmp	r2, r3
 8016140:	d8f7      	bhi.n	8016132 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	685b      	ldr	r3, [r3, #4]
 801614a:	68ba      	ldr	r2, [r7, #8]
 801614c:	4413      	add	r3, r2
 801614e:	687a      	ldr	r2, [r7, #4]
 8016150:	429a      	cmp	r2, r3
 8016152:	d108      	bne.n	8016166 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	685a      	ldr	r2, [r3, #4]
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	685b      	ldr	r3, [r3, #4]
 801615c:	441a      	add	r2, r3
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	685b      	ldr	r3, [r3, #4]
 801616e:	68ba      	ldr	r2, [r7, #8]
 8016170:	441a      	add	r2, r3
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	429a      	cmp	r2, r3
 8016178:	d118      	bne.n	80161ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	681a      	ldr	r2, [r3, #0]
 801617e:	4b15      	ldr	r3, [pc, #84]	@ (80161d4 <prvInsertBlockIntoFreeList+0xb0>)
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	429a      	cmp	r2, r3
 8016184:	d00d      	beq.n	80161a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	685a      	ldr	r2, [r3, #4]
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	685b      	ldr	r3, [r3, #4]
 8016190:	441a      	add	r2, r3
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016196:	68fb      	ldr	r3, [r7, #12]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	681a      	ldr	r2, [r3, #0]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	601a      	str	r2, [r3, #0]
 80161a0:	e008      	b.n	80161b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80161a2:	4b0c      	ldr	r3, [pc, #48]	@ (80161d4 <prvInsertBlockIntoFreeList+0xb0>)
 80161a4:	681a      	ldr	r2, [r3, #0]
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	601a      	str	r2, [r3, #0]
 80161aa:	e003      	b.n	80161b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	681a      	ldr	r2, [r3, #0]
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80161b4:	68fa      	ldr	r2, [r7, #12]
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d002      	beq.n	80161c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	687a      	ldr	r2, [r7, #4]
 80161c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80161c2:	bf00      	nop
 80161c4:	3714      	adds	r7, #20
 80161c6:	46bd      	mov	sp, r7
 80161c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161cc:	4770      	bx	lr
 80161ce:	bf00      	nop
 80161d0:	240067a8 	.word	0x240067a8
 80161d4:	240067b0 	.word	0x240067b0

080161d8 <atof>:
 80161d8:	2100      	movs	r1, #0
 80161da:	f000 bdb7 	b.w	8016d4c <strtod>

080161de <atoi>:
 80161de:	220a      	movs	r2, #10
 80161e0:	2100      	movs	r1, #0
 80161e2:	f000 be39 	b.w	8016e58 <strtol>

080161e6 <sulp>:
 80161e6:	b570      	push	{r4, r5, r6, lr}
 80161e8:	4604      	mov	r4, r0
 80161ea:	460d      	mov	r5, r1
 80161ec:	4616      	mov	r6, r2
 80161ee:	ec45 4b10 	vmov	d0, r4, r5
 80161f2:	f001 ffa9 	bl	8018148 <__ulp>
 80161f6:	b17e      	cbz	r6, 8016218 <sulp+0x32>
 80161f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80161fc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016200:	2b00      	cmp	r3, #0
 8016202:	dd09      	ble.n	8016218 <sulp+0x32>
 8016204:	051b      	lsls	r3, r3, #20
 8016206:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 801620a:	2000      	movs	r0, #0
 801620c:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8016210:	ec41 0b17 	vmov	d7, r0, r1
 8016214:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016218:	bd70      	pop	{r4, r5, r6, pc}
 801621a:	0000      	movs	r0, r0
 801621c:	0000      	movs	r0, r0
	...

08016220 <_strtod_l>:
 8016220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016224:	ed2d 8b0a 	vpush	{d8-d12}
 8016228:	b097      	sub	sp, #92	@ 0x5c
 801622a:	4688      	mov	r8, r1
 801622c:	920e      	str	r2, [sp, #56]	@ 0x38
 801622e:	2200      	movs	r2, #0
 8016230:	9212      	str	r2, [sp, #72]	@ 0x48
 8016232:	9005      	str	r0, [sp, #20]
 8016234:	f04f 0a00 	mov.w	sl, #0
 8016238:	f04f 0b00 	mov.w	fp, #0
 801623c:	460a      	mov	r2, r1
 801623e:	9211      	str	r2, [sp, #68]	@ 0x44
 8016240:	7811      	ldrb	r1, [r2, #0]
 8016242:	292b      	cmp	r1, #43	@ 0x2b
 8016244:	d04c      	beq.n	80162e0 <_strtod_l+0xc0>
 8016246:	d839      	bhi.n	80162bc <_strtod_l+0x9c>
 8016248:	290d      	cmp	r1, #13
 801624a:	d833      	bhi.n	80162b4 <_strtod_l+0x94>
 801624c:	2908      	cmp	r1, #8
 801624e:	d833      	bhi.n	80162b8 <_strtod_l+0x98>
 8016250:	2900      	cmp	r1, #0
 8016252:	d03c      	beq.n	80162ce <_strtod_l+0xae>
 8016254:	2200      	movs	r2, #0
 8016256:	9208      	str	r2, [sp, #32]
 8016258:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801625a:	782a      	ldrb	r2, [r5, #0]
 801625c:	2a30      	cmp	r2, #48	@ 0x30
 801625e:	f040 80b5 	bne.w	80163cc <_strtod_l+0x1ac>
 8016262:	786a      	ldrb	r2, [r5, #1]
 8016264:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016268:	2a58      	cmp	r2, #88	@ 0x58
 801626a:	d170      	bne.n	801634e <_strtod_l+0x12e>
 801626c:	9302      	str	r3, [sp, #8]
 801626e:	9b08      	ldr	r3, [sp, #32]
 8016270:	9301      	str	r3, [sp, #4]
 8016272:	ab12      	add	r3, sp, #72	@ 0x48
 8016274:	9300      	str	r3, [sp, #0]
 8016276:	4a8b      	ldr	r2, [pc, #556]	@ (80164a4 <_strtod_l+0x284>)
 8016278:	9805      	ldr	r0, [sp, #20]
 801627a:	ab13      	add	r3, sp, #76	@ 0x4c
 801627c:	a911      	add	r1, sp, #68	@ 0x44
 801627e:	f001 f85d 	bl	801733c <__gethex>
 8016282:	f010 060f 	ands.w	r6, r0, #15
 8016286:	4604      	mov	r4, r0
 8016288:	d005      	beq.n	8016296 <_strtod_l+0x76>
 801628a:	2e06      	cmp	r6, #6
 801628c:	d12a      	bne.n	80162e4 <_strtod_l+0xc4>
 801628e:	3501      	adds	r5, #1
 8016290:	2300      	movs	r3, #0
 8016292:	9511      	str	r5, [sp, #68]	@ 0x44
 8016294:	9308      	str	r3, [sp, #32]
 8016296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016298:	2b00      	cmp	r3, #0
 801629a:	f040 852f 	bne.w	8016cfc <_strtod_l+0xadc>
 801629e:	9b08      	ldr	r3, [sp, #32]
 80162a0:	ec4b ab10 	vmov	d0, sl, fp
 80162a4:	b1cb      	cbz	r3, 80162da <_strtod_l+0xba>
 80162a6:	eeb1 0b40 	vneg.f64	d0, d0
 80162aa:	b017      	add	sp, #92	@ 0x5c
 80162ac:	ecbd 8b0a 	vpop	{d8-d12}
 80162b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162b4:	2920      	cmp	r1, #32
 80162b6:	d1cd      	bne.n	8016254 <_strtod_l+0x34>
 80162b8:	3201      	adds	r2, #1
 80162ba:	e7c0      	b.n	801623e <_strtod_l+0x1e>
 80162bc:	292d      	cmp	r1, #45	@ 0x2d
 80162be:	d1c9      	bne.n	8016254 <_strtod_l+0x34>
 80162c0:	2101      	movs	r1, #1
 80162c2:	9108      	str	r1, [sp, #32]
 80162c4:	1c51      	adds	r1, r2, #1
 80162c6:	9111      	str	r1, [sp, #68]	@ 0x44
 80162c8:	7852      	ldrb	r2, [r2, #1]
 80162ca:	2a00      	cmp	r2, #0
 80162cc:	d1c4      	bne.n	8016258 <_strtod_l+0x38>
 80162ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80162d0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	f040 850f 	bne.w	8016cf8 <_strtod_l+0xad8>
 80162da:	ec4b ab10 	vmov	d0, sl, fp
 80162de:	e7e4      	b.n	80162aa <_strtod_l+0x8a>
 80162e0:	2100      	movs	r1, #0
 80162e2:	e7ee      	b.n	80162c2 <_strtod_l+0xa2>
 80162e4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80162e6:	b13a      	cbz	r2, 80162f8 <_strtod_l+0xd8>
 80162e8:	2135      	movs	r1, #53	@ 0x35
 80162ea:	a814      	add	r0, sp, #80	@ 0x50
 80162ec:	f002 f823 	bl	8018336 <__copybits>
 80162f0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80162f2:	9805      	ldr	r0, [sp, #20]
 80162f4:	f001 fbf4 	bl	8017ae0 <_Bfree>
 80162f8:	1e73      	subs	r3, r6, #1
 80162fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80162fc:	2b04      	cmp	r3, #4
 80162fe:	d806      	bhi.n	801630e <_strtod_l+0xee>
 8016300:	e8df f003 	tbb	[pc, r3]
 8016304:	201d0314 	.word	0x201d0314
 8016308:	14          	.byte	0x14
 8016309:	00          	.byte	0x00
 801630a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 801630e:	05e3      	lsls	r3, r4, #23
 8016310:	bf48      	it	mi
 8016312:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016316:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801631a:	0d1b      	lsrs	r3, r3, #20
 801631c:	051b      	lsls	r3, r3, #20
 801631e:	2b00      	cmp	r3, #0
 8016320:	d1b9      	bne.n	8016296 <_strtod_l+0x76>
 8016322:	f000 ff15 	bl	8017150 <__errno>
 8016326:	2322      	movs	r3, #34	@ 0x22
 8016328:	6003      	str	r3, [r0, #0]
 801632a:	e7b4      	b.n	8016296 <_strtod_l+0x76>
 801632c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8016330:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016334:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016338:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801633c:	e7e7      	b.n	801630e <_strtod_l+0xee>
 801633e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80164ac <_strtod_l+0x28c>
 8016342:	e7e4      	b.n	801630e <_strtod_l+0xee>
 8016344:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016348:	f04f 3aff 	mov.w	sl, #4294967295
 801634c:	e7df      	b.n	801630e <_strtod_l+0xee>
 801634e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016350:	1c5a      	adds	r2, r3, #1
 8016352:	9211      	str	r2, [sp, #68]	@ 0x44
 8016354:	785b      	ldrb	r3, [r3, #1]
 8016356:	2b30      	cmp	r3, #48	@ 0x30
 8016358:	d0f9      	beq.n	801634e <_strtod_l+0x12e>
 801635a:	2b00      	cmp	r3, #0
 801635c:	d09b      	beq.n	8016296 <_strtod_l+0x76>
 801635e:	2301      	movs	r3, #1
 8016360:	2600      	movs	r6, #0
 8016362:	9307      	str	r3, [sp, #28]
 8016364:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016366:	930a      	str	r3, [sp, #40]	@ 0x28
 8016368:	46b1      	mov	r9, r6
 801636a:	4635      	mov	r5, r6
 801636c:	220a      	movs	r2, #10
 801636e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016370:	7804      	ldrb	r4, [r0, #0]
 8016372:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8016376:	b2d9      	uxtb	r1, r3
 8016378:	2909      	cmp	r1, #9
 801637a:	d929      	bls.n	80163d0 <_strtod_l+0x1b0>
 801637c:	494a      	ldr	r1, [pc, #296]	@ (80164a8 <_strtod_l+0x288>)
 801637e:	2201      	movs	r2, #1
 8016380:	f000 fe8e 	bl	80170a0 <strncmp>
 8016384:	b378      	cbz	r0, 80163e6 <_strtod_l+0x1c6>
 8016386:	2000      	movs	r0, #0
 8016388:	4622      	mov	r2, r4
 801638a:	462b      	mov	r3, r5
 801638c:	4607      	mov	r7, r0
 801638e:	9006      	str	r0, [sp, #24]
 8016390:	2a65      	cmp	r2, #101	@ 0x65
 8016392:	d001      	beq.n	8016398 <_strtod_l+0x178>
 8016394:	2a45      	cmp	r2, #69	@ 0x45
 8016396:	d117      	bne.n	80163c8 <_strtod_l+0x1a8>
 8016398:	b91b      	cbnz	r3, 80163a2 <_strtod_l+0x182>
 801639a:	9b07      	ldr	r3, [sp, #28]
 801639c:	4303      	orrs	r3, r0
 801639e:	d096      	beq.n	80162ce <_strtod_l+0xae>
 80163a0:	2300      	movs	r3, #0
 80163a2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80163a6:	f108 0201 	add.w	r2, r8, #1
 80163aa:	9211      	str	r2, [sp, #68]	@ 0x44
 80163ac:	f898 2001 	ldrb.w	r2, [r8, #1]
 80163b0:	2a2b      	cmp	r2, #43	@ 0x2b
 80163b2:	d06b      	beq.n	801648c <_strtod_l+0x26c>
 80163b4:	2a2d      	cmp	r2, #45	@ 0x2d
 80163b6:	d071      	beq.n	801649c <_strtod_l+0x27c>
 80163b8:	f04f 0e00 	mov.w	lr, #0
 80163bc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80163c0:	2c09      	cmp	r4, #9
 80163c2:	d979      	bls.n	80164b8 <_strtod_l+0x298>
 80163c4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 80163c8:	2400      	movs	r4, #0
 80163ca:	e094      	b.n	80164f6 <_strtod_l+0x2d6>
 80163cc:	2300      	movs	r3, #0
 80163ce:	e7c7      	b.n	8016360 <_strtod_l+0x140>
 80163d0:	2d08      	cmp	r5, #8
 80163d2:	f100 0001 	add.w	r0, r0, #1
 80163d6:	bfd4      	ite	le
 80163d8:	fb02 3909 	mlale	r9, r2, r9, r3
 80163dc:	fb02 3606 	mlagt	r6, r2, r6, r3
 80163e0:	3501      	adds	r5, #1
 80163e2:	9011      	str	r0, [sp, #68]	@ 0x44
 80163e4:	e7c3      	b.n	801636e <_strtod_l+0x14e>
 80163e6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80163e8:	1c5a      	adds	r2, r3, #1
 80163ea:	9211      	str	r2, [sp, #68]	@ 0x44
 80163ec:	785a      	ldrb	r2, [r3, #1]
 80163ee:	b375      	cbz	r5, 801644e <_strtod_l+0x22e>
 80163f0:	4607      	mov	r7, r0
 80163f2:	462b      	mov	r3, r5
 80163f4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80163f8:	2909      	cmp	r1, #9
 80163fa:	d913      	bls.n	8016424 <_strtod_l+0x204>
 80163fc:	2101      	movs	r1, #1
 80163fe:	9106      	str	r1, [sp, #24]
 8016400:	e7c6      	b.n	8016390 <_strtod_l+0x170>
 8016402:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016404:	1c5a      	adds	r2, r3, #1
 8016406:	9211      	str	r2, [sp, #68]	@ 0x44
 8016408:	785a      	ldrb	r2, [r3, #1]
 801640a:	3001      	adds	r0, #1
 801640c:	2a30      	cmp	r2, #48	@ 0x30
 801640e:	d0f8      	beq.n	8016402 <_strtod_l+0x1e2>
 8016410:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016414:	2b08      	cmp	r3, #8
 8016416:	f200 8476 	bhi.w	8016d06 <_strtod_l+0xae6>
 801641a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801641c:	930a      	str	r3, [sp, #40]	@ 0x28
 801641e:	4607      	mov	r7, r0
 8016420:	2000      	movs	r0, #0
 8016422:	4603      	mov	r3, r0
 8016424:	3a30      	subs	r2, #48	@ 0x30
 8016426:	f100 0101 	add.w	r1, r0, #1
 801642a:	d023      	beq.n	8016474 <_strtod_l+0x254>
 801642c:	440f      	add	r7, r1
 801642e:	eb00 0c03 	add.w	ip, r0, r3
 8016432:	4619      	mov	r1, r3
 8016434:	240a      	movs	r4, #10
 8016436:	4561      	cmp	r1, ip
 8016438:	d10b      	bne.n	8016452 <_strtod_l+0x232>
 801643a:	1c5c      	adds	r4, r3, #1
 801643c:	4403      	add	r3, r0
 801643e:	2b08      	cmp	r3, #8
 8016440:	4404      	add	r4, r0
 8016442:	dc11      	bgt.n	8016468 <_strtod_l+0x248>
 8016444:	230a      	movs	r3, #10
 8016446:	fb03 2909 	mla	r9, r3, r9, r2
 801644a:	2100      	movs	r1, #0
 801644c:	e013      	b.n	8016476 <_strtod_l+0x256>
 801644e:	4628      	mov	r0, r5
 8016450:	e7dc      	b.n	801640c <_strtod_l+0x1ec>
 8016452:	2908      	cmp	r1, #8
 8016454:	f101 0101 	add.w	r1, r1, #1
 8016458:	dc02      	bgt.n	8016460 <_strtod_l+0x240>
 801645a:	fb04 f909 	mul.w	r9, r4, r9
 801645e:	e7ea      	b.n	8016436 <_strtod_l+0x216>
 8016460:	2910      	cmp	r1, #16
 8016462:	bfd8      	it	le
 8016464:	4366      	mulle	r6, r4
 8016466:	e7e6      	b.n	8016436 <_strtod_l+0x216>
 8016468:	2b0f      	cmp	r3, #15
 801646a:	dcee      	bgt.n	801644a <_strtod_l+0x22a>
 801646c:	230a      	movs	r3, #10
 801646e:	fb03 2606 	mla	r6, r3, r6, r2
 8016472:	e7ea      	b.n	801644a <_strtod_l+0x22a>
 8016474:	461c      	mov	r4, r3
 8016476:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016478:	1c5a      	adds	r2, r3, #1
 801647a:	9211      	str	r2, [sp, #68]	@ 0x44
 801647c:	785a      	ldrb	r2, [r3, #1]
 801647e:	4608      	mov	r0, r1
 8016480:	4623      	mov	r3, r4
 8016482:	e7b7      	b.n	80163f4 <_strtod_l+0x1d4>
 8016484:	2301      	movs	r3, #1
 8016486:	2700      	movs	r7, #0
 8016488:	9306      	str	r3, [sp, #24]
 801648a:	e786      	b.n	801639a <_strtod_l+0x17a>
 801648c:	f04f 0e00 	mov.w	lr, #0
 8016490:	f108 0202 	add.w	r2, r8, #2
 8016494:	9211      	str	r2, [sp, #68]	@ 0x44
 8016496:	f898 2002 	ldrb.w	r2, [r8, #2]
 801649a:	e78f      	b.n	80163bc <_strtod_l+0x19c>
 801649c:	f04f 0e01 	mov.w	lr, #1
 80164a0:	e7f6      	b.n	8016490 <_strtod_l+0x270>
 80164a2:	bf00      	nop
 80164a4:	08019228 	.word	0x08019228
 80164a8:	08019204 	.word	0x08019204
 80164ac:	7ff00000 	.word	0x7ff00000
 80164b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80164b2:	1c54      	adds	r4, r2, #1
 80164b4:	9411      	str	r4, [sp, #68]	@ 0x44
 80164b6:	7852      	ldrb	r2, [r2, #1]
 80164b8:	2a30      	cmp	r2, #48	@ 0x30
 80164ba:	d0f9      	beq.n	80164b0 <_strtod_l+0x290>
 80164bc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 80164c0:	2c08      	cmp	r4, #8
 80164c2:	d881      	bhi.n	80163c8 <_strtod_l+0x1a8>
 80164c4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 80164c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80164ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80164cc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80164ce:	1c51      	adds	r1, r2, #1
 80164d0:	9111      	str	r1, [sp, #68]	@ 0x44
 80164d2:	7852      	ldrb	r2, [r2, #1]
 80164d4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 80164d8:	2c09      	cmp	r4, #9
 80164da:	d938      	bls.n	801654e <_strtod_l+0x32e>
 80164dc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80164de:	1b0c      	subs	r4, r1, r4
 80164e0:	2c08      	cmp	r4, #8
 80164e2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 80164e6:	dc02      	bgt.n	80164ee <_strtod_l+0x2ce>
 80164e8:	4564      	cmp	r4, ip
 80164ea:	bfa8      	it	ge
 80164ec:	4664      	movge	r4, ip
 80164ee:	f1be 0f00 	cmp.w	lr, #0
 80164f2:	d000      	beq.n	80164f6 <_strtod_l+0x2d6>
 80164f4:	4264      	negs	r4, r4
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d14e      	bne.n	8016598 <_strtod_l+0x378>
 80164fa:	9b07      	ldr	r3, [sp, #28]
 80164fc:	4318      	orrs	r0, r3
 80164fe:	f47f aeca 	bne.w	8016296 <_strtod_l+0x76>
 8016502:	9b06      	ldr	r3, [sp, #24]
 8016504:	2b00      	cmp	r3, #0
 8016506:	f47f aee2 	bne.w	80162ce <_strtod_l+0xae>
 801650a:	2a69      	cmp	r2, #105	@ 0x69
 801650c:	d027      	beq.n	801655e <_strtod_l+0x33e>
 801650e:	dc24      	bgt.n	801655a <_strtod_l+0x33a>
 8016510:	2a49      	cmp	r2, #73	@ 0x49
 8016512:	d024      	beq.n	801655e <_strtod_l+0x33e>
 8016514:	2a4e      	cmp	r2, #78	@ 0x4e
 8016516:	f47f aeda 	bne.w	80162ce <_strtod_l+0xae>
 801651a:	4997      	ldr	r1, [pc, #604]	@ (8016778 <_strtod_l+0x558>)
 801651c:	a811      	add	r0, sp, #68	@ 0x44
 801651e:	f001 f92f 	bl	8017780 <__match>
 8016522:	2800      	cmp	r0, #0
 8016524:	f43f aed3 	beq.w	80162ce <_strtod_l+0xae>
 8016528:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801652a:	781b      	ldrb	r3, [r3, #0]
 801652c:	2b28      	cmp	r3, #40	@ 0x28
 801652e:	d12d      	bne.n	801658c <_strtod_l+0x36c>
 8016530:	4992      	ldr	r1, [pc, #584]	@ (801677c <_strtod_l+0x55c>)
 8016532:	aa14      	add	r2, sp, #80	@ 0x50
 8016534:	a811      	add	r0, sp, #68	@ 0x44
 8016536:	f001 f937 	bl	80177a8 <__hexnan>
 801653a:	2805      	cmp	r0, #5
 801653c:	d126      	bne.n	801658c <_strtod_l+0x36c>
 801653e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016540:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8016544:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016548:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801654c:	e6a3      	b.n	8016296 <_strtod_l+0x76>
 801654e:	240a      	movs	r4, #10
 8016550:	fb04 2c0c 	mla	ip, r4, ip, r2
 8016554:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8016558:	e7b8      	b.n	80164cc <_strtod_l+0x2ac>
 801655a:	2a6e      	cmp	r2, #110	@ 0x6e
 801655c:	e7db      	b.n	8016516 <_strtod_l+0x2f6>
 801655e:	4988      	ldr	r1, [pc, #544]	@ (8016780 <_strtod_l+0x560>)
 8016560:	a811      	add	r0, sp, #68	@ 0x44
 8016562:	f001 f90d 	bl	8017780 <__match>
 8016566:	2800      	cmp	r0, #0
 8016568:	f43f aeb1 	beq.w	80162ce <_strtod_l+0xae>
 801656c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801656e:	4985      	ldr	r1, [pc, #532]	@ (8016784 <_strtod_l+0x564>)
 8016570:	3b01      	subs	r3, #1
 8016572:	a811      	add	r0, sp, #68	@ 0x44
 8016574:	9311      	str	r3, [sp, #68]	@ 0x44
 8016576:	f001 f903 	bl	8017780 <__match>
 801657a:	b910      	cbnz	r0, 8016582 <_strtod_l+0x362>
 801657c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801657e:	3301      	adds	r3, #1
 8016580:	9311      	str	r3, [sp, #68]	@ 0x44
 8016582:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8016798 <_strtod_l+0x578>
 8016586:	f04f 0a00 	mov.w	sl, #0
 801658a:	e684      	b.n	8016296 <_strtod_l+0x76>
 801658c:	487e      	ldr	r0, [pc, #504]	@ (8016788 <_strtod_l+0x568>)
 801658e:	f000 fe1b 	bl	80171c8 <nan>
 8016592:	ec5b ab10 	vmov	sl, fp, d0
 8016596:	e67e      	b.n	8016296 <_strtod_l+0x76>
 8016598:	ee07 9a90 	vmov	s15, r9
 801659c:	1be2      	subs	r2, r4, r7
 801659e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80165a2:	2d00      	cmp	r5, #0
 80165a4:	bf08      	it	eq
 80165a6:	461d      	moveq	r5, r3
 80165a8:	2b10      	cmp	r3, #16
 80165aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80165ac:	461a      	mov	r2, r3
 80165ae:	bfa8      	it	ge
 80165b0:	2210      	movge	r2, #16
 80165b2:	2b09      	cmp	r3, #9
 80165b4:	ec5b ab17 	vmov	sl, fp, d7
 80165b8:	dc15      	bgt.n	80165e6 <_strtod_l+0x3c6>
 80165ba:	1be1      	subs	r1, r4, r7
 80165bc:	2900      	cmp	r1, #0
 80165be:	f43f ae6a 	beq.w	8016296 <_strtod_l+0x76>
 80165c2:	eba4 0107 	sub.w	r1, r4, r7
 80165c6:	dd72      	ble.n	80166ae <_strtod_l+0x48e>
 80165c8:	2916      	cmp	r1, #22
 80165ca:	dc59      	bgt.n	8016680 <_strtod_l+0x460>
 80165cc:	4b6f      	ldr	r3, [pc, #444]	@ (801678c <_strtod_l+0x56c>)
 80165ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80165d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80165d4:	ed93 7b00 	vldr	d7, [r3]
 80165d8:	ec4b ab16 	vmov	d6, sl, fp
 80165dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80165e0:	ec5b ab17 	vmov	sl, fp, d7
 80165e4:	e657      	b.n	8016296 <_strtod_l+0x76>
 80165e6:	4969      	ldr	r1, [pc, #420]	@ (801678c <_strtod_l+0x56c>)
 80165e8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80165ec:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 80165f0:	ee06 6a90 	vmov	s13, r6
 80165f4:	2b0f      	cmp	r3, #15
 80165f6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80165fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80165fe:	ec5b ab16 	vmov	sl, fp, d6
 8016602:	ddda      	ble.n	80165ba <_strtod_l+0x39a>
 8016604:	1a9a      	subs	r2, r3, r2
 8016606:	1be1      	subs	r1, r4, r7
 8016608:	440a      	add	r2, r1
 801660a:	2a00      	cmp	r2, #0
 801660c:	f340 8094 	ble.w	8016738 <_strtod_l+0x518>
 8016610:	f012 000f 	ands.w	r0, r2, #15
 8016614:	d00a      	beq.n	801662c <_strtod_l+0x40c>
 8016616:	495d      	ldr	r1, [pc, #372]	@ (801678c <_strtod_l+0x56c>)
 8016618:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801661c:	ed91 7b00 	vldr	d7, [r1]
 8016620:	ec4b ab16 	vmov	d6, sl, fp
 8016624:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016628:	ec5b ab17 	vmov	sl, fp, d7
 801662c:	f032 020f 	bics.w	r2, r2, #15
 8016630:	d073      	beq.n	801671a <_strtod_l+0x4fa>
 8016632:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8016636:	dd47      	ble.n	80166c8 <_strtod_l+0x4a8>
 8016638:	2400      	movs	r4, #0
 801663a:	4625      	mov	r5, r4
 801663c:	9407      	str	r4, [sp, #28]
 801663e:	4626      	mov	r6, r4
 8016640:	9a05      	ldr	r2, [sp, #20]
 8016642:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8016798 <_strtod_l+0x578>
 8016646:	2322      	movs	r3, #34	@ 0x22
 8016648:	6013      	str	r3, [r2, #0]
 801664a:	f04f 0a00 	mov.w	sl, #0
 801664e:	9b07      	ldr	r3, [sp, #28]
 8016650:	2b00      	cmp	r3, #0
 8016652:	f43f ae20 	beq.w	8016296 <_strtod_l+0x76>
 8016656:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016658:	9805      	ldr	r0, [sp, #20]
 801665a:	f001 fa41 	bl	8017ae0 <_Bfree>
 801665e:	9805      	ldr	r0, [sp, #20]
 8016660:	4631      	mov	r1, r6
 8016662:	f001 fa3d 	bl	8017ae0 <_Bfree>
 8016666:	9805      	ldr	r0, [sp, #20]
 8016668:	4629      	mov	r1, r5
 801666a:	f001 fa39 	bl	8017ae0 <_Bfree>
 801666e:	9907      	ldr	r1, [sp, #28]
 8016670:	9805      	ldr	r0, [sp, #20]
 8016672:	f001 fa35 	bl	8017ae0 <_Bfree>
 8016676:	9805      	ldr	r0, [sp, #20]
 8016678:	4621      	mov	r1, r4
 801667a:	f001 fa31 	bl	8017ae0 <_Bfree>
 801667e:	e60a      	b.n	8016296 <_strtod_l+0x76>
 8016680:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8016684:	1be0      	subs	r0, r4, r7
 8016686:	4281      	cmp	r1, r0
 8016688:	dbbc      	blt.n	8016604 <_strtod_l+0x3e4>
 801668a:	4a40      	ldr	r2, [pc, #256]	@ (801678c <_strtod_l+0x56c>)
 801668c:	f1c3 030f 	rsb	r3, r3, #15
 8016690:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016694:	ed91 7b00 	vldr	d7, [r1]
 8016698:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801669a:	ec4b ab16 	vmov	d6, sl, fp
 801669e:	1acb      	subs	r3, r1, r3
 80166a0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80166a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80166a8:	ed92 6b00 	vldr	d6, [r2]
 80166ac:	e796      	b.n	80165dc <_strtod_l+0x3bc>
 80166ae:	3116      	adds	r1, #22
 80166b0:	dba8      	blt.n	8016604 <_strtod_l+0x3e4>
 80166b2:	4b36      	ldr	r3, [pc, #216]	@ (801678c <_strtod_l+0x56c>)
 80166b4:	1b3c      	subs	r4, r7, r4
 80166b6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80166ba:	ed94 7b00 	vldr	d7, [r4]
 80166be:	ec4b ab16 	vmov	d6, sl, fp
 80166c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80166c6:	e78b      	b.n	80165e0 <_strtod_l+0x3c0>
 80166c8:	2000      	movs	r0, #0
 80166ca:	ec4b ab17 	vmov	d7, sl, fp
 80166ce:	4e30      	ldr	r6, [pc, #192]	@ (8016790 <_strtod_l+0x570>)
 80166d0:	1112      	asrs	r2, r2, #4
 80166d2:	4601      	mov	r1, r0
 80166d4:	2a01      	cmp	r2, #1
 80166d6:	dc23      	bgt.n	8016720 <_strtod_l+0x500>
 80166d8:	b108      	cbz	r0, 80166de <_strtod_l+0x4be>
 80166da:	ec5b ab17 	vmov	sl, fp, d7
 80166de:	4a2c      	ldr	r2, [pc, #176]	@ (8016790 <_strtod_l+0x570>)
 80166e0:	482c      	ldr	r0, [pc, #176]	@ (8016794 <_strtod_l+0x574>)
 80166e2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80166e6:	ed92 7b00 	vldr	d7, [r2]
 80166ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80166ee:	ec4b ab16 	vmov	d6, sl, fp
 80166f2:	4a29      	ldr	r2, [pc, #164]	@ (8016798 <_strtod_l+0x578>)
 80166f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80166f8:	ee17 1a90 	vmov	r1, s15
 80166fc:	400a      	ands	r2, r1
 80166fe:	4282      	cmp	r2, r0
 8016700:	ec5b ab17 	vmov	sl, fp, d7
 8016704:	d898      	bhi.n	8016638 <_strtod_l+0x418>
 8016706:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 801670a:	4282      	cmp	r2, r0
 801670c:	bf86      	itte	hi
 801670e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 801679c <_strtod_l+0x57c>
 8016712:	f04f 3aff 	movhi.w	sl, #4294967295
 8016716:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 801671a:	2200      	movs	r2, #0
 801671c:	9206      	str	r2, [sp, #24]
 801671e:	e076      	b.n	801680e <_strtod_l+0x5ee>
 8016720:	f012 0f01 	tst.w	r2, #1
 8016724:	d004      	beq.n	8016730 <_strtod_l+0x510>
 8016726:	ed96 6b00 	vldr	d6, [r6]
 801672a:	2001      	movs	r0, #1
 801672c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016730:	3101      	adds	r1, #1
 8016732:	1052      	asrs	r2, r2, #1
 8016734:	3608      	adds	r6, #8
 8016736:	e7cd      	b.n	80166d4 <_strtod_l+0x4b4>
 8016738:	d0ef      	beq.n	801671a <_strtod_l+0x4fa>
 801673a:	4252      	negs	r2, r2
 801673c:	f012 000f 	ands.w	r0, r2, #15
 8016740:	d00a      	beq.n	8016758 <_strtod_l+0x538>
 8016742:	4912      	ldr	r1, [pc, #72]	@ (801678c <_strtod_l+0x56c>)
 8016744:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016748:	ed91 7b00 	vldr	d7, [r1]
 801674c:	ec4b ab16 	vmov	d6, sl, fp
 8016750:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016754:	ec5b ab17 	vmov	sl, fp, d7
 8016758:	1112      	asrs	r2, r2, #4
 801675a:	d0de      	beq.n	801671a <_strtod_l+0x4fa>
 801675c:	2a1f      	cmp	r2, #31
 801675e:	dd1f      	ble.n	80167a0 <_strtod_l+0x580>
 8016760:	2400      	movs	r4, #0
 8016762:	4625      	mov	r5, r4
 8016764:	9407      	str	r4, [sp, #28]
 8016766:	4626      	mov	r6, r4
 8016768:	9a05      	ldr	r2, [sp, #20]
 801676a:	2322      	movs	r3, #34	@ 0x22
 801676c:	f04f 0a00 	mov.w	sl, #0
 8016770:	f04f 0b00 	mov.w	fp, #0
 8016774:	6013      	str	r3, [r2, #0]
 8016776:	e76a      	b.n	801664e <_strtod_l+0x42e>
 8016778:	0801920f 	.word	0x0801920f
 801677c:	08019214 	.word	0x08019214
 8016780:	08019206 	.word	0x08019206
 8016784:	08019209 	.word	0x08019209
 8016788:	0801958b 	.word	0x0801958b
 801678c:	08019488 	.word	0x08019488
 8016790:	08019460 	.word	0x08019460
 8016794:	7ca00000 	.word	0x7ca00000
 8016798:	7ff00000 	.word	0x7ff00000
 801679c:	7fefffff 	.word	0x7fefffff
 80167a0:	f012 0110 	ands.w	r1, r2, #16
 80167a4:	bf18      	it	ne
 80167a6:	216a      	movne	r1, #106	@ 0x6a
 80167a8:	9106      	str	r1, [sp, #24]
 80167aa:	ec4b ab17 	vmov	d7, sl, fp
 80167ae:	49b0      	ldr	r1, [pc, #704]	@ (8016a70 <_strtod_l+0x850>)
 80167b0:	2000      	movs	r0, #0
 80167b2:	07d6      	lsls	r6, r2, #31
 80167b4:	d504      	bpl.n	80167c0 <_strtod_l+0x5a0>
 80167b6:	ed91 6b00 	vldr	d6, [r1]
 80167ba:	2001      	movs	r0, #1
 80167bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80167c0:	1052      	asrs	r2, r2, #1
 80167c2:	f101 0108 	add.w	r1, r1, #8
 80167c6:	d1f4      	bne.n	80167b2 <_strtod_l+0x592>
 80167c8:	b108      	cbz	r0, 80167ce <_strtod_l+0x5ae>
 80167ca:	ec5b ab17 	vmov	sl, fp, d7
 80167ce:	9a06      	ldr	r2, [sp, #24]
 80167d0:	b1b2      	cbz	r2, 8016800 <_strtod_l+0x5e0>
 80167d2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80167d6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80167da:	2a00      	cmp	r2, #0
 80167dc:	4658      	mov	r0, fp
 80167de:	dd0f      	ble.n	8016800 <_strtod_l+0x5e0>
 80167e0:	2a1f      	cmp	r2, #31
 80167e2:	dd55      	ble.n	8016890 <_strtod_l+0x670>
 80167e4:	2a34      	cmp	r2, #52	@ 0x34
 80167e6:	bfde      	ittt	le
 80167e8:	f04f 32ff 	movle.w	r2, #4294967295
 80167ec:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80167f0:	408a      	lslle	r2, r1
 80167f2:	f04f 0a00 	mov.w	sl, #0
 80167f6:	bfcc      	ite	gt
 80167f8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80167fc:	ea02 0b00 	andle.w	fp, r2, r0
 8016800:	ec4b ab17 	vmov	d7, sl, fp
 8016804:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801680c:	d0a8      	beq.n	8016760 <_strtod_l+0x540>
 801680e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016810:	9805      	ldr	r0, [sp, #20]
 8016812:	f8cd 9000 	str.w	r9, [sp]
 8016816:	462a      	mov	r2, r5
 8016818:	f001 f9ca 	bl	8017bb0 <__s2b>
 801681c:	9007      	str	r0, [sp, #28]
 801681e:	2800      	cmp	r0, #0
 8016820:	f43f af0a 	beq.w	8016638 <_strtod_l+0x418>
 8016824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016826:	1b3f      	subs	r7, r7, r4
 8016828:	2b00      	cmp	r3, #0
 801682a:	bfb4      	ite	lt
 801682c:	463b      	movlt	r3, r7
 801682e:	2300      	movge	r3, #0
 8016830:	930a      	str	r3, [sp, #40]	@ 0x28
 8016832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016834:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8016a60 <_strtod_l+0x840>
 8016838:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801683c:	2400      	movs	r4, #0
 801683e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016840:	4625      	mov	r5, r4
 8016842:	9b07      	ldr	r3, [sp, #28]
 8016844:	9805      	ldr	r0, [sp, #20]
 8016846:	6859      	ldr	r1, [r3, #4]
 8016848:	f001 f90a 	bl	8017a60 <_Balloc>
 801684c:	4606      	mov	r6, r0
 801684e:	2800      	cmp	r0, #0
 8016850:	f43f aef6 	beq.w	8016640 <_strtod_l+0x420>
 8016854:	9b07      	ldr	r3, [sp, #28]
 8016856:	691a      	ldr	r2, [r3, #16]
 8016858:	ec4b ab19 	vmov	d9, sl, fp
 801685c:	3202      	adds	r2, #2
 801685e:	f103 010c 	add.w	r1, r3, #12
 8016862:	0092      	lsls	r2, r2, #2
 8016864:	300c      	adds	r0, #12
 8016866:	f000 fca0 	bl	80171aa <memcpy>
 801686a:	eeb0 0b49 	vmov.f64	d0, d9
 801686e:	9805      	ldr	r0, [sp, #20]
 8016870:	aa14      	add	r2, sp, #80	@ 0x50
 8016872:	a913      	add	r1, sp, #76	@ 0x4c
 8016874:	f001 fcd8 	bl	8018228 <__d2b>
 8016878:	9012      	str	r0, [sp, #72]	@ 0x48
 801687a:	2800      	cmp	r0, #0
 801687c:	f43f aee0 	beq.w	8016640 <_strtod_l+0x420>
 8016880:	9805      	ldr	r0, [sp, #20]
 8016882:	2101      	movs	r1, #1
 8016884:	f001 fa2a 	bl	8017cdc <__i2b>
 8016888:	4605      	mov	r5, r0
 801688a:	b940      	cbnz	r0, 801689e <_strtod_l+0x67e>
 801688c:	2500      	movs	r5, #0
 801688e:	e6d7      	b.n	8016640 <_strtod_l+0x420>
 8016890:	f04f 31ff 	mov.w	r1, #4294967295
 8016894:	fa01 f202 	lsl.w	r2, r1, r2
 8016898:	ea02 0a0a 	and.w	sl, r2, sl
 801689c:	e7b0      	b.n	8016800 <_strtod_l+0x5e0>
 801689e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80168a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80168a2:	2f00      	cmp	r7, #0
 80168a4:	bfab      	itete	ge
 80168a6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80168a8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80168aa:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80168ae:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80168b2:	bfac      	ite	ge
 80168b4:	eb07 0903 	addge.w	r9, r7, r3
 80168b8:	eba3 0807 	sublt.w	r8, r3, r7
 80168bc:	9b06      	ldr	r3, [sp, #24]
 80168be:	1aff      	subs	r7, r7, r3
 80168c0:	4417      	add	r7, r2
 80168c2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80168c6:	4a6b      	ldr	r2, [pc, #428]	@ (8016a74 <_strtod_l+0x854>)
 80168c8:	3f01      	subs	r7, #1
 80168ca:	4297      	cmp	r7, r2
 80168cc:	da51      	bge.n	8016972 <_strtod_l+0x752>
 80168ce:	1bd1      	subs	r1, r2, r7
 80168d0:	291f      	cmp	r1, #31
 80168d2:	eba3 0301 	sub.w	r3, r3, r1
 80168d6:	f04f 0201 	mov.w	r2, #1
 80168da:	dc3e      	bgt.n	801695a <_strtod_l+0x73a>
 80168dc:	408a      	lsls	r2, r1
 80168de:	920c      	str	r2, [sp, #48]	@ 0x30
 80168e0:	2200      	movs	r2, #0
 80168e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80168e4:	eb09 0703 	add.w	r7, r9, r3
 80168e8:	4498      	add	r8, r3
 80168ea:	9b06      	ldr	r3, [sp, #24]
 80168ec:	45b9      	cmp	r9, r7
 80168ee:	4498      	add	r8, r3
 80168f0:	464b      	mov	r3, r9
 80168f2:	bfa8      	it	ge
 80168f4:	463b      	movge	r3, r7
 80168f6:	4543      	cmp	r3, r8
 80168f8:	bfa8      	it	ge
 80168fa:	4643      	movge	r3, r8
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	bfc2      	ittt	gt
 8016900:	1aff      	subgt	r7, r7, r3
 8016902:	eba8 0803 	subgt.w	r8, r8, r3
 8016906:	eba9 0903 	subgt.w	r9, r9, r3
 801690a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801690c:	2b00      	cmp	r3, #0
 801690e:	dd16      	ble.n	801693e <_strtod_l+0x71e>
 8016910:	4629      	mov	r1, r5
 8016912:	9805      	ldr	r0, [sp, #20]
 8016914:	461a      	mov	r2, r3
 8016916:	f001 faa1 	bl	8017e5c <__pow5mult>
 801691a:	4605      	mov	r5, r0
 801691c:	2800      	cmp	r0, #0
 801691e:	d0b5      	beq.n	801688c <_strtod_l+0x66c>
 8016920:	4601      	mov	r1, r0
 8016922:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016924:	9805      	ldr	r0, [sp, #20]
 8016926:	f001 f9ef 	bl	8017d08 <__multiply>
 801692a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801692c:	2800      	cmp	r0, #0
 801692e:	f43f ae87 	beq.w	8016640 <_strtod_l+0x420>
 8016932:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016934:	9805      	ldr	r0, [sp, #20]
 8016936:	f001 f8d3 	bl	8017ae0 <_Bfree>
 801693a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801693c:	9312      	str	r3, [sp, #72]	@ 0x48
 801693e:	2f00      	cmp	r7, #0
 8016940:	dc1b      	bgt.n	801697a <_strtod_l+0x75a>
 8016942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016944:	2b00      	cmp	r3, #0
 8016946:	dd21      	ble.n	801698c <_strtod_l+0x76c>
 8016948:	4631      	mov	r1, r6
 801694a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801694c:	9805      	ldr	r0, [sp, #20]
 801694e:	f001 fa85 	bl	8017e5c <__pow5mult>
 8016952:	4606      	mov	r6, r0
 8016954:	b9d0      	cbnz	r0, 801698c <_strtod_l+0x76c>
 8016956:	2600      	movs	r6, #0
 8016958:	e672      	b.n	8016640 <_strtod_l+0x420>
 801695a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 801695e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8016962:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8016966:	37e2      	adds	r7, #226	@ 0xe2
 8016968:	fa02 f107 	lsl.w	r1, r2, r7
 801696c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801696e:	920c      	str	r2, [sp, #48]	@ 0x30
 8016970:	e7b8      	b.n	80168e4 <_strtod_l+0x6c4>
 8016972:	2200      	movs	r2, #0
 8016974:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016976:	2201      	movs	r2, #1
 8016978:	e7f9      	b.n	801696e <_strtod_l+0x74e>
 801697a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801697c:	9805      	ldr	r0, [sp, #20]
 801697e:	463a      	mov	r2, r7
 8016980:	f001 fac6 	bl	8017f10 <__lshift>
 8016984:	9012      	str	r0, [sp, #72]	@ 0x48
 8016986:	2800      	cmp	r0, #0
 8016988:	d1db      	bne.n	8016942 <_strtod_l+0x722>
 801698a:	e659      	b.n	8016640 <_strtod_l+0x420>
 801698c:	f1b8 0f00 	cmp.w	r8, #0
 8016990:	dd07      	ble.n	80169a2 <_strtod_l+0x782>
 8016992:	4631      	mov	r1, r6
 8016994:	9805      	ldr	r0, [sp, #20]
 8016996:	4642      	mov	r2, r8
 8016998:	f001 faba 	bl	8017f10 <__lshift>
 801699c:	4606      	mov	r6, r0
 801699e:	2800      	cmp	r0, #0
 80169a0:	d0d9      	beq.n	8016956 <_strtod_l+0x736>
 80169a2:	f1b9 0f00 	cmp.w	r9, #0
 80169a6:	dd08      	ble.n	80169ba <_strtod_l+0x79a>
 80169a8:	4629      	mov	r1, r5
 80169aa:	9805      	ldr	r0, [sp, #20]
 80169ac:	464a      	mov	r2, r9
 80169ae:	f001 faaf 	bl	8017f10 <__lshift>
 80169b2:	4605      	mov	r5, r0
 80169b4:	2800      	cmp	r0, #0
 80169b6:	f43f ae43 	beq.w	8016640 <_strtod_l+0x420>
 80169ba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80169bc:	9805      	ldr	r0, [sp, #20]
 80169be:	4632      	mov	r2, r6
 80169c0:	f001 fb2e 	bl	8018020 <__mdiff>
 80169c4:	4604      	mov	r4, r0
 80169c6:	2800      	cmp	r0, #0
 80169c8:	f43f ae3a 	beq.w	8016640 <_strtod_l+0x420>
 80169cc:	2300      	movs	r3, #0
 80169ce:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80169d2:	60c3      	str	r3, [r0, #12]
 80169d4:	4629      	mov	r1, r5
 80169d6:	f001 fb07 	bl	8017fe8 <__mcmp>
 80169da:	2800      	cmp	r0, #0
 80169dc:	da4e      	bge.n	8016a7c <_strtod_l+0x85c>
 80169de:	ea58 080a 	orrs.w	r8, r8, sl
 80169e2:	d174      	bne.n	8016ace <_strtod_l+0x8ae>
 80169e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d170      	bne.n	8016ace <_strtod_l+0x8ae>
 80169ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80169f0:	0d1b      	lsrs	r3, r3, #20
 80169f2:	051b      	lsls	r3, r3, #20
 80169f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80169f8:	d969      	bls.n	8016ace <_strtod_l+0x8ae>
 80169fa:	6963      	ldr	r3, [r4, #20]
 80169fc:	b913      	cbnz	r3, 8016a04 <_strtod_l+0x7e4>
 80169fe:	6923      	ldr	r3, [r4, #16]
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	dd64      	ble.n	8016ace <_strtod_l+0x8ae>
 8016a04:	4621      	mov	r1, r4
 8016a06:	2201      	movs	r2, #1
 8016a08:	9805      	ldr	r0, [sp, #20]
 8016a0a:	f001 fa81 	bl	8017f10 <__lshift>
 8016a0e:	4629      	mov	r1, r5
 8016a10:	4604      	mov	r4, r0
 8016a12:	f001 fae9 	bl	8017fe8 <__mcmp>
 8016a16:	2800      	cmp	r0, #0
 8016a18:	dd59      	ble.n	8016ace <_strtod_l+0x8ae>
 8016a1a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016a1e:	9a06      	ldr	r2, [sp, #24]
 8016a20:	0d1b      	lsrs	r3, r3, #20
 8016a22:	051b      	lsls	r3, r3, #20
 8016a24:	2a00      	cmp	r2, #0
 8016a26:	d070      	beq.n	8016b0a <_strtod_l+0x8ea>
 8016a28:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016a2c:	d86d      	bhi.n	8016b0a <_strtod_l+0x8ea>
 8016a2e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016a32:	f67f ae99 	bls.w	8016768 <_strtod_l+0x548>
 8016a36:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8016a68 <_strtod_l+0x848>
 8016a3a:	ec4b ab16 	vmov	d6, sl, fp
 8016a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8016a78 <_strtod_l+0x858>)
 8016a40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016a44:	ee17 2a90 	vmov	r2, s15
 8016a48:	4013      	ands	r3, r2
 8016a4a:	ec5b ab17 	vmov	sl, fp, d7
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	f47f ae01 	bne.w	8016656 <_strtod_l+0x436>
 8016a54:	9a05      	ldr	r2, [sp, #20]
 8016a56:	2322      	movs	r3, #34	@ 0x22
 8016a58:	6013      	str	r3, [r2, #0]
 8016a5a:	e5fc      	b.n	8016656 <_strtod_l+0x436>
 8016a5c:	f3af 8000 	nop.w
 8016a60:	ffc00000 	.word	0xffc00000
 8016a64:	41dfffff 	.word	0x41dfffff
 8016a68:	00000000 	.word	0x00000000
 8016a6c:	39500000 	.word	0x39500000
 8016a70:	08019240 	.word	0x08019240
 8016a74:	fffffc02 	.word	0xfffffc02
 8016a78:	7ff00000 	.word	0x7ff00000
 8016a7c:	46d9      	mov	r9, fp
 8016a7e:	d15d      	bne.n	8016b3c <_strtod_l+0x91c>
 8016a80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016a84:	f1b8 0f00 	cmp.w	r8, #0
 8016a88:	d02a      	beq.n	8016ae0 <_strtod_l+0x8c0>
 8016a8a:	4aab      	ldr	r2, [pc, #684]	@ (8016d38 <_strtod_l+0xb18>)
 8016a8c:	4293      	cmp	r3, r2
 8016a8e:	d12a      	bne.n	8016ae6 <_strtod_l+0x8c6>
 8016a90:	9b06      	ldr	r3, [sp, #24]
 8016a92:	4652      	mov	r2, sl
 8016a94:	b1fb      	cbz	r3, 8016ad6 <_strtod_l+0x8b6>
 8016a96:	4ba9      	ldr	r3, [pc, #676]	@ (8016d3c <_strtod_l+0xb1c>)
 8016a98:	ea0b 0303 	and.w	r3, fp, r3
 8016a9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8016aa4:	d81a      	bhi.n	8016adc <_strtod_l+0x8bc>
 8016aa6:	0d1b      	lsrs	r3, r3, #20
 8016aa8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016aac:	fa01 f303 	lsl.w	r3, r1, r3
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d118      	bne.n	8016ae6 <_strtod_l+0x8c6>
 8016ab4:	4ba2      	ldr	r3, [pc, #648]	@ (8016d40 <_strtod_l+0xb20>)
 8016ab6:	4599      	cmp	r9, r3
 8016ab8:	d102      	bne.n	8016ac0 <_strtod_l+0x8a0>
 8016aba:	3201      	adds	r2, #1
 8016abc:	f43f adc0 	beq.w	8016640 <_strtod_l+0x420>
 8016ac0:	4b9e      	ldr	r3, [pc, #632]	@ (8016d3c <_strtod_l+0xb1c>)
 8016ac2:	ea09 0303 	and.w	r3, r9, r3
 8016ac6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8016aca:	f04f 0a00 	mov.w	sl, #0
 8016ace:	9b06      	ldr	r3, [sp, #24]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d1b0      	bne.n	8016a36 <_strtod_l+0x816>
 8016ad4:	e5bf      	b.n	8016656 <_strtod_l+0x436>
 8016ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8016ada:	e7e9      	b.n	8016ab0 <_strtod_l+0x890>
 8016adc:	460b      	mov	r3, r1
 8016ade:	e7e7      	b.n	8016ab0 <_strtod_l+0x890>
 8016ae0:	ea53 030a 	orrs.w	r3, r3, sl
 8016ae4:	d099      	beq.n	8016a1a <_strtod_l+0x7fa>
 8016ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016ae8:	b1c3      	cbz	r3, 8016b1c <_strtod_l+0x8fc>
 8016aea:	ea13 0f09 	tst.w	r3, r9
 8016aee:	d0ee      	beq.n	8016ace <_strtod_l+0x8ae>
 8016af0:	9a06      	ldr	r2, [sp, #24]
 8016af2:	4650      	mov	r0, sl
 8016af4:	4659      	mov	r1, fp
 8016af6:	f1b8 0f00 	cmp.w	r8, #0
 8016afa:	d013      	beq.n	8016b24 <_strtod_l+0x904>
 8016afc:	f7ff fb73 	bl	80161e6 <sulp>
 8016b00:	ee39 7b00 	vadd.f64	d7, d9, d0
 8016b04:	ec5b ab17 	vmov	sl, fp, d7
 8016b08:	e7e1      	b.n	8016ace <_strtod_l+0x8ae>
 8016b0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016b0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016b12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016b16:	f04f 3aff 	mov.w	sl, #4294967295
 8016b1a:	e7d8      	b.n	8016ace <_strtod_l+0x8ae>
 8016b1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b1e:	ea13 0f0a 	tst.w	r3, sl
 8016b22:	e7e4      	b.n	8016aee <_strtod_l+0x8ce>
 8016b24:	f7ff fb5f 	bl	80161e6 <sulp>
 8016b28:	ee39 0b40 	vsub.f64	d0, d9, d0
 8016b2c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b34:	ec5b ab10 	vmov	sl, fp, d0
 8016b38:	d1c9      	bne.n	8016ace <_strtod_l+0x8ae>
 8016b3a:	e615      	b.n	8016768 <_strtod_l+0x548>
 8016b3c:	4629      	mov	r1, r5
 8016b3e:	4620      	mov	r0, r4
 8016b40:	f001 fbca 	bl	80182d8 <__ratio>
 8016b44:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8016b48:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b50:	d85d      	bhi.n	8016c0e <_strtod_l+0x9ee>
 8016b52:	f1b8 0f00 	cmp.w	r8, #0
 8016b56:	d164      	bne.n	8016c22 <_strtod_l+0xa02>
 8016b58:	f1ba 0f00 	cmp.w	sl, #0
 8016b5c:	d14b      	bne.n	8016bf6 <_strtod_l+0x9d6>
 8016b5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b62:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d160      	bne.n	8016c2c <_strtod_l+0xa0c>
 8016b6a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8016b6e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b76:	d401      	bmi.n	8016b7c <_strtod_l+0x95c>
 8016b78:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016b7c:	eeb1 ab48 	vneg.f64	d10, d8
 8016b80:	486e      	ldr	r0, [pc, #440]	@ (8016d3c <_strtod_l+0xb1c>)
 8016b82:	4970      	ldr	r1, [pc, #448]	@ (8016d44 <_strtod_l+0xb24>)
 8016b84:	ea09 0700 	and.w	r7, r9, r0
 8016b88:	428f      	cmp	r7, r1
 8016b8a:	ec53 2b1a 	vmov	r2, r3, d10
 8016b8e:	d17d      	bne.n	8016c8c <_strtod_l+0xa6c>
 8016b90:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8016b94:	ec4b ab1c 	vmov	d12, sl, fp
 8016b98:	eeb0 0b4c 	vmov.f64	d0, d12
 8016b9c:	f001 fad4 	bl	8018148 <__ulp>
 8016ba0:	4866      	ldr	r0, [pc, #408]	@ (8016d3c <_strtod_l+0xb1c>)
 8016ba2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8016ba6:	ee1c 3a90 	vmov	r3, s25
 8016baa:	4a67      	ldr	r2, [pc, #412]	@ (8016d48 <_strtod_l+0xb28>)
 8016bac:	ea03 0100 	and.w	r1, r3, r0
 8016bb0:	4291      	cmp	r1, r2
 8016bb2:	ec5b ab1c 	vmov	sl, fp, d12
 8016bb6:	d93c      	bls.n	8016c32 <_strtod_l+0xa12>
 8016bb8:	ee19 2a90 	vmov	r2, s19
 8016bbc:	4b60      	ldr	r3, [pc, #384]	@ (8016d40 <_strtod_l+0xb20>)
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d104      	bne.n	8016bcc <_strtod_l+0x9ac>
 8016bc2:	ee19 3a10 	vmov	r3, s18
 8016bc6:	3301      	adds	r3, #1
 8016bc8:	f43f ad3a 	beq.w	8016640 <_strtod_l+0x420>
 8016bcc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8016d40 <_strtod_l+0xb20>
 8016bd0:	f04f 3aff 	mov.w	sl, #4294967295
 8016bd4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016bd6:	9805      	ldr	r0, [sp, #20]
 8016bd8:	f000 ff82 	bl	8017ae0 <_Bfree>
 8016bdc:	9805      	ldr	r0, [sp, #20]
 8016bde:	4631      	mov	r1, r6
 8016be0:	f000 ff7e 	bl	8017ae0 <_Bfree>
 8016be4:	9805      	ldr	r0, [sp, #20]
 8016be6:	4629      	mov	r1, r5
 8016be8:	f000 ff7a 	bl	8017ae0 <_Bfree>
 8016bec:	9805      	ldr	r0, [sp, #20]
 8016bee:	4621      	mov	r1, r4
 8016bf0:	f000 ff76 	bl	8017ae0 <_Bfree>
 8016bf4:	e625      	b.n	8016842 <_strtod_l+0x622>
 8016bf6:	f1ba 0f01 	cmp.w	sl, #1
 8016bfa:	d103      	bne.n	8016c04 <_strtod_l+0x9e4>
 8016bfc:	f1bb 0f00 	cmp.w	fp, #0
 8016c00:	f43f adb2 	beq.w	8016768 <_strtod_l+0x548>
 8016c04:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016c08:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8016c0c:	e7b8      	b.n	8016b80 <_strtod_l+0x960>
 8016c0e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8016c12:	ee20 8b08 	vmul.f64	d8, d0, d8
 8016c16:	f1b8 0f00 	cmp.w	r8, #0
 8016c1a:	d0af      	beq.n	8016b7c <_strtod_l+0x95c>
 8016c1c:	eeb0 ab48 	vmov.f64	d10, d8
 8016c20:	e7ae      	b.n	8016b80 <_strtod_l+0x960>
 8016c22:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8016c26:	eeb0 8b4a 	vmov.f64	d8, d10
 8016c2a:	e7a9      	b.n	8016b80 <_strtod_l+0x960>
 8016c2c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8016c30:	e7a6      	b.n	8016b80 <_strtod_l+0x960>
 8016c32:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016c36:	9b06      	ldr	r3, [sp, #24]
 8016c38:	46d9      	mov	r9, fp
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d1ca      	bne.n	8016bd4 <_strtod_l+0x9b4>
 8016c3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016c42:	0d1b      	lsrs	r3, r3, #20
 8016c44:	051b      	lsls	r3, r3, #20
 8016c46:	429f      	cmp	r7, r3
 8016c48:	d1c4      	bne.n	8016bd4 <_strtod_l+0x9b4>
 8016c4a:	ec51 0b18 	vmov	r0, r1, d8
 8016c4e:	f7e9 fdd3 	bl	80007f8 <__aeabi_d2lz>
 8016c52:	f7e9 fd3b 	bl	80006cc <__aeabi_l2d>
 8016c56:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8016c5a:	ec41 0b17 	vmov	d7, r0, r1
 8016c5e:	ea49 090a 	orr.w	r9, r9, sl
 8016c62:	ea59 0908 	orrs.w	r9, r9, r8
 8016c66:	ee38 8b47 	vsub.f64	d8, d8, d7
 8016c6a:	d03c      	beq.n	8016ce6 <_strtod_l+0xac6>
 8016c6c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8016d20 <_strtod_l+0xb00>
 8016c70:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c78:	f53f aced 	bmi.w	8016656 <_strtod_l+0x436>
 8016c7c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016d28 <_strtod_l+0xb08>
 8016c80:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c88:	dda4      	ble.n	8016bd4 <_strtod_l+0x9b4>
 8016c8a:	e4e4      	b.n	8016656 <_strtod_l+0x436>
 8016c8c:	9906      	ldr	r1, [sp, #24]
 8016c8e:	b1e1      	cbz	r1, 8016cca <_strtod_l+0xaaa>
 8016c90:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8016c94:	d819      	bhi.n	8016cca <_strtod_l+0xaaa>
 8016c96:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8016c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c9e:	d811      	bhi.n	8016cc4 <_strtod_l+0xaa4>
 8016ca0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8016ca4:	ee18 3a10 	vmov	r3, s16
 8016ca8:	2b01      	cmp	r3, #1
 8016caa:	bf38      	it	cc
 8016cac:	2301      	movcc	r3, #1
 8016cae:	ee08 3a10 	vmov	s16, r3
 8016cb2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8016cb6:	f1b8 0f00 	cmp.w	r8, #0
 8016cba:	d111      	bne.n	8016ce0 <_strtod_l+0xac0>
 8016cbc:	eeb1 7b48 	vneg.f64	d7, d8
 8016cc0:	ec53 2b17 	vmov	r2, r3, d7
 8016cc4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8016cc8:	1bcb      	subs	r3, r1, r7
 8016cca:	eeb0 0b49 	vmov.f64	d0, d9
 8016cce:	ec43 2b1a 	vmov	d10, r2, r3
 8016cd2:	f001 fa39 	bl	8018148 <__ulp>
 8016cd6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8016cda:	ec5b ab19 	vmov	sl, fp, d9
 8016cde:	e7aa      	b.n	8016c36 <_strtod_l+0xa16>
 8016ce0:	eeb0 7b48 	vmov.f64	d7, d8
 8016ce4:	e7ec      	b.n	8016cc0 <_strtod_l+0xaa0>
 8016ce6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8016d30 <_strtod_l+0xb10>
 8016cea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf2:	f57f af6f 	bpl.w	8016bd4 <_strtod_l+0x9b4>
 8016cf6:	e4ae      	b.n	8016656 <_strtod_l+0x436>
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	9308      	str	r3, [sp, #32]
 8016cfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016cfe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016d00:	6013      	str	r3, [r2, #0]
 8016d02:	f7ff bacc 	b.w	801629e <_strtod_l+0x7e>
 8016d06:	2a65      	cmp	r2, #101	@ 0x65
 8016d08:	f43f abbc 	beq.w	8016484 <_strtod_l+0x264>
 8016d0c:	2a45      	cmp	r2, #69	@ 0x45
 8016d0e:	f43f abb9 	beq.w	8016484 <_strtod_l+0x264>
 8016d12:	2301      	movs	r3, #1
 8016d14:	9306      	str	r3, [sp, #24]
 8016d16:	f7ff bbf0 	b.w	80164fa <_strtod_l+0x2da>
 8016d1a:	bf00      	nop
 8016d1c:	f3af 8000 	nop.w
 8016d20:	94a03595 	.word	0x94a03595
 8016d24:	3fdfffff 	.word	0x3fdfffff
 8016d28:	35afe535 	.word	0x35afe535
 8016d2c:	3fe00000 	.word	0x3fe00000
 8016d30:	94a03595 	.word	0x94a03595
 8016d34:	3fcfffff 	.word	0x3fcfffff
 8016d38:	000fffff 	.word	0x000fffff
 8016d3c:	7ff00000 	.word	0x7ff00000
 8016d40:	7fefffff 	.word	0x7fefffff
 8016d44:	7fe00000 	.word	0x7fe00000
 8016d48:	7c9fffff 	.word	0x7c9fffff

08016d4c <strtod>:
 8016d4c:	460a      	mov	r2, r1
 8016d4e:	4601      	mov	r1, r0
 8016d50:	4802      	ldr	r0, [pc, #8]	@ (8016d5c <strtod+0x10>)
 8016d52:	4b03      	ldr	r3, [pc, #12]	@ (8016d60 <strtod+0x14>)
 8016d54:	6800      	ldr	r0, [r0, #0]
 8016d56:	f7ff ba63 	b.w	8016220 <_strtod_l>
 8016d5a:	bf00      	nop
 8016d5c:	24000240 	.word	0x24000240
 8016d60:	240000d4 	.word	0x240000d4

08016d64 <_strtol_l.constprop.0>:
 8016d64:	2b24      	cmp	r3, #36	@ 0x24
 8016d66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d6a:	4686      	mov	lr, r0
 8016d6c:	4690      	mov	r8, r2
 8016d6e:	d801      	bhi.n	8016d74 <_strtol_l.constprop.0+0x10>
 8016d70:	2b01      	cmp	r3, #1
 8016d72:	d106      	bne.n	8016d82 <_strtol_l.constprop.0+0x1e>
 8016d74:	f000 f9ec 	bl	8017150 <__errno>
 8016d78:	2316      	movs	r3, #22
 8016d7a:	6003      	str	r3, [r0, #0]
 8016d7c:	2000      	movs	r0, #0
 8016d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d82:	4834      	ldr	r0, [pc, #208]	@ (8016e54 <_strtol_l.constprop.0+0xf0>)
 8016d84:	460d      	mov	r5, r1
 8016d86:	462a      	mov	r2, r5
 8016d88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d8c:	5d06      	ldrb	r6, [r0, r4]
 8016d8e:	f016 0608 	ands.w	r6, r6, #8
 8016d92:	d1f8      	bne.n	8016d86 <_strtol_l.constprop.0+0x22>
 8016d94:	2c2d      	cmp	r4, #45	@ 0x2d
 8016d96:	d12d      	bne.n	8016df4 <_strtol_l.constprop.0+0x90>
 8016d98:	782c      	ldrb	r4, [r5, #0]
 8016d9a:	2601      	movs	r6, #1
 8016d9c:	1c95      	adds	r5, r2, #2
 8016d9e:	f033 0210 	bics.w	r2, r3, #16
 8016da2:	d109      	bne.n	8016db8 <_strtol_l.constprop.0+0x54>
 8016da4:	2c30      	cmp	r4, #48	@ 0x30
 8016da6:	d12a      	bne.n	8016dfe <_strtol_l.constprop.0+0x9a>
 8016da8:	782a      	ldrb	r2, [r5, #0]
 8016daa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016dae:	2a58      	cmp	r2, #88	@ 0x58
 8016db0:	d125      	bne.n	8016dfe <_strtol_l.constprop.0+0x9a>
 8016db2:	786c      	ldrb	r4, [r5, #1]
 8016db4:	2310      	movs	r3, #16
 8016db6:	3502      	adds	r5, #2
 8016db8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016dbc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	fbbc f9f3 	udiv	r9, ip, r3
 8016dc6:	4610      	mov	r0, r2
 8016dc8:	fb03 ca19 	mls	sl, r3, r9, ip
 8016dcc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016dd0:	2f09      	cmp	r7, #9
 8016dd2:	d81b      	bhi.n	8016e0c <_strtol_l.constprop.0+0xa8>
 8016dd4:	463c      	mov	r4, r7
 8016dd6:	42a3      	cmp	r3, r4
 8016dd8:	dd27      	ble.n	8016e2a <_strtol_l.constprop.0+0xc6>
 8016dda:	1c57      	adds	r7, r2, #1
 8016ddc:	d007      	beq.n	8016dee <_strtol_l.constprop.0+0x8a>
 8016dde:	4581      	cmp	r9, r0
 8016de0:	d320      	bcc.n	8016e24 <_strtol_l.constprop.0+0xc0>
 8016de2:	d101      	bne.n	8016de8 <_strtol_l.constprop.0+0x84>
 8016de4:	45a2      	cmp	sl, r4
 8016de6:	db1d      	blt.n	8016e24 <_strtol_l.constprop.0+0xc0>
 8016de8:	fb00 4003 	mla	r0, r0, r3, r4
 8016dec:	2201      	movs	r2, #1
 8016dee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016df2:	e7eb      	b.n	8016dcc <_strtol_l.constprop.0+0x68>
 8016df4:	2c2b      	cmp	r4, #43	@ 0x2b
 8016df6:	bf04      	itt	eq
 8016df8:	782c      	ldrbeq	r4, [r5, #0]
 8016dfa:	1c95      	addeq	r5, r2, #2
 8016dfc:	e7cf      	b.n	8016d9e <_strtol_l.constprop.0+0x3a>
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d1da      	bne.n	8016db8 <_strtol_l.constprop.0+0x54>
 8016e02:	2c30      	cmp	r4, #48	@ 0x30
 8016e04:	bf0c      	ite	eq
 8016e06:	2308      	moveq	r3, #8
 8016e08:	230a      	movne	r3, #10
 8016e0a:	e7d5      	b.n	8016db8 <_strtol_l.constprop.0+0x54>
 8016e0c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016e10:	2f19      	cmp	r7, #25
 8016e12:	d801      	bhi.n	8016e18 <_strtol_l.constprop.0+0xb4>
 8016e14:	3c37      	subs	r4, #55	@ 0x37
 8016e16:	e7de      	b.n	8016dd6 <_strtol_l.constprop.0+0x72>
 8016e18:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016e1c:	2f19      	cmp	r7, #25
 8016e1e:	d804      	bhi.n	8016e2a <_strtol_l.constprop.0+0xc6>
 8016e20:	3c57      	subs	r4, #87	@ 0x57
 8016e22:	e7d8      	b.n	8016dd6 <_strtol_l.constprop.0+0x72>
 8016e24:	f04f 32ff 	mov.w	r2, #4294967295
 8016e28:	e7e1      	b.n	8016dee <_strtol_l.constprop.0+0x8a>
 8016e2a:	1c53      	adds	r3, r2, #1
 8016e2c:	d108      	bne.n	8016e40 <_strtol_l.constprop.0+0xdc>
 8016e2e:	2322      	movs	r3, #34	@ 0x22
 8016e30:	f8ce 3000 	str.w	r3, [lr]
 8016e34:	4660      	mov	r0, ip
 8016e36:	f1b8 0f00 	cmp.w	r8, #0
 8016e3a:	d0a0      	beq.n	8016d7e <_strtol_l.constprop.0+0x1a>
 8016e3c:	1e69      	subs	r1, r5, #1
 8016e3e:	e006      	b.n	8016e4e <_strtol_l.constprop.0+0xea>
 8016e40:	b106      	cbz	r6, 8016e44 <_strtol_l.constprop.0+0xe0>
 8016e42:	4240      	negs	r0, r0
 8016e44:	f1b8 0f00 	cmp.w	r8, #0
 8016e48:	d099      	beq.n	8016d7e <_strtol_l.constprop.0+0x1a>
 8016e4a:	2a00      	cmp	r2, #0
 8016e4c:	d1f6      	bne.n	8016e3c <_strtol_l.constprop.0+0xd8>
 8016e4e:	f8c8 1000 	str.w	r1, [r8]
 8016e52:	e794      	b.n	8016d7e <_strtol_l.constprop.0+0x1a>
 8016e54:	08019269 	.word	0x08019269

08016e58 <strtol>:
 8016e58:	4613      	mov	r3, r2
 8016e5a:	460a      	mov	r2, r1
 8016e5c:	4601      	mov	r1, r0
 8016e5e:	4802      	ldr	r0, [pc, #8]	@ (8016e68 <strtol+0x10>)
 8016e60:	6800      	ldr	r0, [r0, #0]
 8016e62:	f7ff bf7f 	b.w	8016d64 <_strtol_l.constprop.0>
 8016e66:	bf00      	nop
 8016e68:	24000240 	.word	0x24000240

08016e6c <std>:
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	b510      	push	{r4, lr}
 8016e70:	4604      	mov	r4, r0
 8016e72:	e9c0 3300 	strd	r3, r3, [r0]
 8016e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e7a:	6083      	str	r3, [r0, #8]
 8016e7c:	8181      	strh	r1, [r0, #12]
 8016e7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016e80:	81c2      	strh	r2, [r0, #14]
 8016e82:	6183      	str	r3, [r0, #24]
 8016e84:	4619      	mov	r1, r3
 8016e86:	2208      	movs	r2, #8
 8016e88:	305c      	adds	r0, #92	@ 0x5c
 8016e8a:	f000 f8f4 	bl	8017076 <memset>
 8016e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8016ec4 <std+0x58>)
 8016e90:	6263      	str	r3, [r4, #36]	@ 0x24
 8016e92:	4b0d      	ldr	r3, [pc, #52]	@ (8016ec8 <std+0x5c>)
 8016e94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016e96:	4b0d      	ldr	r3, [pc, #52]	@ (8016ecc <std+0x60>)
 8016e98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8016ed0 <std+0x64>)
 8016e9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8016e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8016ed4 <std+0x68>)
 8016ea0:	6224      	str	r4, [r4, #32]
 8016ea2:	429c      	cmp	r4, r3
 8016ea4:	d006      	beq.n	8016eb4 <std+0x48>
 8016ea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016eaa:	4294      	cmp	r4, r2
 8016eac:	d002      	beq.n	8016eb4 <std+0x48>
 8016eae:	33d0      	adds	r3, #208	@ 0xd0
 8016eb0:	429c      	cmp	r4, r3
 8016eb2:	d105      	bne.n	8016ec0 <std+0x54>
 8016eb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ebc:	f000 b972 	b.w	80171a4 <__retarget_lock_init_recursive>
 8016ec0:	bd10      	pop	{r4, pc}
 8016ec2:	bf00      	nop
 8016ec4:	08016ff1 	.word	0x08016ff1
 8016ec8:	08017013 	.word	0x08017013
 8016ecc:	0801704b 	.word	0x0801704b
 8016ed0:	0801706f 	.word	0x0801706f
 8016ed4:	240067c8 	.word	0x240067c8

08016ed8 <stdio_exit_handler>:
 8016ed8:	4a02      	ldr	r2, [pc, #8]	@ (8016ee4 <stdio_exit_handler+0xc>)
 8016eda:	4903      	ldr	r1, [pc, #12]	@ (8016ee8 <stdio_exit_handler+0x10>)
 8016edc:	4803      	ldr	r0, [pc, #12]	@ (8016eec <stdio_exit_handler+0x14>)
 8016ede:	f000 b869 	b.w	8016fb4 <_fwalk_sglue>
 8016ee2:	bf00      	nop
 8016ee4:	240000c8 	.word	0x240000c8
 8016ee8:	080184e1 	.word	0x080184e1
 8016eec:	24000244 	.word	0x24000244

08016ef0 <cleanup_stdio>:
 8016ef0:	6841      	ldr	r1, [r0, #4]
 8016ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8016f24 <cleanup_stdio+0x34>)
 8016ef4:	4299      	cmp	r1, r3
 8016ef6:	b510      	push	{r4, lr}
 8016ef8:	4604      	mov	r4, r0
 8016efa:	d001      	beq.n	8016f00 <cleanup_stdio+0x10>
 8016efc:	f001 faf0 	bl	80184e0 <_fflush_r>
 8016f00:	68a1      	ldr	r1, [r4, #8]
 8016f02:	4b09      	ldr	r3, [pc, #36]	@ (8016f28 <cleanup_stdio+0x38>)
 8016f04:	4299      	cmp	r1, r3
 8016f06:	d002      	beq.n	8016f0e <cleanup_stdio+0x1e>
 8016f08:	4620      	mov	r0, r4
 8016f0a:	f001 fae9 	bl	80184e0 <_fflush_r>
 8016f0e:	68e1      	ldr	r1, [r4, #12]
 8016f10:	4b06      	ldr	r3, [pc, #24]	@ (8016f2c <cleanup_stdio+0x3c>)
 8016f12:	4299      	cmp	r1, r3
 8016f14:	d004      	beq.n	8016f20 <cleanup_stdio+0x30>
 8016f16:	4620      	mov	r0, r4
 8016f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f1c:	f001 bae0 	b.w	80184e0 <_fflush_r>
 8016f20:	bd10      	pop	{r4, pc}
 8016f22:	bf00      	nop
 8016f24:	240067c8 	.word	0x240067c8
 8016f28:	24006830 	.word	0x24006830
 8016f2c:	24006898 	.word	0x24006898

08016f30 <global_stdio_init.part.0>:
 8016f30:	b510      	push	{r4, lr}
 8016f32:	4b0b      	ldr	r3, [pc, #44]	@ (8016f60 <global_stdio_init.part.0+0x30>)
 8016f34:	4c0b      	ldr	r4, [pc, #44]	@ (8016f64 <global_stdio_init.part.0+0x34>)
 8016f36:	4a0c      	ldr	r2, [pc, #48]	@ (8016f68 <global_stdio_init.part.0+0x38>)
 8016f38:	601a      	str	r2, [r3, #0]
 8016f3a:	4620      	mov	r0, r4
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	2104      	movs	r1, #4
 8016f40:	f7ff ff94 	bl	8016e6c <std>
 8016f44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016f48:	2201      	movs	r2, #1
 8016f4a:	2109      	movs	r1, #9
 8016f4c:	f7ff ff8e 	bl	8016e6c <std>
 8016f50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016f54:	2202      	movs	r2, #2
 8016f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f5a:	2112      	movs	r1, #18
 8016f5c:	f7ff bf86 	b.w	8016e6c <std>
 8016f60:	24006900 	.word	0x24006900
 8016f64:	240067c8 	.word	0x240067c8
 8016f68:	08016ed9 	.word	0x08016ed9

08016f6c <__sfp_lock_acquire>:
 8016f6c:	4801      	ldr	r0, [pc, #4]	@ (8016f74 <__sfp_lock_acquire+0x8>)
 8016f6e:	f000 b91a 	b.w	80171a6 <__retarget_lock_acquire_recursive>
 8016f72:	bf00      	nop
 8016f74:	24006909 	.word	0x24006909

08016f78 <__sfp_lock_release>:
 8016f78:	4801      	ldr	r0, [pc, #4]	@ (8016f80 <__sfp_lock_release+0x8>)
 8016f7a:	f000 b915 	b.w	80171a8 <__retarget_lock_release_recursive>
 8016f7e:	bf00      	nop
 8016f80:	24006909 	.word	0x24006909

08016f84 <__sinit>:
 8016f84:	b510      	push	{r4, lr}
 8016f86:	4604      	mov	r4, r0
 8016f88:	f7ff fff0 	bl	8016f6c <__sfp_lock_acquire>
 8016f8c:	6a23      	ldr	r3, [r4, #32]
 8016f8e:	b11b      	cbz	r3, 8016f98 <__sinit+0x14>
 8016f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f94:	f7ff bff0 	b.w	8016f78 <__sfp_lock_release>
 8016f98:	4b04      	ldr	r3, [pc, #16]	@ (8016fac <__sinit+0x28>)
 8016f9a:	6223      	str	r3, [r4, #32]
 8016f9c:	4b04      	ldr	r3, [pc, #16]	@ (8016fb0 <__sinit+0x2c>)
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d1f5      	bne.n	8016f90 <__sinit+0xc>
 8016fa4:	f7ff ffc4 	bl	8016f30 <global_stdio_init.part.0>
 8016fa8:	e7f2      	b.n	8016f90 <__sinit+0xc>
 8016faa:	bf00      	nop
 8016fac:	08016ef1 	.word	0x08016ef1
 8016fb0:	24006900 	.word	0x24006900

08016fb4 <_fwalk_sglue>:
 8016fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fb8:	4607      	mov	r7, r0
 8016fba:	4688      	mov	r8, r1
 8016fbc:	4614      	mov	r4, r2
 8016fbe:	2600      	movs	r6, #0
 8016fc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016fc4:	f1b9 0901 	subs.w	r9, r9, #1
 8016fc8:	d505      	bpl.n	8016fd6 <_fwalk_sglue+0x22>
 8016fca:	6824      	ldr	r4, [r4, #0]
 8016fcc:	2c00      	cmp	r4, #0
 8016fce:	d1f7      	bne.n	8016fc0 <_fwalk_sglue+0xc>
 8016fd0:	4630      	mov	r0, r6
 8016fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fd6:	89ab      	ldrh	r3, [r5, #12]
 8016fd8:	2b01      	cmp	r3, #1
 8016fda:	d907      	bls.n	8016fec <_fwalk_sglue+0x38>
 8016fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016fe0:	3301      	adds	r3, #1
 8016fe2:	d003      	beq.n	8016fec <_fwalk_sglue+0x38>
 8016fe4:	4629      	mov	r1, r5
 8016fe6:	4638      	mov	r0, r7
 8016fe8:	47c0      	blx	r8
 8016fea:	4306      	orrs	r6, r0
 8016fec:	3568      	adds	r5, #104	@ 0x68
 8016fee:	e7e9      	b.n	8016fc4 <_fwalk_sglue+0x10>

08016ff0 <__sread>:
 8016ff0:	b510      	push	{r4, lr}
 8016ff2:	460c      	mov	r4, r1
 8016ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ff8:	f000 f886 	bl	8017108 <_read_r>
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	bfab      	itete	ge
 8017000:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017002:	89a3      	ldrhlt	r3, [r4, #12]
 8017004:	181b      	addge	r3, r3, r0
 8017006:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801700a:	bfac      	ite	ge
 801700c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801700e:	81a3      	strhlt	r3, [r4, #12]
 8017010:	bd10      	pop	{r4, pc}

08017012 <__swrite>:
 8017012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017016:	461f      	mov	r7, r3
 8017018:	898b      	ldrh	r3, [r1, #12]
 801701a:	05db      	lsls	r3, r3, #23
 801701c:	4605      	mov	r5, r0
 801701e:	460c      	mov	r4, r1
 8017020:	4616      	mov	r6, r2
 8017022:	d505      	bpl.n	8017030 <__swrite+0x1e>
 8017024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017028:	2302      	movs	r3, #2
 801702a:	2200      	movs	r2, #0
 801702c:	f000 f85a 	bl	80170e4 <_lseek_r>
 8017030:	89a3      	ldrh	r3, [r4, #12]
 8017032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017036:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801703a:	81a3      	strh	r3, [r4, #12]
 801703c:	4632      	mov	r2, r6
 801703e:	463b      	mov	r3, r7
 8017040:	4628      	mov	r0, r5
 8017042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017046:	f000 b871 	b.w	801712c <_write_r>

0801704a <__sseek>:
 801704a:	b510      	push	{r4, lr}
 801704c:	460c      	mov	r4, r1
 801704e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017052:	f000 f847 	bl	80170e4 <_lseek_r>
 8017056:	1c43      	adds	r3, r0, #1
 8017058:	89a3      	ldrh	r3, [r4, #12]
 801705a:	bf15      	itete	ne
 801705c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801705e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017062:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017066:	81a3      	strheq	r3, [r4, #12]
 8017068:	bf18      	it	ne
 801706a:	81a3      	strhne	r3, [r4, #12]
 801706c:	bd10      	pop	{r4, pc}

0801706e <__sclose>:
 801706e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017072:	f000 b827 	b.w	80170c4 <_close_r>

08017076 <memset>:
 8017076:	4402      	add	r2, r0
 8017078:	4603      	mov	r3, r0
 801707a:	4293      	cmp	r3, r2
 801707c:	d100      	bne.n	8017080 <memset+0xa>
 801707e:	4770      	bx	lr
 8017080:	f803 1b01 	strb.w	r1, [r3], #1
 8017084:	e7f9      	b.n	801707a <memset+0x4>

08017086 <strchr>:
 8017086:	b2c9      	uxtb	r1, r1
 8017088:	4603      	mov	r3, r0
 801708a:	4618      	mov	r0, r3
 801708c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017090:	b112      	cbz	r2, 8017098 <strchr+0x12>
 8017092:	428a      	cmp	r2, r1
 8017094:	d1f9      	bne.n	801708a <strchr+0x4>
 8017096:	4770      	bx	lr
 8017098:	2900      	cmp	r1, #0
 801709a:	bf18      	it	ne
 801709c:	2000      	movne	r0, #0
 801709e:	4770      	bx	lr

080170a0 <strncmp>:
 80170a0:	b510      	push	{r4, lr}
 80170a2:	b16a      	cbz	r2, 80170c0 <strncmp+0x20>
 80170a4:	3901      	subs	r1, #1
 80170a6:	1884      	adds	r4, r0, r2
 80170a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80170ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80170b0:	429a      	cmp	r2, r3
 80170b2:	d103      	bne.n	80170bc <strncmp+0x1c>
 80170b4:	42a0      	cmp	r0, r4
 80170b6:	d001      	beq.n	80170bc <strncmp+0x1c>
 80170b8:	2a00      	cmp	r2, #0
 80170ba:	d1f5      	bne.n	80170a8 <strncmp+0x8>
 80170bc:	1ad0      	subs	r0, r2, r3
 80170be:	bd10      	pop	{r4, pc}
 80170c0:	4610      	mov	r0, r2
 80170c2:	e7fc      	b.n	80170be <strncmp+0x1e>

080170c4 <_close_r>:
 80170c4:	b538      	push	{r3, r4, r5, lr}
 80170c6:	4d06      	ldr	r5, [pc, #24]	@ (80170e0 <_close_r+0x1c>)
 80170c8:	2300      	movs	r3, #0
 80170ca:	4604      	mov	r4, r0
 80170cc:	4608      	mov	r0, r1
 80170ce:	602b      	str	r3, [r5, #0]
 80170d0:	f7eb fd1a 	bl	8002b08 <_close>
 80170d4:	1c43      	adds	r3, r0, #1
 80170d6:	d102      	bne.n	80170de <_close_r+0x1a>
 80170d8:	682b      	ldr	r3, [r5, #0]
 80170da:	b103      	cbz	r3, 80170de <_close_r+0x1a>
 80170dc:	6023      	str	r3, [r4, #0]
 80170de:	bd38      	pop	{r3, r4, r5, pc}
 80170e0:	24006904 	.word	0x24006904

080170e4 <_lseek_r>:
 80170e4:	b538      	push	{r3, r4, r5, lr}
 80170e6:	4d07      	ldr	r5, [pc, #28]	@ (8017104 <_lseek_r+0x20>)
 80170e8:	4604      	mov	r4, r0
 80170ea:	4608      	mov	r0, r1
 80170ec:	4611      	mov	r1, r2
 80170ee:	2200      	movs	r2, #0
 80170f0:	602a      	str	r2, [r5, #0]
 80170f2:	461a      	mov	r2, r3
 80170f4:	f7eb fd2f 	bl	8002b56 <_lseek>
 80170f8:	1c43      	adds	r3, r0, #1
 80170fa:	d102      	bne.n	8017102 <_lseek_r+0x1e>
 80170fc:	682b      	ldr	r3, [r5, #0]
 80170fe:	b103      	cbz	r3, 8017102 <_lseek_r+0x1e>
 8017100:	6023      	str	r3, [r4, #0]
 8017102:	bd38      	pop	{r3, r4, r5, pc}
 8017104:	24006904 	.word	0x24006904

08017108 <_read_r>:
 8017108:	b538      	push	{r3, r4, r5, lr}
 801710a:	4d07      	ldr	r5, [pc, #28]	@ (8017128 <_read_r+0x20>)
 801710c:	4604      	mov	r4, r0
 801710e:	4608      	mov	r0, r1
 8017110:	4611      	mov	r1, r2
 8017112:	2200      	movs	r2, #0
 8017114:	602a      	str	r2, [r5, #0]
 8017116:	461a      	mov	r2, r3
 8017118:	f7eb fcbd 	bl	8002a96 <_read>
 801711c:	1c43      	adds	r3, r0, #1
 801711e:	d102      	bne.n	8017126 <_read_r+0x1e>
 8017120:	682b      	ldr	r3, [r5, #0]
 8017122:	b103      	cbz	r3, 8017126 <_read_r+0x1e>
 8017124:	6023      	str	r3, [r4, #0]
 8017126:	bd38      	pop	{r3, r4, r5, pc}
 8017128:	24006904 	.word	0x24006904

0801712c <_write_r>:
 801712c:	b538      	push	{r3, r4, r5, lr}
 801712e:	4d07      	ldr	r5, [pc, #28]	@ (801714c <_write_r+0x20>)
 8017130:	4604      	mov	r4, r0
 8017132:	4608      	mov	r0, r1
 8017134:	4611      	mov	r1, r2
 8017136:	2200      	movs	r2, #0
 8017138:	602a      	str	r2, [r5, #0]
 801713a:	461a      	mov	r2, r3
 801713c:	f7eb fcc8 	bl	8002ad0 <_write>
 8017140:	1c43      	adds	r3, r0, #1
 8017142:	d102      	bne.n	801714a <_write_r+0x1e>
 8017144:	682b      	ldr	r3, [r5, #0]
 8017146:	b103      	cbz	r3, 801714a <_write_r+0x1e>
 8017148:	6023      	str	r3, [r4, #0]
 801714a:	bd38      	pop	{r3, r4, r5, pc}
 801714c:	24006904 	.word	0x24006904

08017150 <__errno>:
 8017150:	4b01      	ldr	r3, [pc, #4]	@ (8017158 <__errno+0x8>)
 8017152:	6818      	ldr	r0, [r3, #0]
 8017154:	4770      	bx	lr
 8017156:	bf00      	nop
 8017158:	24000240 	.word	0x24000240

0801715c <__libc_init_array>:
 801715c:	b570      	push	{r4, r5, r6, lr}
 801715e:	4d0d      	ldr	r5, [pc, #52]	@ (8017194 <__libc_init_array+0x38>)
 8017160:	4c0d      	ldr	r4, [pc, #52]	@ (8017198 <__libc_init_array+0x3c>)
 8017162:	1b64      	subs	r4, r4, r5
 8017164:	10a4      	asrs	r4, r4, #2
 8017166:	2600      	movs	r6, #0
 8017168:	42a6      	cmp	r6, r4
 801716a:	d109      	bne.n	8017180 <__libc_init_array+0x24>
 801716c:	4d0b      	ldr	r5, [pc, #44]	@ (801719c <__libc_init_array+0x40>)
 801716e:	4c0c      	ldr	r4, [pc, #48]	@ (80171a0 <__libc_init_array+0x44>)
 8017170:	f001 ff9a 	bl	80190a8 <_init>
 8017174:	1b64      	subs	r4, r4, r5
 8017176:	10a4      	asrs	r4, r4, #2
 8017178:	2600      	movs	r6, #0
 801717a:	42a6      	cmp	r6, r4
 801717c:	d105      	bne.n	801718a <__libc_init_array+0x2e>
 801717e:	bd70      	pop	{r4, r5, r6, pc}
 8017180:	f855 3b04 	ldr.w	r3, [r5], #4
 8017184:	4798      	blx	r3
 8017186:	3601      	adds	r6, #1
 8017188:	e7ee      	b.n	8017168 <__libc_init_array+0xc>
 801718a:	f855 3b04 	ldr.w	r3, [r5], #4
 801718e:	4798      	blx	r3
 8017190:	3601      	adds	r6, #1
 8017192:	e7f2      	b.n	801717a <__libc_init_array+0x1e>
 8017194:	08019e58 	.word	0x08019e58
 8017198:	08019e58 	.word	0x08019e58
 801719c:	08019e58 	.word	0x08019e58
 80171a0:	08019e5c 	.word	0x08019e5c

080171a4 <__retarget_lock_init_recursive>:
 80171a4:	4770      	bx	lr

080171a6 <__retarget_lock_acquire_recursive>:
 80171a6:	4770      	bx	lr

080171a8 <__retarget_lock_release_recursive>:
 80171a8:	4770      	bx	lr

080171aa <memcpy>:
 80171aa:	440a      	add	r2, r1
 80171ac:	4291      	cmp	r1, r2
 80171ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80171b2:	d100      	bne.n	80171b6 <memcpy+0xc>
 80171b4:	4770      	bx	lr
 80171b6:	b510      	push	{r4, lr}
 80171b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171c0:	4291      	cmp	r1, r2
 80171c2:	d1f9      	bne.n	80171b8 <memcpy+0xe>
 80171c4:	bd10      	pop	{r4, pc}
	...

080171c8 <nan>:
 80171c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80171d0 <nan+0x8>
 80171cc:	4770      	bx	lr
 80171ce:	bf00      	nop
 80171d0:	00000000 	.word	0x00000000
 80171d4:	7ff80000 	.word	0x7ff80000

080171d8 <_free_r>:
 80171d8:	b538      	push	{r3, r4, r5, lr}
 80171da:	4605      	mov	r5, r0
 80171dc:	2900      	cmp	r1, #0
 80171de:	d041      	beq.n	8017264 <_free_r+0x8c>
 80171e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171e4:	1f0c      	subs	r4, r1, #4
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	bfb8      	it	lt
 80171ea:	18e4      	addlt	r4, r4, r3
 80171ec:	f000 fc2c 	bl	8017a48 <__malloc_lock>
 80171f0:	4a1d      	ldr	r2, [pc, #116]	@ (8017268 <_free_r+0x90>)
 80171f2:	6813      	ldr	r3, [r2, #0]
 80171f4:	b933      	cbnz	r3, 8017204 <_free_r+0x2c>
 80171f6:	6063      	str	r3, [r4, #4]
 80171f8:	6014      	str	r4, [r2, #0]
 80171fa:	4628      	mov	r0, r5
 80171fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017200:	f000 bc28 	b.w	8017a54 <__malloc_unlock>
 8017204:	42a3      	cmp	r3, r4
 8017206:	d908      	bls.n	801721a <_free_r+0x42>
 8017208:	6820      	ldr	r0, [r4, #0]
 801720a:	1821      	adds	r1, r4, r0
 801720c:	428b      	cmp	r3, r1
 801720e:	bf01      	itttt	eq
 8017210:	6819      	ldreq	r1, [r3, #0]
 8017212:	685b      	ldreq	r3, [r3, #4]
 8017214:	1809      	addeq	r1, r1, r0
 8017216:	6021      	streq	r1, [r4, #0]
 8017218:	e7ed      	b.n	80171f6 <_free_r+0x1e>
 801721a:	461a      	mov	r2, r3
 801721c:	685b      	ldr	r3, [r3, #4]
 801721e:	b10b      	cbz	r3, 8017224 <_free_r+0x4c>
 8017220:	42a3      	cmp	r3, r4
 8017222:	d9fa      	bls.n	801721a <_free_r+0x42>
 8017224:	6811      	ldr	r1, [r2, #0]
 8017226:	1850      	adds	r0, r2, r1
 8017228:	42a0      	cmp	r0, r4
 801722a:	d10b      	bne.n	8017244 <_free_r+0x6c>
 801722c:	6820      	ldr	r0, [r4, #0]
 801722e:	4401      	add	r1, r0
 8017230:	1850      	adds	r0, r2, r1
 8017232:	4283      	cmp	r3, r0
 8017234:	6011      	str	r1, [r2, #0]
 8017236:	d1e0      	bne.n	80171fa <_free_r+0x22>
 8017238:	6818      	ldr	r0, [r3, #0]
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	6053      	str	r3, [r2, #4]
 801723e:	4408      	add	r0, r1
 8017240:	6010      	str	r0, [r2, #0]
 8017242:	e7da      	b.n	80171fa <_free_r+0x22>
 8017244:	d902      	bls.n	801724c <_free_r+0x74>
 8017246:	230c      	movs	r3, #12
 8017248:	602b      	str	r3, [r5, #0]
 801724a:	e7d6      	b.n	80171fa <_free_r+0x22>
 801724c:	6820      	ldr	r0, [r4, #0]
 801724e:	1821      	adds	r1, r4, r0
 8017250:	428b      	cmp	r3, r1
 8017252:	bf04      	itt	eq
 8017254:	6819      	ldreq	r1, [r3, #0]
 8017256:	685b      	ldreq	r3, [r3, #4]
 8017258:	6063      	str	r3, [r4, #4]
 801725a:	bf04      	itt	eq
 801725c:	1809      	addeq	r1, r1, r0
 801725e:	6021      	streq	r1, [r4, #0]
 8017260:	6054      	str	r4, [r2, #4]
 8017262:	e7ca      	b.n	80171fa <_free_r+0x22>
 8017264:	bd38      	pop	{r3, r4, r5, pc}
 8017266:	bf00      	nop
 8017268:	24006910 	.word	0x24006910

0801726c <rshift>:
 801726c:	6903      	ldr	r3, [r0, #16]
 801726e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017276:	ea4f 1261 	mov.w	r2, r1, asr #5
 801727a:	f100 0414 	add.w	r4, r0, #20
 801727e:	dd45      	ble.n	801730c <rshift+0xa0>
 8017280:	f011 011f 	ands.w	r1, r1, #31
 8017284:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017288:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801728c:	d10c      	bne.n	80172a8 <rshift+0x3c>
 801728e:	f100 0710 	add.w	r7, r0, #16
 8017292:	4629      	mov	r1, r5
 8017294:	42b1      	cmp	r1, r6
 8017296:	d334      	bcc.n	8017302 <rshift+0x96>
 8017298:	1a9b      	subs	r3, r3, r2
 801729a:	009b      	lsls	r3, r3, #2
 801729c:	1eea      	subs	r2, r5, #3
 801729e:	4296      	cmp	r6, r2
 80172a0:	bf38      	it	cc
 80172a2:	2300      	movcc	r3, #0
 80172a4:	4423      	add	r3, r4
 80172a6:	e015      	b.n	80172d4 <rshift+0x68>
 80172a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80172ac:	f1c1 0820 	rsb	r8, r1, #32
 80172b0:	40cf      	lsrs	r7, r1
 80172b2:	f105 0e04 	add.w	lr, r5, #4
 80172b6:	46a1      	mov	r9, r4
 80172b8:	4576      	cmp	r6, lr
 80172ba:	46f4      	mov	ip, lr
 80172bc:	d815      	bhi.n	80172ea <rshift+0x7e>
 80172be:	1a9a      	subs	r2, r3, r2
 80172c0:	0092      	lsls	r2, r2, #2
 80172c2:	3a04      	subs	r2, #4
 80172c4:	3501      	adds	r5, #1
 80172c6:	42ae      	cmp	r6, r5
 80172c8:	bf38      	it	cc
 80172ca:	2200      	movcc	r2, #0
 80172cc:	18a3      	adds	r3, r4, r2
 80172ce:	50a7      	str	r7, [r4, r2]
 80172d0:	b107      	cbz	r7, 80172d4 <rshift+0x68>
 80172d2:	3304      	adds	r3, #4
 80172d4:	1b1a      	subs	r2, r3, r4
 80172d6:	42a3      	cmp	r3, r4
 80172d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80172dc:	bf08      	it	eq
 80172de:	2300      	moveq	r3, #0
 80172e0:	6102      	str	r2, [r0, #16]
 80172e2:	bf08      	it	eq
 80172e4:	6143      	streq	r3, [r0, #20]
 80172e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80172ea:	f8dc c000 	ldr.w	ip, [ip]
 80172ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80172f2:	ea4c 0707 	orr.w	r7, ip, r7
 80172f6:	f849 7b04 	str.w	r7, [r9], #4
 80172fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80172fe:	40cf      	lsrs	r7, r1
 8017300:	e7da      	b.n	80172b8 <rshift+0x4c>
 8017302:	f851 cb04 	ldr.w	ip, [r1], #4
 8017306:	f847 cf04 	str.w	ip, [r7, #4]!
 801730a:	e7c3      	b.n	8017294 <rshift+0x28>
 801730c:	4623      	mov	r3, r4
 801730e:	e7e1      	b.n	80172d4 <rshift+0x68>

08017310 <__hexdig_fun>:
 8017310:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017314:	2b09      	cmp	r3, #9
 8017316:	d802      	bhi.n	801731e <__hexdig_fun+0xe>
 8017318:	3820      	subs	r0, #32
 801731a:	b2c0      	uxtb	r0, r0
 801731c:	4770      	bx	lr
 801731e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017322:	2b05      	cmp	r3, #5
 8017324:	d801      	bhi.n	801732a <__hexdig_fun+0x1a>
 8017326:	3847      	subs	r0, #71	@ 0x47
 8017328:	e7f7      	b.n	801731a <__hexdig_fun+0xa>
 801732a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801732e:	2b05      	cmp	r3, #5
 8017330:	d801      	bhi.n	8017336 <__hexdig_fun+0x26>
 8017332:	3827      	subs	r0, #39	@ 0x27
 8017334:	e7f1      	b.n	801731a <__hexdig_fun+0xa>
 8017336:	2000      	movs	r0, #0
 8017338:	4770      	bx	lr
	...

0801733c <__gethex>:
 801733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017340:	b085      	sub	sp, #20
 8017342:	468a      	mov	sl, r1
 8017344:	9302      	str	r3, [sp, #8]
 8017346:	680b      	ldr	r3, [r1, #0]
 8017348:	9001      	str	r0, [sp, #4]
 801734a:	4690      	mov	r8, r2
 801734c:	1c9c      	adds	r4, r3, #2
 801734e:	46a1      	mov	r9, r4
 8017350:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017354:	2830      	cmp	r0, #48	@ 0x30
 8017356:	d0fa      	beq.n	801734e <__gethex+0x12>
 8017358:	eba9 0303 	sub.w	r3, r9, r3
 801735c:	f1a3 0b02 	sub.w	fp, r3, #2
 8017360:	f7ff ffd6 	bl	8017310 <__hexdig_fun>
 8017364:	4605      	mov	r5, r0
 8017366:	2800      	cmp	r0, #0
 8017368:	d168      	bne.n	801743c <__gethex+0x100>
 801736a:	49a0      	ldr	r1, [pc, #640]	@ (80175ec <__gethex+0x2b0>)
 801736c:	2201      	movs	r2, #1
 801736e:	4648      	mov	r0, r9
 8017370:	f7ff fe96 	bl	80170a0 <strncmp>
 8017374:	4607      	mov	r7, r0
 8017376:	2800      	cmp	r0, #0
 8017378:	d167      	bne.n	801744a <__gethex+0x10e>
 801737a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801737e:	4626      	mov	r6, r4
 8017380:	f7ff ffc6 	bl	8017310 <__hexdig_fun>
 8017384:	2800      	cmp	r0, #0
 8017386:	d062      	beq.n	801744e <__gethex+0x112>
 8017388:	4623      	mov	r3, r4
 801738a:	7818      	ldrb	r0, [r3, #0]
 801738c:	2830      	cmp	r0, #48	@ 0x30
 801738e:	4699      	mov	r9, r3
 8017390:	f103 0301 	add.w	r3, r3, #1
 8017394:	d0f9      	beq.n	801738a <__gethex+0x4e>
 8017396:	f7ff ffbb 	bl	8017310 <__hexdig_fun>
 801739a:	fab0 f580 	clz	r5, r0
 801739e:	096d      	lsrs	r5, r5, #5
 80173a0:	f04f 0b01 	mov.w	fp, #1
 80173a4:	464a      	mov	r2, r9
 80173a6:	4616      	mov	r6, r2
 80173a8:	3201      	adds	r2, #1
 80173aa:	7830      	ldrb	r0, [r6, #0]
 80173ac:	f7ff ffb0 	bl	8017310 <__hexdig_fun>
 80173b0:	2800      	cmp	r0, #0
 80173b2:	d1f8      	bne.n	80173a6 <__gethex+0x6a>
 80173b4:	498d      	ldr	r1, [pc, #564]	@ (80175ec <__gethex+0x2b0>)
 80173b6:	2201      	movs	r2, #1
 80173b8:	4630      	mov	r0, r6
 80173ba:	f7ff fe71 	bl	80170a0 <strncmp>
 80173be:	2800      	cmp	r0, #0
 80173c0:	d13f      	bne.n	8017442 <__gethex+0x106>
 80173c2:	b944      	cbnz	r4, 80173d6 <__gethex+0x9a>
 80173c4:	1c74      	adds	r4, r6, #1
 80173c6:	4622      	mov	r2, r4
 80173c8:	4616      	mov	r6, r2
 80173ca:	3201      	adds	r2, #1
 80173cc:	7830      	ldrb	r0, [r6, #0]
 80173ce:	f7ff ff9f 	bl	8017310 <__hexdig_fun>
 80173d2:	2800      	cmp	r0, #0
 80173d4:	d1f8      	bne.n	80173c8 <__gethex+0x8c>
 80173d6:	1ba4      	subs	r4, r4, r6
 80173d8:	00a7      	lsls	r7, r4, #2
 80173da:	7833      	ldrb	r3, [r6, #0]
 80173dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80173e0:	2b50      	cmp	r3, #80	@ 0x50
 80173e2:	d13e      	bne.n	8017462 <__gethex+0x126>
 80173e4:	7873      	ldrb	r3, [r6, #1]
 80173e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80173e8:	d033      	beq.n	8017452 <__gethex+0x116>
 80173ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80173ec:	d034      	beq.n	8017458 <__gethex+0x11c>
 80173ee:	1c71      	adds	r1, r6, #1
 80173f0:	2400      	movs	r4, #0
 80173f2:	7808      	ldrb	r0, [r1, #0]
 80173f4:	f7ff ff8c 	bl	8017310 <__hexdig_fun>
 80173f8:	1e43      	subs	r3, r0, #1
 80173fa:	b2db      	uxtb	r3, r3
 80173fc:	2b18      	cmp	r3, #24
 80173fe:	d830      	bhi.n	8017462 <__gethex+0x126>
 8017400:	f1a0 0210 	sub.w	r2, r0, #16
 8017404:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017408:	f7ff ff82 	bl	8017310 <__hexdig_fun>
 801740c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017410:	fa5f fc8c 	uxtb.w	ip, ip
 8017414:	f1bc 0f18 	cmp.w	ip, #24
 8017418:	f04f 030a 	mov.w	r3, #10
 801741c:	d91e      	bls.n	801745c <__gethex+0x120>
 801741e:	b104      	cbz	r4, 8017422 <__gethex+0xe6>
 8017420:	4252      	negs	r2, r2
 8017422:	4417      	add	r7, r2
 8017424:	f8ca 1000 	str.w	r1, [sl]
 8017428:	b1ed      	cbz	r5, 8017466 <__gethex+0x12a>
 801742a:	f1bb 0f00 	cmp.w	fp, #0
 801742e:	bf0c      	ite	eq
 8017430:	2506      	moveq	r5, #6
 8017432:	2500      	movne	r5, #0
 8017434:	4628      	mov	r0, r5
 8017436:	b005      	add	sp, #20
 8017438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801743c:	2500      	movs	r5, #0
 801743e:	462c      	mov	r4, r5
 8017440:	e7b0      	b.n	80173a4 <__gethex+0x68>
 8017442:	2c00      	cmp	r4, #0
 8017444:	d1c7      	bne.n	80173d6 <__gethex+0x9a>
 8017446:	4627      	mov	r7, r4
 8017448:	e7c7      	b.n	80173da <__gethex+0x9e>
 801744a:	464e      	mov	r6, r9
 801744c:	462f      	mov	r7, r5
 801744e:	2501      	movs	r5, #1
 8017450:	e7c3      	b.n	80173da <__gethex+0x9e>
 8017452:	2400      	movs	r4, #0
 8017454:	1cb1      	adds	r1, r6, #2
 8017456:	e7cc      	b.n	80173f2 <__gethex+0xb6>
 8017458:	2401      	movs	r4, #1
 801745a:	e7fb      	b.n	8017454 <__gethex+0x118>
 801745c:	fb03 0002 	mla	r0, r3, r2, r0
 8017460:	e7ce      	b.n	8017400 <__gethex+0xc4>
 8017462:	4631      	mov	r1, r6
 8017464:	e7de      	b.n	8017424 <__gethex+0xe8>
 8017466:	eba6 0309 	sub.w	r3, r6, r9
 801746a:	3b01      	subs	r3, #1
 801746c:	4629      	mov	r1, r5
 801746e:	2b07      	cmp	r3, #7
 8017470:	dc0a      	bgt.n	8017488 <__gethex+0x14c>
 8017472:	9801      	ldr	r0, [sp, #4]
 8017474:	f000 faf4 	bl	8017a60 <_Balloc>
 8017478:	4604      	mov	r4, r0
 801747a:	b940      	cbnz	r0, 801748e <__gethex+0x152>
 801747c:	4b5c      	ldr	r3, [pc, #368]	@ (80175f0 <__gethex+0x2b4>)
 801747e:	4602      	mov	r2, r0
 8017480:	21e4      	movs	r1, #228	@ 0xe4
 8017482:	485c      	ldr	r0, [pc, #368]	@ (80175f4 <__gethex+0x2b8>)
 8017484:	f001 f864 	bl	8018550 <__assert_func>
 8017488:	3101      	adds	r1, #1
 801748a:	105b      	asrs	r3, r3, #1
 801748c:	e7ef      	b.n	801746e <__gethex+0x132>
 801748e:	f100 0a14 	add.w	sl, r0, #20
 8017492:	2300      	movs	r3, #0
 8017494:	4655      	mov	r5, sl
 8017496:	469b      	mov	fp, r3
 8017498:	45b1      	cmp	r9, r6
 801749a:	d337      	bcc.n	801750c <__gethex+0x1d0>
 801749c:	f845 bb04 	str.w	fp, [r5], #4
 80174a0:	eba5 050a 	sub.w	r5, r5, sl
 80174a4:	10ad      	asrs	r5, r5, #2
 80174a6:	6125      	str	r5, [r4, #16]
 80174a8:	4658      	mov	r0, fp
 80174aa:	f000 fbcb 	bl	8017c44 <__hi0bits>
 80174ae:	016d      	lsls	r5, r5, #5
 80174b0:	f8d8 6000 	ldr.w	r6, [r8]
 80174b4:	1a2d      	subs	r5, r5, r0
 80174b6:	42b5      	cmp	r5, r6
 80174b8:	dd54      	ble.n	8017564 <__gethex+0x228>
 80174ba:	1bad      	subs	r5, r5, r6
 80174bc:	4629      	mov	r1, r5
 80174be:	4620      	mov	r0, r4
 80174c0:	f000 ff5c 	bl	801837c <__any_on>
 80174c4:	4681      	mov	r9, r0
 80174c6:	b178      	cbz	r0, 80174e8 <__gethex+0x1ac>
 80174c8:	1e6b      	subs	r3, r5, #1
 80174ca:	1159      	asrs	r1, r3, #5
 80174cc:	f003 021f 	and.w	r2, r3, #31
 80174d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80174d4:	f04f 0901 	mov.w	r9, #1
 80174d8:	fa09 f202 	lsl.w	r2, r9, r2
 80174dc:	420a      	tst	r2, r1
 80174de:	d003      	beq.n	80174e8 <__gethex+0x1ac>
 80174e0:	454b      	cmp	r3, r9
 80174e2:	dc36      	bgt.n	8017552 <__gethex+0x216>
 80174e4:	f04f 0902 	mov.w	r9, #2
 80174e8:	4629      	mov	r1, r5
 80174ea:	4620      	mov	r0, r4
 80174ec:	f7ff febe 	bl	801726c <rshift>
 80174f0:	442f      	add	r7, r5
 80174f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80174f6:	42bb      	cmp	r3, r7
 80174f8:	da42      	bge.n	8017580 <__gethex+0x244>
 80174fa:	9801      	ldr	r0, [sp, #4]
 80174fc:	4621      	mov	r1, r4
 80174fe:	f000 faef 	bl	8017ae0 <_Bfree>
 8017502:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017504:	2300      	movs	r3, #0
 8017506:	6013      	str	r3, [r2, #0]
 8017508:	25a3      	movs	r5, #163	@ 0xa3
 801750a:	e793      	b.n	8017434 <__gethex+0xf8>
 801750c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017510:	2a2e      	cmp	r2, #46	@ 0x2e
 8017512:	d012      	beq.n	801753a <__gethex+0x1fe>
 8017514:	2b20      	cmp	r3, #32
 8017516:	d104      	bne.n	8017522 <__gethex+0x1e6>
 8017518:	f845 bb04 	str.w	fp, [r5], #4
 801751c:	f04f 0b00 	mov.w	fp, #0
 8017520:	465b      	mov	r3, fp
 8017522:	7830      	ldrb	r0, [r6, #0]
 8017524:	9303      	str	r3, [sp, #12]
 8017526:	f7ff fef3 	bl	8017310 <__hexdig_fun>
 801752a:	9b03      	ldr	r3, [sp, #12]
 801752c:	f000 000f 	and.w	r0, r0, #15
 8017530:	4098      	lsls	r0, r3
 8017532:	ea4b 0b00 	orr.w	fp, fp, r0
 8017536:	3304      	adds	r3, #4
 8017538:	e7ae      	b.n	8017498 <__gethex+0x15c>
 801753a:	45b1      	cmp	r9, r6
 801753c:	d8ea      	bhi.n	8017514 <__gethex+0x1d8>
 801753e:	492b      	ldr	r1, [pc, #172]	@ (80175ec <__gethex+0x2b0>)
 8017540:	9303      	str	r3, [sp, #12]
 8017542:	2201      	movs	r2, #1
 8017544:	4630      	mov	r0, r6
 8017546:	f7ff fdab 	bl	80170a0 <strncmp>
 801754a:	9b03      	ldr	r3, [sp, #12]
 801754c:	2800      	cmp	r0, #0
 801754e:	d1e1      	bne.n	8017514 <__gethex+0x1d8>
 8017550:	e7a2      	b.n	8017498 <__gethex+0x15c>
 8017552:	1ea9      	subs	r1, r5, #2
 8017554:	4620      	mov	r0, r4
 8017556:	f000 ff11 	bl	801837c <__any_on>
 801755a:	2800      	cmp	r0, #0
 801755c:	d0c2      	beq.n	80174e4 <__gethex+0x1a8>
 801755e:	f04f 0903 	mov.w	r9, #3
 8017562:	e7c1      	b.n	80174e8 <__gethex+0x1ac>
 8017564:	da09      	bge.n	801757a <__gethex+0x23e>
 8017566:	1b75      	subs	r5, r6, r5
 8017568:	4621      	mov	r1, r4
 801756a:	9801      	ldr	r0, [sp, #4]
 801756c:	462a      	mov	r2, r5
 801756e:	f000 fccf 	bl	8017f10 <__lshift>
 8017572:	1b7f      	subs	r7, r7, r5
 8017574:	4604      	mov	r4, r0
 8017576:	f100 0a14 	add.w	sl, r0, #20
 801757a:	f04f 0900 	mov.w	r9, #0
 801757e:	e7b8      	b.n	80174f2 <__gethex+0x1b6>
 8017580:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017584:	42bd      	cmp	r5, r7
 8017586:	dd6f      	ble.n	8017668 <__gethex+0x32c>
 8017588:	1bed      	subs	r5, r5, r7
 801758a:	42ae      	cmp	r6, r5
 801758c:	dc34      	bgt.n	80175f8 <__gethex+0x2bc>
 801758e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017592:	2b02      	cmp	r3, #2
 8017594:	d022      	beq.n	80175dc <__gethex+0x2a0>
 8017596:	2b03      	cmp	r3, #3
 8017598:	d024      	beq.n	80175e4 <__gethex+0x2a8>
 801759a:	2b01      	cmp	r3, #1
 801759c:	d115      	bne.n	80175ca <__gethex+0x28e>
 801759e:	42ae      	cmp	r6, r5
 80175a0:	d113      	bne.n	80175ca <__gethex+0x28e>
 80175a2:	2e01      	cmp	r6, #1
 80175a4:	d10b      	bne.n	80175be <__gethex+0x282>
 80175a6:	9a02      	ldr	r2, [sp, #8]
 80175a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80175ac:	6013      	str	r3, [r2, #0]
 80175ae:	2301      	movs	r3, #1
 80175b0:	6123      	str	r3, [r4, #16]
 80175b2:	f8ca 3000 	str.w	r3, [sl]
 80175b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80175b8:	2562      	movs	r5, #98	@ 0x62
 80175ba:	601c      	str	r4, [r3, #0]
 80175bc:	e73a      	b.n	8017434 <__gethex+0xf8>
 80175be:	1e71      	subs	r1, r6, #1
 80175c0:	4620      	mov	r0, r4
 80175c2:	f000 fedb 	bl	801837c <__any_on>
 80175c6:	2800      	cmp	r0, #0
 80175c8:	d1ed      	bne.n	80175a6 <__gethex+0x26a>
 80175ca:	9801      	ldr	r0, [sp, #4]
 80175cc:	4621      	mov	r1, r4
 80175ce:	f000 fa87 	bl	8017ae0 <_Bfree>
 80175d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80175d4:	2300      	movs	r3, #0
 80175d6:	6013      	str	r3, [r2, #0]
 80175d8:	2550      	movs	r5, #80	@ 0x50
 80175da:	e72b      	b.n	8017434 <__gethex+0xf8>
 80175dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d1f3      	bne.n	80175ca <__gethex+0x28e>
 80175e2:	e7e0      	b.n	80175a6 <__gethex+0x26a>
 80175e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d1dd      	bne.n	80175a6 <__gethex+0x26a>
 80175ea:	e7ee      	b.n	80175ca <__gethex+0x28e>
 80175ec:	08019204 	.word	0x08019204
 80175f0:	08019371 	.word	0x08019371
 80175f4:	08019382 	.word	0x08019382
 80175f8:	1e6f      	subs	r7, r5, #1
 80175fa:	f1b9 0f00 	cmp.w	r9, #0
 80175fe:	d130      	bne.n	8017662 <__gethex+0x326>
 8017600:	b127      	cbz	r7, 801760c <__gethex+0x2d0>
 8017602:	4639      	mov	r1, r7
 8017604:	4620      	mov	r0, r4
 8017606:	f000 feb9 	bl	801837c <__any_on>
 801760a:	4681      	mov	r9, r0
 801760c:	117a      	asrs	r2, r7, #5
 801760e:	2301      	movs	r3, #1
 8017610:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017614:	f007 071f 	and.w	r7, r7, #31
 8017618:	40bb      	lsls	r3, r7
 801761a:	4213      	tst	r3, r2
 801761c:	4629      	mov	r1, r5
 801761e:	4620      	mov	r0, r4
 8017620:	bf18      	it	ne
 8017622:	f049 0902 	orrne.w	r9, r9, #2
 8017626:	f7ff fe21 	bl	801726c <rshift>
 801762a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801762e:	1b76      	subs	r6, r6, r5
 8017630:	2502      	movs	r5, #2
 8017632:	f1b9 0f00 	cmp.w	r9, #0
 8017636:	d047      	beq.n	80176c8 <__gethex+0x38c>
 8017638:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801763c:	2b02      	cmp	r3, #2
 801763e:	d015      	beq.n	801766c <__gethex+0x330>
 8017640:	2b03      	cmp	r3, #3
 8017642:	d017      	beq.n	8017674 <__gethex+0x338>
 8017644:	2b01      	cmp	r3, #1
 8017646:	d109      	bne.n	801765c <__gethex+0x320>
 8017648:	f019 0f02 	tst.w	r9, #2
 801764c:	d006      	beq.n	801765c <__gethex+0x320>
 801764e:	f8da 3000 	ldr.w	r3, [sl]
 8017652:	ea49 0903 	orr.w	r9, r9, r3
 8017656:	f019 0f01 	tst.w	r9, #1
 801765a:	d10e      	bne.n	801767a <__gethex+0x33e>
 801765c:	f045 0510 	orr.w	r5, r5, #16
 8017660:	e032      	b.n	80176c8 <__gethex+0x38c>
 8017662:	f04f 0901 	mov.w	r9, #1
 8017666:	e7d1      	b.n	801760c <__gethex+0x2d0>
 8017668:	2501      	movs	r5, #1
 801766a:	e7e2      	b.n	8017632 <__gethex+0x2f6>
 801766c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801766e:	f1c3 0301 	rsb	r3, r3, #1
 8017672:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017676:	2b00      	cmp	r3, #0
 8017678:	d0f0      	beq.n	801765c <__gethex+0x320>
 801767a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801767e:	f104 0314 	add.w	r3, r4, #20
 8017682:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017686:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801768a:	f04f 0c00 	mov.w	ip, #0
 801768e:	4618      	mov	r0, r3
 8017690:	f853 2b04 	ldr.w	r2, [r3], #4
 8017694:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017698:	d01b      	beq.n	80176d2 <__gethex+0x396>
 801769a:	3201      	adds	r2, #1
 801769c:	6002      	str	r2, [r0, #0]
 801769e:	2d02      	cmp	r5, #2
 80176a0:	f104 0314 	add.w	r3, r4, #20
 80176a4:	d13c      	bne.n	8017720 <__gethex+0x3e4>
 80176a6:	f8d8 2000 	ldr.w	r2, [r8]
 80176aa:	3a01      	subs	r2, #1
 80176ac:	42b2      	cmp	r2, r6
 80176ae:	d109      	bne.n	80176c4 <__gethex+0x388>
 80176b0:	1171      	asrs	r1, r6, #5
 80176b2:	2201      	movs	r2, #1
 80176b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80176b8:	f006 061f 	and.w	r6, r6, #31
 80176bc:	fa02 f606 	lsl.w	r6, r2, r6
 80176c0:	421e      	tst	r6, r3
 80176c2:	d13a      	bne.n	801773a <__gethex+0x3fe>
 80176c4:	f045 0520 	orr.w	r5, r5, #32
 80176c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80176ca:	601c      	str	r4, [r3, #0]
 80176cc:	9b02      	ldr	r3, [sp, #8]
 80176ce:	601f      	str	r7, [r3, #0]
 80176d0:	e6b0      	b.n	8017434 <__gethex+0xf8>
 80176d2:	4299      	cmp	r1, r3
 80176d4:	f843 cc04 	str.w	ip, [r3, #-4]
 80176d8:	d8d9      	bhi.n	801768e <__gethex+0x352>
 80176da:	68a3      	ldr	r3, [r4, #8]
 80176dc:	459b      	cmp	fp, r3
 80176de:	db17      	blt.n	8017710 <__gethex+0x3d4>
 80176e0:	6861      	ldr	r1, [r4, #4]
 80176e2:	9801      	ldr	r0, [sp, #4]
 80176e4:	3101      	adds	r1, #1
 80176e6:	f000 f9bb 	bl	8017a60 <_Balloc>
 80176ea:	4681      	mov	r9, r0
 80176ec:	b918      	cbnz	r0, 80176f6 <__gethex+0x3ba>
 80176ee:	4b1a      	ldr	r3, [pc, #104]	@ (8017758 <__gethex+0x41c>)
 80176f0:	4602      	mov	r2, r0
 80176f2:	2184      	movs	r1, #132	@ 0x84
 80176f4:	e6c5      	b.n	8017482 <__gethex+0x146>
 80176f6:	6922      	ldr	r2, [r4, #16]
 80176f8:	3202      	adds	r2, #2
 80176fa:	f104 010c 	add.w	r1, r4, #12
 80176fe:	0092      	lsls	r2, r2, #2
 8017700:	300c      	adds	r0, #12
 8017702:	f7ff fd52 	bl	80171aa <memcpy>
 8017706:	4621      	mov	r1, r4
 8017708:	9801      	ldr	r0, [sp, #4]
 801770a:	f000 f9e9 	bl	8017ae0 <_Bfree>
 801770e:	464c      	mov	r4, r9
 8017710:	6923      	ldr	r3, [r4, #16]
 8017712:	1c5a      	adds	r2, r3, #1
 8017714:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017718:	6122      	str	r2, [r4, #16]
 801771a:	2201      	movs	r2, #1
 801771c:	615a      	str	r2, [r3, #20]
 801771e:	e7be      	b.n	801769e <__gethex+0x362>
 8017720:	6922      	ldr	r2, [r4, #16]
 8017722:	455a      	cmp	r2, fp
 8017724:	dd0b      	ble.n	801773e <__gethex+0x402>
 8017726:	2101      	movs	r1, #1
 8017728:	4620      	mov	r0, r4
 801772a:	f7ff fd9f 	bl	801726c <rshift>
 801772e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017732:	3701      	adds	r7, #1
 8017734:	42bb      	cmp	r3, r7
 8017736:	f6ff aee0 	blt.w	80174fa <__gethex+0x1be>
 801773a:	2501      	movs	r5, #1
 801773c:	e7c2      	b.n	80176c4 <__gethex+0x388>
 801773e:	f016 061f 	ands.w	r6, r6, #31
 8017742:	d0fa      	beq.n	801773a <__gethex+0x3fe>
 8017744:	4453      	add	r3, sl
 8017746:	f1c6 0620 	rsb	r6, r6, #32
 801774a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801774e:	f000 fa79 	bl	8017c44 <__hi0bits>
 8017752:	42b0      	cmp	r0, r6
 8017754:	dbe7      	blt.n	8017726 <__gethex+0x3ea>
 8017756:	e7f0      	b.n	801773a <__gethex+0x3fe>
 8017758:	08019371 	.word	0x08019371

0801775c <L_shift>:
 801775c:	f1c2 0208 	rsb	r2, r2, #8
 8017760:	0092      	lsls	r2, r2, #2
 8017762:	b570      	push	{r4, r5, r6, lr}
 8017764:	f1c2 0620 	rsb	r6, r2, #32
 8017768:	6843      	ldr	r3, [r0, #4]
 801776a:	6804      	ldr	r4, [r0, #0]
 801776c:	fa03 f506 	lsl.w	r5, r3, r6
 8017770:	432c      	orrs	r4, r5
 8017772:	40d3      	lsrs	r3, r2
 8017774:	6004      	str	r4, [r0, #0]
 8017776:	f840 3f04 	str.w	r3, [r0, #4]!
 801777a:	4288      	cmp	r0, r1
 801777c:	d3f4      	bcc.n	8017768 <L_shift+0xc>
 801777e:	bd70      	pop	{r4, r5, r6, pc}

08017780 <__match>:
 8017780:	b530      	push	{r4, r5, lr}
 8017782:	6803      	ldr	r3, [r0, #0]
 8017784:	3301      	adds	r3, #1
 8017786:	f811 4b01 	ldrb.w	r4, [r1], #1
 801778a:	b914      	cbnz	r4, 8017792 <__match+0x12>
 801778c:	6003      	str	r3, [r0, #0]
 801778e:	2001      	movs	r0, #1
 8017790:	bd30      	pop	{r4, r5, pc}
 8017792:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017796:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801779a:	2d19      	cmp	r5, #25
 801779c:	bf98      	it	ls
 801779e:	3220      	addls	r2, #32
 80177a0:	42a2      	cmp	r2, r4
 80177a2:	d0f0      	beq.n	8017786 <__match+0x6>
 80177a4:	2000      	movs	r0, #0
 80177a6:	e7f3      	b.n	8017790 <__match+0x10>

080177a8 <__hexnan>:
 80177a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ac:	680b      	ldr	r3, [r1, #0]
 80177ae:	6801      	ldr	r1, [r0, #0]
 80177b0:	115e      	asrs	r6, r3, #5
 80177b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80177b6:	f013 031f 	ands.w	r3, r3, #31
 80177ba:	b087      	sub	sp, #28
 80177bc:	bf18      	it	ne
 80177be:	3604      	addne	r6, #4
 80177c0:	2500      	movs	r5, #0
 80177c2:	1f37      	subs	r7, r6, #4
 80177c4:	4682      	mov	sl, r0
 80177c6:	4690      	mov	r8, r2
 80177c8:	9301      	str	r3, [sp, #4]
 80177ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80177ce:	46b9      	mov	r9, r7
 80177d0:	463c      	mov	r4, r7
 80177d2:	9502      	str	r5, [sp, #8]
 80177d4:	46ab      	mov	fp, r5
 80177d6:	784a      	ldrb	r2, [r1, #1]
 80177d8:	1c4b      	adds	r3, r1, #1
 80177da:	9303      	str	r3, [sp, #12]
 80177dc:	b342      	cbz	r2, 8017830 <__hexnan+0x88>
 80177de:	4610      	mov	r0, r2
 80177e0:	9105      	str	r1, [sp, #20]
 80177e2:	9204      	str	r2, [sp, #16]
 80177e4:	f7ff fd94 	bl	8017310 <__hexdig_fun>
 80177e8:	2800      	cmp	r0, #0
 80177ea:	d151      	bne.n	8017890 <__hexnan+0xe8>
 80177ec:	9a04      	ldr	r2, [sp, #16]
 80177ee:	9905      	ldr	r1, [sp, #20]
 80177f0:	2a20      	cmp	r2, #32
 80177f2:	d818      	bhi.n	8017826 <__hexnan+0x7e>
 80177f4:	9b02      	ldr	r3, [sp, #8]
 80177f6:	459b      	cmp	fp, r3
 80177f8:	dd13      	ble.n	8017822 <__hexnan+0x7a>
 80177fa:	454c      	cmp	r4, r9
 80177fc:	d206      	bcs.n	801780c <__hexnan+0x64>
 80177fe:	2d07      	cmp	r5, #7
 8017800:	dc04      	bgt.n	801780c <__hexnan+0x64>
 8017802:	462a      	mov	r2, r5
 8017804:	4649      	mov	r1, r9
 8017806:	4620      	mov	r0, r4
 8017808:	f7ff ffa8 	bl	801775c <L_shift>
 801780c:	4544      	cmp	r4, r8
 801780e:	d952      	bls.n	80178b6 <__hexnan+0x10e>
 8017810:	2300      	movs	r3, #0
 8017812:	f1a4 0904 	sub.w	r9, r4, #4
 8017816:	f844 3c04 	str.w	r3, [r4, #-4]
 801781a:	f8cd b008 	str.w	fp, [sp, #8]
 801781e:	464c      	mov	r4, r9
 8017820:	461d      	mov	r5, r3
 8017822:	9903      	ldr	r1, [sp, #12]
 8017824:	e7d7      	b.n	80177d6 <__hexnan+0x2e>
 8017826:	2a29      	cmp	r2, #41	@ 0x29
 8017828:	d157      	bne.n	80178da <__hexnan+0x132>
 801782a:	3102      	adds	r1, #2
 801782c:	f8ca 1000 	str.w	r1, [sl]
 8017830:	f1bb 0f00 	cmp.w	fp, #0
 8017834:	d051      	beq.n	80178da <__hexnan+0x132>
 8017836:	454c      	cmp	r4, r9
 8017838:	d206      	bcs.n	8017848 <__hexnan+0xa0>
 801783a:	2d07      	cmp	r5, #7
 801783c:	dc04      	bgt.n	8017848 <__hexnan+0xa0>
 801783e:	462a      	mov	r2, r5
 8017840:	4649      	mov	r1, r9
 8017842:	4620      	mov	r0, r4
 8017844:	f7ff ff8a 	bl	801775c <L_shift>
 8017848:	4544      	cmp	r4, r8
 801784a:	d936      	bls.n	80178ba <__hexnan+0x112>
 801784c:	f1a8 0204 	sub.w	r2, r8, #4
 8017850:	4623      	mov	r3, r4
 8017852:	f853 1b04 	ldr.w	r1, [r3], #4
 8017856:	f842 1f04 	str.w	r1, [r2, #4]!
 801785a:	429f      	cmp	r7, r3
 801785c:	d2f9      	bcs.n	8017852 <__hexnan+0xaa>
 801785e:	1b3b      	subs	r3, r7, r4
 8017860:	f023 0303 	bic.w	r3, r3, #3
 8017864:	3304      	adds	r3, #4
 8017866:	3401      	adds	r4, #1
 8017868:	3e03      	subs	r6, #3
 801786a:	42b4      	cmp	r4, r6
 801786c:	bf88      	it	hi
 801786e:	2304      	movhi	r3, #4
 8017870:	4443      	add	r3, r8
 8017872:	2200      	movs	r2, #0
 8017874:	f843 2b04 	str.w	r2, [r3], #4
 8017878:	429f      	cmp	r7, r3
 801787a:	d2fb      	bcs.n	8017874 <__hexnan+0xcc>
 801787c:	683b      	ldr	r3, [r7, #0]
 801787e:	b91b      	cbnz	r3, 8017888 <__hexnan+0xe0>
 8017880:	4547      	cmp	r7, r8
 8017882:	d128      	bne.n	80178d6 <__hexnan+0x12e>
 8017884:	2301      	movs	r3, #1
 8017886:	603b      	str	r3, [r7, #0]
 8017888:	2005      	movs	r0, #5
 801788a:	b007      	add	sp, #28
 801788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017890:	3501      	adds	r5, #1
 8017892:	2d08      	cmp	r5, #8
 8017894:	f10b 0b01 	add.w	fp, fp, #1
 8017898:	dd06      	ble.n	80178a8 <__hexnan+0x100>
 801789a:	4544      	cmp	r4, r8
 801789c:	d9c1      	bls.n	8017822 <__hexnan+0x7a>
 801789e:	2300      	movs	r3, #0
 80178a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80178a4:	2501      	movs	r5, #1
 80178a6:	3c04      	subs	r4, #4
 80178a8:	6822      	ldr	r2, [r4, #0]
 80178aa:	f000 000f 	and.w	r0, r0, #15
 80178ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80178b2:	6020      	str	r0, [r4, #0]
 80178b4:	e7b5      	b.n	8017822 <__hexnan+0x7a>
 80178b6:	2508      	movs	r5, #8
 80178b8:	e7b3      	b.n	8017822 <__hexnan+0x7a>
 80178ba:	9b01      	ldr	r3, [sp, #4]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d0dd      	beq.n	801787c <__hexnan+0xd4>
 80178c0:	f1c3 0320 	rsb	r3, r3, #32
 80178c4:	f04f 32ff 	mov.w	r2, #4294967295
 80178c8:	40da      	lsrs	r2, r3
 80178ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80178ce:	4013      	ands	r3, r2
 80178d0:	f846 3c04 	str.w	r3, [r6, #-4]
 80178d4:	e7d2      	b.n	801787c <__hexnan+0xd4>
 80178d6:	3f04      	subs	r7, #4
 80178d8:	e7d0      	b.n	801787c <__hexnan+0xd4>
 80178da:	2004      	movs	r0, #4
 80178dc:	e7d5      	b.n	801788a <__hexnan+0xe2>
	...

080178e0 <sbrk_aligned>:
 80178e0:	b570      	push	{r4, r5, r6, lr}
 80178e2:	4e0f      	ldr	r6, [pc, #60]	@ (8017920 <sbrk_aligned+0x40>)
 80178e4:	460c      	mov	r4, r1
 80178e6:	6831      	ldr	r1, [r6, #0]
 80178e8:	4605      	mov	r5, r0
 80178ea:	b911      	cbnz	r1, 80178f2 <sbrk_aligned+0x12>
 80178ec:	f000 fe20 	bl	8018530 <_sbrk_r>
 80178f0:	6030      	str	r0, [r6, #0]
 80178f2:	4621      	mov	r1, r4
 80178f4:	4628      	mov	r0, r5
 80178f6:	f000 fe1b 	bl	8018530 <_sbrk_r>
 80178fa:	1c43      	adds	r3, r0, #1
 80178fc:	d103      	bne.n	8017906 <sbrk_aligned+0x26>
 80178fe:	f04f 34ff 	mov.w	r4, #4294967295
 8017902:	4620      	mov	r0, r4
 8017904:	bd70      	pop	{r4, r5, r6, pc}
 8017906:	1cc4      	adds	r4, r0, #3
 8017908:	f024 0403 	bic.w	r4, r4, #3
 801790c:	42a0      	cmp	r0, r4
 801790e:	d0f8      	beq.n	8017902 <sbrk_aligned+0x22>
 8017910:	1a21      	subs	r1, r4, r0
 8017912:	4628      	mov	r0, r5
 8017914:	f000 fe0c 	bl	8018530 <_sbrk_r>
 8017918:	3001      	adds	r0, #1
 801791a:	d1f2      	bne.n	8017902 <sbrk_aligned+0x22>
 801791c:	e7ef      	b.n	80178fe <sbrk_aligned+0x1e>
 801791e:	bf00      	nop
 8017920:	2400690c 	.word	0x2400690c

08017924 <_malloc_r>:
 8017924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017928:	1ccd      	adds	r5, r1, #3
 801792a:	f025 0503 	bic.w	r5, r5, #3
 801792e:	3508      	adds	r5, #8
 8017930:	2d0c      	cmp	r5, #12
 8017932:	bf38      	it	cc
 8017934:	250c      	movcc	r5, #12
 8017936:	2d00      	cmp	r5, #0
 8017938:	4606      	mov	r6, r0
 801793a:	db01      	blt.n	8017940 <_malloc_r+0x1c>
 801793c:	42a9      	cmp	r1, r5
 801793e:	d904      	bls.n	801794a <_malloc_r+0x26>
 8017940:	230c      	movs	r3, #12
 8017942:	6033      	str	r3, [r6, #0]
 8017944:	2000      	movs	r0, #0
 8017946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801794a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017a20 <_malloc_r+0xfc>
 801794e:	f000 f87b 	bl	8017a48 <__malloc_lock>
 8017952:	f8d8 3000 	ldr.w	r3, [r8]
 8017956:	461c      	mov	r4, r3
 8017958:	bb44      	cbnz	r4, 80179ac <_malloc_r+0x88>
 801795a:	4629      	mov	r1, r5
 801795c:	4630      	mov	r0, r6
 801795e:	f7ff ffbf 	bl	80178e0 <sbrk_aligned>
 8017962:	1c43      	adds	r3, r0, #1
 8017964:	4604      	mov	r4, r0
 8017966:	d158      	bne.n	8017a1a <_malloc_r+0xf6>
 8017968:	f8d8 4000 	ldr.w	r4, [r8]
 801796c:	4627      	mov	r7, r4
 801796e:	2f00      	cmp	r7, #0
 8017970:	d143      	bne.n	80179fa <_malloc_r+0xd6>
 8017972:	2c00      	cmp	r4, #0
 8017974:	d04b      	beq.n	8017a0e <_malloc_r+0xea>
 8017976:	6823      	ldr	r3, [r4, #0]
 8017978:	4639      	mov	r1, r7
 801797a:	4630      	mov	r0, r6
 801797c:	eb04 0903 	add.w	r9, r4, r3
 8017980:	f000 fdd6 	bl	8018530 <_sbrk_r>
 8017984:	4581      	cmp	r9, r0
 8017986:	d142      	bne.n	8017a0e <_malloc_r+0xea>
 8017988:	6821      	ldr	r1, [r4, #0]
 801798a:	1a6d      	subs	r5, r5, r1
 801798c:	4629      	mov	r1, r5
 801798e:	4630      	mov	r0, r6
 8017990:	f7ff ffa6 	bl	80178e0 <sbrk_aligned>
 8017994:	3001      	adds	r0, #1
 8017996:	d03a      	beq.n	8017a0e <_malloc_r+0xea>
 8017998:	6823      	ldr	r3, [r4, #0]
 801799a:	442b      	add	r3, r5
 801799c:	6023      	str	r3, [r4, #0]
 801799e:	f8d8 3000 	ldr.w	r3, [r8]
 80179a2:	685a      	ldr	r2, [r3, #4]
 80179a4:	bb62      	cbnz	r2, 8017a00 <_malloc_r+0xdc>
 80179a6:	f8c8 7000 	str.w	r7, [r8]
 80179aa:	e00f      	b.n	80179cc <_malloc_r+0xa8>
 80179ac:	6822      	ldr	r2, [r4, #0]
 80179ae:	1b52      	subs	r2, r2, r5
 80179b0:	d420      	bmi.n	80179f4 <_malloc_r+0xd0>
 80179b2:	2a0b      	cmp	r2, #11
 80179b4:	d917      	bls.n	80179e6 <_malloc_r+0xc2>
 80179b6:	1961      	adds	r1, r4, r5
 80179b8:	42a3      	cmp	r3, r4
 80179ba:	6025      	str	r5, [r4, #0]
 80179bc:	bf18      	it	ne
 80179be:	6059      	strne	r1, [r3, #4]
 80179c0:	6863      	ldr	r3, [r4, #4]
 80179c2:	bf08      	it	eq
 80179c4:	f8c8 1000 	streq.w	r1, [r8]
 80179c8:	5162      	str	r2, [r4, r5]
 80179ca:	604b      	str	r3, [r1, #4]
 80179cc:	4630      	mov	r0, r6
 80179ce:	f000 f841 	bl	8017a54 <__malloc_unlock>
 80179d2:	f104 000b 	add.w	r0, r4, #11
 80179d6:	1d23      	adds	r3, r4, #4
 80179d8:	f020 0007 	bic.w	r0, r0, #7
 80179dc:	1ac2      	subs	r2, r0, r3
 80179de:	bf1c      	itt	ne
 80179e0:	1a1b      	subne	r3, r3, r0
 80179e2:	50a3      	strne	r3, [r4, r2]
 80179e4:	e7af      	b.n	8017946 <_malloc_r+0x22>
 80179e6:	6862      	ldr	r2, [r4, #4]
 80179e8:	42a3      	cmp	r3, r4
 80179ea:	bf0c      	ite	eq
 80179ec:	f8c8 2000 	streq.w	r2, [r8]
 80179f0:	605a      	strne	r2, [r3, #4]
 80179f2:	e7eb      	b.n	80179cc <_malloc_r+0xa8>
 80179f4:	4623      	mov	r3, r4
 80179f6:	6864      	ldr	r4, [r4, #4]
 80179f8:	e7ae      	b.n	8017958 <_malloc_r+0x34>
 80179fa:	463c      	mov	r4, r7
 80179fc:	687f      	ldr	r7, [r7, #4]
 80179fe:	e7b6      	b.n	801796e <_malloc_r+0x4a>
 8017a00:	461a      	mov	r2, r3
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	42a3      	cmp	r3, r4
 8017a06:	d1fb      	bne.n	8017a00 <_malloc_r+0xdc>
 8017a08:	2300      	movs	r3, #0
 8017a0a:	6053      	str	r3, [r2, #4]
 8017a0c:	e7de      	b.n	80179cc <_malloc_r+0xa8>
 8017a0e:	230c      	movs	r3, #12
 8017a10:	6033      	str	r3, [r6, #0]
 8017a12:	4630      	mov	r0, r6
 8017a14:	f000 f81e 	bl	8017a54 <__malloc_unlock>
 8017a18:	e794      	b.n	8017944 <_malloc_r+0x20>
 8017a1a:	6005      	str	r5, [r0, #0]
 8017a1c:	e7d6      	b.n	80179cc <_malloc_r+0xa8>
 8017a1e:	bf00      	nop
 8017a20:	24006910 	.word	0x24006910

08017a24 <__ascii_mbtowc>:
 8017a24:	b082      	sub	sp, #8
 8017a26:	b901      	cbnz	r1, 8017a2a <__ascii_mbtowc+0x6>
 8017a28:	a901      	add	r1, sp, #4
 8017a2a:	b142      	cbz	r2, 8017a3e <__ascii_mbtowc+0x1a>
 8017a2c:	b14b      	cbz	r3, 8017a42 <__ascii_mbtowc+0x1e>
 8017a2e:	7813      	ldrb	r3, [r2, #0]
 8017a30:	600b      	str	r3, [r1, #0]
 8017a32:	7812      	ldrb	r2, [r2, #0]
 8017a34:	1e10      	subs	r0, r2, #0
 8017a36:	bf18      	it	ne
 8017a38:	2001      	movne	r0, #1
 8017a3a:	b002      	add	sp, #8
 8017a3c:	4770      	bx	lr
 8017a3e:	4610      	mov	r0, r2
 8017a40:	e7fb      	b.n	8017a3a <__ascii_mbtowc+0x16>
 8017a42:	f06f 0001 	mvn.w	r0, #1
 8017a46:	e7f8      	b.n	8017a3a <__ascii_mbtowc+0x16>

08017a48 <__malloc_lock>:
 8017a48:	4801      	ldr	r0, [pc, #4]	@ (8017a50 <__malloc_lock+0x8>)
 8017a4a:	f7ff bbac 	b.w	80171a6 <__retarget_lock_acquire_recursive>
 8017a4e:	bf00      	nop
 8017a50:	24006908 	.word	0x24006908

08017a54 <__malloc_unlock>:
 8017a54:	4801      	ldr	r0, [pc, #4]	@ (8017a5c <__malloc_unlock+0x8>)
 8017a56:	f7ff bba7 	b.w	80171a8 <__retarget_lock_release_recursive>
 8017a5a:	bf00      	nop
 8017a5c:	24006908 	.word	0x24006908

08017a60 <_Balloc>:
 8017a60:	b570      	push	{r4, r5, r6, lr}
 8017a62:	69c6      	ldr	r6, [r0, #28]
 8017a64:	4604      	mov	r4, r0
 8017a66:	460d      	mov	r5, r1
 8017a68:	b976      	cbnz	r6, 8017a88 <_Balloc+0x28>
 8017a6a:	2010      	movs	r0, #16
 8017a6c:	f000 fda2 	bl	80185b4 <malloc>
 8017a70:	4602      	mov	r2, r0
 8017a72:	61e0      	str	r0, [r4, #28]
 8017a74:	b920      	cbnz	r0, 8017a80 <_Balloc+0x20>
 8017a76:	4b18      	ldr	r3, [pc, #96]	@ (8017ad8 <_Balloc+0x78>)
 8017a78:	4818      	ldr	r0, [pc, #96]	@ (8017adc <_Balloc+0x7c>)
 8017a7a:	216b      	movs	r1, #107	@ 0x6b
 8017a7c:	f000 fd68 	bl	8018550 <__assert_func>
 8017a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017a84:	6006      	str	r6, [r0, #0]
 8017a86:	60c6      	str	r6, [r0, #12]
 8017a88:	69e6      	ldr	r6, [r4, #28]
 8017a8a:	68f3      	ldr	r3, [r6, #12]
 8017a8c:	b183      	cbz	r3, 8017ab0 <_Balloc+0x50>
 8017a8e:	69e3      	ldr	r3, [r4, #28]
 8017a90:	68db      	ldr	r3, [r3, #12]
 8017a92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017a96:	b9b8      	cbnz	r0, 8017ac8 <_Balloc+0x68>
 8017a98:	2101      	movs	r1, #1
 8017a9a:	fa01 f605 	lsl.w	r6, r1, r5
 8017a9e:	1d72      	adds	r2, r6, #5
 8017aa0:	0092      	lsls	r2, r2, #2
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	f000 fd72 	bl	801858c <_calloc_r>
 8017aa8:	b160      	cbz	r0, 8017ac4 <_Balloc+0x64>
 8017aaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017aae:	e00e      	b.n	8017ace <_Balloc+0x6e>
 8017ab0:	2221      	movs	r2, #33	@ 0x21
 8017ab2:	2104      	movs	r1, #4
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	f000 fd69 	bl	801858c <_calloc_r>
 8017aba:	69e3      	ldr	r3, [r4, #28]
 8017abc:	60f0      	str	r0, [r6, #12]
 8017abe:	68db      	ldr	r3, [r3, #12]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d1e4      	bne.n	8017a8e <_Balloc+0x2e>
 8017ac4:	2000      	movs	r0, #0
 8017ac6:	bd70      	pop	{r4, r5, r6, pc}
 8017ac8:	6802      	ldr	r2, [r0, #0]
 8017aca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017ace:	2300      	movs	r3, #0
 8017ad0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017ad4:	e7f7      	b.n	8017ac6 <_Balloc+0x66>
 8017ad6:	bf00      	nop
 8017ad8:	080193e2 	.word	0x080193e2
 8017adc:	080193f9 	.word	0x080193f9

08017ae0 <_Bfree>:
 8017ae0:	b570      	push	{r4, r5, r6, lr}
 8017ae2:	69c6      	ldr	r6, [r0, #28]
 8017ae4:	4605      	mov	r5, r0
 8017ae6:	460c      	mov	r4, r1
 8017ae8:	b976      	cbnz	r6, 8017b08 <_Bfree+0x28>
 8017aea:	2010      	movs	r0, #16
 8017aec:	f000 fd62 	bl	80185b4 <malloc>
 8017af0:	4602      	mov	r2, r0
 8017af2:	61e8      	str	r0, [r5, #28]
 8017af4:	b920      	cbnz	r0, 8017b00 <_Bfree+0x20>
 8017af6:	4b09      	ldr	r3, [pc, #36]	@ (8017b1c <_Bfree+0x3c>)
 8017af8:	4809      	ldr	r0, [pc, #36]	@ (8017b20 <_Bfree+0x40>)
 8017afa:	218f      	movs	r1, #143	@ 0x8f
 8017afc:	f000 fd28 	bl	8018550 <__assert_func>
 8017b00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017b04:	6006      	str	r6, [r0, #0]
 8017b06:	60c6      	str	r6, [r0, #12]
 8017b08:	b13c      	cbz	r4, 8017b1a <_Bfree+0x3a>
 8017b0a:	69eb      	ldr	r3, [r5, #28]
 8017b0c:	6862      	ldr	r2, [r4, #4]
 8017b0e:	68db      	ldr	r3, [r3, #12]
 8017b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017b14:	6021      	str	r1, [r4, #0]
 8017b16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017b1a:	bd70      	pop	{r4, r5, r6, pc}
 8017b1c:	080193e2 	.word	0x080193e2
 8017b20:	080193f9 	.word	0x080193f9

08017b24 <__multadd>:
 8017b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b28:	690d      	ldr	r5, [r1, #16]
 8017b2a:	4607      	mov	r7, r0
 8017b2c:	460c      	mov	r4, r1
 8017b2e:	461e      	mov	r6, r3
 8017b30:	f101 0c14 	add.w	ip, r1, #20
 8017b34:	2000      	movs	r0, #0
 8017b36:	f8dc 3000 	ldr.w	r3, [ip]
 8017b3a:	b299      	uxth	r1, r3
 8017b3c:	fb02 6101 	mla	r1, r2, r1, r6
 8017b40:	0c1e      	lsrs	r6, r3, #16
 8017b42:	0c0b      	lsrs	r3, r1, #16
 8017b44:	fb02 3306 	mla	r3, r2, r6, r3
 8017b48:	b289      	uxth	r1, r1
 8017b4a:	3001      	adds	r0, #1
 8017b4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017b50:	4285      	cmp	r5, r0
 8017b52:	f84c 1b04 	str.w	r1, [ip], #4
 8017b56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017b5a:	dcec      	bgt.n	8017b36 <__multadd+0x12>
 8017b5c:	b30e      	cbz	r6, 8017ba2 <__multadd+0x7e>
 8017b5e:	68a3      	ldr	r3, [r4, #8]
 8017b60:	42ab      	cmp	r3, r5
 8017b62:	dc19      	bgt.n	8017b98 <__multadd+0x74>
 8017b64:	6861      	ldr	r1, [r4, #4]
 8017b66:	4638      	mov	r0, r7
 8017b68:	3101      	adds	r1, #1
 8017b6a:	f7ff ff79 	bl	8017a60 <_Balloc>
 8017b6e:	4680      	mov	r8, r0
 8017b70:	b928      	cbnz	r0, 8017b7e <__multadd+0x5a>
 8017b72:	4602      	mov	r2, r0
 8017b74:	4b0c      	ldr	r3, [pc, #48]	@ (8017ba8 <__multadd+0x84>)
 8017b76:	480d      	ldr	r0, [pc, #52]	@ (8017bac <__multadd+0x88>)
 8017b78:	21ba      	movs	r1, #186	@ 0xba
 8017b7a:	f000 fce9 	bl	8018550 <__assert_func>
 8017b7e:	6922      	ldr	r2, [r4, #16]
 8017b80:	3202      	adds	r2, #2
 8017b82:	f104 010c 	add.w	r1, r4, #12
 8017b86:	0092      	lsls	r2, r2, #2
 8017b88:	300c      	adds	r0, #12
 8017b8a:	f7ff fb0e 	bl	80171aa <memcpy>
 8017b8e:	4621      	mov	r1, r4
 8017b90:	4638      	mov	r0, r7
 8017b92:	f7ff ffa5 	bl	8017ae0 <_Bfree>
 8017b96:	4644      	mov	r4, r8
 8017b98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017b9c:	3501      	adds	r5, #1
 8017b9e:	615e      	str	r6, [r3, #20]
 8017ba0:	6125      	str	r5, [r4, #16]
 8017ba2:	4620      	mov	r0, r4
 8017ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ba8:	08019371 	.word	0x08019371
 8017bac:	080193f9 	.word	0x080193f9

08017bb0 <__s2b>:
 8017bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bb4:	460c      	mov	r4, r1
 8017bb6:	4615      	mov	r5, r2
 8017bb8:	461f      	mov	r7, r3
 8017bba:	2209      	movs	r2, #9
 8017bbc:	3308      	adds	r3, #8
 8017bbe:	4606      	mov	r6, r0
 8017bc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8017bc4:	2100      	movs	r1, #0
 8017bc6:	2201      	movs	r2, #1
 8017bc8:	429a      	cmp	r2, r3
 8017bca:	db09      	blt.n	8017be0 <__s2b+0x30>
 8017bcc:	4630      	mov	r0, r6
 8017bce:	f7ff ff47 	bl	8017a60 <_Balloc>
 8017bd2:	b940      	cbnz	r0, 8017be6 <__s2b+0x36>
 8017bd4:	4602      	mov	r2, r0
 8017bd6:	4b19      	ldr	r3, [pc, #100]	@ (8017c3c <__s2b+0x8c>)
 8017bd8:	4819      	ldr	r0, [pc, #100]	@ (8017c40 <__s2b+0x90>)
 8017bda:	21d3      	movs	r1, #211	@ 0xd3
 8017bdc:	f000 fcb8 	bl	8018550 <__assert_func>
 8017be0:	0052      	lsls	r2, r2, #1
 8017be2:	3101      	adds	r1, #1
 8017be4:	e7f0      	b.n	8017bc8 <__s2b+0x18>
 8017be6:	9b08      	ldr	r3, [sp, #32]
 8017be8:	6143      	str	r3, [r0, #20]
 8017bea:	2d09      	cmp	r5, #9
 8017bec:	f04f 0301 	mov.w	r3, #1
 8017bf0:	6103      	str	r3, [r0, #16]
 8017bf2:	dd16      	ble.n	8017c22 <__s2b+0x72>
 8017bf4:	f104 0909 	add.w	r9, r4, #9
 8017bf8:	46c8      	mov	r8, r9
 8017bfa:	442c      	add	r4, r5
 8017bfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017c00:	4601      	mov	r1, r0
 8017c02:	3b30      	subs	r3, #48	@ 0x30
 8017c04:	220a      	movs	r2, #10
 8017c06:	4630      	mov	r0, r6
 8017c08:	f7ff ff8c 	bl	8017b24 <__multadd>
 8017c0c:	45a0      	cmp	r8, r4
 8017c0e:	d1f5      	bne.n	8017bfc <__s2b+0x4c>
 8017c10:	f1a5 0408 	sub.w	r4, r5, #8
 8017c14:	444c      	add	r4, r9
 8017c16:	1b2d      	subs	r5, r5, r4
 8017c18:	1963      	adds	r3, r4, r5
 8017c1a:	42bb      	cmp	r3, r7
 8017c1c:	db04      	blt.n	8017c28 <__s2b+0x78>
 8017c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c22:	340a      	adds	r4, #10
 8017c24:	2509      	movs	r5, #9
 8017c26:	e7f6      	b.n	8017c16 <__s2b+0x66>
 8017c28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017c2c:	4601      	mov	r1, r0
 8017c2e:	3b30      	subs	r3, #48	@ 0x30
 8017c30:	220a      	movs	r2, #10
 8017c32:	4630      	mov	r0, r6
 8017c34:	f7ff ff76 	bl	8017b24 <__multadd>
 8017c38:	e7ee      	b.n	8017c18 <__s2b+0x68>
 8017c3a:	bf00      	nop
 8017c3c:	08019371 	.word	0x08019371
 8017c40:	080193f9 	.word	0x080193f9

08017c44 <__hi0bits>:
 8017c44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017c48:	4603      	mov	r3, r0
 8017c4a:	bf36      	itet	cc
 8017c4c:	0403      	lslcc	r3, r0, #16
 8017c4e:	2000      	movcs	r0, #0
 8017c50:	2010      	movcc	r0, #16
 8017c52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017c56:	bf3c      	itt	cc
 8017c58:	021b      	lslcc	r3, r3, #8
 8017c5a:	3008      	addcc	r0, #8
 8017c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017c60:	bf3c      	itt	cc
 8017c62:	011b      	lslcc	r3, r3, #4
 8017c64:	3004      	addcc	r0, #4
 8017c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017c6a:	bf3c      	itt	cc
 8017c6c:	009b      	lslcc	r3, r3, #2
 8017c6e:	3002      	addcc	r0, #2
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	db05      	blt.n	8017c80 <__hi0bits+0x3c>
 8017c74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017c78:	f100 0001 	add.w	r0, r0, #1
 8017c7c:	bf08      	it	eq
 8017c7e:	2020      	moveq	r0, #32
 8017c80:	4770      	bx	lr

08017c82 <__lo0bits>:
 8017c82:	6803      	ldr	r3, [r0, #0]
 8017c84:	4602      	mov	r2, r0
 8017c86:	f013 0007 	ands.w	r0, r3, #7
 8017c8a:	d00b      	beq.n	8017ca4 <__lo0bits+0x22>
 8017c8c:	07d9      	lsls	r1, r3, #31
 8017c8e:	d421      	bmi.n	8017cd4 <__lo0bits+0x52>
 8017c90:	0798      	lsls	r0, r3, #30
 8017c92:	bf49      	itett	mi
 8017c94:	085b      	lsrmi	r3, r3, #1
 8017c96:	089b      	lsrpl	r3, r3, #2
 8017c98:	2001      	movmi	r0, #1
 8017c9a:	6013      	strmi	r3, [r2, #0]
 8017c9c:	bf5c      	itt	pl
 8017c9e:	6013      	strpl	r3, [r2, #0]
 8017ca0:	2002      	movpl	r0, #2
 8017ca2:	4770      	bx	lr
 8017ca4:	b299      	uxth	r1, r3
 8017ca6:	b909      	cbnz	r1, 8017cac <__lo0bits+0x2a>
 8017ca8:	0c1b      	lsrs	r3, r3, #16
 8017caa:	2010      	movs	r0, #16
 8017cac:	b2d9      	uxtb	r1, r3
 8017cae:	b909      	cbnz	r1, 8017cb4 <__lo0bits+0x32>
 8017cb0:	3008      	adds	r0, #8
 8017cb2:	0a1b      	lsrs	r3, r3, #8
 8017cb4:	0719      	lsls	r1, r3, #28
 8017cb6:	bf04      	itt	eq
 8017cb8:	091b      	lsreq	r3, r3, #4
 8017cba:	3004      	addeq	r0, #4
 8017cbc:	0799      	lsls	r1, r3, #30
 8017cbe:	bf04      	itt	eq
 8017cc0:	089b      	lsreq	r3, r3, #2
 8017cc2:	3002      	addeq	r0, #2
 8017cc4:	07d9      	lsls	r1, r3, #31
 8017cc6:	d403      	bmi.n	8017cd0 <__lo0bits+0x4e>
 8017cc8:	085b      	lsrs	r3, r3, #1
 8017cca:	f100 0001 	add.w	r0, r0, #1
 8017cce:	d003      	beq.n	8017cd8 <__lo0bits+0x56>
 8017cd0:	6013      	str	r3, [r2, #0]
 8017cd2:	4770      	bx	lr
 8017cd4:	2000      	movs	r0, #0
 8017cd6:	4770      	bx	lr
 8017cd8:	2020      	movs	r0, #32
 8017cda:	4770      	bx	lr

08017cdc <__i2b>:
 8017cdc:	b510      	push	{r4, lr}
 8017cde:	460c      	mov	r4, r1
 8017ce0:	2101      	movs	r1, #1
 8017ce2:	f7ff febd 	bl	8017a60 <_Balloc>
 8017ce6:	4602      	mov	r2, r0
 8017ce8:	b928      	cbnz	r0, 8017cf6 <__i2b+0x1a>
 8017cea:	4b05      	ldr	r3, [pc, #20]	@ (8017d00 <__i2b+0x24>)
 8017cec:	4805      	ldr	r0, [pc, #20]	@ (8017d04 <__i2b+0x28>)
 8017cee:	f240 1145 	movw	r1, #325	@ 0x145
 8017cf2:	f000 fc2d 	bl	8018550 <__assert_func>
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	6144      	str	r4, [r0, #20]
 8017cfa:	6103      	str	r3, [r0, #16]
 8017cfc:	bd10      	pop	{r4, pc}
 8017cfe:	bf00      	nop
 8017d00:	08019371 	.word	0x08019371
 8017d04:	080193f9 	.word	0x080193f9

08017d08 <__multiply>:
 8017d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d0c:	4614      	mov	r4, r2
 8017d0e:	690a      	ldr	r2, [r1, #16]
 8017d10:	6923      	ldr	r3, [r4, #16]
 8017d12:	429a      	cmp	r2, r3
 8017d14:	bfa8      	it	ge
 8017d16:	4623      	movge	r3, r4
 8017d18:	460f      	mov	r7, r1
 8017d1a:	bfa4      	itt	ge
 8017d1c:	460c      	movge	r4, r1
 8017d1e:	461f      	movge	r7, r3
 8017d20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8017d24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017d28:	68a3      	ldr	r3, [r4, #8]
 8017d2a:	6861      	ldr	r1, [r4, #4]
 8017d2c:	eb0a 0609 	add.w	r6, sl, r9
 8017d30:	42b3      	cmp	r3, r6
 8017d32:	b085      	sub	sp, #20
 8017d34:	bfb8      	it	lt
 8017d36:	3101      	addlt	r1, #1
 8017d38:	f7ff fe92 	bl	8017a60 <_Balloc>
 8017d3c:	b930      	cbnz	r0, 8017d4c <__multiply+0x44>
 8017d3e:	4602      	mov	r2, r0
 8017d40:	4b44      	ldr	r3, [pc, #272]	@ (8017e54 <__multiply+0x14c>)
 8017d42:	4845      	ldr	r0, [pc, #276]	@ (8017e58 <__multiply+0x150>)
 8017d44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017d48:	f000 fc02 	bl	8018550 <__assert_func>
 8017d4c:	f100 0514 	add.w	r5, r0, #20
 8017d50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017d54:	462b      	mov	r3, r5
 8017d56:	2200      	movs	r2, #0
 8017d58:	4543      	cmp	r3, r8
 8017d5a:	d321      	bcc.n	8017da0 <__multiply+0x98>
 8017d5c:	f107 0114 	add.w	r1, r7, #20
 8017d60:	f104 0214 	add.w	r2, r4, #20
 8017d64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017d68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017d6c:	9302      	str	r3, [sp, #8]
 8017d6e:	1b13      	subs	r3, r2, r4
 8017d70:	3b15      	subs	r3, #21
 8017d72:	f023 0303 	bic.w	r3, r3, #3
 8017d76:	3304      	adds	r3, #4
 8017d78:	f104 0715 	add.w	r7, r4, #21
 8017d7c:	42ba      	cmp	r2, r7
 8017d7e:	bf38      	it	cc
 8017d80:	2304      	movcc	r3, #4
 8017d82:	9301      	str	r3, [sp, #4]
 8017d84:	9b02      	ldr	r3, [sp, #8]
 8017d86:	9103      	str	r1, [sp, #12]
 8017d88:	428b      	cmp	r3, r1
 8017d8a:	d80c      	bhi.n	8017da6 <__multiply+0x9e>
 8017d8c:	2e00      	cmp	r6, #0
 8017d8e:	dd03      	ble.n	8017d98 <__multiply+0x90>
 8017d90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d05b      	beq.n	8017e50 <__multiply+0x148>
 8017d98:	6106      	str	r6, [r0, #16]
 8017d9a:	b005      	add	sp, #20
 8017d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017da0:	f843 2b04 	str.w	r2, [r3], #4
 8017da4:	e7d8      	b.n	8017d58 <__multiply+0x50>
 8017da6:	f8b1 a000 	ldrh.w	sl, [r1]
 8017daa:	f1ba 0f00 	cmp.w	sl, #0
 8017dae:	d024      	beq.n	8017dfa <__multiply+0xf2>
 8017db0:	f104 0e14 	add.w	lr, r4, #20
 8017db4:	46a9      	mov	r9, r5
 8017db6:	f04f 0c00 	mov.w	ip, #0
 8017dba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017dbe:	f8d9 3000 	ldr.w	r3, [r9]
 8017dc2:	fa1f fb87 	uxth.w	fp, r7
 8017dc6:	b29b      	uxth	r3, r3
 8017dc8:	fb0a 330b 	mla	r3, sl, fp, r3
 8017dcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017dd0:	f8d9 7000 	ldr.w	r7, [r9]
 8017dd4:	4463      	add	r3, ip
 8017dd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017dda:	fb0a c70b 	mla	r7, sl, fp, ip
 8017dde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8017de2:	b29b      	uxth	r3, r3
 8017de4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017de8:	4572      	cmp	r2, lr
 8017dea:	f849 3b04 	str.w	r3, [r9], #4
 8017dee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017df2:	d8e2      	bhi.n	8017dba <__multiply+0xb2>
 8017df4:	9b01      	ldr	r3, [sp, #4]
 8017df6:	f845 c003 	str.w	ip, [r5, r3]
 8017dfa:	9b03      	ldr	r3, [sp, #12]
 8017dfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017e00:	3104      	adds	r1, #4
 8017e02:	f1b9 0f00 	cmp.w	r9, #0
 8017e06:	d021      	beq.n	8017e4c <__multiply+0x144>
 8017e08:	682b      	ldr	r3, [r5, #0]
 8017e0a:	f104 0c14 	add.w	ip, r4, #20
 8017e0e:	46ae      	mov	lr, r5
 8017e10:	f04f 0a00 	mov.w	sl, #0
 8017e14:	f8bc b000 	ldrh.w	fp, [ip]
 8017e18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017e1c:	fb09 770b 	mla	r7, r9, fp, r7
 8017e20:	4457      	add	r7, sl
 8017e22:	b29b      	uxth	r3, r3
 8017e24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017e28:	f84e 3b04 	str.w	r3, [lr], #4
 8017e2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017e30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017e34:	f8be 3000 	ldrh.w	r3, [lr]
 8017e38:	fb09 330a 	mla	r3, r9, sl, r3
 8017e3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017e40:	4562      	cmp	r2, ip
 8017e42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017e46:	d8e5      	bhi.n	8017e14 <__multiply+0x10c>
 8017e48:	9f01      	ldr	r7, [sp, #4]
 8017e4a:	51eb      	str	r3, [r5, r7]
 8017e4c:	3504      	adds	r5, #4
 8017e4e:	e799      	b.n	8017d84 <__multiply+0x7c>
 8017e50:	3e01      	subs	r6, #1
 8017e52:	e79b      	b.n	8017d8c <__multiply+0x84>
 8017e54:	08019371 	.word	0x08019371
 8017e58:	080193f9 	.word	0x080193f9

08017e5c <__pow5mult>:
 8017e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e60:	4615      	mov	r5, r2
 8017e62:	f012 0203 	ands.w	r2, r2, #3
 8017e66:	4607      	mov	r7, r0
 8017e68:	460e      	mov	r6, r1
 8017e6a:	d007      	beq.n	8017e7c <__pow5mult+0x20>
 8017e6c:	4c25      	ldr	r4, [pc, #148]	@ (8017f04 <__pow5mult+0xa8>)
 8017e6e:	3a01      	subs	r2, #1
 8017e70:	2300      	movs	r3, #0
 8017e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017e76:	f7ff fe55 	bl	8017b24 <__multadd>
 8017e7a:	4606      	mov	r6, r0
 8017e7c:	10ad      	asrs	r5, r5, #2
 8017e7e:	d03d      	beq.n	8017efc <__pow5mult+0xa0>
 8017e80:	69fc      	ldr	r4, [r7, #28]
 8017e82:	b97c      	cbnz	r4, 8017ea4 <__pow5mult+0x48>
 8017e84:	2010      	movs	r0, #16
 8017e86:	f000 fb95 	bl	80185b4 <malloc>
 8017e8a:	4602      	mov	r2, r0
 8017e8c:	61f8      	str	r0, [r7, #28]
 8017e8e:	b928      	cbnz	r0, 8017e9c <__pow5mult+0x40>
 8017e90:	4b1d      	ldr	r3, [pc, #116]	@ (8017f08 <__pow5mult+0xac>)
 8017e92:	481e      	ldr	r0, [pc, #120]	@ (8017f0c <__pow5mult+0xb0>)
 8017e94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017e98:	f000 fb5a 	bl	8018550 <__assert_func>
 8017e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017ea0:	6004      	str	r4, [r0, #0]
 8017ea2:	60c4      	str	r4, [r0, #12]
 8017ea4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017eac:	b94c      	cbnz	r4, 8017ec2 <__pow5mult+0x66>
 8017eae:	f240 2171 	movw	r1, #625	@ 0x271
 8017eb2:	4638      	mov	r0, r7
 8017eb4:	f7ff ff12 	bl	8017cdc <__i2b>
 8017eb8:	2300      	movs	r3, #0
 8017eba:	f8c8 0008 	str.w	r0, [r8, #8]
 8017ebe:	4604      	mov	r4, r0
 8017ec0:	6003      	str	r3, [r0, #0]
 8017ec2:	f04f 0900 	mov.w	r9, #0
 8017ec6:	07eb      	lsls	r3, r5, #31
 8017ec8:	d50a      	bpl.n	8017ee0 <__pow5mult+0x84>
 8017eca:	4631      	mov	r1, r6
 8017ecc:	4622      	mov	r2, r4
 8017ece:	4638      	mov	r0, r7
 8017ed0:	f7ff ff1a 	bl	8017d08 <__multiply>
 8017ed4:	4631      	mov	r1, r6
 8017ed6:	4680      	mov	r8, r0
 8017ed8:	4638      	mov	r0, r7
 8017eda:	f7ff fe01 	bl	8017ae0 <_Bfree>
 8017ede:	4646      	mov	r6, r8
 8017ee0:	106d      	asrs	r5, r5, #1
 8017ee2:	d00b      	beq.n	8017efc <__pow5mult+0xa0>
 8017ee4:	6820      	ldr	r0, [r4, #0]
 8017ee6:	b938      	cbnz	r0, 8017ef8 <__pow5mult+0x9c>
 8017ee8:	4622      	mov	r2, r4
 8017eea:	4621      	mov	r1, r4
 8017eec:	4638      	mov	r0, r7
 8017eee:	f7ff ff0b 	bl	8017d08 <__multiply>
 8017ef2:	6020      	str	r0, [r4, #0]
 8017ef4:	f8c0 9000 	str.w	r9, [r0]
 8017ef8:	4604      	mov	r4, r0
 8017efa:	e7e4      	b.n	8017ec6 <__pow5mult+0x6a>
 8017efc:	4630      	mov	r0, r6
 8017efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f02:	bf00      	nop
 8017f04:	08019454 	.word	0x08019454
 8017f08:	080193e2 	.word	0x080193e2
 8017f0c:	080193f9 	.word	0x080193f9

08017f10 <__lshift>:
 8017f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f14:	460c      	mov	r4, r1
 8017f16:	6849      	ldr	r1, [r1, #4]
 8017f18:	6923      	ldr	r3, [r4, #16]
 8017f1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017f1e:	68a3      	ldr	r3, [r4, #8]
 8017f20:	4607      	mov	r7, r0
 8017f22:	4691      	mov	r9, r2
 8017f24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017f28:	f108 0601 	add.w	r6, r8, #1
 8017f2c:	42b3      	cmp	r3, r6
 8017f2e:	db0b      	blt.n	8017f48 <__lshift+0x38>
 8017f30:	4638      	mov	r0, r7
 8017f32:	f7ff fd95 	bl	8017a60 <_Balloc>
 8017f36:	4605      	mov	r5, r0
 8017f38:	b948      	cbnz	r0, 8017f4e <__lshift+0x3e>
 8017f3a:	4602      	mov	r2, r0
 8017f3c:	4b28      	ldr	r3, [pc, #160]	@ (8017fe0 <__lshift+0xd0>)
 8017f3e:	4829      	ldr	r0, [pc, #164]	@ (8017fe4 <__lshift+0xd4>)
 8017f40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017f44:	f000 fb04 	bl	8018550 <__assert_func>
 8017f48:	3101      	adds	r1, #1
 8017f4a:	005b      	lsls	r3, r3, #1
 8017f4c:	e7ee      	b.n	8017f2c <__lshift+0x1c>
 8017f4e:	2300      	movs	r3, #0
 8017f50:	f100 0114 	add.w	r1, r0, #20
 8017f54:	f100 0210 	add.w	r2, r0, #16
 8017f58:	4618      	mov	r0, r3
 8017f5a:	4553      	cmp	r3, sl
 8017f5c:	db33      	blt.n	8017fc6 <__lshift+0xb6>
 8017f5e:	6920      	ldr	r0, [r4, #16]
 8017f60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017f64:	f104 0314 	add.w	r3, r4, #20
 8017f68:	f019 091f 	ands.w	r9, r9, #31
 8017f6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017f70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017f74:	d02b      	beq.n	8017fce <__lshift+0xbe>
 8017f76:	f1c9 0e20 	rsb	lr, r9, #32
 8017f7a:	468a      	mov	sl, r1
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	6818      	ldr	r0, [r3, #0]
 8017f80:	fa00 f009 	lsl.w	r0, r0, r9
 8017f84:	4310      	orrs	r0, r2
 8017f86:	f84a 0b04 	str.w	r0, [sl], #4
 8017f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f8e:	459c      	cmp	ip, r3
 8017f90:	fa22 f20e 	lsr.w	r2, r2, lr
 8017f94:	d8f3      	bhi.n	8017f7e <__lshift+0x6e>
 8017f96:	ebac 0304 	sub.w	r3, ip, r4
 8017f9a:	3b15      	subs	r3, #21
 8017f9c:	f023 0303 	bic.w	r3, r3, #3
 8017fa0:	3304      	adds	r3, #4
 8017fa2:	f104 0015 	add.w	r0, r4, #21
 8017fa6:	4584      	cmp	ip, r0
 8017fa8:	bf38      	it	cc
 8017faa:	2304      	movcc	r3, #4
 8017fac:	50ca      	str	r2, [r1, r3]
 8017fae:	b10a      	cbz	r2, 8017fb4 <__lshift+0xa4>
 8017fb0:	f108 0602 	add.w	r6, r8, #2
 8017fb4:	3e01      	subs	r6, #1
 8017fb6:	4638      	mov	r0, r7
 8017fb8:	612e      	str	r6, [r5, #16]
 8017fba:	4621      	mov	r1, r4
 8017fbc:	f7ff fd90 	bl	8017ae0 <_Bfree>
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8017fca:	3301      	adds	r3, #1
 8017fcc:	e7c5      	b.n	8017f5a <__lshift+0x4a>
 8017fce:	3904      	subs	r1, #4
 8017fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8017fd8:	459c      	cmp	ip, r3
 8017fda:	d8f9      	bhi.n	8017fd0 <__lshift+0xc0>
 8017fdc:	e7ea      	b.n	8017fb4 <__lshift+0xa4>
 8017fde:	bf00      	nop
 8017fe0:	08019371 	.word	0x08019371
 8017fe4:	080193f9 	.word	0x080193f9

08017fe8 <__mcmp>:
 8017fe8:	690a      	ldr	r2, [r1, #16]
 8017fea:	4603      	mov	r3, r0
 8017fec:	6900      	ldr	r0, [r0, #16]
 8017fee:	1a80      	subs	r0, r0, r2
 8017ff0:	b530      	push	{r4, r5, lr}
 8017ff2:	d10e      	bne.n	8018012 <__mcmp+0x2a>
 8017ff4:	3314      	adds	r3, #20
 8017ff6:	3114      	adds	r1, #20
 8017ff8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017ffc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018000:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018004:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018008:	4295      	cmp	r5, r2
 801800a:	d003      	beq.n	8018014 <__mcmp+0x2c>
 801800c:	d205      	bcs.n	801801a <__mcmp+0x32>
 801800e:	f04f 30ff 	mov.w	r0, #4294967295
 8018012:	bd30      	pop	{r4, r5, pc}
 8018014:	42a3      	cmp	r3, r4
 8018016:	d3f3      	bcc.n	8018000 <__mcmp+0x18>
 8018018:	e7fb      	b.n	8018012 <__mcmp+0x2a>
 801801a:	2001      	movs	r0, #1
 801801c:	e7f9      	b.n	8018012 <__mcmp+0x2a>
	...

08018020 <__mdiff>:
 8018020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018024:	4689      	mov	r9, r1
 8018026:	4606      	mov	r6, r0
 8018028:	4611      	mov	r1, r2
 801802a:	4648      	mov	r0, r9
 801802c:	4614      	mov	r4, r2
 801802e:	f7ff ffdb 	bl	8017fe8 <__mcmp>
 8018032:	1e05      	subs	r5, r0, #0
 8018034:	d112      	bne.n	801805c <__mdiff+0x3c>
 8018036:	4629      	mov	r1, r5
 8018038:	4630      	mov	r0, r6
 801803a:	f7ff fd11 	bl	8017a60 <_Balloc>
 801803e:	4602      	mov	r2, r0
 8018040:	b928      	cbnz	r0, 801804e <__mdiff+0x2e>
 8018042:	4b3f      	ldr	r3, [pc, #252]	@ (8018140 <__mdiff+0x120>)
 8018044:	f240 2137 	movw	r1, #567	@ 0x237
 8018048:	483e      	ldr	r0, [pc, #248]	@ (8018144 <__mdiff+0x124>)
 801804a:	f000 fa81 	bl	8018550 <__assert_func>
 801804e:	2301      	movs	r3, #1
 8018050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018054:	4610      	mov	r0, r2
 8018056:	b003      	add	sp, #12
 8018058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801805c:	bfbc      	itt	lt
 801805e:	464b      	movlt	r3, r9
 8018060:	46a1      	movlt	r9, r4
 8018062:	4630      	mov	r0, r6
 8018064:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018068:	bfba      	itte	lt
 801806a:	461c      	movlt	r4, r3
 801806c:	2501      	movlt	r5, #1
 801806e:	2500      	movge	r5, #0
 8018070:	f7ff fcf6 	bl	8017a60 <_Balloc>
 8018074:	4602      	mov	r2, r0
 8018076:	b918      	cbnz	r0, 8018080 <__mdiff+0x60>
 8018078:	4b31      	ldr	r3, [pc, #196]	@ (8018140 <__mdiff+0x120>)
 801807a:	f240 2145 	movw	r1, #581	@ 0x245
 801807e:	e7e3      	b.n	8018048 <__mdiff+0x28>
 8018080:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018084:	6926      	ldr	r6, [r4, #16]
 8018086:	60c5      	str	r5, [r0, #12]
 8018088:	f109 0310 	add.w	r3, r9, #16
 801808c:	f109 0514 	add.w	r5, r9, #20
 8018090:	f104 0e14 	add.w	lr, r4, #20
 8018094:	f100 0b14 	add.w	fp, r0, #20
 8018098:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801809c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80180a0:	9301      	str	r3, [sp, #4]
 80180a2:	46d9      	mov	r9, fp
 80180a4:	f04f 0c00 	mov.w	ip, #0
 80180a8:	9b01      	ldr	r3, [sp, #4]
 80180aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80180ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80180b2:	9301      	str	r3, [sp, #4]
 80180b4:	fa1f f38a 	uxth.w	r3, sl
 80180b8:	4619      	mov	r1, r3
 80180ba:	b283      	uxth	r3, r0
 80180bc:	1acb      	subs	r3, r1, r3
 80180be:	0c00      	lsrs	r0, r0, #16
 80180c0:	4463      	add	r3, ip
 80180c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80180c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80180ca:	b29b      	uxth	r3, r3
 80180cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80180d0:	4576      	cmp	r6, lr
 80180d2:	f849 3b04 	str.w	r3, [r9], #4
 80180d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80180da:	d8e5      	bhi.n	80180a8 <__mdiff+0x88>
 80180dc:	1b33      	subs	r3, r6, r4
 80180de:	3b15      	subs	r3, #21
 80180e0:	f023 0303 	bic.w	r3, r3, #3
 80180e4:	3415      	adds	r4, #21
 80180e6:	3304      	adds	r3, #4
 80180e8:	42a6      	cmp	r6, r4
 80180ea:	bf38      	it	cc
 80180ec:	2304      	movcc	r3, #4
 80180ee:	441d      	add	r5, r3
 80180f0:	445b      	add	r3, fp
 80180f2:	461e      	mov	r6, r3
 80180f4:	462c      	mov	r4, r5
 80180f6:	4544      	cmp	r4, r8
 80180f8:	d30e      	bcc.n	8018118 <__mdiff+0xf8>
 80180fa:	f108 0103 	add.w	r1, r8, #3
 80180fe:	1b49      	subs	r1, r1, r5
 8018100:	f021 0103 	bic.w	r1, r1, #3
 8018104:	3d03      	subs	r5, #3
 8018106:	45a8      	cmp	r8, r5
 8018108:	bf38      	it	cc
 801810a:	2100      	movcc	r1, #0
 801810c:	440b      	add	r3, r1
 801810e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018112:	b191      	cbz	r1, 801813a <__mdiff+0x11a>
 8018114:	6117      	str	r7, [r2, #16]
 8018116:	e79d      	b.n	8018054 <__mdiff+0x34>
 8018118:	f854 1b04 	ldr.w	r1, [r4], #4
 801811c:	46e6      	mov	lr, ip
 801811e:	0c08      	lsrs	r0, r1, #16
 8018120:	fa1c fc81 	uxtah	ip, ip, r1
 8018124:	4471      	add	r1, lr
 8018126:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801812a:	b289      	uxth	r1, r1
 801812c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018130:	f846 1b04 	str.w	r1, [r6], #4
 8018134:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018138:	e7dd      	b.n	80180f6 <__mdiff+0xd6>
 801813a:	3f01      	subs	r7, #1
 801813c:	e7e7      	b.n	801810e <__mdiff+0xee>
 801813e:	bf00      	nop
 8018140:	08019371 	.word	0x08019371
 8018144:	080193f9 	.word	0x080193f9

08018148 <__ulp>:
 8018148:	b082      	sub	sp, #8
 801814a:	ed8d 0b00 	vstr	d0, [sp]
 801814e:	9a01      	ldr	r2, [sp, #4]
 8018150:	4b0f      	ldr	r3, [pc, #60]	@ (8018190 <__ulp+0x48>)
 8018152:	4013      	ands	r3, r2
 8018154:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018158:	2b00      	cmp	r3, #0
 801815a:	dc08      	bgt.n	801816e <__ulp+0x26>
 801815c:	425b      	negs	r3, r3
 801815e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018162:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018166:	da04      	bge.n	8018172 <__ulp+0x2a>
 8018168:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801816c:	4113      	asrs	r3, r2
 801816e:	2200      	movs	r2, #0
 8018170:	e008      	b.n	8018184 <__ulp+0x3c>
 8018172:	f1a2 0314 	sub.w	r3, r2, #20
 8018176:	2b1e      	cmp	r3, #30
 8018178:	bfda      	itte	le
 801817a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801817e:	40da      	lsrle	r2, r3
 8018180:	2201      	movgt	r2, #1
 8018182:	2300      	movs	r3, #0
 8018184:	4619      	mov	r1, r3
 8018186:	4610      	mov	r0, r2
 8018188:	ec41 0b10 	vmov	d0, r0, r1
 801818c:	b002      	add	sp, #8
 801818e:	4770      	bx	lr
 8018190:	7ff00000 	.word	0x7ff00000

08018194 <__b2d>:
 8018194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018198:	6906      	ldr	r6, [r0, #16]
 801819a:	f100 0814 	add.w	r8, r0, #20
 801819e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80181a2:	1f37      	subs	r7, r6, #4
 80181a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80181a8:	4610      	mov	r0, r2
 80181aa:	f7ff fd4b 	bl	8017c44 <__hi0bits>
 80181ae:	f1c0 0320 	rsb	r3, r0, #32
 80181b2:	280a      	cmp	r0, #10
 80181b4:	600b      	str	r3, [r1, #0]
 80181b6:	491b      	ldr	r1, [pc, #108]	@ (8018224 <__b2d+0x90>)
 80181b8:	dc15      	bgt.n	80181e6 <__b2d+0x52>
 80181ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80181be:	fa22 f30c 	lsr.w	r3, r2, ip
 80181c2:	45b8      	cmp	r8, r7
 80181c4:	ea43 0501 	orr.w	r5, r3, r1
 80181c8:	bf34      	ite	cc
 80181ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80181ce:	2300      	movcs	r3, #0
 80181d0:	3015      	adds	r0, #21
 80181d2:	fa02 f000 	lsl.w	r0, r2, r0
 80181d6:	fa23 f30c 	lsr.w	r3, r3, ip
 80181da:	4303      	orrs	r3, r0
 80181dc:	461c      	mov	r4, r3
 80181de:	ec45 4b10 	vmov	d0, r4, r5
 80181e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181e6:	45b8      	cmp	r8, r7
 80181e8:	bf3a      	itte	cc
 80181ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80181ee:	f1a6 0708 	subcc.w	r7, r6, #8
 80181f2:	2300      	movcs	r3, #0
 80181f4:	380b      	subs	r0, #11
 80181f6:	d012      	beq.n	801821e <__b2d+0x8a>
 80181f8:	f1c0 0120 	rsb	r1, r0, #32
 80181fc:	fa23 f401 	lsr.w	r4, r3, r1
 8018200:	4082      	lsls	r2, r0
 8018202:	4322      	orrs	r2, r4
 8018204:	4547      	cmp	r7, r8
 8018206:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801820a:	bf8c      	ite	hi
 801820c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018210:	2200      	movls	r2, #0
 8018212:	4083      	lsls	r3, r0
 8018214:	40ca      	lsrs	r2, r1
 8018216:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801821a:	4313      	orrs	r3, r2
 801821c:	e7de      	b.n	80181dc <__b2d+0x48>
 801821e:	ea42 0501 	orr.w	r5, r2, r1
 8018222:	e7db      	b.n	80181dc <__b2d+0x48>
 8018224:	3ff00000 	.word	0x3ff00000

08018228 <__d2b>:
 8018228:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801822c:	460f      	mov	r7, r1
 801822e:	2101      	movs	r1, #1
 8018230:	ec59 8b10 	vmov	r8, r9, d0
 8018234:	4616      	mov	r6, r2
 8018236:	f7ff fc13 	bl	8017a60 <_Balloc>
 801823a:	4604      	mov	r4, r0
 801823c:	b930      	cbnz	r0, 801824c <__d2b+0x24>
 801823e:	4602      	mov	r2, r0
 8018240:	4b23      	ldr	r3, [pc, #140]	@ (80182d0 <__d2b+0xa8>)
 8018242:	4824      	ldr	r0, [pc, #144]	@ (80182d4 <__d2b+0xac>)
 8018244:	f240 310f 	movw	r1, #783	@ 0x30f
 8018248:	f000 f982 	bl	8018550 <__assert_func>
 801824c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018250:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018254:	b10d      	cbz	r5, 801825a <__d2b+0x32>
 8018256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801825a:	9301      	str	r3, [sp, #4]
 801825c:	f1b8 0300 	subs.w	r3, r8, #0
 8018260:	d023      	beq.n	80182aa <__d2b+0x82>
 8018262:	4668      	mov	r0, sp
 8018264:	9300      	str	r3, [sp, #0]
 8018266:	f7ff fd0c 	bl	8017c82 <__lo0bits>
 801826a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801826e:	b1d0      	cbz	r0, 80182a6 <__d2b+0x7e>
 8018270:	f1c0 0320 	rsb	r3, r0, #32
 8018274:	fa02 f303 	lsl.w	r3, r2, r3
 8018278:	430b      	orrs	r3, r1
 801827a:	40c2      	lsrs	r2, r0
 801827c:	6163      	str	r3, [r4, #20]
 801827e:	9201      	str	r2, [sp, #4]
 8018280:	9b01      	ldr	r3, [sp, #4]
 8018282:	61a3      	str	r3, [r4, #24]
 8018284:	2b00      	cmp	r3, #0
 8018286:	bf0c      	ite	eq
 8018288:	2201      	moveq	r2, #1
 801828a:	2202      	movne	r2, #2
 801828c:	6122      	str	r2, [r4, #16]
 801828e:	b1a5      	cbz	r5, 80182ba <__d2b+0x92>
 8018290:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018294:	4405      	add	r5, r0
 8018296:	603d      	str	r5, [r7, #0]
 8018298:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801829c:	6030      	str	r0, [r6, #0]
 801829e:	4620      	mov	r0, r4
 80182a0:	b003      	add	sp, #12
 80182a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182a6:	6161      	str	r1, [r4, #20]
 80182a8:	e7ea      	b.n	8018280 <__d2b+0x58>
 80182aa:	a801      	add	r0, sp, #4
 80182ac:	f7ff fce9 	bl	8017c82 <__lo0bits>
 80182b0:	9b01      	ldr	r3, [sp, #4]
 80182b2:	6163      	str	r3, [r4, #20]
 80182b4:	3020      	adds	r0, #32
 80182b6:	2201      	movs	r2, #1
 80182b8:	e7e8      	b.n	801828c <__d2b+0x64>
 80182ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80182be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80182c2:	6038      	str	r0, [r7, #0]
 80182c4:	6918      	ldr	r0, [r3, #16]
 80182c6:	f7ff fcbd 	bl	8017c44 <__hi0bits>
 80182ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80182ce:	e7e5      	b.n	801829c <__d2b+0x74>
 80182d0:	08019371 	.word	0x08019371
 80182d4:	080193f9 	.word	0x080193f9

080182d8 <__ratio>:
 80182d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182dc:	4688      	mov	r8, r1
 80182de:	4669      	mov	r1, sp
 80182e0:	4681      	mov	r9, r0
 80182e2:	f7ff ff57 	bl	8018194 <__b2d>
 80182e6:	a901      	add	r1, sp, #4
 80182e8:	4640      	mov	r0, r8
 80182ea:	ec55 4b10 	vmov	r4, r5, d0
 80182ee:	f7ff ff51 	bl	8018194 <__b2d>
 80182f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80182f6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80182fa:	1ad2      	subs	r2, r2, r3
 80182fc:	e9dd 3100 	ldrd	r3, r1, [sp]
 8018300:	1a5b      	subs	r3, r3, r1
 8018302:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8018306:	ec57 6b10 	vmov	r6, r7, d0
 801830a:	2b00      	cmp	r3, #0
 801830c:	bfd6      	itet	le
 801830e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018312:	462a      	movgt	r2, r5
 8018314:	463a      	movle	r2, r7
 8018316:	46ab      	mov	fp, r5
 8018318:	46a2      	mov	sl, r4
 801831a:	bfce      	itee	gt
 801831c:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8018320:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8018324:	ee00 3a90 	vmovle	s1, r3
 8018328:	ec4b ab17 	vmov	d7, sl, fp
 801832c:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8018330:	b003      	add	sp, #12
 8018332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018336 <__copybits>:
 8018336:	3901      	subs	r1, #1
 8018338:	b570      	push	{r4, r5, r6, lr}
 801833a:	1149      	asrs	r1, r1, #5
 801833c:	6914      	ldr	r4, [r2, #16]
 801833e:	3101      	adds	r1, #1
 8018340:	f102 0314 	add.w	r3, r2, #20
 8018344:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018348:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801834c:	1f05      	subs	r5, r0, #4
 801834e:	42a3      	cmp	r3, r4
 8018350:	d30c      	bcc.n	801836c <__copybits+0x36>
 8018352:	1aa3      	subs	r3, r4, r2
 8018354:	3b11      	subs	r3, #17
 8018356:	f023 0303 	bic.w	r3, r3, #3
 801835a:	3211      	adds	r2, #17
 801835c:	42a2      	cmp	r2, r4
 801835e:	bf88      	it	hi
 8018360:	2300      	movhi	r3, #0
 8018362:	4418      	add	r0, r3
 8018364:	2300      	movs	r3, #0
 8018366:	4288      	cmp	r0, r1
 8018368:	d305      	bcc.n	8018376 <__copybits+0x40>
 801836a:	bd70      	pop	{r4, r5, r6, pc}
 801836c:	f853 6b04 	ldr.w	r6, [r3], #4
 8018370:	f845 6f04 	str.w	r6, [r5, #4]!
 8018374:	e7eb      	b.n	801834e <__copybits+0x18>
 8018376:	f840 3b04 	str.w	r3, [r0], #4
 801837a:	e7f4      	b.n	8018366 <__copybits+0x30>

0801837c <__any_on>:
 801837c:	f100 0214 	add.w	r2, r0, #20
 8018380:	6900      	ldr	r0, [r0, #16]
 8018382:	114b      	asrs	r3, r1, #5
 8018384:	4298      	cmp	r0, r3
 8018386:	b510      	push	{r4, lr}
 8018388:	db11      	blt.n	80183ae <__any_on+0x32>
 801838a:	dd0a      	ble.n	80183a2 <__any_on+0x26>
 801838c:	f011 011f 	ands.w	r1, r1, #31
 8018390:	d007      	beq.n	80183a2 <__any_on+0x26>
 8018392:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018396:	fa24 f001 	lsr.w	r0, r4, r1
 801839a:	fa00 f101 	lsl.w	r1, r0, r1
 801839e:	428c      	cmp	r4, r1
 80183a0:	d10b      	bne.n	80183ba <__any_on+0x3e>
 80183a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80183a6:	4293      	cmp	r3, r2
 80183a8:	d803      	bhi.n	80183b2 <__any_on+0x36>
 80183aa:	2000      	movs	r0, #0
 80183ac:	bd10      	pop	{r4, pc}
 80183ae:	4603      	mov	r3, r0
 80183b0:	e7f7      	b.n	80183a2 <__any_on+0x26>
 80183b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80183b6:	2900      	cmp	r1, #0
 80183b8:	d0f5      	beq.n	80183a6 <__any_on+0x2a>
 80183ba:	2001      	movs	r0, #1
 80183bc:	e7f6      	b.n	80183ac <__any_on+0x30>

080183be <__ascii_wctomb>:
 80183be:	4603      	mov	r3, r0
 80183c0:	4608      	mov	r0, r1
 80183c2:	b141      	cbz	r1, 80183d6 <__ascii_wctomb+0x18>
 80183c4:	2aff      	cmp	r2, #255	@ 0xff
 80183c6:	d904      	bls.n	80183d2 <__ascii_wctomb+0x14>
 80183c8:	228a      	movs	r2, #138	@ 0x8a
 80183ca:	601a      	str	r2, [r3, #0]
 80183cc:	f04f 30ff 	mov.w	r0, #4294967295
 80183d0:	4770      	bx	lr
 80183d2:	700a      	strb	r2, [r1, #0]
 80183d4:	2001      	movs	r0, #1
 80183d6:	4770      	bx	lr

080183d8 <__sflush_r>:
 80183d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80183dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183e0:	0716      	lsls	r6, r2, #28
 80183e2:	4605      	mov	r5, r0
 80183e4:	460c      	mov	r4, r1
 80183e6:	d454      	bmi.n	8018492 <__sflush_r+0xba>
 80183e8:	684b      	ldr	r3, [r1, #4]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	dc02      	bgt.n	80183f4 <__sflush_r+0x1c>
 80183ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	dd48      	ble.n	8018486 <__sflush_r+0xae>
 80183f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80183f6:	2e00      	cmp	r6, #0
 80183f8:	d045      	beq.n	8018486 <__sflush_r+0xae>
 80183fa:	2300      	movs	r3, #0
 80183fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018400:	682f      	ldr	r7, [r5, #0]
 8018402:	6a21      	ldr	r1, [r4, #32]
 8018404:	602b      	str	r3, [r5, #0]
 8018406:	d030      	beq.n	801846a <__sflush_r+0x92>
 8018408:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801840a:	89a3      	ldrh	r3, [r4, #12]
 801840c:	0759      	lsls	r1, r3, #29
 801840e:	d505      	bpl.n	801841c <__sflush_r+0x44>
 8018410:	6863      	ldr	r3, [r4, #4]
 8018412:	1ad2      	subs	r2, r2, r3
 8018414:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018416:	b10b      	cbz	r3, 801841c <__sflush_r+0x44>
 8018418:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801841a:	1ad2      	subs	r2, r2, r3
 801841c:	2300      	movs	r3, #0
 801841e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018420:	6a21      	ldr	r1, [r4, #32]
 8018422:	4628      	mov	r0, r5
 8018424:	47b0      	blx	r6
 8018426:	1c43      	adds	r3, r0, #1
 8018428:	89a3      	ldrh	r3, [r4, #12]
 801842a:	d106      	bne.n	801843a <__sflush_r+0x62>
 801842c:	6829      	ldr	r1, [r5, #0]
 801842e:	291d      	cmp	r1, #29
 8018430:	d82b      	bhi.n	801848a <__sflush_r+0xb2>
 8018432:	4a2a      	ldr	r2, [pc, #168]	@ (80184dc <__sflush_r+0x104>)
 8018434:	410a      	asrs	r2, r1
 8018436:	07d6      	lsls	r6, r2, #31
 8018438:	d427      	bmi.n	801848a <__sflush_r+0xb2>
 801843a:	2200      	movs	r2, #0
 801843c:	6062      	str	r2, [r4, #4]
 801843e:	04d9      	lsls	r1, r3, #19
 8018440:	6922      	ldr	r2, [r4, #16]
 8018442:	6022      	str	r2, [r4, #0]
 8018444:	d504      	bpl.n	8018450 <__sflush_r+0x78>
 8018446:	1c42      	adds	r2, r0, #1
 8018448:	d101      	bne.n	801844e <__sflush_r+0x76>
 801844a:	682b      	ldr	r3, [r5, #0]
 801844c:	b903      	cbnz	r3, 8018450 <__sflush_r+0x78>
 801844e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018452:	602f      	str	r7, [r5, #0]
 8018454:	b1b9      	cbz	r1, 8018486 <__sflush_r+0xae>
 8018456:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801845a:	4299      	cmp	r1, r3
 801845c:	d002      	beq.n	8018464 <__sflush_r+0x8c>
 801845e:	4628      	mov	r0, r5
 8018460:	f7fe feba 	bl	80171d8 <_free_r>
 8018464:	2300      	movs	r3, #0
 8018466:	6363      	str	r3, [r4, #52]	@ 0x34
 8018468:	e00d      	b.n	8018486 <__sflush_r+0xae>
 801846a:	2301      	movs	r3, #1
 801846c:	4628      	mov	r0, r5
 801846e:	47b0      	blx	r6
 8018470:	4602      	mov	r2, r0
 8018472:	1c50      	adds	r0, r2, #1
 8018474:	d1c9      	bne.n	801840a <__sflush_r+0x32>
 8018476:	682b      	ldr	r3, [r5, #0]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d0c6      	beq.n	801840a <__sflush_r+0x32>
 801847c:	2b1d      	cmp	r3, #29
 801847e:	d001      	beq.n	8018484 <__sflush_r+0xac>
 8018480:	2b16      	cmp	r3, #22
 8018482:	d11e      	bne.n	80184c2 <__sflush_r+0xea>
 8018484:	602f      	str	r7, [r5, #0]
 8018486:	2000      	movs	r0, #0
 8018488:	e022      	b.n	80184d0 <__sflush_r+0xf8>
 801848a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801848e:	b21b      	sxth	r3, r3
 8018490:	e01b      	b.n	80184ca <__sflush_r+0xf2>
 8018492:	690f      	ldr	r7, [r1, #16]
 8018494:	2f00      	cmp	r7, #0
 8018496:	d0f6      	beq.n	8018486 <__sflush_r+0xae>
 8018498:	0793      	lsls	r3, r2, #30
 801849a:	680e      	ldr	r6, [r1, #0]
 801849c:	bf08      	it	eq
 801849e:	694b      	ldreq	r3, [r1, #20]
 80184a0:	600f      	str	r7, [r1, #0]
 80184a2:	bf18      	it	ne
 80184a4:	2300      	movne	r3, #0
 80184a6:	eba6 0807 	sub.w	r8, r6, r7
 80184aa:	608b      	str	r3, [r1, #8]
 80184ac:	f1b8 0f00 	cmp.w	r8, #0
 80184b0:	dde9      	ble.n	8018486 <__sflush_r+0xae>
 80184b2:	6a21      	ldr	r1, [r4, #32]
 80184b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80184b6:	4643      	mov	r3, r8
 80184b8:	463a      	mov	r2, r7
 80184ba:	4628      	mov	r0, r5
 80184bc:	47b0      	blx	r6
 80184be:	2800      	cmp	r0, #0
 80184c0:	dc08      	bgt.n	80184d4 <__sflush_r+0xfc>
 80184c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184ca:	81a3      	strh	r3, [r4, #12]
 80184cc:	f04f 30ff 	mov.w	r0, #4294967295
 80184d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184d4:	4407      	add	r7, r0
 80184d6:	eba8 0800 	sub.w	r8, r8, r0
 80184da:	e7e7      	b.n	80184ac <__sflush_r+0xd4>
 80184dc:	dfbffffe 	.word	0xdfbffffe

080184e0 <_fflush_r>:
 80184e0:	b538      	push	{r3, r4, r5, lr}
 80184e2:	690b      	ldr	r3, [r1, #16]
 80184e4:	4605      	mov	r5, r0
 80184e6:	460c      	mov	r4, r1
 80184e8:	b913      	cbnz	r3, 80184f0 <_fflush_r+0x10>
 80184ea:	2500      	movs	r5, #0
 80184ec:	4628      	mov	r0, r5
 80184ee:	bd38      	pop	{r3, r4, r5, pc}
 80184f0:	b118      	cbz	r0, 80184fa <_fflush_r+0x1a>
 80184f2:	6a03      	ldr	r3, [r0, #32]
 80184f4:	b90b      	cbnz	r3, 80184fa <_fflush_r+0x1a>
 80184f6:	f7fe fd45 	bl	8016f84 <__sinit>
 80184fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d0f3      	beq.n	80184ea <_fflush_r+0xa>
 8018502:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018504:	07d0      	lsls	r0, r2, #31
 8018506:	d404      	bmi.n	8018512 <_fflush_r+0x32>
 8018508:	0599      	lsls	r1, r3, #22
 801850a:	d402      	bmi.n	8018512 <_fflush_r+0x32>
 801850c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801850e:	f7fe fe4a 	bl	80171a6 <__retarget_lock_acquire_recursive>
 8018512:	4628      	mov	r0, r5
 8018514:	4621      	mov	r1, r4
 8018516:	f7ff ff5f 	bl	80183d8 <__sflush_r>
 801851a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801851c:	07da      	lsls	r2, r3, #31
 801851e:	4605      	mov	r5, r0
 8018520:	d4e4      	bmi.n	80184ec <_fflush_r+0xc>
 8018522:	89a3      	ldrh	r3, [r4, #12]
 8018524:	059b      	lsls	r3, r3, #22
 8018526:	d4e1      	bmi.n	80184ec <_fflush_r+0xc>
 8018528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801852a:	f7fe fe3d 	bl	80171a8 <__retarget_lock_release_recursive>
 801852e:	e7dd      	b.n	80184ec <_fflush_r+0xc>

08018530 <_sbrk_r>:
 8018530:	b538      	push	{r3, r4, r5, lr}
 8018532:	4d06      	ldr	r5, [pc, #24]	@ (801854c <_sbrk_r+0x1c>)
 8018534:	2300      	movs	r3, #0
 8018536:	4604      	mov	r4, r0
 8018538:	4608      	mov	r0, r1
 801853a:	602b      	str	r3, [r5, #0]
 801853c:	f7ea fb18 	bl	8002b70 <_sbrk>
 8018540:	1c43      	adds	r3, r0, #1
 8018542:	d102      	bne.n	801854a <_sbrk_r+0x1a>
 8018544:	682b      	ldr	r3, [r5, #0]
 8018546:	b103      	cbz	r3, 801854a <_sbrk_r+0x1a>
 8018548:	6023      	str	r3, [r4, #0]
 801854a:	bd38      	pop	{r3, r4, r5, pc}
 801854c:	24006904 	.word	0x24006904

08018550 <__assert_func>:
 8018550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018552:	4614      	mov	r4, r2
 8018554:	461a      	mov	r2, r3
 8018556:	4b09      	ldr	r3, [pc, #36]	@ (801857c <__assert_func+0x2c>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	4605      	mov	r5, r0
 801855c:	68d8      	ldr	r0, [r3, #12]
 801855e:	b954      	cbnz	r4, 8018576 <__assert_func+0x26>
 8018560:	4b07      	ldr	r3, [pc, #28]	@ (8018580 <__assert_func+0x30>)
 8018562:	461c      	mov	r4, r3
 8018564:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018568:	9100      	str	r1, [sp, #0]
 801856a:	462b      	mov	r3, r5
 801856c:	4905      	ldr	r1, [pc, #20]	@ (8018584 <__assert_func+0x34>)
 801856e:	f000 f829 	bl	80185c4 <fiprintf>
 8018572:	f000 f839 	bl	80185e8 <abort>
 8018576:	4b04      	ldr	r3, [pc, #16]	@ (8018588 <__assert_func+0x38>)
 8018578:	e7f4      	b.n	8018564 <__assert_func+0x14>
 801857a:	bf00      	nop
 801857c:	24000240 	.word	0x24000240
 8018580:	0801958b 	.word	0x0801958b
 8018584:	0801955d 	.word	0x0801955d
 8018588:	08019550 	.word	0x08019550

0801858c <_calloc_r>:
 801858c:	b570      	push	{r4, r5, r6, lr}
 801858e:	fba1 5402 	umull	r5, r4, r1, r2
 8018592:	b93c      	cbnz	r4, 80185a4 <_calloc_r+0x18>
 8018594:	4629      	mov	r1, r5
 8018596:	f7ff f9c5 	bl	8017924 <_malloc_r>
 801859a:	4606      	mov	r6, r0
 801859c:	b928      	cbnz	r0, 80185aa <_calloc_r+0x1e>
 801859e:	2600      	movs	r6, #0
 80185a0:	4630      	mov	r0, r6
 80185a2:	bd70      	pop	{r4, r5, r6, pc}
 80185a4:	220c      	movs	r2, #12
 80185a6:	6002      	str	r2, [r0, #0]
 80185a8:	e7f9      	b.n	801859e <_calloc_r+0x12>
 80185aa:	462a      	mov	r2, r5
 80185ac:	4621      	mov	r1, r4
 80185ae:	f7fe fd62 	bl	8017076 <memset>
 80185b2:	e7f5      	b.n	80185a0 <_calloc_r+0x14>

080185b4 <malloc>:
 80185b4:	4b02      	ldr	r3, [pc, #8]	@ (80185c0 <malloc+0xc>)
 80185b6:	4601      	mov	r1, r0
 80185b8:	6818      	ldr	r0, [r3, #0]
 80185ba:	f7ff b9b3 	b.w	8017924 <_malloc_r>
 80185be:	bf00      	nop
 80185c0:	24000240 	.word	0x24000240

080185c4 <fiprintf>:
 80185c4:	b40e      	push	{r1, r2, r3}
 80185c6:	b503      	push	{r0, r1, lr}
 80185c8:	4601      	mov	r1, r0
 80185ca:	ab03      	add	r3, sp, #12
 80185cc:	4805      	ldr	r0, [pc, #20]	@ (80185e4 <fiprintf+0x20>)
 80185ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80185d2:	6800      	ldr	r0, [r0, #0]
 80185d4:	9301      	str	r3, [sp, #4]
 80185d6:	f000 f837 	bl	8018648 <_vfiprintf_r>
 80185da:	b002      	add	sp, #8
 80185dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80185e0:	b003      	add	sp, #12
 80185e2:	4770      	bx	lr
 80185e4:	24000240 	.word	0x24000240

080185e8 <abort>:
 80185e8:	b508      	push	{r3, lr}
 80185ea:	2006      	movs	r0, #6
 80185ec:	f000 fb8e 	bl	8018d0c <raise>
 80185f0:	2001      	movs	r0, #1
 80185f2:	f7ea fa45 	bl	8002a80 <_exit>

080185f6 <__sfputc_r>:
 80185f6:	6893      	ldr	r3, [r2, #8]
 80185f8:	3b01      	subs	r3, #1
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	b410      	push	{r4}
 80185fe:	6093      	str	r3, [r2, #8]
 8018600:	da08      	bge.n	8018614 <__sfputc_r+0x1e>
 8018602:	6994      	ldr	r4, [r2, #24]
 8018604:	42a3      	cmp	r3, r4
 8018606:	db01      	blt.n	801860c <__sfputc_r+0x16>
 8018608:	290a      	cmp	r1, #10
 801860a:	d103      	bne.n	8018614 <__sfputc_r+0x1e>
 801860c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018610:	f000 bac0 	b.w	8018b94 <__swbuf_r>
 8018614:	6813      	ldr	r3, [r2, #0]
 8018616:	1c58      	adds	r0, r3, #1
 8018618:	6010      	str	r0, [r2, #0]
 801861a:	7019      	strb	r1, [r3, #0]
 801861c:	4608      	mov	r0, r1
 801861e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018622:	4770      	bx	lr

08018624 <__sfputs_r>:
 8018624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018626:	4606      	mov	r6, r0
 8018628:	460f      	mov	r7, r1
 801862a:	4614      	mov	r4, r2
 801862c:	18d5      	adds	r5, r2, r3
 801862e:	42ac      	cmp	r4, r5
 8018630:	d101      	bne.n	8018636 <__sfputs_r+0x12>
 8018632:	2000      	movs	r0, #0
 8018634:	e007      	b.n	8018646 <__sfputs_r+0x22>
 8018636:	f814 1b01 	ldrb.w	r1, [r4], #1
 801863a:	463a      	mov	r2, r7
 801863c:	4630      	mov	r0, r6
 801863e:	f7ff ffda 	bl	80185f6 <__sfputc_r>
 8018642:	1c43      	adds	r3, r0, #1
 8018644:	d1f3      	bne.n	801862e <__sfputs_r+0xa>
 8018646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018648 <_vfiprintf_r>:
 8018648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801864c:	460d      	mov	r5, r1
 801864e:	b09d      	sub	sp, #116	@ 0x74
 8018650:	4614      	mov	r4, r2
 8018652:	4698      	mov	r8, r3
 8018654:	4606      	mov	r6, r0
 8018656:	b118      	cbz	r0, 8018660 <_vfiprintf_r+0x18>
 8018658:	6a03      	ldr	r3, [r0, #32]
 801865a:	b90b      	cbnz	r3, 8018660 <_vfiprintf_r+0x18>
 801865c:	f7fe fc92 	bl	8016f84 <__sinit>
 8018660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018662:	07d9      	lsls	r1, r3, #31
 8018664:	d405      	bmi.n	8018672 <_vfiprintf_r+0x2a>
 8018666:	89ab      	ldrh	r3, [r5, #12]
 8018668:	059a      	lsls	r2, r3, #22
 801866a:	d402      	bmi.n	8018672 <_vfiprintf_r+0x2a>
 801866c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801866e:	f7fe fd9a 	bl	80171a6 <__retarget_lock_acquire_recursive>
 8018672:	89ab      	ldrh	r3, [r5, #12]
 8018674:	071b      	lsls	r3, r3, #28
 8018676:	d501      	bpl.n	801867c <_vfiprintf_r+0x34>
 8018678:	692b      	ldr	r3, [r5, #16]
 801867a:	b99b      	cbnz	r3, 80186a4 <_vfiprintf_r+0x5c>
 801867c:	4629      	mov	r1, r5
 801867e:	4630      	mov	r0, r6
 8018680:	f000 fac6 	bl	8018c10 <__swsetup_r>
 8018684:	b170      	cbz	r0, 80186a4 <_vfiprintf_r+0x5c>
 8018686:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018688:	07dc      	lsls	r4, r3, #31
 801868a:	d504      	bpl.n	8018696 <_vfiprintf_r+0x4e>
 801868c:	f04f 30ff 	mov.w	r0, #4294967295
 8018690:	b01d      	add	sp, #116	@ 0x74
 8018692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018696:	89ab      	ldrh	r3, [r5, #12]
 8018698:	0598      	lsls	r0, r3, #22
 801869a:	d4f7      	bmi.n	801868c <_vfiprintf_r+0x44>
 801869c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801869e:	f7fe fd83 	bl	80171a8 <__retarget_lock_release_recursive>
 80186a2:	e7f3      	b.n	801868c <_vfiprintf_r+0x44>
 80186a4:	2300      	movs	r3, #0
 80186a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80186a8:	2320      	movs	r3, #32
 80186aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80186ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80186b2:	2330      	movs	r3, #48	@ 0x30
 80186b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018864 <_vfiprintf_r+0x21c>
 80186b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80186bc:	f04f 0901 	mov.w	r9, #1
 80186c0:	4623      	mov	r3, r4
 80186c2:	469a      	mov	sl, r3
 80186c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186c8:	b10a      	cbz	r2, 80186ce <_vfiprintf_r+0x86>
 80186ca:	2a25      	cmp	r2, #37	@ 0x25
 80186cc:	d1f9      	bne.n	80186c2 <_vfiprintf_r+0x7a>
 80186ce:	ebba 0b04 	subs.w	fp, sl, r4
 80186d2:	d00b      	beq.n	80186ec <_vfiprintf_r+0xa4>
 80186d4:	465b      	mov	r3, fp
 80186d6:	4622      	mov	r2, r4
 80186d8:	4629      	mov	r1, r5
 80186da:	4630      	mov	r0, r6
 80186dc:	f7ff ffa2 	bl	8018624 <__sfputs_r>
 80186e0:	3001      	adds	r0, #1
 80186e2:	f000 80a7 	beq.w	8018834 <_vfiprintf_r+0x1ec>
 80186e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80186e8:	445a      	add	r2, fp
 80186ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80186ec:	f89a 3000 	ldrb.w	r3, [sl]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	f000 809f 	beq.w	8018834 <_vfiprintf_r+0x1ec>
 80186f6:	2300      	movs	r3, #0
 80186f8:	f04f 32ff 	mov.w	r2, #4294967295
 80186fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018700:	f10a 0a01 	add.w	sl, sl, #1
 8018704:	9304      	str	r3, [sp, #16]
 8018706:	9307      	str	r3, [sp, #28]
 8018708:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801870c:	931a      	str	r3, [sp, #104]	@ 0x68
 801870e:	4654      	mov	r4, sl
 8018710:	2205      	movs	r2, #5
 8018712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018716:	4853      	ldr	r0, [pc, #332]	@ (8018864 <_vfiprintf_r+0x21c>)
 8018718:	f7e7 fdfa 	bl	8000310 <memchr>
 801871c:	9a04      	ldr	r2, [sp, #16]
 801871e:	b9d8      	cbnz	r0, 8018758 <_vfiprintf_r+0x110>
 8018720:	06d1      	lsls	r1, r2, #27
 8018722:	bf44      	itt	mi
 8018724:	2320      	movmi	r3, #32
 8018726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801872a:	0713      	lsls	r3, r2, #28
 801872c:	bf44      	itt	mi
 801872e:	232b      	movmi	r3, #43	@ 0x2b
 8018730:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018734:	f89a 3000 	ldrb.w	r3, [sl]
 8018738:	2b2a      	cmp	r3, #42	@ 0x2a
 801873a:	d015      	beq.n	8018768 <_vfiprintf_r+0x120>
 801873c:	9a07      	ldr	r2, [sp, #28]
 801873e:	4654      	mov	r4, sl
 8018740:	2000      	movs	r0, #0
 8018742:	f04f 0c0a 	mov.w	ip, #10
 8018746:	4621      	mov	r1, r4
 8018748:	f811 3b01 	ldrb.w	r3, [r1], #1
 801874c:	3b30      	subs	r3, #48	@ 0x30
 801874e:	2b09      	cmp	r3, #9
 8018750:	d94b      	bls.n	80187ea <_vfiprintf_r+0x1a2>
 8018752:	b1b0      	cbz	r0, 8018782 <_vfiprintf_r+0x13a>
 8018754:	9207      	str	r2, [sp, #28]
 8018756:	e014      	b.n	8018782 <_vfiprintf_r+0x13a>
 8018758:	eba0 0308 	sub.w	r3, r0, r8
 801875c:	fa09 f303 	lsl.w	r3, r9, r3
 8018760:	4313      	orrs	r3, r2
 8018762:	9304      	str	r3, [sp, #16]
 8018764:	46a2      	mov	sl, r4
 8018766:	e7d2      	b.n	801870e <_vfiprintf_r+0xc6>
 8018768:	9b03      	ldr	r3, [sp, #12]
 801876a:	1d19      	adds	r1, r3, #4
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	9103      	str	r1, [sp, #12]
 8018770:	2b00      	cmp	r3, #0
 8018772:	bfbb      	ittet	lt
 8018774:	425b      	neglt	r3, r3
 8018776:	f042 0202 	orrlt.w	r2, r2, #2
 801877a:	9307      	strge	r3, [sp, #28]
 801877c:	9307      	strlt	r3, [sp, #28]
 801877e:	bfb8      	it	lt
 8018780:	9204      	strlt	r2, [sp, #16]
 8018782:	7823      	ldrb	r3, [r4, #0]
 8018784:	2b2e      	cmp	r3, #46	@ 0x2e
 8018786:	d10a      	bne.n	801879e <_vfiprintf_r+0x156>
 8018788:	7863      	ldrb	r3, [r4, #1]
 801878a:	2b2a      	cmp	r3, #42	@ 0x2a
 801878c:	d132      	bne.n	80187f4 <_vfiprintf_r+0x1ac>
 801878e:	9b03      	ldr	r3, [sp, #12]
 8018790:	1d1a      	adds	r2, r3, #4
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	9203      	str	r2, [sp, #12]
 8018796:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801879a:	3402      	adds	r4, #2
 801879c:	9305      	str	r3, [sp, #20]
 801879e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018874 <_vfiprintf_r+0x22c>
 80187a2:	7821      	ldrb	r1, [r4, #0]
 80187a4:	2203      	movs	r2, #3
 80187a6:	4650      	mov	r0, sl
 80187a8:	f7e7 fdb2 	bl	8000310 <memchr>
 80187ac:	b138      	cbz	r0, 80187be <_vfiprintf_r+0x176>
 80187ae:	9b04      	ldr	r3, [sp, #16]
 80187b0:	eba0 000a 	sub.w	r0, r0, sl
 80187b4:	2240      	movs	r2, #64	@ 0x40
 80187b6:	4082      	lsls	r2, r0
 80187b8:	4313      	orrs	r3, r2
 80187ba:	3401      	adds	r4, #1
 80187bc:	9304      	str	r3, [sp, #16]
 80187be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187c2:	4829      	ldr	r0, [pc, #164]	@ (8018868 <_vfiprintf_r+0x220>)
 80187c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80187c8:	2206      	movs	r2, #6
 80187ca:	f7e7 fda1 	bl	8000310 <memchr>
 80187ce:	2800      	cmp	r0, #0
 80187d0:	d03f      	beq.n	8018852 <_vfiprintf_r+0x20a>
 80187d2:	4b26      	ldr	r3, [pc, #152]	@ (801886c <_vfiprintf_r+0x224>)
 80187d4:	bb1b      	cbnz	r3, 801881e <_vfiprintf_r+0x1d6>
 80187d6:	9b03      	ldr	r3, [sp, #12]
 80187d8:	3307      	adds	r3, #7
 80187da:	f023 0307 	bic.w	r3, r3, #7
 80187de:	3308      	adds	r3, #8
 80187e0:	9303      	str	r3, [sp, #12]
 80187e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80187e4:	443b      	add	r3, r7
 80187e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80187e8:	e76a      	b.n	80186c0 <_vfiprintf_r+0x78>
 80187ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80187ee:	460c      	mov	r4, r1
 80187f0:	2001      	movs	r0, #1
 80187f2:	e7a8      	b.n	8018746 <_vfiprintf_r+0xfe>
 80187f4:	2300      	movs	r3, #0
 80187f6:	3401      	adds	r4, #1
 80187f8:	9305      	str	r3, [sp, #20]
 80187fa:	4619      	mov	r1, r3
 80187fc:	f04f 0c0a 	mov.w	ip, #10
 8018800:	4620      	mov	r0, r4
 8018802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018806:	3a30      	subs	r2, #48	@ 0x30
 8018808:	2a09      	cmp	r2, #9
 801880a:	d903      	bls.n	8018814 <_vfiprintf_r+0x1cc>
 801880c:	2b00      	cmp	r3, #0
 801880e:	d0c6      	beq.n	801879e <_vfiprintf_r+0x156>
 8018810:	9105      	str	r1, [sp, #20]
 8018812:	e7c4      	b.n	801879e <_vfiprintf_r+0x156>
 8018814:	fb0c 2101 	mla	r1, ip, r1, r2
 8018818:	4604      	mov	r4, r0
 801881a:	2301      	movs	r3, #1
 801881c:	e7f0      	b.n	8018800 <_vfiprintf_r+0x1b8>
 801881e:	ab03      	add	r3, sp, #12
 8018820:	9300      	str	r3, [sp, #0]
 8018822:	462a      	mov	r2, r5
 8018824:	4b12      	ldr	r3, [pc, #72]	@ (8018870 <_vfiprintf_r+0x228>)
 8018826:	a904      	add	r1, sp, #16
 8018828:	4630      	mov	r0, r6
 801882a:	f3af 8000 	nop.w
 801882e:	4607      	mov	r7, r0
 8018830:	1c78      	adds	r0, r7, #1
 8018832:	d1d6      	bne.n	80187e2 <_vfiprintf_r+0x19a>
 8018834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018836:	07d9      	lsls	r1, r3, #31
 8018838:	d405      	bmi.n	8018846 <_vfiprintf_r+0x1fe>
 801883a:	89ab      	ldrh	r3, [r5, #12]
 801883c:	059a      	lsls	r2, r3, #22
 801883e:	d402      	bmi.n	8018846 <_vfiprintf_r+0x1fe>
 8018840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018842:	f7fe fcb1 	bl	80171a8 <__retarget_lock_release_recursive>
 8018846:	89ab      	ldrh	r3, [r5, #12]
 8018848:	065b      	lsls	r3, r3, #25
 801884a:	f53f af1f 	bmi.w	801868c <_vfiprintf_r+0x44>
 801884e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018850:	e71e      	b.n	8018690 <_vfiprintf_r+0x48>
 8018852:	ab03      	add	r3, sp, #12
 8018854:	9300      	str	r3, [sp, #0]
 8018856:	462a      	mov	r2, r5
 8018858:	4b05      	ldr	r3, [pc, #20]	@ (8018870 <_vfiprintf_r+0x228>)
 801885a:	a904      	add	r1, sp, #16
 801885c:	4630      	mov	r0, r6
 801885e:	f000 f879 	bl	8018954 <_printf_i>
 8018862:	e7e4      	b.n	801882e <_vfiprintf_r+0x1e6>
 8018864:	0801958c 	.word	0x0801958c
 8018868:	08019596 	.word	0x08019596
 801886c:	00000000 	.word	0x00000000
 8018870:	08018625 	.word	0x08018625
 8018874:	08019592 	.word	0x08019592

08018878 <_printf_common>:
 8018878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801887c:	4616      	mov	r6, r2
 801887e:	4698      	mov	r8, r3
 8018880:	688a      	ldr	r2, [r1, #8]
 8018882:	690b      	ldr	r3, [r1, #16]
 8018884:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018888:	4293      	cmp	r3, r2
 801888a:	bfb8      	it	lt
 801888c:	4613      	movlt	r3, r2
 801888e:	6033      	str	r3, [r6, #0]
 8018890:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018894:	4607      	mov	r7, r0
 8018896:	460c      	mov	r4, r1
 8018898:	b10a      	cbz	r2, 801889e <_printf_common+0x26>
 801889a:	3301      	adds	r3, #1
 801889c:	6033      	str	r3, [r6, #0]
 801889e:	6823      	ldr	r3, [r4, #0]
 80188a0:	0699      	lsls	r1, r3, #26
 80188a2:	bf42      	ittt	mi
 80188a4:	6833      	ldrmi	r3, [r6, #0]
 80188a6:	3302      	addmi	r3, #2
 80188a8:	6033      	strmi	r3, [r6, #0]
 80188aa:	6825      	ldr	r5, [r4, #0]
 80188ac:	f015 0506 	ands.w	r5, r5, #6
 80188b0:	d106      	bne.n	80188c0 <_printf_common+0x48>
 80188b2:	f104 0a19 	add.w	sl, r4, #25
 80188b6:	68e3      	ldr	r3, [r4, #12]
 80188b8:	6832      	ldr	r2, [r6, #0]
 80188ba:	1a9b      	subs	r3, r3, r2
 80188bc:	42ab      	cmp	r3, r5
 80188be:	dc26      	bgt.n	801890e <_printf_common+0x96>
 80188c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80188c4:	6822      	ldr	r2, [r4, #0]
 80188c6:	3b00      	subs	r3, #0
 80188c8:	bf18      	it	ne
 80188ca:	2301      	movne	r3, #1
 80188cc:	0692      	lsls	r2, r2, #26
 80188ce:	d42b      	bmi.n	8018928 <_printf_common+0xb0>
 80188d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80188d4:	4641      	mov	r1, r8
 80188d6:	4638      	mov	r0, r7
 80188d8:	47c8      	blx	r9
 80188da:	3001      	adds	r0, #1
 80188dc:	d01e      	beq.n	801891c <_printf_common+0xa4>
 80188de:	6823      	ldr	r3, [r4, #0]
 80188e0:	6922      	ldr	r2, [r4, #16]
 80188e2:	f003 0306 	and.w	r3, r3, #6
 80188e6:	2b04      	cmp	r3, #4
 80188e8:	bf02      	ittt	eq
 80188ea:	68e5      	ldreq	r5, [r4, #12]
 80188ec:	6833      	ldreq	r3, [r6, #0]
 80188ee:	1aed      	subeq	r5, r5, r3
 80188f0:	68a3      	ldr	r3, [r4, #8]
 80188f2:	bf0c      	ite	eq
 80188f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80188f8:	2500      	movne	r5, #0
 80188fa:	4293      	cmp	r3, r2
 80188fc:	bfc4      	itt	gt
 80188fe:	1a9b      	subgt	r3, r3, r2
 8018900:	18ed      	addgt	r5, r5, r3
 8018902:	2600      	movs	r6, #0
 8018904:	341a      	adds	r4, #26
 8018906:	42b5      	cmp	r5, r6
 8018908:	d11a      	bne.n	8018940 <_printf_common+0xc8>
 801890a:	2000      	movs	r0, #0
 801890c:	e008      	b.n	8018920 <_printf_common+0xa8>
 801890e:	2301      	movs	r3, #1
 8018910:	4652      	mov	r2, sl
 8018912:	4641      	mov	r1, r8
 8018914:	4638      	mov	r0, r7
 8018916:	47c8      	blx	r9
 8018918:	3001      	adds	r0, #1
 801891a:	d103      	bne.n	8018924 <_printf_common+0xac>
 801891c:	f04f 30ff 	mov.w	r0, #4294967295
 8018920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018924:	3501      	adds	r5, #1
 8018926:	e7c6      	b.n	80188b6 <_printf_common+0x3e>
 8018928:	18e1      	adds	r1, r4, r3
 801892a:	1c5a      	adds	r2, r3, #1
 801892c:	2030      	movs	r0, #48	@ 0x30
 801892e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018932:	4422      	add	r2, r4
 8018934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018938:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801893c:	3302      	adds	r3, #2
 801893e:	e7c7      	b.n	80188d0 <_printf_common+0x58>
 8018940:	2301      	movs	r3, #1
 8018942:	4622      	mov	r2, r4
 8018944:	4641      	mov	r1, r8
 8018946:	4638      	mov	r0, r7
 8018948:	47c8      	blx	r9
 801894a:	3001      	adds	r0, #1
 801894c:	d0e6      	beq.n	801891c <_printf_common+0xa4>
 801894e:	3601      	adds	r6, #1
 8018950:	e7d9      	b.n	8018906 <_printf_common+0x8e>
	...

08018954 <_printf_i>:
 8018954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018958:	7e0f      	ldrb	r7, [r1, #24]
 801895a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801895c:	2f78      	cmp	r7, #120	@ 0x78
 801895e:	4691      	mov	r9, r2
 8018960:	4680      	mov	r8, r0
 8018962:	460c      	mov	r4, r1
 8018964:	469a      	mov	sl, r3
 8018966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801896a:	d807      	bhi.n	801897c <_printf_i+0x28>
 801896c:	2f62      	cmp	r7, #98	@ 0x62
 801896e:	d80a      	bhi.n	8018986 <_printf_i+0x32>
 8018970:	2f00      	cmp	r7, #0
 8018972:	f000 80d2 	beq.w	8018b1a <_printf_i+0x1c6>
 8018976:	2f58      	cmp	r7, #88	@ 0x58
 8018978:	f000 80b9 	beq.w	8018aee <_printf_i+0x19a>
 801897c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018984:	e03a      	b.n	80189fc <_printf_i+0xa8>
 8018986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801898a:	2b15      	cmp	r3, #21
 801898c:	d8f6      	bhi.n	801897c <_printf_i+0x28>
 801898e:	a101      	add	r1, pc, #4	@ (adr r1, 8018994 <_printf_i+0x40>)
 8018990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018994:	080189ed 	.word	0x080189ed
 8018998:	08018a01 	.word	0x08018a01
 801899c:	0801897d 	.word	0x0801897d
 80189a0:	0801897d 	.word	0x0801897d
 80189a4:	0801897d 	.word	0x0801897d
 80189a8:	0801897d 	.word	0x0801897d
 80189ac:	08018a01 	.word	0x08018a01
 80189b0:	0801897d 	.word	0x0801897d
 80189b4:	0801897d 	.word	0x0801897d
 80189b8:	0801897d 	.word	0x0801897d
 80189bc:	0801897d 	.word	0x0801897d
 80189c0:	08018b01 	.word	0x08018b01
 80189c4:	08018a2b 	.word	0x08018a2b
 80189c8:	08018abb 	.word	0x08018abb
 80189cc:	0801897d 	.word	0x0801897d
 80189d0:	0801897d 	.word	0x0801897d
 80189d4:	08018b23 	.word	0x08018b23
 80189d8:	0801897d 	.word	0x0801897d
 80189dc:	08018a2b 	.word	0x08018a2b
 80189e0:	0801897d 	.word	0x0801897d
 80189e4:	0801897d 	.word	0x0801897d
 80189e8:	08018ac3 	.word	0x08018ac3
 80189ec:	6833      	ldr	r3, [r6, #0]
 80189ee:	1d1a      	adds	r2, r3, #4
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	6032      	str	r2, [r6, #0]
 80189f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80189f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80189fc:	2301      	movs	r3, #1
 80189fe:	e09d      	b.n	8018b3c <_printf_i+0x1e8>
 8018a00:	6833      	ldr	r3, [r6, #0]
 8018a02:	6820      	ldr	r0, [r4, #0]
 8018a04:	1d19      	adds	r1, r3, #4
 8018a06:	6031      	str	r1, [r6, #0]
 8018a08:	0606      	lsls	r6, r0, #24
 8018a0a:	d501      	bpl.n	8018a10 <_printf_i+0xbc>
 8018a0c:	681d      	ldr	r5, [r3, #0]
 8018a0e:	e003      	b.n	8018a18 <_printf_i+0xc4>
 8018a10:	0645      	lsls	r5, r0, #25
 8018a12:	d5fb      	bpl.n	8018a0c <_printf_i+0xb8>
 8018a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018a18:	2d00      	cmp	r5, #0
 8018a1a:	da03      	bge.n	8018a24 <_printf_i+0xd0>
 8018a1c:	232d      	movs	r3, #45	@ 0x2d
 8018a1e:	426d      	negs	r5, r5
 8018a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018a24:	4859      	ldr	r0, [pc, #356]	@ (8018b8c <_printf_i+0x238>)
 8018a26:	230a      	movs	r3, #10
 8018a28:	e011      	b.n	8018a4e <_printf_i+0xfa>
 8018a2a:	6821      	ldr	r1, [r4, #0]
 8018a2c:	6833      	ldr	r3, [r6, #0]
 8018a2e:	0608      	lsls	r0, r1, #24
 8018a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8018a34:	d402      	bmi.n	8018a3c <_printf_i+0xe8>
 8018a36:	0649      	lsls	r1, r1, #25
 8018a38:	bf48      	it	mi
 8018a3a:	b2ad      	uxthmi	r5, r5
 8018a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8018a3e:	4853      	ldr	r0, [pc, #332]	@ (8018b8c <_printf_i+0x238>)
 8018a40:	6033      	str	r3, [r6, #0]
 8018a42:	bf14      	ite	ne
 8018a44:	230a      	movne	r3, #10
 8018a46:	2308      	moveq	r3, #8
 8018a48:	2100      	movs	r1, #0
 8018a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018a4e:	6866      	ldr	r6, [r4, #4]
 8018a50:	60a6      	str	r6, [r4, #8]
 8018a52:	2e00      	cmp	r6, #0
 8018a54:	bfa2      	ittt	ge
 8018a56:	6821      	ldrge	r1, [r4, #0]
 8018a58:	f021 0104 	bicge.w	r1, r1, #4
 8018a5c:	6021      	strge	r1, [r4, #0]
 8018a5e:	b90d      	cbnz	r5, 8018a64 <_printf_i+0x110>
 8018a60:	2e00      	cmp	r6, #0
 8018a62:	d04b      	beq.n	8018afc <_printf_i+0x1a8>
 8018a64:	4616      	mov	r6, r2
 8018a66:	fbb5 f1f3 	udiv	r1, r5, r3
 8018a6a:	fb03 5711 	mls	r7, r3, r1, r5
 8018a6e:	5dc7      	ldrb	r7, [r0, r7]
 8018a70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018a74:	462f      	mov	r7, r5
 8018a76:	42bb      	cmp	r3, r7
 8018a78:	460d      	mov	r5, r1
 8018a7a:	d9f4      	bls.n	8018a66 <_printf_i+0x112>
 8018a7c:	2b08      	cmp	r3, #8
 8018a7e:	d10b      	bne.n	8018a98 <_printf_i+0x144>
 8018a80:	6823      	ldr	r3, [r4, #0]
 8018a82:	07df      	lsls	r7, r3, #31
 8018a84:	d508      	bpl.n	8018a98 <_printf_i+0x144>
 8018a86:	6923      	ldr	r3, [r4, #16]
 8018a88:	6861      	ldr	r1, [r4, #4]
 8018a8a:	4299      	cmp	r1, r3
 8018a8c:	bfde      	ittt	le
 8018a8e:	2330      	movle	r3, #48	@ 0x30
 8018a90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018a94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018a98:	1b92      	subs	r2, r2, r6
 8018a9a:	6122      	str	r2, [r4, #16]
 8018a9c:	f8cd a000 	str.w	sl, [sp]
 8018aa0:	464b      	mov	r3, r9
 8018aa2:	aa03      	add	r2, sp, #12
 8018aa4:	4621      	mov	r1, r4
 8018aa6:	4640      	mov	r0, r8
 8018aa8:	f7ff fee6 	bl	8018878 <_printf_common>
 8018aac:	3001      	adds	r0, #1
 8018aae:	d14a      	bne.n	8018b46 <_printf_i+0x1f2>
 8018ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ab4:	b004      	add	sp, #16
 8018ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018aba:	6823      	ldr	r3, [r4, #0]
 8018abc:	f043 0320 	orr.w	r3, r3, #32
 8018ac0:	6023      	str	r3, [r4, #0]
 8018ac2:	4833      	ldr	r0, [pc, #204]	@ (8018b90 <_printf_i+0x23c>)
 8018ac4:	2778      	movs	r7, #120	@ 0x78
 8018ac6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018aca:	6823      	ldr	r3, [r4, #0]
 8018acc:	6831      	ldr	r1, [r6, #0]
 8018ace:	061f      	lsls	r7, r3, #24
 8018ad0:	f851 5b04 	ldr.w	r5, [r1], #4
 8018ad4:	d402      	bmi.n	8018adc <_printf_i+0x188>
 8018ad6:	065f      	lsls	r7, r3, #25
 8018ad8:	bf48      	it	mi
 8018ada:	b2ad      	uxthmi	r5, r5
 8018adc:	6031      	str	r1, [r6, #0]
 8018ade:	07d9      	lsls	r1, r3, #31
 8018ae0:	bf44      	itt	mi
 8018ae2:	f043 0320 	orrmi.w	r3, r3, #32
 8018ae6:	6023      	strmi	r3, [r4, #0]
 8018ae8:	b11d      	cbz	r5, 8018af2 <_printf_i+0x19e>
 8018aea:	2310      	movs	r3, #16
 8018aec:	e7ac      	b.n	8018a48 <_printf_i+0xf4>
 8018aee:	4827      	ldr	r0, [pc, #156]	@ (8018b8c <_printf_i+0x238>)
 8018af0:	e7e9      	b.n	8018ac6 <_printf_i+0x172>
 8018af2:	6823      	ldr	r3, [r4, #0]
 8018af4:	f023 0320 	bic.w	r3, r3, #32
 8018af8:	6023      	str	r3, [r4, #0]
 8018afa:	e7f6      	b.n	8018aea <_printf_i+0x196>
 8018afc:	4616      	mov	r6, r2
 8018afe:	e7bd      	b.n	8018a7c <_printf_i+0x128>
 8018b00:	6833      	ldr	r3, [r6, #0]
 8018b02:	6825      	ldr	r5, [r4, #0]
 8018b04:	6961      	ldr	r1, [r4, #20]
 8018b06:	1d18      	adds	r0, r3, #4
 8018b08:	6030      	str	r0, [r6, #0]
 8018b0a:	062e      	lsls	r6, r5, #24
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	d501      	bpl.n	8018b14 <_printf_i+0x1c0>
 8018b10:	6019      	str	r1, [r3, #0]
 8018b12:	e002      	b.n	8018b1a <_printf_i+0x1c6>
 8018b14:	0668      	lsls	r0, r5, #25
 8018b16:	d5fb      	bpl.n	8018b10 <_printf_i+0x1bc>
 8018b18:	8019      	strh	r1, [r3, #0]
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	6123      	str	r3, [r4, #16]
 8018b1e:	4616      	mov	r6, r2
 8018b20:	e7bc      	b.n	8018a9c <_printf_i+0x148>
 8018b22:	6833      	ldr	r3, [r6, #0]
 8018b24:	1d1a      	adds	r2, r3, #4
 8018b26:	6032      	str	r2, [r6, #0]
 8018b28:	681e      	ldr	r6, [r3, #0]
 8018b2a:	6862      	ldr	r2, [r4, #4]
 8018b2c:	2100      	movs	r1, #0
 8018b2e:	4630      	mov	r0, r6
 8018b30:	f7e7 fbee 	bl	8000310 <memchr>
 8018b34:	b108      	cbz	r0, 8018b3a <_printf_i+0x1e6>
 8018b36:	1b80      	subs	r0, r0, r6
 8018b38:	6060      	str	r0, [r4, #4]
 8018b3a:	6863      	ldr	r3, [r4, #4]
 8018b3c:	6123      	str	r3, [r4, #16]
 8018b3e:	2300      	movs	r3, #0
 8018b40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018b44:	e7aa      	b.n	8018a9c <_printf_i+0x148>
 8018b46:	6923      	ldr	r3, [r4, #16]
 8018b48:	4632      	mov	r2, r6
 8018b4a:	4649      	mov	r1, r9
 8018b4c:	4640      	mov	r0, r8
 8018b4e:	47d0      	blx	sl
 8018b50:	3001      	adds	r0, #1
 8018b52:	d0ad      	beq.n	8018ab0 <_printf_i+0x15c>
 8018b54:	6823      	ldr	r3, [r4, #0]
 8018b56:	079b      	lsls	r3, r3, #30
 8018b58:	d413      	bmi.n	8018b82 <_printf_i+0x22e>
 8018b5a:	68e0      	ldr	r0, [r4, #12]
 8018b5c:	9b03      	ldr	r3, [sp, #12]
 8018b5e:	4298      	cmp	r0, r3
 8018b60:	bfb8      	it	lt
 8018b62:	4618      	movlt	r0, r3
 8018b64:	e7a6      	b.n	8018ab4 <_printf_i+0x160>
 8018b66:	2301      	movs	r3, #1
 8018b68:	4632      	mov	r2, r6
 8018b6a:	4649      	mov	r1, r9
 8018b6c:	4640      	mov	r0, r8
 8018b6e:	47d0      	blx	sl
 8018b70:	3001      	adds	r0, #1
 8018b72:	d09d      	beq.n	8018ab0 <_printf_i+0x15c>
 8018b74:	3501      	adds	r5, #1
 8018b76:	68e3      	ldr	r3, [r4, #12]
 8018b78:	9903      	ldr	r1, [sp, #12]
 8018b7a:	1a5b      	subs	r3, r3, r1
 8018b7c:	42ab      	cmp	r3, r5
 8018b7e:	dcf2      	bgt.n	8018b66 <_printf_i+0x212>
 8018b80:	e7eb      	b.n	8018b5a <_printf_i+0x206>
 8018b82:	2500      	movs	r5, #0
 8018b84:	f104 0619 	add.w	r6, r4, #25
 8018b88:	e7f5      	b.n	8018b76 <_printf_i+0x222>
 8018b8a:	bf00      	nop
 8018b8c:	0801959d 	.word	0x0801959d
 8018b90:	080195ae 	.word	0x080195ae

08018b94 <__swbuf_r>:
 8018b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b96:	460e      	mov	r6, r1
 8018b98:	4614      	mov	r4, r2
 8018b9a:	4605      	mov	r5, r0
 8018b9c:	b118      	cbz	r0, 8018ba6 <__swbuf_r+0x12>
 8018b9e:	6a03      	ldr	r3, [r0, #32]
 8018ba0:	b90b      	cbnz	r3, 8018ba6 <__swbuf_r+0x12>
 8018ba2:	f7fe f9ef 	bl	8016f84 <__sinit>
 8018ba6:	69a3      	ldr	r3, [r4, #24]
 8018ba8:	60a3      	str	r3, [r4, #8]
 8018baa:	89a3      	ldrh	r3, [r4, #12]
 8018bac:	071a      	lsls	r2, r3, #28
 8018bae:	d501      	bpl.n	8018bb4 <__swbuf_r+0x20>
 8018bb0:	6923      	ldr	r3, [r4, #16]
 8018bb2:	b943      	cbnz	r3, 8018bc6 <__swbuf_r+0x32>
 8018bb4:	4621      	mov	r1, r4
 8018bb6:	4628      	mov	r0, r5
 8018bb8:	f000 f82a 	bl	8018c10 <__swsetup_r>
 8018bbc:	b118      	cbz	r0, 8018bc6 <__swbuf_r+0x32>
 8018bbe:	f04f 37ff 	mov.w	r7, #4294967295
 8018bc2:	4638      	mov	r0, r7
 8018bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bc6:	6823      	ldr	r3, [r4, #0]
 8018bc8:	6922      	ldr	r2, [r4, #16]
 8018bca:	1a98      	subs	r0, r3, r2
 8018bcc:	6963      	ldr	r3, [r4, #20]
 8018bce:	b2f6      	uxtb	r6, r6
 8018bd0:	4283      	cmp	r3, r0
 8018bd2:	4637      	mov	r7, r6
 8018bd4:	dc05      	bgt.n	8018be2 <__swbuf_r+0x4e>
 8018bd6:	4621      	mov	r1, r4
 8018bd8:	4628      	mov	r0, r5
 8018bda:	f7ff fc81 	bl	80184e0 <_fflush_r>
 8018bde:	2800      	cmp	r0, #0
 8018be0:	d1ed      	bne.n	8018bbe <__swbuf_r+0x2a>
 8018be2:	68a3      	ldr	r3, [r4, #8]
 8018be4:	3b01      	subs	r3, #1
 8018be6:	60a3      	str	r3, [r4, #8]
 8018be8:	6823      	ldr	r3, [r4, #0]
 8018bea:	1c5a      	adds	r2, r3, #1
 8018bec:	6022      	str	r2, [r4, #0]
 8018bee:	701e      	strb	r6, [r3, #0]
 8018bf0:	6962      	ldr	r2, [r4, #20]
 8018bf2:	1c43      	adds	r3, r0, #1
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d004      	beq.n	8018c02 <__swbuf_r+0x6e>
 8018bf8:	89a3      	ldrh	r3, [r4, #12]
 8018bfa:	07db      	lsls	r3, r3, #31
 8018bfc:	d5e1      	bpl.n	8018bc2 <__swbuf_r+0x2e>
 8018bfe:	2e0a      	cmp	r6, #10
 8018c00:	d1df      	bne.n	8018bc2 <__swbuf_r+0x2e>
 8018c02:	4621      	mov	r1, r4
 8018c04:	4628      	mov	r0, r5
 8018c06:	f7ff fc6b 	bl	80184e0 <_fflush_r>
 8018c0a:	2800      	cmp	r0, #0
 8018c0c:	d0d9      	beq.n	8018bc2 <__swbuf_r+0x2e>
 8018c0e:	e7d6      	b.n	8018bbe <__swbuf_r+0x2a>

08018c10 <__swsetup_r>:
 8018c10:	b538      	push	{r3, r4, r5, lr}
 8018c12:	4b29      	ldr	r3, [pc, #164]	@ (8018cb8 <__swsetup_r+0xa8>)
 8018c14:	4605      	mov	r5, r0
 8018c16:	6818      	ldr	r0, [r3, #0]
 8018c18:	460c      	mov	r4, r1
 8018c1a:	b118      	cbz	r0, 8018c24 <__swsetup_r+0x14>
 8018c1c:	6a03      	ldr	r3, [r0, #32]
 8018c1e:	b90b      	cbnz	r3, 8018c24 <__swsetup_r+0x14>
 8018c20:	f7fe f9b0 	bl	8016f84 <__sinit>
 8018c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c28:	0719      	lsls	r1, r3, #28
 8018c2a:	d422      	bmi.n	8018c72 <__swsetup_r+0x62>
 8018c2c:	06da      	lsls	r2, r3, #27
 8018c2e:	d407      	bmi.n	8018c40 <__swsetup_r+0x30>
 8018c30:	2209      	movs	r2, #9
 8018c32:	602a      	str	r2, [r5, #0]
 8018c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c38:	81a3      	strh	r3, [r4, #12]
 8018c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8018c3e:	e033      	b.n	8018ca8 <__swsetup_r+0x98>
 8018c40:	0758      	lsls	r0, r3, #29
 8018c42:	d512      	bpl.n	8018c6a <__swsetup_r+0x5a>
 8018c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018c46:	b141      	cbz	r1, 8018c5a <__swsetup_r+0x4a>
 8018c48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018c4c:	4299      	cmp	r1, r3
 8018c4e:	d002      	beq.n	8018c56 <__swsetup_r+0x46>
 8018c50:	4628      	mov	r0, r5
 8018c52:	f7fe fac1 	bl	80171d8 <_free_r>
 8018c56:	2300      	movs	r3, #0
 8018c58:	6363      	str	r3, [r4, #52]	@ 0x34
 8018c5a:	89a3      	ldrh	r3, [r4, #12]
 8018c5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018c60:	81a3      	strh	r3, [r4, #12]
 8018c62:	2300      	movs	r3, #0
 8018c64:	6063      	str	r3, [r4, #4]
 8018c66:	6923      	ldr	r3, [r4, #16]
 8018c68:	6023      	str	r3, [r4, #0]
 8018c6a:	89a3      	ldrh	r3, [r4, #12]
 8018c6c:	f043 0308 	orr.w	r3, r3, #8
 8018c70:	81a3      	strh	r3, [r4, #12]
 8018c72:	6923      	ldr	r3, [r4, #16]
 8018c74:	b94b      	cbnz	r3, 8018c8a <__swsetup_r+0x7a>
 8018c76:	89a3      	ldrh	r3, [r4, #12]
 8018c78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018c80:	d003      	beq.n	8018c8a <__swsetup_r+0x7a>
 8018c82:	4621      	mov	r1, r4
 8018c84:	4628      	mov	r0, r5
 8018c86:	f000 f883 	bl	8018d90 <__smakebuf_r>
 8018c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c8e:	f013 0201 	ands.w	r2, r3, #1
 8018c92:	d00a      	beq.n	8018caa <__swsetup_r+0x9a>
 8018c94:	2200      	movs	r2, #0
 8018c96:	60a2      	str	r2, [r4, #8]
 8018c98:	6962      	ldr	r2, [r4, #20]
 8018c9a:	4252      	negs	r2, r2
 8018c9c:	61a2      	str	r2, [r4, #24]
 8018c9e:	6922      	ldr	r2, [r4, #16]
 8018ca0:	b942      	cbnz	r2, 8018cb4 <__swsetup_r+0xa4>
 8018ca2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018ca6:	d1c5      	bne.n	8018c34 <__swsetup_r+0x24>
 8018ca8:	bd38      	pop	{r3, r4, r5, pc}
 8018caa:	0799      	lsls	r1, r3, #30
 8018cac:	bf58      	it	pl
 8018cae:	6962      	ldrpl	r2, [r4, #20]
 8018cb0:	60a2      	str	r2, [r4, #8]
 8018cb2:	e7f4      	b.n	8018c9e <__swsetup_r+0x8e>
 8018cb4:	2000      	movs	r0, #0
 8018cb6:	e7f7      	b.n	8018ca8 <__swsetup_r+0x98>
 8018cb8:	24000240 	.word	0x24000240

08018cbc <_raise_r>:
 8018cbc:	291f      	cmp	r1, #31
 8018cbe:	b538      	push	{r3, r4, r5, lr}
 8018cc0:	4605      	mov	r5, r0
 8018cc2:	460c      	mov	r4, r1
 8018cc4:	d904      	bls.n	8018cd0 <_raise_r+0x14>
 8018cc6:	2316      	movs	r3, #22
 8018cc8:	6003      	str	r3, [r0, #0]
 8018cca:	f04f 30ff 	mov.w	r0, #4294967295
 8018cce:	bd38      	pop	{r3, r4, r5, pc}
 8018cd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018cd2:	b112      	cbz	r2, 8018cda <_raise_r+0x1e>
 8018cd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018cd8:	b94b      	cbnz	r3, 8018cee <_raise_r+0x32>
 8018cda:	4628      	mov	r0, r5
 8018cdc:	f000 f830 	bl	8018d40 <_getpid_r>
 8018ce0:	4622      	mov	r2, r4
 8018ce2:	4601      	mov	r1, r0
 8018ce4:	4628      	mov	r0, r5
 8018ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018cea:	f000 b817 	b.w	8018d1c <_kill_r>
 8018cee:	2b01      	cmp	r3, #1
 8018cf0:	d00a      	beq.n	8018d08 <_raise_r+0x4c>
 8018cf2:	1c59      	adds	r1, r3, #1
 8018cf4:	d103      	bne.n	8018cfe <_raise_r+0x42>
 8018cf6:	2316      	movs	r3, #22
 8018cf8:	6003      	str	r3, [r0, #0]
 8018cfa:	2001      	movs	r0, #1
 8018cfc:	e7e7      	b.n	8018cce <_raise_r+0x12>
 8018cfe:	2100      	movs	r1, #0
 8018d00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018d04:	4620      	mov	r0, r4
 8018d06:	4798      	blx	r3
 8018d08:	2000      	movs	r0, #0
 8018d0a:	e7e0      	b.n	8018cce <_raise_r+0x12>

08018d0c <raise>:
 8018d0c:	4b02      	ldr	r3, [pc, #8]	@ (8018d18 <raise+0xc>)
 8018d0e:	4601      	mov	r1, r0
 8018d10:	6818      	ldr	r0, [r3, #0]
 8018d12:	f7ff bfd3 	b.w	8018cbc <_raise_r>
 8018d16:	bf00      	nop
 8018d18:	24000240 	.word	0x24000240

08018d1c <_kill_r>:
 8018d1c:	b538      	push	{r3, r4, r5, lr}
 8018d1e:	4d07      	ldr	r5, [pc, #28]	@ (8018d3c <_kill_r+0x20>)
 8018d20:	2300      	movs	r3, #0
 8018d22:	4604      	mov	r4, r0
 8018d24:	4608      	mov	r0, r1
 8018d26:	4611      	mov	r1, r2
 8018d28:	602b      	str	r3, [r5, #0]
 8018d2a:	f7e9 fe99 	bl	8002a60 <_kill>
 8018d2e:	1c43      	adds	r3, r0, #1
 8018d30:	d102      	bne.n	8018d38 <_kill_r+0x1c>
 8018d32:	682b      	ldr	r3, [r5, #0]
 8018d34:	b103      	cbz	r3, 8018d38 <_kill_r+0x1c>
 8018d36:	6023      	str	r3, [r4, #0]
 8018d38:	bd38      	pop	{r3, r4, r5, pc}
 8018d3a:	bf00      	nop
 8018d3c:	24006904 	.word	0x24006904

08018d40 <_getpid_r>:
 8018d40:	f7e9 be86 	b.w	8002a50 <_getpid>

08018d44 <__swhatbuf_r>:
 8018d44:	b570      	push	{r4, r5, r6, lr}
 8018d46:	460c      	mov	r4, r1
 8018d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d4c:	2900      	cmp	r1, #0
 8018d4e:	b096      	sub	sp, #88	@ 0x58
 8018d50:	4615      	mov	r5, r2
 8018d52:	461e      	mov	r6, r3
 8018d54:	da0d      	bge.n	8018d72 <__swhatbuf_r+0x2e>
 8018d56:	89a3      	ldrh	r3, [r4, #12]
 8018d58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018d5c:	f04f 0100 	mov.w	r1, #0
 8018d60:	bf14      	ite	ne
 8018d62:	2340      	movne	r3, #64	@ 0x40
 8018d64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018d68:	2000      	movs	r0, #0
 8018d6a:	6031      	str	r1, [r6, #0]
 8018d6c:	602b      	str	r3, [r5, #0]
 8018d6e:	b016      	add	sp, #88	@ 0x58
 8018d70:	bd70      	pop	{r4, r5, r6, pc}
 8018d72:	466a      	mov	r2, sp
 8018d74:	f000 f848 	bl	8018e08 <_fstat_r>
 8018d78:	2800      	cmp	r0, #0
 8018d7a:	dbec      	blt.n	8018d56 <__swhatbuf_r+0x12>
 8018d7c:	9901      	ldr	r1, [sp, #4]
 8018d7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018d82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018d86:	4259      	negs	r1, r3
 8018d88:	4159      	adcs	r1, r3
 8018d8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018d8e:	e7eb      	b.n	8018d68 <__swhatbuf_r+0x24>

08018d90 <__smakebuf_r>:
 8018d90:	898b      	ldrh	r3, [r1, #12]
 8018d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d94:	079d      	lsls	r5, r3, #30
 8018d96:	4606      	mov	r6, r0
 8018d98:	460c      	mov	r4, r1
 8018d9a:	d507      	bpl.n	8018dac <__smakebuf_r+0x1c>
 8018d9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018da0:	6023      	str	r3, [r4, #0]
 8018da2:	6123      	str	r3, [r4, #16]
 8018da4:	2301      	movs	r3, #1
 8018da6:	6163      	str	r3, [r4, #20]
 8018da8:	b003      	add	sp, #12
 8018daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018dac:	ab01      	add	r3, sp, #4
 8018dae:	466a      	mov	r2, sp
 8018db0:	f7ff ffc8 	bl	8018d44 <__swhatbuf_r>
 8018db4:	9f00      	ldr	r7, [sp, #0]
 8018db6:	4605      	mov	r5, r0
 8018db8:	4639      	mov	r1, r7
 8018dba:	4630      	mov	r0, r6
 8018dbc:	f7fe fdb2 	bl	8017924 <_malloc_r>
 8018dc0:	b948      	cbnz	r0, 8018dd6 <__smakebuf_r+0x46>
 8018dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018dc6:	059a      	lsls	r2, r3, #22
 8018dc8:	d4ee      	bmi.n	8018da8 <__smakebuf_r+0x18>
 8018dca:	f023 0303 	bic.w	r3, r3, #3
 8018dce:	f043 0302 	orr.w	r3, r3, #2
 8018dd2:	81a3      	strh	r3, [r4, #12]
 8018dd4:	e7e2      	b.n	8018d9c <__smakebuf_r+0xc>
 8018dd6:	89a3      	ldrh	r3, [r4, #12]
 8018dd8:	6020      	str	r0, [r4, #0]
 8018dda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018dde:	81a3      	strh	r3, [r4, #12]
 8018de0:	9b01      	ldr	r3, [sp, #4]
 8018de2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018de6:	b15b      	cbz	r3, 8018e00 <__smakebuf_r+0x70>
 8018de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018dec:	4630      	mov	r0, r6
 8018dee:	f000 f81d 	bl	8018e2c <_isatty_r>
 8018df2:	b128      	cbz	r0, 8018e00 <__smakebuf_r+0x70>
 8018df4:	89a3      	ldrh	r3, [r4, #12]
 8018df6:	f023 0303 	bic.w	r3, r3, #3
 8018dfa:	f043 0301 	orr.w	r3, r3, #1
 8018dfe:	81a3      	strh	r3, [r4, #12]
 8018e00:	89a3      	ldrh	r3, [r4, #12]
 8018e02:	431d      	orrs	r5, r3
 8018e04:	81a5      	strh	r5, [r4, #12]
 8018e06:	e7cf      	b.n	8018da8 <__smakebuf_r+0x18>

08018e08 <_fstat_r>:
 8018e08:	b538      	push	{r3, r4, r5, lr}
 8018e0a:	4d07      	ldr	r5, [pc, #28]	@ (8018e28 <_fstat_r+0x20>)
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	4604      	mov	r4, r0
 8018e10:	4608      	mov	r0, r1
 8018e12:	4611      	mov	r1, r2
 8018e14:	602b      	str	r3, [r5, #0]
 8018e16:	f7e9 fe83 	bl	8002b20 <_fstat>
 8018e1a:	1c43      	adds	r3, r0, #1
 8018e1c:	d102      	bne.n	8018e24 <_fstat_r+0x1c>
 8018e1e:	682b      	ldr	r3, [r5, #0]
 8018e20:	b103      	cbz	r3, 8018e24 <_fstat_r+0x1c>
 8018e22:	6023      	str	r3, [r4, #0]
 8018e24:	bd38      	pop	{r3, r4, r5, pc}
 8018e26:	bf00      	nop
 8018e28:	24006904 	.word	0x24006904

08018e2c <_isatty_r>:
 8018e2c:	b538      	push	{r3, r4, r5, lr}
 8018e2e:	4d06      	ldr	r5, [pc, #24]	@ (8018e48 <_isatty_r+0x1c>)
 8018e30:	2300      	movs	r3, #0
 8018e32:	4604      	mov	r4, r0
 8018e34:	4608      	mov	r0, r1
 8018e36:	602b      	str	r3, [r5, #0]
 8018e38:	f7e9 fe82 	bl	8002b40 <_isatty>
 8018e3c:	1c43      	adds	r3, r0, #1
 8018e3e:	d102      	bne.n	8018e46 <_isatty_r+0x1a>
 8018e40:	682b      	ldr	r3, [r5, #0]
 8018e42:	b103      	cbz	r3, 8018e46 <_isatty_r+0x1a>
 8018e44:	6023      	str	r3, [r4, #0]
 8018e46:	bd38      	pop	{r3, r4, r5, pc}
 8018e48:	24006904 	.word	0x24006904
 8018e4c:	00000000 	.word	0x00000000

08018e50 <log>:
 8018e50:	b4f0      	push	{r4, r5, r6, r7}
 8018e52:	ee10 0a90 	vmov	r0, s1
 8018e56:	ee10 3a10 	vmov	r3, s0
 8018e5a:	f04f 34ff 	mov.w	r4, #4294967295
 8018e5e:	429c      	cmp	r4, r3
 8018e60:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 8018e64:	4c70      	ldr	r4, [pc, #448]	@ (8019028 <log+0x1d8>)
 8018e66:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 8018e6a:	418c      	sbcs	r4, r1
 8018e6c:	ed2d 8b02 	vpush	{d8}
 8018e70:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8018e74:	d35a      	bcc.n	8018f2c <log+0xdc>
 8018e76:	4a6d      	ldr	r2, [pc, #436]	@ (801902c <log+0x1dc>)
 8018e78:	4290      	cmp	r0, r2
 8018e7a:	bf08      	it	eq
 8018e7c:	2b00      	cmpeq	r3, #0
 8018e7e:	f000 80c4 	beq.w	801900a <log+0x1ba>
 8018e82:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8018e86:	ee30 0b47 	vsub.f64	d0, d0, d7
 8018e8a:	4b69      	ldr	r3, [pc, #420]	@ (8019030 <log+0x1e0>)
 8018e8c:	ee20 2b00 	vmul.f64	d2, d0, d0
 8018e90:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8018e94:	ee20 4b02 	vmul.f64	d4, d0, d2
 8018e98:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8018e9c:	eea6 7b00 	vfma.f64	d7, d6, d0
 8018ea0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 8018ea4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 8018ea8:	eea6 7b02 	vfma.f64	d7, d6, d2
 8018eac:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8018eb0:	eea5 6b00 	vfma.f64	d6, d5, d0
 8018eb4:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8018eb8:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 8018ebc:	eea5 6b02 	vfma.f64	d6, d5, d2
 8018ec0:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8018ec4:	eea3 5b00 	vfma.f64	d5, d3, d0
 8018ec8:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 8018ecc:	eea3 5b02 	vfma.f64	d5, d3, d2
 8018ed0:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8018ed4:	eea3 5b04 	vfma.f64	d5, d3, d4
 8018ed8:	eea5 6b04 	vfma.f64	d6, d5, d4
 8018edc:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8018ee0:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018ee4:	eeb0 2b47 	vmov.f64	d2, d7
 8018ee8:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8019010 <log+0x1c0>
 8018eec:	eeb0 6b40 	vmov.f64	d6, d0
 8018ef0:	eeb0 3b40 	vmov.f64	d3, d0
 8018ef4:	eea0 6b07 	vfma.f64	d6, d0, d7
 8018ef8:	eea0 6b47 	vfms.f64	d6, d0, d7
 8018efc:	ee30 8b46 	vsub.f64	d8, d0, d6
 8018f00:	ee26 1b06 	vmul.f64	d1, d6, d6
 8018f04:	eea1 3b05 	vfma.f64	d3, d1, d5
 8018f08:	ee30 7b43 	vsub.f64	d7, d0, d3
 8018f0c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018f10:	eea1 7b05 	vfma.f64	d7, d1, d5
 8018f14:	ee25 5b08 	vmul.f64	d5, d5, d8
 8018f18:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018f1c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8018f20:	ee33 0b07 	vadd.f64	d0, d3, d7
 8018f24:	ecbd 8b02 	vpop	{d8}
 8018f28:	bcf0      	pop	{r4, r5, r6, r7}
 8018f2a:	4770      	bx	lr
 8018f2c:	f1a2 0410 	sub.w	r4, r2, #16
 8018f30:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8018f34:	428c      	cmp	r4, r1
 8018f36:	d923      	bls.n	8018f80 <log+0x130>
 8018f38:	18d9      	adds	r1, r3, r3
 8018f3a:	eb40 0400 	adc.w	r4, r0, r0
 8018f3e:	4321      	orrs	r1, r4
 8018f40:	d105      	bne.n	8018f4e <log+0xfe>
 8018f42:	ecbd 8b02 	vpop	{d8}
 8018f46:	2001      	movs	r0, #1
 8018f48:	bcf0      	pop	{r4, r5, r6, r7}
 8018f4a:	f000 b885 	b.w	8019058 <__math_divzero>
 8018f4e:	4939      	ldr	r1, [pc, #228]	@ (8019034 <log+0x1e4>)
 8018f50:	4288      	cmp	r0, r1
 8018f52:	bf08      	it	eq
 8018f54:	2b00      	cmpeq	r3, #0
 8018f56:	d0e5      	beq.n	8018f24 <log+0xd4>
 8018f58:	0413      	lsls	r3, r2, #16
 8018f5a:	d403      	bmi.n	8018f64 <log+0x114>
 8018f5c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8018f60:	4393      	bics	r3, r2
 8018f62:	d104      	bne.n	8018f6e <log+0x11e>
 8018f64:	ecbd 8b02 	vpop	{d8}
 8018f68:	bcf0      	pop	{r4, r5, r6, r7}
 8018f6a:	f000 b88d 	b.w	8019088 <__math_invalid>
 8018f6e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8019018 <log+0x1c8>
 8018f72:	ee20 7b07 	vmul.f64	d7, d0, d7
 8018f76:	ec53 2b17 	vmov	r2, r3, d7
 8018f7a:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 8018f7e:	4613      	mov	r3, r2
 8018f80:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 8018f84:	492a      	ldr	r1, [pc, #168]	@ (8019030 <log+0x1e0>)
 8018f86:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 8018f8a:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 8018f8e:	f3c2 3446 	ubfx	r4, r2, #13, #7
 8018f92:	0d15      	lsrs	r5, r2, #20
 8018f94:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 8018f98:	052d      	lsls	r5, r5, #20
 8018f9a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 8018f9e:	1e1e      	subs	r6, r3, #0
 8018fa0:	1b47      	subs	r7, r0, r5
 8018fa2:	ec47 6b16 	vmov	d6, r6, r7
 8018fa6:	1512      	asrs	r2, r2, #20
 8018fa8:	eea7 5b06 	vfma.f64	d5, d7, d6
 8018fac:	ee07 2a90 	vmov	s15, r2
 8018fb0:	ee25 2b05 	vmul.f64	d2, d5, d5
 8018fb4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8018fb8:	ed91 4b00 	vldr	d4, [r1]
 8018fbc:	ee25 1b02 	vmul.f64	d1, d5, d2
 8018fc0:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8018fc4:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018fc8:	ee35 4b07 	vadd.f64	d4, d5, d7
 8018fcc:	ee37 0b44 	vsub.f64	d0, d7, d4
 8018fd0:	ed91 7b02 	vldr	d7, [r1, #8]
 8018fd4:	ee30 0b05 	vadd.f64	d0, d0, d5
 8018fd8:	eea7 0b06 	vfma.f64	d0, d7, d6
 8018fdc:	ed91 7b04 	vldr	d7, [r1, #16]
 8018fe0:	ed91 6b08 	vldr	d6, [r1, #32]
 8018fe4:	eea7 0b02 	vfma.f64	d0, d7, d2
 8018fe8:	ed91 7b06 	vldr	d7, [r1, #24]
 8018fec:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8018ff0:	eea6 7b05 	vfma.f64	d7, d6, d5
 8018ff4:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8018ff8:	eea3 6b05 	vfma.f64	d6, d3, d5
 8018ffc:	eea6 7b02 	vfma.f64	d7, d6, d2
 8019000:	eea1 0b07 	vfma.f64	d0, d1, d7
 8019004:	ee30 0b04 	vadd.f64	d0, d0, d4
 8019008:	e78c      	b.n	8018f24 <log+0xd4>
 801900a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8019020 <log+0x1d0>
 801900e:	e789      	b.n	8018f24 <log+0xd4>
 8019010:	00000000 	.word	0x00000000
 8019014:	41a00000 	.word	0x41a00000
 8019018:	00000000 	.word	0x00000000
 801901c:	43300000 	.word	0x43300000
	...
 8019028:	000308ff 	.word	0x000308ff
 801902c:	3ff00000 	.word	0x3ff00000
 8019030:	080195c0 	.word	0x080195c0
 8019034:	7ff00000 	.word	0x7ff00000

08019038 <with_errno>:
 8019038:	b510      	push	{r4, lr}
 801903a:	ed2d 8b02 	vpush	{d8}
 801903e:	eeb0 8b40 	vmov.f64	d8, d0
 8019042:	4604      	mov	r4, r0
 8019044:	f7fe f884 	bl	8017150 <__errno>
 8019048:	eeb0 0b48 	vmov.f64	d0, d8
 801904c:	ecbd 8b02 	vpop	{d8}
 8019050:	6004      	str	r4, [r0, #0]
 8019052:	bd10      	pop	{r4, pc}
 8019054:	0000      	movs	r0, r0
	...

08019058 <__math_divzero>:
 8019058:	b082      	sub	sp, #8
 801905a:	2800      	cmp	r0, #0
 801905c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8019060:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8019064:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8019068:	ed8d 7b00 	vstr	d7, [sp]
 801906c:	ed9d 0b00 	vldr	d0, [sp]
 8019070:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8019080 <__math_divzero+0x28>
 8019074:	2022      	movs	r0, #34	@ 0x22
 8019076:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801907a:	b002      	add	sp, #8
 801907c:	f7ff bfdc 	b.w	8019038 <with_errno>
	...

08019088 <__math_invalid>:
 8019088:	eeb0 7b40 	vmov.f64	d7, d0
 801908c:	eeb4 7b47 	vcmp.f64	d7, d7
 8019090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019094:	ee30 6b40 	vsub.f64	d6, d0, d0
 8019098:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801909c:	d602      	bvs.n	80190a4 <__math_invalid+0x1c>
 801909e:	2021      	movs	r0, #33	@ 0x21
 80190a0:	f7ff bfca 	b.w	8019038 <with_errno>
 80190a4:	4770      	bx	lr
	...

080190a8 <_init>:
 80190a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190aa:	bf00      	nop
 80190ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80190ae:	bc08      	pop	{r3}
 80190b0:	469e      	mov	lr, r3
 80190b2:	4770      	bx	lr

080190b4 <_fini>:
 80190b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190b6:	bf00      	nop
 80190b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80190ba:	bc08      	pop	{r3}
 80190bc:	469e      	mov	lr, r3
 80190be:	4770      	bx	lr
