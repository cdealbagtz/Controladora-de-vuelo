
Controladora-de-vuelo-V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d980  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  0800dc30  0800dc30  0000ec30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ea28  0800ea28  0000fa28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ea30  0800ea30  0000fa30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ea34  0800ea34  0000fa34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000084  24000000  0800ea38  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000029bc  24000084  0800eabc  00010084  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002a40  0800eabc  00010a40  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023de9  00000000  00000000  000100b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004701  00000000  00000000  00033e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d48  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000016db  00000000  00000000  0003a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000365d3  00000000  00000000  0003b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002b8a1  00000000  00000000  00071f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001538a0  00000000  00000000  0009d837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f10d7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007fac  00000000  00000000  001f111c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  001f90c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000084 	.word	0x24000084
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800dc18 	.word	0x0800dc18

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000088 	.word	0x24000088
 80002ec:	0800dc18 	.word	0x0800dc18

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9b5 	b.w	800067c <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <BMP280_write+0x54>)
 8000698:	f002 ff34 	bl	8003504 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80006a6:	1df9      	adds	r1, r7, #7
 80006a8:	2364      	movs	r3, #100	@ 0x64
 80006aa:	2201      	movs	r2, #1
 80006ac:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <BMP280_write+0x58>)
 80006ae:	f005 ff73 	bl	8006598 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 80006b2:	1db9      	adds	r1, r7, #6
 80006b4:	2364      	movs	r3, #100	@ 0x64
 80006b6:	2201      	movs	r2, #1
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <BMP280_write+0x58>)
 80006ba:	f005 ff6d 	bl	8006598 <HAL_SPI_Transmit>

	BMP280_unselect();
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c4:	4803      	ldr	r0, [pc, #12]	@ (80006d4 <BMP280_write+0x54>)
 80006c6:	f002 ff1d 	bl	8003504 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	58020400 	.word	0x58020400
 80006d8:	240022c4 	.word	0x240022c4

080006dc <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <BMP280_read+0x54>)
 80006f8:	f002 ff04 	bl	8003504 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 80006fc:	f107 010f 	add.w	r1, r7, #15
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BMP280_read+0x58>)
 8000706:	f005 ff47 	bl	8006598 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2364      	movs	r3, #100	@ 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4808      	ldr	r0, [pc, #32]	@ (8000734 <BMP280_read+0x58>)
 8000714:	f006 f92e 	bl	8006974 <HAL_SPI_Receive>
	BMP280_unselect();
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <BMP280_read+0x54>)
 8000720:	f002 fef0 	bl	8003504 <HAL_GPIO_WritePin>

	return Buffer;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58020400 	.word	0x58020400
 8000734:	240022c4 	.word	0x240022c4

08000738 <BMP280_config>:

void BMP280_config(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 800073c:	2157      	movs	r1, #87	@ 0x57
 800073e:	20f4      	movs	r0, #244	@ 0xf4
 8000740:	f7ff ff9e 	bl	8000680 <BMP280_write>
	BMP280_write(config, 0x10);
 8000744:	2110      	movs	r1, #16
 8000746:	20f5      	movs	r0, #245	@ 0xf5
 8000748:	f7ff ff9a 	bl	8000680 <BMP280_write>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000756:	2388      	movs	r3, #136	@ 0x88
 8000758:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000774:	4843      	ldr	r0, [pc, #268]	@ (8000884 <BMP280_calibrationData+0x134>)
 8000776:	f002 fec5 	bl	8003504 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 800077a:	f107 011f 	add.w	r1, r7, #31
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	2201      	movs	r2, #1
 8000782:	4841      	ldr	r0, [pc, #260]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000784:	f005 ff08 	bl	8006598 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000788:	1d39      	adds	r1, r7, #4
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	2218      	movs	r2, #24
 800078e:	483e      	ldr	r0, [pc, #248]	@ (8000888 <BMP280_calibrationData+0x138>)
 8000790:	f006 f8f0 	bl	8006974 <HAL_SPI_Receive>
	BMP280_unselect();
 8000794:	2201      	movs	r2, #1
 8000796:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800079a:	483a      	ldr	r0, [pc, #232]	@ (8000884 <BMP280_calibrationData+0x134>)
 800079c:	f002 feb2 	bl	8003504 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 80007a0:	797b      	ldrb	r3, [r7, #5]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	4b36      	ldr	r3, [pc, #216]	@ (800088c <BMP280_calibrationData+0x13c>)
 80007b2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <BMP280_calibrationData+0x140>)
 80007c4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 80007c6:	7a7b      	ldrb	r3, [r7, #9]
 80007c8:	021b      	lsls	r3, r3, #8
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	7a3b      	ldrb	r3, [r7, #8]
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <BMP280_calibrationData+0x144>)
 80007d6:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 80007d8:	7afb      	ldrb	r3, [r7, #11]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21a      	sxth	r2, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <BMP280_calibrationData+0x148>)
 80007ea:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 80007ec:	7b7b      	ldrb	r3, [r7, #13]
 80007ee:	021b      	lsls	r3, r3, #8
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	7b3b      	ldrb	r3, [r7, #12]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	4b28      	ldr	r3, [pc, #160]	@ (800089c <BMP280_calibrationData+0x14c>)
 80007fc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <BMP280_calibrationData+0x150>)
 800080e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8000810:	7c7b      	ldrb	r3, [r7, #17]
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	b21a      	sxth	r2, r3
 8000816:	7c3b      	ldrb	r3, [r7, #16]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <BMP280_calibrationData+0x154>)
 8000820:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b21a      	sxth	r2, r3
 8000828:	7cbb      	ldrb	r3, [r7, #18]
 800082a:	b21b      	sxth	r3, r3
 800082c:	4313      	orrs	r3, r2
 800082e:	b21a      	sxth	r2, r3
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <BMP280_calibrationData+0x158>)
 8000832:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8000834:	7d7b      	ldrb	r3, [r7, #21]
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	b21a      	sxth	r2, r3
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <BMP280_calibrationData+0x15c>)
 8000844:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8000846:	7dfb      	ldrb	r3, [r7, #23]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b21a      	sxth	r2, r3
 800084c:	7dbb      	ldrb	r3, [r7, #22]
 800084e:	b21b      	sxth	r3, r3
 8000850:	4313      	orrs	r3, r2
 8000852:	b21a      	sxth	r2, r3
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <BMP280_calibrationData+0x160>)
 8000856:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8000858:	7e7b      	ldrb	r3, [r7, #25]
 800085a:	021b      	lsls	r3, r3, #8
 800085c:	b21a      	sxth	r2, r3
 800085e:	7e3b      	ldrb	r3, [r7, #24]
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <BMP280_calibrationData+0x164>)
 8000868:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 800086a:	7efb      	ldrb	r3, [r7, #27]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ebb      	ldrb	r3, [r7, #26]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <BMP280_calibrationData+0x168>)
 800087a:	801a      	strh	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	58020400 	.word	0x58020400
 8000888:	240022c4 	.word	0x240022c4
 800088c:	240000b4 	.word	0x240000b4
 8000890:	240000b8 	.word	0x240000b8
 8000894:	240000ba 	.word	0x240000ba
 8000898:	240000b6 	.word	0x240000b6
 800089c:	240000bc 	.word	0x240000bc
 80008a0:	240000be 	.word	0x240000be
 80008a4:	240000c0 	.word	0x240000c0
 80008a8:	240000c2 	.word	0x240000c2
 80008ac:	240000c4 	.word	0x240000c4
 80008b0:	240000c6 	.word	0x240000c6
 80008b4:	240000c8 	.word	0x240000c8
 80008b8:	240000ca 	.word	0x240000ca

080008bc <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008d4:	4817      	ldr	r0, [pc, #92]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008d6:	f002 fe15 	bl	8003504 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 80008da:	1df9      	adds	r1, r7, #7
 80008dc:	2364      	movs	r3, #100	@ 0x64
 80008de:	2201      	movs	r2, #1
 80008e0:	4815      	ldr	r0, [pc, #84]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008e2:	f005 fe59 	bl	8006598 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 80008e6:	4639      	mov	r1, r7
 80008e8:	2364      	movs	r3, #100	@ 0x64
 80008ea:	2206      	movs	r2, #6
 80008ec:	4812      	ldr	r0, [pc, #72]	@ (8000938 <BMP280_readRawValues+0x7c>)
 80008ee:	f006 f841 	bl	8006974 <HAL_SPI_Receive>
	BMP280_unselect();
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f8:	480e      	ldr	r0, [pc, #56]	@ (8000934 <BMP280_readRawValues+0x78>)
 80008fa:	f002 fe03 	bl	8003504 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80008fe:	783b      	ldrb	r3, [r7, #0]
 8000900:	031a      	lsls	r2, r3, #12
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	4313      	orrs	r3, r2
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	0912      	lsrs	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	4313      	orrs	r3, r2
 8000910:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <BMP280_readRawValues+0x80>)
 8000912:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	031a      	lsls	r2, r3, #12
 8000918:	793b      	ldrb	r3, [r7, #4]
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4313      	orrs	r3, r2
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	0912      	lsrs	r2, r2, #4
 8000922:	b2d2      	uxtb	r2, r2
 8000924:	4313      	orrs	r3, r2
 8000926:	4a06      	ldr	r2, [pc, #24]	@ (8000940 <BMP280_readRawValues+0x84>)
 8000928:	6013      	str	r3, [r2, #0]
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58020400 	.word	0x58020400
 8000938:	240022c4 	.word	0x240022c4
 800093c:	240000d0 	.word	0x240000d0
 8000940:	240000cc 	.word	0x240000cc

08000944 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <BMP280_measureT+0x74>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	10da      	asrs	r2, r3, #3
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <BMP280_measureT+0x78>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	4a19      	ldr	r2, [pc, #100]	@ (80009c0 <BMP280_measureT+0x7c>)
 800095c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	12db      	asrs	r3, r3, #11
 8000966:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	111b      	asrs	r3, r3, #4
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <BMP280_measureT+0x78>)
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	1112      	asrs	r2, r2, #4
 8000976:	4911      	ldr	r1, [pc, #68]	@ (80009bc <BMP280_measureT+0x78>)
 8000978:	8809      	ldrh	r1, [r1, #0]
 800097a:	1a52      	subs	r2, r2, r1
 800097c:	fb02 f303 	mul.w	r3, r2, r3
 8000980:	131b      	asrs	r3, r3, #12
 8000982:	4a10      	ldr	r2, [pc, #64]	@ (80009c4 <BMP280_measureT+0x80>)
 8000984:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	139b      	asrs	r3, r3, #14
 800098e:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4413      	add	r3, r2
 8000996:	4a0c      	ldr	r2, [pc, #48]	@ (80009c8 <BMP280_measureT+0x84>)
 8000998:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <BMP280_measureT+0x84>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	3380      	adds	r3, #128	@ 0x80
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
	return T;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	240000cc 	.word	0x240000cc
 80009bc:	240000b4 	.word	0x240000b4
 80009c0:	240000b8 	.word	0x240000b8
 80009c4:	240000ba 	.word	0x240000ba
 80009c8:	240000d4 	.word	0x240000d4

080009cc <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 80009cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80009d0:	b0ca      	sub	sp, #296	@ 0x128
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80009d8:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <BMP280_measureP+0x2cc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	17da      	asrs	r2, r3, #31
 80009de:	461c      	mov	r4, r3
 80009e0:	4615      	mov	r5, r2
 80009e2:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80009e6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80009ea:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80009ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80009f6:	fb03 f102 	mul.w	r1, r3, r2
 80009fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80009fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	18ca      	adds	r2, r1, r3
 8000a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a0c:	fba3 8903 	umull	r8, r9, r3, r3
 8000a10:	eb02 0309 	add.w	r3, r2, r9
 8000a14:	4699      	mov	r9, r3
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <BMP280_measureP+0x2d0>)
 8000a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	17da      	asrs	r2, r3, #31
 8000a20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000a24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8000a28:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	fb03 f209 	mul.w	r2, r3, r9
 8000a32:	460b      	mov	r3, r1
 8000a34:	fb08 f303 	mul.w	r3, r8, r3
 8000a38:	4413      	add	r3, r2
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	fba8 1202 	umull	r1, r2, r8, r2
 8000a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8000a44:	460a      	mov	r2, r1
 8000a46:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8000a4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000a54:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8000a58:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8000a5c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8000a60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ca0 <BMP280_measureP+0x2d4>)
 8000a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	17da      	asrs	r2, r3, #31
 8000a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000a6e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8000a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a76:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	fb02 f203 	mul.w	r2, r2, r3
 8000a80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000a84:	4621      	mov	r1, r4
 8000a86:	fb01 f303 	mul.w	r3, r1, r3
 8000a8a:	441a      	add	r2, r3
 8000a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000a90:	4621      	mov	r1, r4
 8000a92:	fba3 1301 	umull	r1, r3, r3, r1
 8000a96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8000aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8000aaa:	f04f 0000 	mov.w	r0, #0
 8000aae:	f04f 0100 	mov.w	r1, #0
 8000ab2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8000ab6:	462b      	mov	r3, r5
 8000ab8:	0459      	lsls	r1, r3, #17
 8000aba:	4623      	mov	r3, r4
 8000abc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	0458      	lsls	r0, r3, #17
 8000ac4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ac8:	1814      	adds	r4, r2, r0
 8000aca:	643c      	str	r4, [r7, #64]	@ 0x40
 8000acc:	414b      	adcs	r3, r1
 8000ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ad0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8000ad4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8000ad8:	4b72      	ldr	r3, [pc, #456]	@ (8000ca4 <BMP280_measureP+0x2d8>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	17da      	asrs	r2, r3, #31
 8000ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	f04f 0100 	mov.w	r1, #0
 8000af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000af6:	00d9      	lsls	r1, r3, #3
 8000af8:	2000      	movs	r0, #0
 8000afa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000afe:	1814      	adds	r4, r2, r0
 8000b00:	63bc      	str	r4, [r7, #56]	@ 0x38
 8000b02:	414b      	adcs	r3, r1
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b06:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8000b0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8000b0e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b12:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b16:	fb03 f102 	mul.w	r1, r3, r2
 8000b1a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000b1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b22:	fb02 f303 	mul.w	r3, r2, r3
 8000b26:	18ca      	adds	r2, r1, r3
 8000b28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000b2c:	fba3 1303 	umull	r1, r3, r3, r3
 8000b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b34:	460b      	mov	r3, r1
 8000b36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8000b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000b3e:	18d3      	adds	r3, r2, r3
 8000b40:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000b44:	4b58      	ldr	r3, [pc, #352]	@ (8000ca8 <BMP280_measureP+0x2dc>)
 8000b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	17da      	asrs	r2, r3, #31
 8000b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000b56:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8000b5a:	462b      	mov	r3, r5
 8000b5c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8000b60:	4642      	mov	r2, r8
 8000b62:	fb02 f203 	mul.w	r2, r2, r3
 8000b66:	464b      	mov	r3, r9
 8000b68:	4621      	mov	r1, r4
 8000b6a:	fb01 f303 	mul.w	r3, r1, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	4622      	mov	r2, r4
 8000b72:	4641      	mov	r1, r8
 8000b74:	fba2 1201 	umull	r1, r2, r2, r1
 8000b78:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8000b82:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000b86:	4413      	add	r3, r2
 8000b88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	f04f 0100 	mov.w	r1, #0
 8000b94:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8000b98:	4623      	mov	r3, r4
 8000b9a:	0a18      	lsrs	r0, r3, #8
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000ba2:	462b      	mov	r3, r5
 8000ba4:	1219      	asrs	r1, r3, #8
 8000ba6:	4b41      	ldr	r3, [pc, #260]	@ (8000cac <BMP280_measureP+0x2e0>)
 8000ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	17da      	asrs	r2, r3, #31
 8000bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000bb4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8000bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bbc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8000bc0:	464a      	mov	r2, r9
 8000bc2:	fb02 f203 	mul.w	r2, r2, r3
 8000bc6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000bca:	4644      	mov	r4, r8
 8000bcc:	fb04 f303 	mul.w	r3, r4, r3
 8000bd0:	441a      	add	r2, r3
 8000bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	fba3 4304 	umull	r4, r3, r3, r4
 8000bdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000be0:	4623      	mov	r3, r4
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8000be6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000bea:	18d3      	adds	r3, r2, r3
 8000bec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8000bfc:	464c      	mov	r4, r9
 8000bfe:	0323      	lsls	r3, r4, #12
 8000c00:	4644      	mov	r4, r8
 8000c02:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8000c06:	4644      	mov	r4, r8
 8000c08:	0322      	lsls	r2, r4, #12
 8000c0a:	1884      	adds	r4, r0, r2
 8000c0c:	633c      	str	r4, [r7, #48]	@ 0x30
 8000c0e:	eb41 0303 	adc.w	r3, r1, r3
 8000c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c14:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8000c18:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8000c1c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c20:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8000c24:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8000c28:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <BMP280_measureP+0x2e4>)
 8000c2e:	881b      	ldrh	r3, [r3, #0]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	2200      	movs	r2, #0
 8000c34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000c38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8000c3c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8000c40:	462b      	mov	r3, r5
 8000c42:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8000c46:	4642      	mov	r2, r8
 8000c48:	fb02 f203 	mul.w	r2, r2, r3
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4621      	mov	r1, r4
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	4622      	mov	r2, r4
 8000c58:	4641      	mov	r1, r8
 8000c5a:	fba2 1201 	umull	r1, r2, r2, r1
 8000c5e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8000c62:	460a      	mov	r2, r1
 8000c64:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8000c68:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8000c7e:	4629      	mov	r1, r5
 8000c80:	104a      	asrs	r2, r1, #1
 8000c82:	4629      	mov	r1, r5
 8000c84:	17cb      	asrs	r3, r1, #31
 8000c86:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8000c8a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	d110      	bne.n	8000cb4 <BMP280_measureP+0x2e8>
	{
	return 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e154      	b.n	8000f40 <BMP280_measureP+0x574>
 8000c96:	bf00      	nop
 8000c98:	240000d4 	.word	0x240000d4
 8000c9c:	240000c4 	.word	0x240000c4
 8000ca0:	240000c2 	.word	0x240000c2
 8000ca4:	240000c0 	.word	0x240000c0
 8000ca8:	240000be 	.word	0x240000be
 8000cac:	240000bc 	.word	0x240000bc
 8000cb0:	240000b6 	.word	0x240000b6
	}
	p = 1048576-adc_P;
 8000cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000cb8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8000cbc:	17da      	asrs	r2, r3, #31
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000cc2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8000cc6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8000cca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cce:	105b      	asrs	r3, r3, #1
 8000cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000cd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000cd8:	07db      	lsls	r3, r3, #31
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000cde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ce2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	1a89      	subs	r1, r1, r2
 8000cea:	67b9      	str	r1, [r7, #120]	@ 0x78
 8000cec:	4629      	mov	r1, r5
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000cf4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	462b      	mov	r3, r5
 8000cfc:	1891      	adds	r1, r2, r2
 8000cfe:	6239      	str	r1, [r7, #32]
 8000d00:	415b      	adcs	r3, r3
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d08:	4621      	mov	r1, r4
 8000d0a:	1851      	adds	r1, r2, r1
 8000d0c:	61b9      	str	r1, [r7, #24]
 8000d0e:	4629      	mov	r1, r5
 8000d10:	414b      	adcs	r3, r1
 8000d12:	61fb      	str	r3, [r7, #28]
 8000d14:	f04f 0200 	mov.w	r2, #0
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000d20:	4649      	mov	r1, r9
 8000d22:	018b      	lsls	r3, r1, #6
 8000d24:	4641      	mov	r1, r8
 8000d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	018a      	lsls	r2, r1, #6
 8000d2e:	4641      	mov	r1, r8
 8000d30:	1889      	adds	r1, r1, r2
 8000d32:	6139      	str	r1, [r7, #16]
 8000d34:	4649      	mov	r1, r9
 8000d36:	eb43 0101 	adc.w	r1, r3, r1
 8000d3a:	6179      	str	r1, [r7, #20]
 8000d3c:	f04f 0200 	mov.w	r2, #0
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000d48:	4649      	mov	r1, r9
 8000d4a:	008b      	lsls	r3, r1, #2
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d52:	4641      	mov	r1, r8
 8000d54:	008a      	lsls	r2, r1, #2
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	189b      	adds	r3, r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	460b      	mov	r3, r1
 8000d64:	462a      	mov	r2, r5
 8000d66:	eb42 0303 	adc.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	f04f 0200 	mov.w	r2, #0
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000d78:	4649      	mov	r1, r9
 8000d7a:	008b      	lsls	r3, r1, #2
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000d82:	4641      	mov	r1, r8
 8000d84:	008a      	lsls	r2, r1, #2
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	189b      	adds	r3, r3, r2
 8000d90:	673b      	str	r3, [r7, #112]	@ 0x70
 8000d92:	462b      	mov	r3, r5
 8000d94:	460a      	mov	r2, r1
 8000d96:	eb42 0303 	adc.w	r3, r2, r3
 8000d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8000d9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000da4:	f7ff faa4 	bl	80002f0 <__aeabi_ldivmod>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8000db0:	4b66      	ldr	r3, [pc, #408]	@ (8000f4c <BMP280_measureP+0x580>)
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	17da      	asrs	r2, r3, #31
 8000dba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000dbe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	f04f 0100 	mov.w	r1, #0
 8000dca:	0b50      	lsrs	r0, r2, #13
 8000dcc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000dd0:	1359      	asrs	r1, r3, #13
 8000dd2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8000dd6:	462b      	mov	r3, r5
 8000dd8:	fb00 f203 	mul.w	r2, r0, r3
 8000ddc:	4623      	mov	r3, r4
 8000dde:	fb03 f301 	mul.w	r3, r3, r1
 8000de2:	4413      	add	r3, r2
 8000de4:	4622      	mov	r2, r4
 8000de6:	fba2 1200 	umull	r1, r2, r2, r0
 8000dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000dee:	460a      	mov	r2, r1
 8000df0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000df4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000df8:	4413      	add	r3, r2
 8000dfa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000dfe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8000e02:	f04f 0000 	mov.w	r0, #0
 8000e06:	f04f 0100 	mov.w	r1, #0
 8000e0a:	0b50      	lsrs	r0, r2, #13
 8000e0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8000e10:	1359      	asrs	r1, r3, #13
 8000e12:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8000e16:	462b      	mov	r3, r5
 8000e18:	fb00 f203 	mul.w	r2, r0, r3
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	fb03 f301 	mul.w	r3, r3, r1
 8000e22:	4413      	add	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	fba2 1200 	umull	r1, r2, r2, r0
 8000e2a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000e2e:	460a      	mov	r2, r1
 8000e30:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8000e34:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000e38:	4413      	add	r3, r2
 8000e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000e3e:	f04f 0200 	mov.w	r2, #0
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	0e4a      	lsrs	r2, r1, #25
 8000e4e:	4629      	mov	r1, r5
 8000e50:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8000e54:	4629      	mov	r1, r5
 8000e56:	164b      	asrs	r3, r1, #25
 8000e58:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8000e5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f50 <BMP280_measureP+0x584>)
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	17da      	asrs	r2, r3, #31
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e68:	667a      	str	r2, [r7, #100]	@ 0x64
 8000e6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8000e6e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000e72:	462a      	mov	r2, r5
 8000e74:	fb02 f203 	mul.w	r2, r2, r3
 8000e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	fb01 f303 	mul.w	r3, r1, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000e88:	4621      	mov	r1, r4
 8000e8a:	fba2 1201 	umull	r1, r2, r2, r1
 8000e8e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8000e92:	460a      	mov	r2, r1
 8000e94:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8000e98:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8000eae:	4621      	mov	r1, r4
 8000eb0:	0cca      	lsrs	r2, r1, #19
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000eb8:	4629      	mov	r1, r5
 8000eba:	14cb      	asrs	r3, r1, #19
 8000ebc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8000ec0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8000ec4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8000ec8:	1884      	adds	r4, r0, r2
 8000eca:	65bc      	str	r4, [r7, #88]	@ 0x58
 8000ecc:	eb41 0303 	adc.w	r3, r1, r3
 8000ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ed2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8000ed6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8000eda:	4621      	mov	r1, r4
 8000edc:	1889      	adds	r1, r1, r2
 8000ede:	6539      	str	r1, [r7, #80]	@ 0x50
 8000ee0:	4629      	mov	r1, r5
 8000ee2:	eb43 0101 	adc.w	r1, r3, r1
 8000ee6:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8000ef4:	4623      	mov	r3, r4
 8000ef6:	0a18      	lsrs	r0, r3, #8
 8000ef8:	462b      	mov	r3, r5
 8000efa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8000efe:	462b      	mov	r3, r5
 8000f00:	1219      	asrs	r1, r3, #8
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <BMP280_measureP+0x588>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b21b      	sxth	r3, r3
 8000f0a:	17da      	asrs	r2, r3, #31
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000f0e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8000f1c:	464c      	mov	r4, r9
 8000f1e:	0123      	lsls	r3, r4, #4
 8000f20:	4644      	mov	r4, r8
 8000f22:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000f26:	4644      	mov	r4, r8
 8000f28:	0122      	lsls	r2, r4, #4
 8000f2a:	1884      	adds	r4, r0, r2
 8000f2c:	603c      	str	r4, [r7, #0]
 8000f2e:	eb41 0303 	adc.w	r3, r1, r3
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f38:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8000f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000f4c:	240000ca 	.word	0x240000ca
 8000f50:	240000c8 	.word	0x240000c8
 8000f54:	240000c6 	.word	0x240000c6

08000f58 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <BMP280_measureH+0x14>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e03d      	b.n	8000fe8 <BMP280_measureH+0x90>
	var1 = -log(((double)Pres)/101325);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f76:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8000ff0 <BMP280_measureH+0x98>
 8000f7a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f7e:	eeb0 0b46 	vmov.f64	d0, d6
 8000f82:	f00c fd1d 	bl	800d9c0 <log>
 8000f86:	eeb0 7b40 	vmov.f64	d7, d0
 8000f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8e:	ed87 7b06 	vstr	d7, [r7, #24]

	if(var1 == 0) return 0;
 8000f92:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d101      	bne.n	8000fa4 <BMP280_measureH+0x4c>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e021      	b.n	8000fe8 <BMP280_measureH+0x90>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	ee07 3a90 	vmov	s15, r3
 8000faa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fae:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000ff8 <BMP280_measureH+0xa0>
 8000fb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb6:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8001000 <BMP280_measureH+0xa8>
 8000fba:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000fbe:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8001008 <BMP280_measureH+0xb0>
 8000fc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fc6:	ed87 7b04 	vstr	d7, [r7, #16]
	h = var1/var2;
 8000fca:	ed97 5b06 	vldr	d5, [r7, #24]
 8000fce:	ed97 6b04 	vldr	d6, [r7, #16]
 8000fd2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000fd6:	ed87 7b02 	vstr	d7, [r7, #8]
	return (uint16_t)h;
 8000fda:	ed97 7b02 	vldr	d7, [r7, #8]
 8000fde:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fe2:	ee17 3a90 	vmov	r3, s15
 8000fe6:	b29b      	uxth	r3, r3
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40f8bcd0 	.word	0x40f8bcd0
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	40590000 	.word	0x40590000
 8001000:	66666666 	.word	0x66666666
 8001004:	40711266 	.word	0x40711266
 8001008:	ca402a92 	.word	0xca402a92
 800100c:	3fa17e3e 	.word	0x3fa17e3e

08001010 <BMP280_init>:

void BMP280_init(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480d      	ldr	r0, [pc, #52]	@ (8001050 <BMP280_init+0x40>)
 800101c:	f002 fa72 	bl	8003504 <HAL_GPIO_WritePin>
	BMP280_config();
 8001020:	f7ff fb8a 	bl	8000738 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001024:	2089      	movs	r0, #137	@ 0x89
 8001026:	f7ff fb59 	bl	80006dc <BMP280_read>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <BMP280_init+0x44>)
 8001030:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 8001032:	f7ff fb8d 	bl	8000750 <BMP280_calibrationData>
	BMP280_readRawValues();
 8001036:	f7ff fc41 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <BMP280_init+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc80 	bl	8000944 <BMP280_measureT>
 8001044:	4603      	mov	r3, r0
 8001046:	4a03      	ldr	r2, [pc, #12]	@ (8001054 <BMP280_init+0x44>)
 8001048:	6093      	str	r3, [r2, #8]
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58020400 	.word	0x58020400
 8001054:	240000a0 	.word	0x240000a0
 8001058:	240000cc 	.word	0x240000cc

0800105c <BMP280_calculate>:

void BMP280_calculate(void){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	//BMP280.ID = 0;
	BMP280.ID = BMP280_read(0x89);
 8001060:	2089      	movs	r0, #137	@ 0x89
 8001062:	f7ff fb3b 	bl	80006dc <BMP280_read>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <BMP280_calculate+0x68>)
 800106c:	701a      	strb	r2, [r3, #0]
	BMP280_readRawValues();
 800106e:	f7ff fc25 	bl	80008bc <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <BMP280_calculate+0x6c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fc64 	bl	8000944 <BMP280_measureT>
 800107c:	4603      	mov	r3, r0
 800107e:	4a11      	ldr	r2, [pc, #68]	@ (80010c4 <BMP280_calculate+0x68>)
 8001080:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <BMP280_calculate+0x70>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fca0 	bl	80009cc <BMP280_measureP>
 800108c:	4603      	mov	r3, r0
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4a0c      	ldr	r2, [pc, #48]	@ (80010c4 <BMP280_calculate+0x68>)
 8001092:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <BMP280_calculate+0x68>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <BMP280_calculate+0x68>)
 800109a:	6892      	ldr	r2, [r2, #8]
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff5a 	bl	8000f58 <BMP280_measureH>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <BMP280_calculate+0x68>)
 80010aa:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ae:	8a1a      	ldrh	r2, [r3, #16]
 80010b0:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <BMP280_calculate+0x68>)
 80010b2:	8a5b      	ldrh	r3, [r3, #18]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <BMP280_calculate+0x64>
 80010b8:	4b02      	ldr	r3, [pc, #8]	@ (80010c4 <BMP280_calculate+0x68>)
 80010ba:	8a1a      	ldrh	r2, [r3, #16]
 80010bc:	4b01      	ldr	r3, [pc, #4]	@ (80010c4 <BMP280_calculate+0x68>)
 80010be:	825a      	strh	r2, [r3, #18]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	240000a0 	.word	0x240000a0
 80010c8:	240000cc 	.word	0x240000cc
 80010cc:	240000d0 	.word	0x240000d0

080010d0 <SD_init>:
UINT br, bw;  // File read/write count

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void SD_init(void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	4910      	ldr	r1, [pc, #64]	@ (8001118 <SD_init+0x48>)
 80010d8:	4810      	ldr	r0, [pc, #64]	@ (800111c <SD_init+0x4c>)
 80010da:	f00b fa09 	bl	800c4f0 <f_mount>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <SD_init+0x50>)
 80010e4:	701a      	strb	r2, [r3, #0]
	  //Get_NewDir();
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80010e6:	2213      	movs	r2, #19
 80010e8:	490e      	ldr	r1, [pc, #56]	@ (8001124 <SD_init+0x54>)
 80010ea:	480f      	ldr	r0, [pc, #60]	@ (8001128 <SD_init+0x58>)
 80010ec:	f00b fa46 	bl	800c57c <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <SD_init+0x58>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4619      	mov	r1, r3
 80010f6:	480c      	ldr	r0, [pc, #48]	@ (8001128 <SD_init+0x58>)
 80010f8:	f00b fe44 	bl	800cd84 <f_lseek>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <SD_init+0x50>)
 8001102:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,AngX,AngY,Alt,Pressure,Temp,Parachute,Peripheral\n");
 8001104:	4909      	ldr	r1, [pc, #36]	@ (800112c <SD_init+0x5c>)
 8001106:	4808      	ldr	r0, [pc, #32]	@ (8001128 <SD_init+0x58>)
 8001108:	f00c f8d8 	bl	800d2bc <f_printf>
	  f_close(&fil);
 800110c:	4806      	ldr	r0, [pc, #24]	@ (8001128 <SD_init+0x58>)
 800110e:	f00b fe0f 	bl	800cd30 <f_close>

	  }
	  else{
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
	  }
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	0800dc30 	.word	0x0800dc30
 800111c:	240000d8 	.word	0x240000d8
 8001120:	24002144 	.word	0x24002144
 8001124:	24000000 	.word	0x24000000
 8001128:	24001114 	.word	0x24001114
 800112c:	0800dc34 	.word	0x0800dc34

08001130 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001134:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001136:	4a2f      	ldr	r2, [pc, #188]	@ (80011f4 <MX_FDCAN1_Init+0xc4>)
 8001138:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800113a:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001140:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001146:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001148:	2200      	movs	r2, #0
 800114a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800114c:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 800114e:	2200      	movs	r2, #0
 8001150:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001152:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001154:	2200      	movs	r2, #0
 8001156:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001158:	4b25      	ldr	r3, [pc, #148]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 800115a:	2210      	movs	r2, #16
 800115c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800115e:	4b24      	ldr	r3, [pc, #144]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001160:	2201      	movs	r2, #1
 8001162:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001164:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001166:	2202      	movs	r2, #2
 8001168:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800116a:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 800116c:	2202      	movs	r2, #2
 800116e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001172:	2201      	movs	r2, #1
 8001174:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001176:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001178:	2201      	movs	r2, #1
 800117a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 800117e:	2201      	movs	r2, #1
 8001180:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001184:	2201      	movs	r2, #1
 8001186:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800118e:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001190:	2200      	movs	r2, #0
 8001192:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 8001196:	2200      	movs	r2, #0
 8001198:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800119a:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 800119c:	2200      	movs	r2, #0
 800119e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011a2:	2204      	movs	r2, #4
 80011a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80011ac:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011ae:	2204      	movs	r2, #4
 80011b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80011b8:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011ba:	2204      	movs	r2, #4
 80011bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011d8:	2204      	movs	r2, #4
 80011da:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <MX_FDCAN1_Init+0xc0>)
 80011de:	f001 fc7d 	bl	8002adc <HAL_FDCAN_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80011e8:	f000 fac8 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	24002148 	.word	0x24002148
 80011f4:	4000a000 	.word	0x4000a000

080011f8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0ba      	sub	sp, #232	@ 0xe8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	22c0      	movs	r2, #192	@ 0xc0
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f00c fb8f 	bl	800d93c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a2f      	ldr	r2, [pc, #188]	@ (80012e0 <HAL_FDCAN_MspInit+0xe8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d157      	bne.n	80012d8 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001228:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001234:	2304      	movs	r3, #4
 8001236:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 8001238:	2308      	movs	r3, #8
 800123a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001248:	23c0      	movs	r3, #192	@ 0xc0
 800124a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001254:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4618      	mov	r0, r3
 8001262:	f003 fa95 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 800126c:	f000 fa86 	bl	800177c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001270:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <HAL_FDCAN_MspInit+0xec>)
 8001272:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001276:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <HAL_FDCAN_MspInit+0xec>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127c:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <HAL_FDCAN_MspInit+0xec>)
 8001282:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8001286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <HAL_FDCAN_MspInit+0xec>)
 8001290:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001294:	4a13      	ldr	r2, [pc, #76]	@ (80012e4 <HAL_FDCAN_MspInit+0xec>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_FDCAN_MspInit+0xec>)
 80012a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012ac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80012c6:	2309      	movs	r3, #9
 80012c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <HAL_FDCAN_MspInit+0xf0>)
 80012d4:	f001 ff66 	bl	80031a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80012d8:	bf00      	nop
 80012da:	37e8      	adds	r7, #232	@ 0xe8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	4000a000 	.word	0x4000a000
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58020000 	.word	0x58020000

080012ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	4b48      	ldr	r3, [pc, #288]	@ (8001424 <MX_GPIO_Init+0x138>)
 8001304:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001308:	4a46      	ldr	r2, [pc, #280]	@ (8001424 <MX_GPIO_Init+0x138>)
 800130a:	f043 0304 	orr.w	r3, r3, #4
 800130e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001312:	4b44      	ldr	r3, [pc, #272]	@ (8001424 <MX_GPIO_Init+0x138>)
 8001314:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b40      	ldr	r3, [pc, #256]	@ (8001424 <MX_GPIO_Init+0x138>)
 8001322:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001326:	4a3f      	ldr	r2, [pc, #252]	@ (8001424 <MX_GPIO_Init+0x138>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001330:	4b3c      	ldr	r3, [pc, #240]	@ (8001424 <MX_GPIO_Init+0x138>)
 8001332:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b39      	ldr	r3, [pc, #228]	@ (8001424 <MX_GPIO_Init+0x138>)
 8001340:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001344:	4a37      	ldr	r2, [pc, #220]	@ (8001424 <MX_GPIO_Init+0x138>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800134e:	4b35      	ldr	r3, [pc, #212]	@ (8001424 <MX_GPIO_Init+0x138>)
 8001350:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135c:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <MX_GPIO_Init+0x138>)
 800135e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001362:	4a30      	ldr	r2, [pc, #192]	@ (8001424 <MX_GPIO_Init+0x138>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800136c:	4b2d      	ldr	r3, [pc, #180]	@ (8001424 <MX_GPIO_Init+0x138>)
 800136e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 800137a:	2200      	movs	r2, #0
 800137c:	f242 010f 	movw	r1, #8207	@ 0x200f
 8001380:	4829      	ldr	r0, [pc, #164]	@ (8001428 <MX_GPIO_Init+0x13c>)
 8001382:	f002 f8bf 	bl	8003504 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2110      	movs	r1, #16
 800138a:	4828      	ldr	r0, [pc, #160]	@ (800142c <MX_GPIO_Init+0x140>)
 800138c:	f002 f8ba 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BME_NSS_GPIO_Port, BME_NSS_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001396:	4826      	ldr	r0, [pc, #152]	@ (8001430 <MX_GPIO_Init+0x144>)
 8001398:	f002 f8b4 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_INT_GPIO_Port, IMU_INT_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2104      	movs	r1, #4
 80013a0:	4824      	ldr	r0, [pc, #144]	@ (8001434 <MX_GPIO_Init+0x148>)
 80013a2:	f002 f8af 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80013a6:	f242 030f 	movw	r3, #8207	@ 0x200f
 80013aa:	617b      	str	r3, [r7, #20]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4619      	mov	r1, r3
 80013be:	481a      	ldr	r0, [pc, #104]	@ (8001428 <MX_GPIO_Init+0x13c>)
 80013c0:	f001 fef0 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 80013c4:	2310      	movs	r3, #16
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4814      	ldr	r0, [pc, #80]	@ (800142c <MX_GPIO_Init+0x140>)
 80013dc:	f001 fee2 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BME_NSS_Pin;
 80013e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BME_NSS_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	480d      	ldr	r0, [pc, #52]	@ (8001430 <MX_GPIO_Init+0x144>)
 80013fa:	f001 fed3 	bl	80031a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80013fe:	2304      	movs	r3, #4
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4807      	ldr	r0, [pc, #28]	@ (8001434 <MX_GPIO_Init+0x148>)
 8001416:	f001 fec5 	bl	80031a4 <HAL_GPIO_Init>

}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	@ 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	58024400 	.word	0x58024400
 8001428:	58020800 	.word	0x58020800
 800142c:	58020000 	.word	0x58020000
 8001430:	58020400 	.word	0x58020400
 8001434:	58020c00 	.word	0x58020c00

08001438 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <MX_I2C3_Init+0x74>)
 800143e:	4a1c      	ldr	r2, [pc, #112]	@ (80014b0 <MX_I2C3_Init+0x78>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20B0CCFF;
 8001442:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <MX_I2C3_Init+0x74>)
 8001444:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <MX_I2C3_Init+0x7c>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <MX_I2C3_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <MX_I2C3_Init+0x74>)
 8001450:	2201      	movs	r2, #1
 8001452:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <MX_I2C3_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <MX_I2C3_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_I2C3_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_I2C3_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_I2C3_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001472:	480e      	ldr	r0, [pc, #56]	@ (80014ac <MX_I2C3_Init+0x74>)
 8001474:	f002 f860 	bl	8003538 <HAL_I2C_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800147e:	f000 f97d 	bl	800177c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	4809      	ldr	r0, [pc, #36]	@ (80014ac <MX_I2C3_Init+0x74>)
 8001486:	f002 f8f3 	bl	8003670 <HAL_I2CEx_ConfigAnalogFilter>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001490:	f000 f974 	bl	800177c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <MX_I2C3_Init+0x74>)
 8001498:	f002 f935 	bl	8003706 <HAL_I2CEx_ConfigDigitalFilter>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014a2:	f000 f96b 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	240021e8 	.word	0x240021e8
 80014b0:	40005c00 	.word	0x40005c00
 80014b4:	20b0ccff 	.word	0x20b0ccff

080014b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0bc      	sub	sp, #240	@ 0xf0
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	22c0      	movs	r2, #192	@ 0xc0
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f00c fa2f 	bl	800d93c <memset>
  if(i2cHandle->Instance==I2C3)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a39      	ldr	r2, [pc, #228]	@ (80015c8 <HAL_I2C_MspInit+0x110>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d16b      	bne.n	80015c0 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80014e8:	f04f 0208 	mov.w	r2, #8
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 f946 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800150a:	f000 f937 	bl	800177c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <HAL_I2C_MspInit+0x114>)
 8001510:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001514:	4a2d      	ldr	r2, [pc, #180]	@ (80015cc <HAL_I2C_MspInit+0x114>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800151e:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <HAL_I2C_MspInit+0x114>)
 8001520:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <HAL_I2C_MspInit+0x114>)
 800152e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001532:	4a26      	ldr	r2, [pc, #152]	@ (80015cc <HAL_I2C_MspInit+0x114>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800153c:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <HAL_I2C_MspInit+0x114>)
 800153e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800154a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800154e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001552:	2312      	movs	r3, #18
 8001554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001564:	2304      	movs	r3, #4
 8001566:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800156e:	4619      	mov	r1, r3
 8001570:	4817      	ldr	r0, [pc, #92]	@ (80015d0 <HAL_I2C_MspInit+0x118>)
 8001572:	f001 fe17 	bl	80031a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001576:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800157a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157e:	2312      	movs	r3, #18
 8001580:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001590:	2304      	movs	r3, #4
 8001592:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800159a:	4619      	mov	r1, r3
 800159c:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <HAL_I2C_MspInit+0x11c>)
 800159e:	f001 fe01 	bl	80031a4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <HAL_I2C_MspInit+0x114>)
 80015a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015a8:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_I2C_MspInit+0x114>)
 80015aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015ae:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_I2C_MspInit+0x114>)
 80015b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80015b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015c0:	bf00      	nop
 80015c2:	37f0      	adds	r7, #240	@ 0xf0
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40005c00 	.word	0x40005c00
 80015cc:	58024400 	.word	0x58024400
 80015d0:	58020800 	.word	0x58020800
 80015d4:	58020000 	.word	0x58020000

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80015dc:	f000 f8a2 	bl	8001724 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e0:	f001 f86a 	bl	80026b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e4:	f000 f828 	bl	8001638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e8:	f7ff fe80 	bl	80012ec <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80015ec:	f7ff fda0 	bl	8001130 <MX_FDCAN1_Init>
  MX_I2C3_Init();
 80015f0:	f7ff ff22 	bl	8001438 <MX_I2C3_Init>
  MX_SPI1_Init();
 80015f4:	f000 f8c8 	bl	8001788 <MX_SPI1_Init>
  MX_SPI2_Init();
 80015f8:	f000 f91c 	bl	8001834 <MX_SPI2_Init>
  MX_SPI3_Init();
 80015fc:	f000 f970 	bl	80018e0 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001600:	f000 fba8 	bl	8001d54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001604:	f000 fc22 	bl	8001e4c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001608:	f000 fc86 	bl	8001f18 <MX_TIM4_Init>
  MX_UART4_Init();
 800160c:	f000 fe3e 	bl	800228c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001610:	f000 fe88 	bl	8002324 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001614:	f000 fed2 	bl	80023bc <MX_USART6_UART_Init>
  MX_TIM13_Init();
 8001618:	f000 fcfa 	bl	8002010 <MX_TIM13_Init>
  MX_FATFS_Init();
 800161c:	f007 ffec 	bl	80095f8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BMP280_init();
 8001620:	f7ff fcf6 	bl	8001010 <BMP280_init>
  SD_init();
 8001624:	f7ff fd54 	bl	80010d0 <SD_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP280_calculate();
 8001628:	f7ff fd18 	bl	800105c <BMP280_calculate>


	  HAL_Delay(50);
 800162c:	2032      	movs	r0, #50	@ 0x32
 800162e:	f001 f8d5 	bl	80027dc <HAL_Delay>
	  BMP280_calculate();
 8001632:	bf00      	nop
 8001634:	e7f8      	b.n	8001628 <main+0x50>
	...

08001638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b09c      	sub	sp, #112	@ 0x70
 800163c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001642:	224c      	movs	r2, #76	@ 0x4c
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f00c f978 	bl	800d93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2220      	movs	r2, #32
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f00c f972 	bl	800d93c <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001658:	4b30      	ldr	r3, [pc, #192]	@ (800171c <SystemClock_Config+0xe4>)
 800165a:	f04f 32ff 	mov.w	r2, #4294967295
 800165e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001662:	2002      	movs	r0, #2
 8001664:	f002 f89c 	bl	80037a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001668:	2300      	movs	r3, #0
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	4b2c      	ldr	r3, [pc, #176]	@ (8001720 <SystemClock_Config+0xe8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a2b      	ldr	r2, [pc, #172]	@ (8001720 <SystemClock_Config+0xe8>)
 8001672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <SystemClock_Config+0xe8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001684:	bf00      	nop
 8001686:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <SystemClock_Config+0xe8>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800168e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001692:	d1f8      	bne.n	8001686 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001694:	2302      	movs	r3, #2
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001698:	2301      	movs	r3, #1
 800169a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800169c:	2340      	movs	r3, #64	@ 0x40
 800169e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a0:	2302      	movs	r3, #2
 80016a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a4:	2300      	movs	r3, #0
 80016a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a8:	2304      	movs	r3, #4
 80016aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 35;
 80016ac:	2323      	movs	r3, #35	@ 0x23
 80016ae:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016b4:	2302      	movs	r3, #2
 80016b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80016bc:	230c      	movs	r3, #12
 80016be:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 f8a1 	bl	8003814 <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80016d8:	f000 f850 	bl	800177c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	233f      	movs	r3, #63	@ 0x3f
 80016de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2303      	movs	r3, #3
 80016e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016ec:	2340      	movs	r3, #64	@ 0x40
 80016ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016f0:	2340      	movs	r3, #64	@ 0x40
 80016f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016fa:	2340      	movs	r3, #64	@ 0x40
 80016fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2106      	movs	r1, #6
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fcb8 	bl	8004078 <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800170e:	f000 f835 	bl	800177c <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3770      	adds	r7, #112	@ 0x70
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	58024400 	.word	0x58024400
 8001720:	58024800 	.word	0x58024800

08001724 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800172a:	463b      	mov	r3, r7
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001736:	f001 f959 	bl	80029ec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800173a:	2301      	movs	r3, #1
 800173c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800173e:	2300      	movs	r3, #0
 8001740:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001746:	231f      	movs	r3, #31
 8001748:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800174a:	2387      	movs	r3, #135	@ 0x87
 800174c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800174e:	2300      	movs	r3, #0
 8001750:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001752:	2300      	movs	r3, #0
 8001754:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800175a:	2301      	movs	r3, #1
 800175c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001766:	463b      	mov	r3, r7
 8001768:	4618      	mov	r0, r3
 800176a:	f001 f977 	bl	8002a5c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800176e:	2004      	movs	r0, #4
 8001770:	f001 f954 	bl	8002a1c <HAL_MPU_Enable>

}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <Error_Handler+0x8>

08001788 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800178c:	4b27      	ldr	r3, [pc, #156]	@ (800182c <MX_SPI1_Init+0xa4>)
 800178e:	4a28      	ldr	r2, [pc, #160]	@ (8001830 <MX_SPI1_Init+0xa8>)
 8001790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b26      	ldr	r3, [pc, #152]	@ (800182c <MX_SPI1_Init+0xa4>)
 8001794:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800179a:	4b24      	ldr	r3, [pc, #144]	@ (800182c <MX_SPI1_Init+0xa4>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a0:	4b22      	ldr	r3, [pc, #136]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017a2:	2207      	movs	r2, #7
 80017a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a6:	4b21      	ldr	r3, [pc, #132]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ac:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017b4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017bc:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 80017c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017e2:	4b12      	ldr	r3, [pc, #72]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017e8:	4b10      	ldr	r3, [pc, #64]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <MX_SPI1_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <MX_SPI1_Init+0xa4>)
 8001802:	2200      	movs	r2, #0
 8001804:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <MX_SPI1_Init+0xa4>)
 8001808:	2200      	movs	r2, #0
 800180a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	@ (800182c <MX_SPI1_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <MX_SPI1_Init+0xa4>)
 8001814:	2200      	movs	r2, #0
 8001816:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <MX_SPI1_Init+0xa4>)
 800181a:	f004 fd99 	bl	8006350 <HAL_SPI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001824:	f7ff ffaa 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2400223c 	.word	0x2400223c
 8001830:	40013000 	.word	0x40013000

08001834 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001838:	4b27      	ldr	r3, [pc, #156]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 800183a:	4a28      	ldr	r2, [pc, #160]	@ (80018dc <MX_SPI2_Init+0xa8>)
 800183c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001840:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001844:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800184c:	4b22      	ldr	r3, [pc, #136]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 800184e:	2207      	movs	r2, #7
 8001850:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800185e:	4b1e      	ldr	r3, [pc, #120]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001860:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001864:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001868:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800186c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186e:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001874:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187a:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001882:	2200      	movs	r2, #0
 8001884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001888:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800188c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800188e:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001890:	2200      	movs	r2, #0
 8001892:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 8001896:	2200      	movs	r2, #0
 8001898:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800189a:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 800189c:	2200      	movs	r2, #0
 800189e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018a0:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018b8:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <MX_SPI2_Init+0xa4>)
 80018c6:	f004 fd43 	bl	8006350 <HAL_SPI_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80018d0:	f7ff ff54 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	240022c4 	.word	0x240022c4
 80018dc:	40003800 	.word	0x40003800

080018e0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80018e4:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <MX_SPI3_Init+0xa4>)
 80018e6:	4a28      	ldr	r2, [pc, #160]	@ (8001988 <MX_SPI3_Init+0xa8>)
 80018e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018ea:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <MX_SPI3_Init+0xa4>)
 80018ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018f2:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <MX_SPI3_Init+0xa4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f8:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <MX_SPI3_Init+0xa4>)
 80018fa:	2207      	movs	r2, #7
 80018fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001904:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800190a:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <MX_SPI3_Init+0xa4>)
 800190c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001910:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001912:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001914:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001918:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800191a:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <MX_SPI3_Init+0xa4>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001920:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001926:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800192c:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <MX_SPI3_Init+0xa4>)
 800192e:	2200      	movs	r2, #0
 8001930:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001932:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001934:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001938:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <MX_SPI3_Init+0xa4>)
 800193c:	2200      	movs	r2, #0
 800193e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001940:	4b10      	ldr	r3, [pc, #64]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001942:	2200      	movs	r2, #0
 8001944:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001948:	2200      	movs	r2, #0
 800194a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800194c:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <MX_SPI3_Init+0xa4>)
 800194e:	2200      	movs	r2, #0
 8001950:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001952:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001954:	2200      	movs	r2, #0
 8001956:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <MX_SPI3_Init+0xa4>)
 800195a:	2200      	movs	r2, #0
 800195c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001960:	2200      	movs	r2, #0
 8001962:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001966:	2200      	movs	r2, #0
 8001968:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <MX_SPI3_Init+0xa4>)
 800196c:	2200      	movs	r2, #0
 800196e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <MX_SPI3_Init+0xa4>)
 8001972:	f004 fced 	bl	8006350 <HAL_SPI_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800197c:	f7ff fefe 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2400234c 	.word	0x2400234c
 8001988:	40003c00 	.word	0x40003c00

0800198c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b0be      	sub	sp, #248	@ 0xf8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	22c0      	movs	r2, #192	@ 0xc0
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00b ffc5 	bl	800d93c <memset>
  if(spiHandle->Instance==SPI1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a73      	ldr	r2, [pc, #460]	@ (8001b84 <HAL_SPI_MspInit+0x1f8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d146      	bne.n	8001a4a <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80019bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ce:	f107 0320 	add.w	r3, r7, #32
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fedc 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80019de:	f7ff fecd 	bl	800177c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019e2:	4b69      	ldr	r3, [pc, #420]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 80019e4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80019e8:	4a67      	ldr	r2, [pc, #412]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 80019ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019ee:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80019f2:	4b65      	ldr	r3, [pc, #404]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 80019f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80019f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b61      	ldr	r3, [pc, #388]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001a02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a06:	4a60      	ldr	r2, [pc, #384]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a10:	4b5d      	ldr	r3, [pc, #372]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001a12:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8001a1e:	23e0      	movs	r3, #224	@ 0xe0
 8001a20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a36:	2305      	movs	r3, #5
 8001a38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4852      	ldr	r0, [pc, #328]	@ (8001b8c <HAL_SPI_MspInit+0x200>)
 8001a44:	f001 fbae 	bl	80031a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a48:	e098      	b.n	8001b7c <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a50      	ldr	r2, [pc, #320]	@ (8001b90 <HAL_SPI_MspInit+0x204>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d147      	bne.n	8001ae4 <HAL_SPI_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fe90 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_SPI_MspInit+0xee>
      Error_Handler();
 8001a76:	f7ff fe81 	bl	800177c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a7a:	4b43      	ldr	r3, [pc, #268]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001a7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a80:	4a41      	ldr	r2, [pc, #260]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a86:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001a8c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001a90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a98:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001a9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001aa8:	4b37      	ldr	r3, [pc, #220]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001aaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8001ab6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ad0:	2305      	movs	r3, #5
 8001ad2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ada:	4619      	mov	r1, r3
 8001adc:	482d      	ldr	r0, [pc, #180]	@ (8001b94 <HAL_SPI_MspInit+0x208>)
 8001ade:	f001 fb61 	bl	80031a4 <HAL_GPIO_Init>
}
 8001ae2:	e04b      	b.n	8001b7c <HAL_SPI_MspInit+0x1f0>
  else if(spiHandle->Instance==SPI3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b98 <HAL_SPI_MspInit+0x20c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d146      	bne.n	8001b7c <HAL_SPI_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001aee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b00:	f107 0320 	add.w	r3, r7, #32
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fe43 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_SPI_MspInit+0x188>
      Error_Handler();
 8001b10:	f7ff fe34 	bl	800177c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b14:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001b16:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001b1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b20:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001b24:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001b26:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b38:	4a13      	ldr	r2, [pc, #76]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <HAL_SPI_MspInit+0x1fc>)
 8001b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin|IMU_MOSI_Pin;
 8001b50:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b6a:	2306      	movs	r3, #6
 8001b6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b70:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <HAL_SPI_MspInit+0x210>)
 8001b78:	f001 fb14 	bl	80031a4 <HAL_GPIO_Init>
}
 8001b7c:	bf00      	nop
 8001b7e:	37f8      	adds	r7, #248	@ 0xf8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40013000 	.word	0x40013000
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58020000 	.word	0x58020000
 8001b90:	40003800 	.word	0x40003800
 8001b94:	58020400 	.word	0x58020400
 8001b98:	40003c00 	.word	0x40003c00
 8001b9c:	58020800 	.word	0x58020800

08001ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_MspInit+0x30>)
 8001ba8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001bac:	4a08      	ldr	r2, [pc, #32]	@ (8001bd0 <HAL_MspInit+0x30>)
 8001bae:	f043 0302 	orr.w	r3, r3, #2
 8001bb2:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8001bb6:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <HAL_MspInit+0x30>)
 8001bb8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	58024400 	.word	0x58024400

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <NMI_Handler+0x4>

08001bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <MemManage_Handler+0x4>

08001bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  if(Timer1 > 0)
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <SysTick_Handler+0x34>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <SysTick_Handler+0x18>
	    Timer1--;
 8001c34:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <SysTick_Handler+0x34>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <SysTick_Handler+0x34>)
 8001c3e:	801a      	strh	r2, [r3, #0]
	  if(Timer2 > 0)
 8001c40:	4b07      	ldr	r3, [pc, #28]	@ (8001c60 <SysTick_Handler+0x38>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <SysTick_Handler+0x2c>
	    Timer2--;
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <SysTick_Handler+0x38>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <SysTick_Handler+0x38>)
 8001c52:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f000 fda2 	bl	800279c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	240026cc 	.word	0x240026cc
 8001c60:	240026ce 	.word	0x240026ce

08001c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c68:	4b32      	ldr	r3, [pc, #200]	@ (8001d34 <SystemInit+0xd0>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c6e:	4a31      	ldr	r2, [pc, #196]	@ (8001d34 <SystemInit+0xd0>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c78:	4b2f      	ldr	r3, [pc, #188]	@ (8001d38 <SystemInit+0xd4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d807      	bhi.n	8001c94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c84:	4b2c      	ldr	r3, [pc, #176]	@ (8001d38 <SystemInit+0xd4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 030f 	bic.w	r3, r3, #15
 8001c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d38 <SystemInit+0xd4>)
 8001c8e:	f043 0303 	orr.w	r3, r3, #3
 8001c92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c94:	4b29      	ldr	r3, [pc, #164]	@ (8001d3c <SystemInit+0xd8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a28      	ldr	r2, [pc, #160]	@ (8001d3c <SystemInit+0xd8>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ca0:	4b26      	ldr	r3, [pc, #152]	@ (8001d3c <SystemInit+0xd8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ca6:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <SystemInit+0xd8>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4924      	ldr	r1, [pc, #144]	@ (8001d3c <SystemInit+0xd8>)
 8001cac:	4b24      	ldr	r3, [pc, #144]	@ (8001d40 <SystemInit+0xdc>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cb2:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <SystemInit+0xd4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d007      	beq.n	8001cce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <SystemInit+0xd4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 030f 	bic.w	r3, r3, #15
 8001cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <SystemInit+0xd4>)
 8001cc8:	f043 0303 	orr.w	r3, r3, #3
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001cce:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <SystemInit+0xd8>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <SystemInit+0xd8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001cda:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <SystemInit+0xd8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ce0:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <SystemInit+0xd8>)
 8001ce2:	4a18      	ldr	r2, [pc, #96]	@ (8001d44 <SystemInit+0xe0>)
 8001ce4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <SystemInit+0xd8>)
 8001ce8:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <SystemInit+0xe4>)
 8001cea:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cec:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <SystemInit+0xd8>)
 8001cee:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <SystemInit+0xe8>)
 8001cf0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cf2:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <SystemInit+0xd8>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cf8:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <SystemInit+0xd8>)
 8001cfa:	4a14      	ldr	r2, [pc, #80]	@ (8001d4c <SystemInit+0xe8>)
 8001cfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001d3c <SystemInit+0xd8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d04:	4b0d      	ldr	r3, [pc, #52]	@ (8001d3c <SystemInit+0xd8>)
 8001d06:	4a11      	ldr	r2, [pc, #68]	@ (8001d4c <SystemInit+0xe8>)
 8001d08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <SystemInit+0xd8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <SystemInit+0xd8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a09      	ldr	r2, [pc, #36]	@ (8001d3c <SystemInit+0xd8>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <SystemInit+0xd8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	@ (8001d50 <SystemInit+0xec>)
 8001d24:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00
 8001d38:	52002000 	.word	0x52002000
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d44:	02020200 	.word	0x02020200
 8001d48:	01ff0000 	.word	0x01ff0000
 8001d4c:	01010280 	.word	0x01010280
 8001d50:	52004000 	.word	0x52004000

08001d54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim13;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d66:	463b      	mov	r3, r7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d78:	4b33      	ldr	r3, [pc, #204]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001d7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280-1;
 8001d80:	4b31      	ldr	r3, [pc, #196]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001d82:	f240 1217 	movw	r2, #279	@ 0x117
 8001d86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	4b2f      	ldr	r3, [pc, #188]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001d90:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001d94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d96:	4b2c      	ldr	r3, [pc, #176]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001d9e:	2280      	movs	r2, #128	@ 0x80
 8001da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001da2:	4829      	ldr	r0, [pc, #164]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001da4:	f005 fcd2 	bl	800774c <HAL_TIM_PWM_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001dae:	f7ff fce5 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4821      	ldr	r0, [pc, #132]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001dc2:	f006 f9ab 	bl	800811c <HAL_TIMEx_MasterConfigSynchronization>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001dcc:	f7ff fcd6 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd0:	2360      	movs	r3, #96	@ 0x60
 8001dd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4818      	ldr	r0, [pc, #96]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001de8:	f005 fd08 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001df2:	f7ff fcc3 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001df6:	463b      	mov	r3, r7
 8001df8:	2204      	movs	r2, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4812      	ldr	r0, [pc, #72]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001dfe:	f005 fcfd 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001e08:	f7ff fcb8 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	2208      	movs	r2, #8
 8001e10:	4619      	mov	r1, r3
 8001e12:	480d      	ldr	r0, [pc, #52]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001e14:	f005 fcf2 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8001e1e:	f7ff fcad 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e22:	463b      	mov	r3, r7
 8001e24:	220c      	movs	r2, #12
 8001e26:	4619      	mov	r1, r3
 8001e28:	4807      	ldr	r0, [pc, #28]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001e2a:	f005 fce7 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8001e34:	f7ff fca2 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e38:	4803      	ldr	r0, [pc, #12]	@ (8001e48 <MX_TIM2_Init+0xf4>)
 8001e3a:	f000 f97d 	bl	8002138 <HAL_TIM_MspPostInit>

}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	@ 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	240023d4 	.word	0x240023d4

08001e4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	@ 0x28
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	f107 031c 	add.w	r3, r7, #28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
 8001e6c:	615a      	str	r2, [r3, #20]
 8001e6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e70:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001e72:	4a28      	ldr	r2, [pc, #160]	@ (8001f14 <MX_TIM3_Init+0xc8>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 280-1;
 8001e76:	4b26      	ldr	r3, [pc, #152]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001e78:	f240 1217 	movw	r2, #279	@ 0x117
 8001e7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7000;
 8001e84:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001e86:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001e8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8c:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e92:	4b1f      	ldr	r3, [pc, #124]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001e94:	2280      	movs	r2, #128	@ 0x80
 8001e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e98:	481d      	ldr	r0, [pc, #116]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001e9a:	f005 fc57 	bl	800774c <HAL_TIM_PWM_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001ea4:	f7ff fc6a 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001eb0:	f107 031c 	add.w	r3, r7, #28
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4816      	ldr	r0, [pc, #88]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001eb8:	f006 f930 	bl	800811c <HAL_TIMEx_MasterConfigSynchronization>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001ec2:	f7ff fc5b 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec6:	2360      	movs	r3, #96	@ 0x60
 8001ec8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	2200      	movs	r2, #0
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001ede:	f005 fc8d 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001ee8:	f7ff fc48 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eec:	463b      	mov	r3, r7
 8001eee:	2204      	movs	r2, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4807      	ldr	r0, [pc, #28]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001ef4:	f005 fc82 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001efe:	f7ff fc3d 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f02:	4803      	ldr	r0, [pc, #12]	@ (8001f10 <MX_TIM3_Init+0xc4>)
 8001f04:	f000 f918 	bl	8002138 <HAL_TIM_MspPostInit>

}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	@ 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	24002420 	.word	0x24002420
 8001f14:	40000400 	.word	0x40000400

08001f18 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
 8001f38:	615a      	str	r2, [r3, #20]
 8001f3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f3c:	4b32      	ldr	r3, [pc, #200]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001f3e:	4a33      	ldr	r2, [pc, #204]	@ (800200c <MX_TIM4_Init+0xf4>)
 8001f40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 280-1;
 8001f42:	4b31      	ldr	r3, [pc, #196]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001f44:	f240 1217 	movw	r2, #279	@ 0x117
 8001f48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7000;
 8001f50:	4b2d      	ldr	r3, [pc, #180]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001f52:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8001f56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f58:	4b2b      	ldr	r3, [pc, #172]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001f60:	2280      	movs	r2, #128	@ 0x80
 8001f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f64:	4828      	ldr	r0, [pc, #160]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001f66:	f005 fbf1 	bl	800774c <HAL_TIM_PWM_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001f70:	f7ff fc04 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	4821      	ldr	r0, [pc, #132]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001f84:	f006 f8ca 	bl	800811c <HAL_TIMEx_MasterConfigSynchronization>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001f8e:	f7ff fbf5 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f92:	2360      	movs	r3, #96	@ 0x60
 8001f94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4817      	ldr	r0, [pc, #92]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001faa:	f005 fc27 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001fb4:	f7ff fbe2 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fb8:	463b      	mov	r3, r7
 8001fba:	2204      	movs	r2, #4
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4812      	ldr	r0, [pc, #72]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001fc0:	f005 fc1c 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001fca:	f7ff fbd7 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fce:	463b      	mov	r3, r7
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	480c      	ldr	r0, [pc, #48]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001fd6:	f005 fc11 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8001fe0:	f7ff fbcc 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4807      	ldr	r0, [pc, #28]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001fec:	f005 fc06 	bl	80077fc <HAL_TIM_PWM_ConfigChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8001ff6:	f7ff fbc1 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ffa:	4803      	ldr	r0, [pc, #12]	@ (8002008 <MX_TIM4_Init+0xf0>)
 8001ffc:	f000 f89c 	bl	8002138 <HAL_TIM_MspPostInit>

}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	@ 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	2400246c 	.word	0x2400246c
 800200c:	40000800 	.word	0x40000800

08002010 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <MX_TIM13_Init+0x40>)
 8002016:	4a0f      	ldr	r2, [pc, #60]	@ (8002054 <MX_TIM13_Init+0x44>)
 8002018:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 280-1;
 800201a:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <MX_TIM13_Init+0x40>)
 800201c:	f240 1217 	movw	r2, #279	@ 0x117
 8002020:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <MX_TIM13_Init+0x40>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <MX_TIM13_Init+0x40>)
 800202a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800202e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <MX_TIM13_Init+0x40>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002036:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <MX_TIM13_Init+0x40>)
 8002038:	2280      	movs	r2, #128	@ 0x80
 800203a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800203c:	4804      	ldr	r0, [pc, #16]	@ (8002050 <MX_TIM13_Init+0x40>)
 800203e:	f005 fb2e 	bl	800769e <HAL_TIM_Base_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002048:	f7ff fb98 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	240024b8 	.word	0x240024b8
 8002054:	40001c00 	.word	0x40001c00

08002058 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002068:	d10f      	bne.n	800208a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800206a:	4b1f      	ldr	r3, [pc, #124]	@ (80020e8 <HAL_TIM_PWM_MspInit+0x90>)
 800206c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002070:	4a1d      	ldr	r2, [pc, #116]	@ (80020e8 <HAL_TIM_PWM_MspInit+0x90>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800207a:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_TIM_PWM_MspInit+0x90>)
 800207c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002088:	e028      	b.n	80020dc <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a17      	ldr	r2, [pc, #92]	@ (80020ec <HAL_TIM_PWM_MspInit+0x94>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d10f      	bne.n	80020b4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002094:	4b14      	ldr	r3, [pc, #80]	@ (80020e8 <HAL_TIM_PWM_MspInit+0x90>)
 8002096:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800209a:	4a13      	ldr	r2, [pc, #76]	@ (80020e8 <HAL_TIM_PWM_MspInit+0x90>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80020a4:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <HAL_TIM_PWM_MspInit+0x90>)
 80020a6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
}
 80020b2:	e013      	b.n	80020dc <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <HAL_TIM_PWM_MspInit+0x98>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020be:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <HAL_TIM_PWM_MspInit+0x90>)
 80020c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80020c4:	4a08      	ldr	r2, [pc, #32]	@ (80020e8 <HAL_TIM_PWM_MspInit+0x90>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_TIM_PWM_MspInit+0x90>)
 80020d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	58024400 	.word	0x58024400
 80020ec:	40000400 	.word	0x40000400
 80020f0:	40000800 	.word	0x40000800

080020f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM13)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0b      	ldr	r2, [pc, #44]	@ (8002130 <HAL_TIM_Base_MspInit+0x3c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002106:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <HAL_TIM_Base_MspInit+0x40>)
 8002108:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800210c:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <HAL_TIM_Base_MspInit+0x40>)
 800210e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002112:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002116:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <HAL_TIM_Base_MspInit+0x40>)
 8002118:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800211c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40001c00 	.word	0x40001c00
 8002134:	58024400 	.word	0x58024400

08002138 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	@ 0x30
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002158:	d13f      	bne.n	80021da <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215a:	4b47      	ldr	r3, [pc, #284]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 800215c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002160:	4a45      	ldr	r2, [pc, #276]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800216a:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 800216c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002178:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 800217a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800217e:	4a3e      	ldr	r2, [pc, #248]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002188:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 800218a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8002196:	f248 030c 	movw	r3, #32780	@ 0x800c
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021a8:	2301      	movs	r3, #1
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	4832      	ldr	r0, [pc, #200]	@ (800227c <HAL_TIM_MspPostInit+0x144>)
 80021b4:	f000 fff6 	bl	80031a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021b8:	2308      	movs	r3, #8
 80021ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021c8:	2301      	movs	r3, #1
 80021ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	482b      	ldr	r0, [pc, #172]	@ (8002280 <HAL_TIM_MspPostInit+0x148>)
 80021d4:	f000 ffe6 	bl	80031a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021d8:	e049      	b.n	800226e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM3)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a29      	ldr	r2, [pc, #164]	@ (8002284 <HAL_TIM_MspPostInit+0x14c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d11f      	bne.n	8002224 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	4b24      	ldr	r3, [pc, #144]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 80021e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021ea:	4a23      	ldr	r2, [pc, #140]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80021f4:	4b20      	ldr	r3, [pc, #128]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 80021f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002202:	2330      	movs	r3, #48	@ 0x30
 8002204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002212:	2302      	movs	r3, #2
 8002214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4619      	mov	r1, r3
 800221c:	4818      	ldr	r0, [pc, #96]	@ (8002280 <HAL_TIM_MspPostInit+0x148>)
 800221e:	f000 ffc1 	bl	80031a4 <HAL_GPIO_Init>
}
 8002222:	e024      	b.n	800226e <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <HAL_TIM_MspPostInit+0x150>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d11f      	bne.n	800226e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 8002230:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002234:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <HAL_TIM_MspPostInit+0x140>)
 8002240:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800224c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800225e:	2302      	movs	r3, #2
 8002260:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	@ (8002280 <HAL_TIM_MspPostInit+0x148>)
 800226a:	f000 ff9b 	bl	80031a4 <HAL_GPIO_Init>
}
 800226e:	bf00      	nop
 8002270:	3730      	adds	r7, #48	@ 0x30
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	58024400 	.word	0x58024400
 800227c:	58020000 	.word	0x58020000
 8002280:	58020400 	.word	0x58020400
 8002284:	40000400 	.word	0x40000400
 8002288:	40000800 	.word	0x40000800

0800228c <MX_UART4_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002290:	4b22      	ldr	r3, [pc, #136]	@ (800231c <MX_UART4_Init+0x90>)
 8002292:	4a23      	ldr	r2, [pc, #140]	@ (8002320 <MX_UART4_Init+0x94>)
 8002294:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002296:	4b21      	ldr	r3, [pc, #132]	@ (800231c <MX_UART4_Init+0x90>)
 8002298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800229c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800229e:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <MX_UART4_Init+0x90>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <MX_UART4_Init+0x90>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <MX_UART4_Init+0x90>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <MX_UART4_Init+0x90>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b6:	4b19      	ldr	r3, [pc, #100]	@ (800231c <MX_UART4_Init+0x90>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80022bc:	4b17      	ldr	r3, [pc, #92]	@ (800231c <MX_UART4_Init+0x90>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <MX_UART4_Init+0x90>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022c8:	4b14      	ldr	r3, [pc, #80]	@ (800231c <MX_UART4_Init+0x90>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ce:	4b13      	ldr	r3, [pc, #76]	@ (800231c <MX_UART4_Init+0x90>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80022d4:	4811      	ldr	r0, [pc, #68]	@ (800231c <MX_UART4_Init+0x90>)
 80022d6:	f005 ffaf 	bl	8008238 <HAL_UART_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80022e0:	f7ff fa4c 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022e4:	2100      	movs	r1, #0
 80022e6:	480d      	ldr	r0, [pc, #52]	@ (800231c <MX_UART4_Init+0x90>)
 80022e8:	f007 f8bb 	bl	8009462 <HAL_UARTEx_SetTxFifoThreshold>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80022f2:	f7ff fa43 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022f6:	2100      	movs	r1, #0
 80022f8:	4808      	ldr	r0, [pc, #32]	@ (800231c <MX_UART4_Init+0x90>)
 80022fa:	f007 f8f0 	bl	80094de <HAL_UARTEx_SetRxFifoThreshold>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002304:	f7ff fa3a 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002308:	4804      	ldr	r0, [pc, #16]	@ (800231c <MX_UART4_Init+0x90>)
 800230a:	f007 f871 	bl	80093f0 <HAL_UARTEx_DisableFifoMode>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002314:	f7ff fa32 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	24002504 	.word	0x24002504
 8002320:	40004c00 	.word	0x40004c00

08002324 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002328:	4b22      	ldr	r3, [pc, #136]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 800232a:	4a23      	ldr	r2, [pc, #140]	@ (80023b8 <MX_USART1_UART_Init+0x94>)
 800232c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800232e:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002342:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800235a:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002360:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002366:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800236c:	4811      	ldr	r0, [pc, #68]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 800236e:	f005 ff63 	bl	8008238 <HAL_UART_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002378:	f7ff fa00 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800237c:	2100      	movs	r1, #0
 800237e:	480d      	ldr	r0, [pc, #52]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 8002380:	f007 f86f 	bl	8009462 <HAL_UARTEx_SetTxFifoThreshold>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800238a:	f7ff f9f7 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800238e:	2100      	movs	r1, #0
 8002390:	4808      	ldr	r0, [pc, #32]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 8002392:	f007 f8a4 	bl	80094de <HAL_UARTEx_SetRxFifoThreshold>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800239c:	f7ff f9ee 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80023a0:	4804      	ldr	r0, [pc, #16]	@ (80023b4 <MX_USART1_UART_Init+0x90>)
 80023a2:	f007 f825 	bl	80093f0 <HAL_UARTEx_DisableFifoMode>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80023ac:	f7ff f9e6 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	24002598 	.word	0x24002598
 80023b8:	40011000 	.word	0x40011000

080023bc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023c0:	4b22      	ldr	r3, [pc, #136]	@ (800244c <MX_USART6_UART_Init+0x90>)
 80023c2:	4a23      	ldr	r2, [pc, #140]	@ (8002450 <MX_USART6_UART_Init+0x94>)
 80023c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80023c6:	4b21      	ldr	r3, [pc, #132]	@ (800244c <MX_USART6_UART_Init+0x90>)
 80023c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80023ce:	4b1f      	ldr	r3, [pc, #124]	@ (800244c <MX_USART6_UART_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <MX_USART6_UART_Init+0x90>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80023da:	4b1c      	ldr	r3, [pc, #112]	@ (800244c <MX_USART6_UART_Init+0x90>)
 80023dc:	2200      	movs	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	@ (800244c <MX_USART6_UART_Init+0x90>)
 80023e2:	220c      	movs	r2, #12
 80023e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023e6:	4b19      	ldr	r3, [pc, #100]	@ (800244c <MX_USART6_UART_Init+0x90>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ec:	4b17      	ldr	r3, [pc, #92]	@ (800244c <MX_USART6_UART_Init+0x90>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <MX_USART6_UART_Init+0x90>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023f8:	4b14      	ldr	r3, [pc, #80]	@ (800244c <MX_USART6_UART_Init+0x90>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023fe:	4b13      	ldr	r3, [pc, #76]	@ (800244c <MX_USART6_UART_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002404:	4811      	ldr	r0, [pc, #68]	@ (800244c <MX_USART6_UART_Init+0x90>)
 8002406:	f005 ff17 	bl	8008238 <HAL_UART_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002410:	f7ff f9b4 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002414:	2100      	movs	r1, #0
 8002416:	480d      	ldr	r0, [pc, #52]	@ (800244c <MX_USART6_UART_Init+0x90>)
 8002418:	f007 f823 	bl	8009462 <HAL_UARTEx_SetTxFifoThreshold>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002422:	f7ff f9ab 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002426:	2100      	movs	r1, #0
 8002428:	4808      	ldr	r0, [pc, #32]	@ (800244c <MX_USART6_UART_Init+0x90>)
 800242a:	f007 f858 	bl	80094de <HAL_UARTEx_SetRxFifoThreshold>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002434:	f7ff f9a2 	bl	800177c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002438:	4804      	ldr	r0, [pc, #16]	@ (800244c <MX_USART6_UART_Init+0x90>)
 800243a:	f006 ffd9 	bl	80093f0 <HAL_UARTEx_DisableFifoMode>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002444:	f7ff f99a 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	2400262c 	.word	0x2400262c
 8002450:	40011400 	.word	0x40011400

08002454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b0be      	sub	sp, #248	@ 0xf8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800246c:	f107 0320 	add.w	r3, r7, #32
 8002470:	22c0      	movs	r2, #192	@ 0xc0
 8002472:	2100      	movs	r1, #0
 8002474:	4618      	mov	r0, r3
 8002476:	f00b fa61 	bl	800d93c <memset>
  if(uartHandle->Instance==UART4)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a73      	ldr	r2, [pc, #460]	@ (800264c <HAL_UART_MspInit+0x1f8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d146      	bne.n	8002512 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002484:	f04f 0202 	mov.w	r2, #2
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002496:	f107 0320 	add.w	r3, r7, #32
 800249a:	4618      	mov	r0, r3
 800249c:	f002 f978 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80024a6:	f7ff f969 	bl	800177c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024aa:	4b69      	ldr	r3, [pc, #420]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 80024ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80024b0:	4a67      	ldr	r2, [pc, #412]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 80024b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024b6:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 80024ba:	4b65      	ldr	r3, [pc, #404]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 80024bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80024c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c8:	4b61      	ldr	r3, [pc, #388]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 80024ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024ce:	4a60      	ldr	r2, [pc, #384]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80024d8:	4b5d      	ldr	r3, [pc, #372]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 80024da:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024e6:	2303      	movs	r3, #3
 80024e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024fe:	2308      	movs	r3, #8
 8002500:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002508:	4619      	mov	r1, r3
 800250a:	4852      	ldr	r0, [pc, #328]	@ (8002654 <HAL_UART_MspInit+0x200>)
 800250c:	f000 fe4a 	bl	80031a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002510:	e097      	b.n	8002642 <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a50      	ldr	r2, [pc, #320]	@ (8002658 <HAL_UART_MspInit+0x204>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d147      	bne.n	80025ac <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800251c:	f04f 0201 	mov.w	r2, #1
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800252e:	f107 0320 	add.w	r3, r7, #32
 8002532:	4618      	mov	r0, r3
 8002534:	f002 f92c 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_UART_MspInit+0xee>
      Error_Handler();
 800253e:	f7ff f91d 	bl	800177c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002542:	4b43      	ldr	r3, [pc, #268]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 8002544:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002548:	4a41      	ldr	r2, [pc, #260]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 800254a:	f043 0310 	orr.w	r3, r3, #16
 800254e:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002552:	4b3f      	ldr	r3, [pc, #252]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 8002554:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002558:	f003 0310 	and.w	r3, r3, #16
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002560:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 8002562:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002566:	4a3a      	ldr	r2, [pc, #232]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002570:	4b37      	ldr	r3, [pc, #220]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 8002572:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|SBUS_RX_Pin;
 800257e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002598:	2307      	movs	r3, #7
 800259a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025a2:	4619      	mov	r1, r3
 80025a4:	482b      	ldr	r0, [pc, #172]	@ (8002654 <HAL_UART_MspInit+0x200>)
 80025a6:	f000 fdfd 	bl	80031a4 <HAL_GPIO_Init>
}
 80025aa:	e04a      	b.n	8002642 <HAL_UART_MspInit+0x1ee>
  else if(uartHandle->Instance==USART6)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2a      	ldr	r2, [pc, #168]	@ (800265c <HAL_UART_MspInit+0x208>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d145      	bne.n	8002642 <HAL_UART_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80025b6:	f04f 0201 	mov.w	r2, #1
 80025ba:	f04f 0300 	mov.w	r3, #0
 80025be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c8:	f107 0320 	add.w	r3, r7, #32
 80025cc:	4618      	mov	r0, r3
 80025ce:	f002 f8df 	bl	8004790 <HAL_RCCEx_PeriphCLKConfig>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_UART_MspInit+0x188>
      Error_Handler();
 80025d8:	f7ff f8d0 	bl	800177c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 80025de:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80025e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 80025e4:	f043 0320 	orr.w	r3, r3, #32
 80025e8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80025ec:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 80025ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 80025fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002600:	4a13      	ldr	r2, [pc, #76]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800260a:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <HAL_UART_MspInit+0x1fc>)
 800260c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002618:	23c0      	movs	r3, #192	@ 0xc0
 800261a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002630:	2307      	movs	r3, #7
 8002632:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002636:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800263a:	4619      	mov	r1, r3
 800263c:	4808      	ldr	r0, [pc, #32]	@ (8002660 <HAL_UART_MspInit+0x20c>)
 800263e:	f000 fdb1 	bl	80031a4 <HAL_GPIO_Init>
}
 8002642:	bf00      	nop
 8002644:	37f8      	adds	r7, #248	@ 0xf8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40004c00 	.word	0x40004c00
 8002650:	58024400 	.word	0x58024400
 8002654:	58020000 	.word	0x58020000
 8002658:	40011000 	.word	0x40011000
 800265c:	40011400 	.word	0x40011400
 8002660:	58020800 	.word	0x58020800

08002664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800269c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002668:	f7ff fafc 	bl	8001c64 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800266c:	480c      	ldr	r0, [pc, #48]	@ (80026a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800266e:	490d      	ldr	r1, [pc, #52]	@ (80026a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002670:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002674:	e002      	b.n	800267c <LoopCopyDataInit>

08002676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267a:	3304      	adds	r3, #4

0800267c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800267c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002680:	d3f9      	bcc.n	8002676 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002682:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002684:	4c0a      	ldr	r4, [pc, #40]	@ (80026b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002688:	e001      	b.n	800268e <LoopFillZerobss>

0800268a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800268c:	3204      	adds	r2, #4

0800268e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002690:	d3fb      	bcc.n	800268a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002692:	f00b f961 	bl	800d958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002696:	f7fe ff9f 	bl	80015d8 <main>
  bx  lr
 800269a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800269c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80026a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80026a4:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80026a8:	0800ea38 	.word	0x0800ea38
  ldr r2, =_sbss
 80026ac:	24000084 	.word	0x24000084
  ldr r4, =_ebss
 80026b0:	24002a40 	.word	0x24002a40

080026b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b4:	e7fe      	b.n	80026b4 <ADC_IRQHandler>
	...

080026b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026be:	2003      	movs	r0, #3
 80026c0:	f000 f962 	bl	8002988 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80026c4:	f001 fe8e 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <HAL_Init+0x68>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4913      	ldr	r1, [pc, #76]	@ (8002724 <HAL_Init+0x6c>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80026e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002720 <HAL_Init+0x68>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002724 <HAL_Init+0x6c>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002728 <HAL_Init+0x70>)
 80026fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026fc:	4a0b      	ldr	r2, [pc, #44]	@ (800272c <HAL_Init+0x74>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002702:	200f      	movs	r0, #15
 8002704:	f000 f814 	bl	8002730 <HAL_InitTick>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e002      	b.n	8002718 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002712:	f7ff fa45 	bl	8001ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58024400 	.word	0x58024400
 8002724:	0800dd20 	.word	0x0800dd20
 8002728:	24000010 	.word	0x24000010
 800272c:	2400000c 	.word	0x2400000c

08002730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002738:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_InitTick+0x60>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e021      	b.n	8002788 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_InitTick+0x64>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_InitTick+0x60>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002752:	fbb3 f3f1 	udiv	r3, r3, r1
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f939 	bl	80029d2 <HAL_SYSTICK_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e00e      	b.n	8002788 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b0f      	cmp	r3, #15
 800276e:	d80a      	bhi.n	8002786 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002770:	2200      	movs	r2, #0
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	f04f 30ff 	mov.w	r0, #4294967295
 8002778:	f000 f911 	bl	800299e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800277c:	4a06      	ldr	r2, [pc, #24]	@ (8002798 <HAL_InitTick+0x68>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e000      	b.n	8002788 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	24000018 	.word	0x24000018
 8002794:	2400000c 	.word	0x2400000c
 8002798:	24000014 	.word	0x24000014

0800279c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027a0:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <HAL_IncTick+0x20>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <HAL_IncTick+0x24>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	4a04      	ldr	r2, [pc, #16]	@ (80027c0 <HAL_IncTick+0x24>)
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	24000018 	.word	0x24000018
 80027c0:	240026c0 	.word	0x240026c0

080027c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_GetTick+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	240026c0 	.word	0x240026c0

080027dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff ffee 	bl	80027c4 <HAL_GetTick>
 80027e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f4:	d005      	beq.n	8002802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <HAL_Delay+0x44>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002802:	bf00      	nop
 8002804:	f7ff ffde 	bl	80027c4 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	429a      	cmp	r2, r3
 8002812:	d8f7      	bhi.n	8002804 <HAL_Delay+0x28>
  {
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	24000018 	.word	0x24000018

08002824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <__NVIC_SetPriorityGrouping+0x40>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <__NVIC_SetPriorityGrouping+0x44>)
 800284e:	4313      	orrs	r3, r2
 8002850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002852:	4a04      	ldr	r2, [pc, #16]	@ (8002864 <__NVIC_SetPriorityGrouping+0x40>)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	60d3      	str	r3, [r2, #12]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00
 8002868:	05fa0000 	.word	0x05fa0000

0800286c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002870:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <__NVIC_GetPriorityGrouping+0x18>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f003 0307 	and.w	r3, r3, #7
}
 800287a:	4618      	mov	r0, r3
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	@ (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	@ (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	@ 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002954:	d301      	bcc.n	800295a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002956:	2301      	movs	r3, #1
 8002958:	e00f      	b.n	800297a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295a:	4a0a      	ldr	r2, [pc, #40]	@ (8002984 <SysTick_Config+0x40>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002962:	210f      	movs	r1, #15
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f7ff ff8e 	bl	8002888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296c:	4b05      	ldr	r3, [pc, #20]	@ (8002984 <SysTick_Config+0x40>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002972:	4b04      	ldr	r3, [pc, #16]	@ (8002984 <SysTick_Config+0x40>)
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff47 	bl	8002824 <__NVIC_SetPriorityGrouping>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029ac:	f7ff ff5e 	bl	800286c <__NVIC_GetPriorityGrouping>
 80029b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f7ff ff90 	bl	80028dc <NVIC_EncodePriority>
 80029bc:	4602      	mov	r2, r0
 80029be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff5f 	bl	8002888 <__NVIC_SetPriority>
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ffb2 	bl	8002944 <SysTick_Config>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80029f0:	f3bf 8f5f 	dmb	sy
}
 80029f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80029f6:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <HAL_MPU_Disable+0x28>)
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	4a06      	ldr	r2, [pc, #24]	@ (8002a14 <HAL_MPU_Disable+0x28>)
 80029fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a00:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <HAL_MPU_Disable+0x2c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	605a      	str	r2, [r3, #4]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000ed00 	.word	0xe000ed00
 8002a18:	e000ed90 	.word	0xe000ed90

08002a1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002a24:	4a0b      	ldr	r2, [pc, #44]	@ (8002a54 <HAL_MPU_Enable+0x38>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <HAL_MPU_Enable+0x3c>)
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	4a09      	ldr	r2, [pc, #36]	@ (8002a58 <HAL_MPU_Enable+0x3c>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a38:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002a3a:	f3bf 8f4f 	dsb	sy
}
 8002a3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a40:	f3bf 8f6f 	isb	sy
}
 8002a44:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000ed90 	.word	0xe000ed90
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	785a      	ldrb	r2, [r3, #1]
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_MPU_ConfigRegion+0x7c>)
 8002a6a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <HAL_MPU_ConfigRegion+0x7c>)
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	4a19      	ldr	r2, [pc, #100]	@ (8002ad8 <HAL_MPU_ConfigRegion+0x7c>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002a78:	4a17      	ldr	r2, [pc, #92]	@ (8002ad8 <HAL_MPU_ConfigRegion+0x7c>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7b1b      	ldrb	r3, [r3, #12]
 8002a84:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7adb      	ldrb	r3, [r3, #11]
 8002a8a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7a9b      	ldrb	r3, [r3, #10]
 8002a92:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7b5b      	ldrb	r3, [r3, #13]
 8002a9a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7b9b      	ldrb	r3, [r3, #14]
 8002aa2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002aa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7bdb      	ldrb	r3, [r3, #15]
 8002aaa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002aac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7a5b      	ldrb	r3, [r3, #9]
 8002ab2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002ab4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7a1b      	ldrb	r3, [r3, #8]
 8002aba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002abc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	7812      	ldrb	r2, [r2, #0]
 8002ac2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ac4:	4a04      	ldr	r2, [pc, #16]	@ (8002ad8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002ac6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ac8:	6113      	str	r3, [r2, #16]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed90 	.word	0xe000ed90

08002adc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b098      	sub	sp, #96	@ 0x60
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002ae4:	4a84      	ldr	r2, [pc, #528]	@ (8002cf8 <HAL_FDCAN_Init+0x21c>)
 8002ae6:	f107 030c 	add.w	r3, r7, #12
 8002aea:	4611      	mov	r1, r2
 8002aec:	224c      	movs	r2, #76	@ 0x4c
 8002aee:	4618      	mov	r0, r3
 8002af0:	f00a ff56 	bl	800d9a0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e1c6      	b.n	8002e8c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7e      	ldr	r2, [pc, #504]	@ (8002cfc <HAL_FDCAN_Init+0x220>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d106      	bne.n	8002b16 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe fb64 	bl	80011f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0210 	bic.w	r2, r2, #16
 8002b3e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b40:	f7ff fe40 	bl	80027c4 <HAL_GetTick>
 8002b44:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002b46:	e014      	b.n	8002b72 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b48:	f7ff fe3c 	bl	80027c4 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b0a      	cmp	r3, #10
 8002b54:	d90d      	bls.n	8002b72 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2203      	movs	r2, #3
 8002b6a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e18c      	b.n	8002e8c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d0e3      	beq.n	8002b48 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b90:	f7ff fe18 	bl	80027c4 <HAL_GetTick>
 8002b94:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002b96:	e014      	b.n	8002bc2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002b98:	f7ff fe14 	bl	80027c4 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b0a      	cmp	r3, #10
 8002ba4:	d90d      	bls.n	8002bc2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bac:	f043 0201 	orr.w	r2, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e164      	b.n	8002e8c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0e3      	beq.n	8002b98 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0202 	orr.w	r2, r2, #2
 8002bde:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7c1b      	ldrb	r3, [r3, #16]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d108      	bne.n	8002bfa <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bf6:	619a      	str	r2, [r3, #24]
 8002bf8:	e007      	b.n	8002c0a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c08:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	7c5b      	ldrb	r3, [r3, #17]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d108      	bne.n	8002c24 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c20:	619a      	str	r2, [r3, #24]
 8002c22:	e007      	b.n	8002c34 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c32:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7c9b      	ldrb	r3, [r3, #18]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d108      	bne.n	8002c4e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c4a:	619a      	str	r2, [r3, #24]
 8002c4c:	e007      	b.n	8002c5e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c5c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8002c82:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0210 	bic.w	r2, r2, #16
 8002c92:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d108      	bne.n	8002cae <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0204 	orr.w	r2, r2, #4
 8002caa:	619a      	str	r2, [r3, #24]
 8002cac:	e030      	b.n	8002d10 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d02c      	beq.n	8002d10 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d020      	beq.n	8002d00 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ccc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0210 	orr.w	r2, r2, #16
 8002cdc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d114      	bne.n	8002d10 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0220 	orr.w	r2, r2, #32
 8002cf4:	619a      	str	r2, [r3, #24]
 8002cf6:	e00b      	b.n	8002d10 <HAL_FDCAN_Init+0x234>
 8002cf8:	0800dc8c 	.word	0x0800dc8c
 8002cfc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0220 	orr.w	r2, r2, #32
 8002d0e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d20:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002d28:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002d38:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002d3a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d44:	d115      	bne.n	8002d72 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	3b01      	subs	r3, #1
 8002d52:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d54:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002d5e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	3b01      	subs	r3, #1
 8002d68:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002d6e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002d70:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d98:	4413      	add	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d011      	beq.n	8002dc2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002da6:	f023 0107 	bic.w	r1, r3, #7
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	3360      	adds	r3, #96	@ 0x60
 8002db2:	443b      	add	r3, r7
 8002db4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d011      	beq.n	8002dee <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002dd2:	f023 0107 	bic.w	r1, r3, #7
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	3360      	adds	r3, #96	@ 0x60
 8002dde:	443b      	add	r3, r7
 8002de0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d012      	beq.n	8002e1c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002dfe:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	3360      	adds	r3, #96	@ 0x60
 8002e0a:	443b      	add	r3, r7
 8002e0c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002e10:	011a      	lsls	r2, r3, #4
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002e2c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	3360      	adds	r3, #96	@ 0x60
 8002e38:	443b      	add	r3, r7
 8002e3a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002e3e:	021a      	lsls	r2, r3, #8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a11      	ldr	r2, [pc, #68]	@ (8002e94 <HAL_FDCAN_Init+0x3b8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d107      	bne.n	8002e64 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f022 0203 	bic.w	r2, r2, #3
 8002e62:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f80b 	bl	8002e98 <FDCAN_CalcultateRamBlockAddresses>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8002e88:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3760      	adds	r7, #96	@ 0x60
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	4000a000 	.word	0x4000a000

08002e98 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002eae:	4ba7      	ldr	r3, [pc, #668]	@ (800314c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	0091      	lsls	r1, r2, #2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed0:	041a      	lsls	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002eee:	4b97      	ldr	r3, [pc, #604]	@ (800314c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	0091      	lsls	r1, r2, #2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	430b      	orrs	r3, r1
 8002efc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f08:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f10:	041a      	lsls	r2, r3, #16
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	4413      	add	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002f30:	4b86      	ldr	r3, [pc, #536]	@ (800314c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	0091      	lsls	r1, r2, #2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002f4a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	041a      	lsls	r2, r3, #16
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f78:	4b74      	ldr	r3, [pc, #464]	@ (800314c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	0091      	lsls	r1, r2, #2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	430b      	orrs	r3, r1
 8002f86:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f92:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9a:	041a      	lsls	r2, r3, #16
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002fae:	fb02 f303 	mul.w	r3, r2, r3
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002fc0:	4b62      	ldr	r3, [pc, #392]	@ (800314c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	0091      	lsls	r1, r2, #2
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8002fec:	4b57      	ldr	r3, [pc, #348]	@ (800314c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	0091      	lsls	r1, r2, #2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003006:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	041a      	lsls	r2, r3, #16
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	4413      	add	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800302e:	4b47      	ldr	r3, [pc, #284]	@ (800314c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003030:	4013      	ands	r3, r2
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	0091      	lsls	r1, r2, #2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	430b      	orrs	r3, r1
 800303c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003048:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003064:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800306c:	061a      	lsls	r2, r3, #24
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800307c:	4b34      	ldr	r3, [pc, #208]	@ (8003150 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800307e:	4413      	add	r3, r2
 8003080:	009a      	lsls	r2, r3, #2
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	441a      	add	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	441a      	add	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80030b8:	441a      	add	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80030d0:	441a      	add	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80030e8:	441a      	add	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	441a      	add	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003134:	441a      	add	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003142:	4a04      	ldr	r2, [pc, #16]	@ (8003154 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d915      	bls.n	8003174 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003148:	e006      	b.n	8003158 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800314a:	bf00      	nop
 800314c:	ffff0003 	.word	0xffff0003
 8003150:	10002b00 	.word	0x10002b00
 8003154:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2203      	movs	r2, #3
 800316c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e010      	b.n	8003196 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	e005      	b.n	8003188 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3304      	adds	r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d3f3      	bcc.n	800317c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop

080031a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	@ 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031b2:	4b89      	ldr	r3, [pc, #548]	@ (80033d8 <HAL_GPIO_Init+0x234>)
 80031b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031b6:	e194      	b.n	80034e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	2101      	movs	r1, #1
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8186 	beq.w	80034dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d005      	beq.n	80031e8 <HAL_GPIO_Init+0x44>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d130      	bne.n	800324a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	2203      	movs	r2, #3
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800321e:	2201      	movs	r2, #1
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	f003 0201 	and.w	r2, r3, #1
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b03      	cmp	r3, #3
 8003254:	d017      	beq.n	8003286 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	2203      	movs	r2, #3
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4313      	orrs	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d123      	bne.n	80032da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	08da      	lsrs	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3208      	adds	r2, #8
 800329a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	220f      	movs	r2, #15
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	08da      	lsrs	r2, r3, #3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3208      	adds	r2, #8
 80032d4:	69b9      	ldr	r1, [r7, #24]
 80032d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	2203      	movs	r2, #3
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	4013      	ands	r3, r2
 80032f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0203 	and.w	r2, r3, #3
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80e0 	beq.w	80034dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331c:	4b2f      	ldr	r3, [pc, #188]	@ (80033dc <HAL_GPIO_Init+0x238>)
 800331e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003322:	4a2e      	ldr	r2, [pc, #184]	@ (80033dc <HAL_GPIO_Init+0x238>)
 8003324:	f043 0302 	orr.w	r3, r3, #2
 8003328:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800332c:	4b2b      	ldr	r3, [pc, #172]	@ (80033dc <HAL_GPIO_Init+0x238>)
 800332e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800333a:	4a29      	ldr	r2, [pc, #164]	@ (80033e0 <HAL_GPIO_Init+0x23c>)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	3302      	adds	r3, #2
 8003342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a20      	ldr	r2, [pc, #128]	@ (80033e4 <HAL_GPIO_Init+0x240>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d052      	beq.n	800340c <HAL_GPIO_Init+0x268>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a1f      	ldr	r2, [pc, #124]	@ (80033e8 <HAL_GPIO_Init+0x244>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_GPIO_Init+0x22e>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1e      	ldr	r2, [pc, #120]	@ (80033ec <HAL_GPIO_Init+0x248>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02b      	beq.n	80033ce <HAL_GPIO_Init+0x22a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1d      	ldr	r2, [pc, #116]	@ (80033f0 <HAL_GPIO_Init+0x24c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d025      	beq.n	80033ca <HAL_GPIO_Init+0x226>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1c      	ldr	r2, [pc, #112]	@ (80033f4 <HAL_GPIO_Init+0x250>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <HAL_GPIO_Init+0x222>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1b      	ldr	r2, [pc, #108]	@ (80033f8 <HAL_GPIO_Init+0x254>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x21e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a1a      	ldr	r2, [pc, #104]	@ (80033fc <HAL_GPIO_Init+0x258>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x21a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a19      	ldr	r2, [pc, #100]	@ (8003400 <HAL_GPIO_Init+0x25c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x216>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a18      	ldr	r2, [pc, #96]	@ (8003404 <HAL_GPIO_Init+0x260>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x212>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a17      	ldr	r2, [pc, #92]	@ (8003408 <HAL_GPIO_Init+0x264>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x20e>
 80033ae:	2309      	movs	r3, #9
 80033b0:	e02d      	b.n	800340e <HAL_GPIO_Init+0x26a>
 80033b2:	230a      	movs	r3, #10
 80033b4:	e02b      	b.n	800340e <HAL_GPIO_Init+0x26a>
 80033b6:	2308      	movs	r3, #8
 80033b8:	e029      	b.n	800340e <HAL_GPIO_Init+0x26a>
 80033ba:	2307      	movs	r3, #7
 80033bc:	e027      	b.n	800340e <HAL_GPIO_Init+0x26a>
 80033be:	2306      	movs	r3, #6
 80033c0:	e025      	b.n	800340e <HAL_GPIO_Init+0x26a>
 80033c2:	2305      	movs	r3, #5
 80033c4:	e023      	b.n	800340e <HAL_GPIO_Init+0x26a>
 80033c6:	2304      	movs	r3, #4
 80033c8:	e021      	b.n	800340e <HAL_GPIO_Init+0x26a>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e01f      	b.n	800340e <HAL_GPIO_Init+0x26a>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e01d      	b.n	800340e <HAL_GPIO_Init+0x26a>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e01b      	b.n	800340e <HAL_GPIO_Init+0x26a>
 80033d6:	bf00      	nop
 80033d8:	58000080 	.word	0x58000080
 80033dc:	58024400 	.word	0x58024400
 80033e0:	58000400 	.word	0x58000400
 80033e4:	58020000 	.word	0x58020000
 80033e8:	58020400 	.word	0x58020400
 80033ec:	58020800 	.word	0x58020800
 80033f0:	58020c00 	.word	0x58020c00
 80033f4:	58021000 	.word	0x58021000
 80033f8:	58021400 	.word	0x58021400
 80033fc:	58021800 	.word	0x58021800
 8003400:	58021c00 	.word	0x58021c00
 8003404:	58022000 	.word	0x58022000
 8003408:	58022400 	.word	0x58022400
 800340c:	2300      	movs	r3, #0
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	f002 0203 	and.w	r2, r2, #3
 8003414:	0092      	lsls	r2, r2, #2
 8003416:	4093      	lsls	r3, r2
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800341e:	4938      	ldr	r1, [pc, #224]	@ (8003500 <HAL_GPIO_Init+0x35c>)
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	3302      	adds	r3, #2
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800342c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003452:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800345a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003480:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4013      	ands	r3, r2
 80034c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	3301      	adds	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f ae63 	bne.w	80031b8 <HAL_GPIO_Init+0x14>
  }
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	3724      	adds	r7, #36	@ 0x24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	58000400 	.word	0x58000400

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003520:	e003      	b.n	800352a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	041a      	lsls	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	619a      	str	r2, [r3, #24]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e08b      	b.n	8003662 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d106      	bne.n	8003564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fd ffaa 	bl	80014b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2224      	movs	r2, #36	@ 0x24
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0201 	bic.w	r2, r2, #1
 800357a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003588:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003598:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d107      	bne.n	80035b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	e006      	b.n	80035c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d108      	bne.n	80035da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	e007      	b.n	80035ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6859      	ldr	r1, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b1d      	ldr	r3, [pc, #116]	@ (800366c <HAL_I2C_Init+0x134>)
 80035f6:	430b      	orrs	r3, r1
 80035f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003608:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69d9      	ldr	r1, [r3, #28]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	02008000 	.word	0x02008000

08003670 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b20      	cmp	r3, #32
 8003684:	d138      	bne.n	80036f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003690:	2302      	movs	r3, #2
 8003692:	e032      	b.n	80036fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	@ 0x24
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6819      	ldr	r1, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003706:	b480      	push	{r7}
 8003708:	b085      	sub	sp, #20
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b20      	cmp	r3, #32
 800371a:	d139      	bne.n	8003790 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003726:	2302      	movs	r3, #2
 8003728:	e033      	b.n	8003792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2224      	movs	r2, #36	@ 0x24
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003758:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	021b      	lsls	r3, r3, #8
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80037a8:	4b19      	ldr	r3, [pc, #100]	@ (8003810 <HAL_PWREx_ConfigSupply+0x70>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d00a      	beq.n	80037ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80037b4:	4b16      	ldr	r3, [pc, #88]	@ (8003810 <HAL_PWREx_ConfigSupply+0x70>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e01f      	b.n	8003806 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e01d      	b.n	8003806 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037ca:	4b11      	ldr	r3, [pc, #68]	@ (8003810 <HAL_PWREx_ConfigSupply+0x70>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f023 0207 	bic.w	r2, r3, #7
 80037d2:	490f      	ldr	r1, [pc, #60]	@ (8003810 <HAL_PWREx_ConfigSupply+0x70>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037da:	f7fe fff3 	bl	80027c4 <HAL_GetTick>
 80037de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037e0:	e009      	b.n	80037f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037e2:	f7fe ffef 	bl	80027c4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037f0:	d901      	bls.n	80037f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e007      	b.n	8003806 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037f6:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <HAL_PWREx_ConfigSupply+0x70>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003802:	d1ee      	bne.n	80037e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	58024800 	.word	0x58024800

08003814 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08c      	sub	sp, #48	@ 0x30
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f000 bc1f 	b.w	8004066 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80b3 	beq.w	800399c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003836:	4b95      	ldr	r3, [pc, #596]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800383e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003840:	4b92      	ldr	r3, [pc, #584]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003844:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003848:	2b10      	cmp	r3, #16
 800384a:	d007      	beq.n	800385c <HAL_RCC_OscConfig+0x48>
 800384c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384e:	2b18      	cmp	r3, #24
 8003850:	d112      	bne.n	8003878 <HAL_RCC_OscConfig+0x64>
 8003852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d10d      	bne.n	8003878 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385c:	4b8b      	ldr	r3, [pc, #556]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8098 	beq.w	800399a <HAL_RCC_OscConfig+0x186>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 8093 	bne.w	800399a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e3f6      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003880:	d106      	bne.n	8003890 <HAL_RCC_OscConfig+0x7c>
 8003882:	4b82      	ldr	r3, [pc, #520]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a81      	ldr	r2, [pc, #516]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e058      	b.n	8003942 <HAL_RCC_OscConfig+0x12e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d112      	bne.n	80038be <HAL_RCC_OscConfig+0xaa>
 8003898:	4b7c      	ldr	r3, [pc, #496]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a7b      	ldr	r2, [pc, #492]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 800389e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b79      	ldr	r3, [pc, #484]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a78      	ldr	r2, [pc, #480]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038aa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b76      	ldr	r3, [pc, #472]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a75      	ldr	r2, [pc, #468]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	e041      	b.n	8003942 <HAL_RCC_OscConfig+0x12e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038c6:	d112      	bne.n	80038ee <HAL_RCC_OscConfig+0xda>
 80038c8:	4b70      	ldr	r3, [pc, #448]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a6f      	ldr	r2, [pc, #444]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b6d      	ldr	r3, [pc, #436]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a6c      	ldr	r2, [pc, #432]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038da:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a69      	ldr	r2, [pc, #420]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038ea:	6013      	str	r3, [r2, #0]
 80038ec:	e029      	b.n	8003942 <HAL_RCC_OscConfig+0x12e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80038f6:	d112      	bne.n	800391e <HAL_RCC_OscConfig+0x10a>
 80038f8:	4b64      	ldr	r3, [pc, #400]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a63      	ldr	r2, [pc, #396]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80038fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003902:	6013      	str	r3, [r2, #0]
 8003904:	4b61      	ldr	r3, [pc, #388]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a60      	ldr	r2, [pc, #384]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 800390a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b5e      	ldr	r3, [pc, #376]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a5d      	ldr	r2, [pc, #372]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e011      	b.n	8003942 <HAL_RCC_OscConfig+0x12e>
 800391e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5a      	ldr	r2, [pc, #360]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b58      	ldr	r3, [pc, #352]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a57      	ldr	r2, [pc, #348]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003930:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b55      	ldr	r3, [pc, #340]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a54      	ldr	r2, [pc, #336]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 800393c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003940:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d013      	beq.n	8003972 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394a:	f7fe ff3b 	bl	80027c4 <HAL_GetTick>
 800394e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003952:	f7fe ff37 	bl	80027c4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b64      	cmp	r3, #100	@ 0x64
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e380      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003964:	4b49      	ldr	r3, [pc, #292]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x13e>
 8003970:	e014      	b.n	800399c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003972:	f7fe ff27 	bl	80027c4 <HAL_GetTick>
 8003976:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800397a:	f7fe ff23 	bl	80027c4 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	@ 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e36c      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800398c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x166>
 8003998:	e000      	b.n	800399c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 808c 	beq.w	8003ac2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039aa:	4b38      	ldr	r3, [pc, #224]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039b4:	4b35      	ldr	r3, [pc, #212]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <HAL_RCC_OscConfig+0x1bc>
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	2b18      	cmp	r3, #24
 80039c4:	d137      	bne.n	8003a36 <HAL_RCC_OscConfig+0x222>
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d132      	bne.n	8003a36 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_OscConfig+0x1d4>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e33e      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039e8:	4b28      	ldr	r3, [pc, #160]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 0219 	bic.w	r2, r3, #25
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4925      	ldr	r1, [pc, #148]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fa:	f7fe fee3 	bl	80027c4 <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a02:	f7fe fedf 	bl	80027c4 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e328      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a14:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a20:	4b1a      	ldr	r3, [pc, #104]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	4917      	ldr	r1, [pc, #92]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a34:	e045      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d028      	beq.n	8003a90 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a3e:	4b13      	ldr	r3, [pc, #76]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0219 	bic.w	r2, r3, #25
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4910      	ldr	r1, [pc, #64]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a50:	f7fe feb8 	bl	80027c4 <HAL_GetTick>
 8003a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a58:	f7fe feb4 	bl	80027c4 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e2fd      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a6a:	4b08      	ldr	r3, [pc, #32]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a76:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	061b      	lsls	r3, r3, #24
 8003a84:	4901      	ldr	r1, [pc, #4]	@ (8003a8c <HAL_RCC_OscConfig+0x278>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
 8003a8a:	e01a      	b.n	8003ac2 <HAL_RCC_OscConfig+0x2ae>
 8003a8c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a90:	4b97      	ldr	r3, [pc, #604]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a96      	ldr	r2, [pc, #600]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fe92 	bl	80027c4 <HAL_GetTick>
 8003aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aa4:	f7fe fe8e 	bl	80027c4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e2d7      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ab6:	4b8e      	ldr	r3, [pc, #568]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d06a      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ace:	4b88      	ldr	r3, [pc, #544]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ad6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ad8:	4b85      	ldr	r3, [pc, #532]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d007      	beq.n	8003af4 <HAL_RCC_OscConfig+0x2e0>
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b18      	cmp	r3, #24
 8003ae8:	d11b      	bne.n	8003b22 <HAL_RCC_OscConfig+0x30e>
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d116      	bne.n	8003b22 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003af4:	4b7e      	ldr	r3, [pc, #504]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_OscConfig+0x2f8>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	2b80      	cmp	r3, #128	@ 0x80
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e2ac      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b0c:	4b78      	ldr	r3, [pc, #480]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	061b      	lsls	r3, r3, #24
 8003b1a:	4975      	ldr	r1, [pc, #468]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b20:	e040      	b.n	8003ba4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d023      	beq.n	8003b72 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b2a:	4b71      	ldr	r3, [pc, #452]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a70      	ldr	r2, [pc, #448]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fe fe45 	bl	80027c4 <HAL_GetTick>
 8003b3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b3e:	f7fe fe41 	bl	80027c4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e28a      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b50:	4b67      	ldr	r3, [pc, #412]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b5c:	4b64      	ldr	r3, [pc, #400]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	4961      	ldr	r1, [pc, #388]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60cb      	str	r3, [r1, #12]
 8003b70:	e018      	b.n	8003ba4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b72:	4b5f      	ldr	r3, [pc, #380]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5e      	ldr	r2, [pc, #376]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7fe fe21 	bl	80027c4 <HAL_GetTick>
 8003b82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b86:	f7fe fe1d 	bl	80027c4 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e266      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b98:	4b55      	ldr	r3, [pc, #340]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d036      	beq.n	8003c1e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d019      	beq.n	8003bec <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bb8:	4b4d      	ldr	r3, [pc, #308]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fe fdfe 	bl	80027c4 <HAL_GetTick>
 8003bc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fe fdfa 	bl	80027c4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e243      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bde:	4b44      	ldr	r3, [pc, #272]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x3b8>
 8003bea:	e018      	b.n	8003c1e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bec:	4b40      	ldr	r3, [pc, #256]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf8:	f7fe fde4 	bl	80027c4 <HAL_GetTick>
 8003bfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c00:	f7fe fde0 	bl	80027c4 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e229      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c12:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f0      	bne.n	8003c00 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d036      	beq.n	8003c98 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d019      	beq.n	8003c66 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c32:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2e      	ldr	r2, [pc, #184]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003c38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c3e:	f7fe fdc1 	bl	80027c4 <HAL_GetTick>
 8003c42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c46:	f7fe fdbd 	bl	80027c4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e206      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c58:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x432>
 8003c64:	e018      	b.n	8003c98 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c66:	4b22      	ldr	r3, [pc, #136]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a21      	ldr	r2, [pc, #132]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003c6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c72:	f7fe fda7 	bl	80027c4 <HAL_GetTick>
 8003c76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c7a:	f7fe fda3 	bl	80027c4 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1ec      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c8c:	4b18      	ldr	r3, [pc, #96]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80af 	beq.w	8003e04 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ca6:	4b13      	ldr	r3, [pc, #76]	@ (8003cf4 <HAL_RCC_OscConfig+0x4e0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a12      	ldr	r2, [pc, #72]	@ (8003cf4 <HAL_RCC_OscConfig+0x4e0>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cb2:	f7fe fd87 	bl	80027c4 <HAL_GetTick>
 8003cb6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cba:	f7fe fd83 	bl	80027c4 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b64      	cmp	r3, #100	@ 0x64
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e1cc      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ccc:	4b09      	ldr	r3, [pc, #36]	@ (8003cf4 <HAL_RCC_OscConfig+0x4e0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d10b      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x4e4>
 8003ce0:	4b03      	ldr	r3, [pc, #12]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce4:	4a02      	ldr	r2, [pc, #8]	@ (8003cf0 <HAL_RCC_OscConfig+0x4dc>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cec:	e05b      	b.n	8003da6 <HAL_RCC_OscConfig+0x592>
 8003cee:	bf00      	nop
 8003cf0:	58024400 	.word	0x58024400
 8003cf4:	58024800 	.word	0x58024800
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d112      	bne.n	8003d26 <HAL_RCC_OscConfig+0x512>
 8003d00:	4b9d      	ldr	r3, [pc, #628]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d04:	4a9c      	ldr	r2, [pc, #624]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d0c:	4b9a      	ldr	r3, [pc, #616]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d10:	4a99      	ldr	r2, [pc, #612]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d18:	4b97      	ldr	r3, [pc, #604]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d1c:	4a96      	ldr	r2, [pc, #600]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d1e:	f023 0304 	bic.w	r3, r3, #4
 8003d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d24:	e03f      	b.n	8003da6 <HAL_RCC_OscConfig+0x592>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b05      	cmp	r3, #5
 8003d2c:	d112      	bne.n	8003d54 <HAL_RCC_OscConfig+0x540>
 8003d2e:	4b92      	ldr	r3, [pc, #584]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	4a91      	ldr	r2, [pc, #580]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3a:	4b8f      	ldr	r3, [pc, #572]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3e:	4a8e      	ldr	r2, [pc, #568]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d46:	4b8c      	ldr	r3, [pc, #560]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	4a8b      	ldr	r2, [pc, #556]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d52:	e028      	b.n	8003da6 <HAL_RCC_OscConfig+0x592>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b85      	cmp	r3, #133	@ 0x85
 8003d5a:	d112      	bne.n	8003d82 <HAL_RCC_OscConfig+0x56e>
 8003d5c:	4b86      	ldr	r3, [pc, #536]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d60:	4a85      	ldr	r2, [pc, #532]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d68:	4b83      	ldr	r3, [pc, #524]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6c:	4a82      	ldr	r2, [pc, #520]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d74:	4b80      	ldr	r3, [pc, #512]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d78:	4a7f      	ldr	r2, [pc, #508]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d80:	e011      	b.n	8003da6 <HAL_RCC_OscConfig+0x592>
 8003d82:	4b7d      	ldr	r3, [pc, #500]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	4a7c      	ldr	r2, [pc, #496]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d88:	f023 0301 	bic.w	r3, r3, #1
 8003d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	4a79      	ldr	r2, [pc, #484]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d94:	f023 0304 	bic.w	r3, r3, #4
 8003d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9a:	4b77      	ldr	r3, [pc, #476]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9e:	4a76      	ldr	r2, [pc, #472]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003da4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d015      	beq.n	8003dda <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dae:	f7fe fd09 	bl	80027c4 <HAL_GetTick>
 8003db2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db6:	f7fe fd05 	bl	80027c4 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e14c      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0ee      	beq.n	8003db6 <HAL_RCC_OscConfig+0x5a2>
 8003dd8:	e014      	b.n	8003e04 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dda:	f7fe fcf3 	bl	80027c4 <HAL_GetTick>
 8003dde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003de0:	e00a      	b.n	8003df8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de2:	f7fe fcef 	bl	80027c4 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e136      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003df8:	4b5f      	ldr	r3, [pc, #380]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ee      	bne.n	8003de2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 812b 	beq.w	8004064 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e16:	2b18      	cmp	r3, #24
 8003e18:	f000 80bb 	beq.w	8003f92 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	f040 8095 	bne.w	8003f50 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e26:	4b54      	ldr	r3, [pc, #336]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a53      	ldr	r2, [pc, #332]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003e2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fe fcc7 	bl	80027c4 <HAL_GetTick>
 8003e36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3a:	f7fe fcc3 	bl	80027c4 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e10c      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f0      	bne.n	8003e3a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e58:	4b47      	ldr	r3, [pc, #284]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003e5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e5c:	4b47      	ldr	r3, [pc, #284]	@ (8003f7c <HAL_RCC_OscConfig+0x768>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e68:	0112      	lsls	r2, r2, #4
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	4942      	ldr	r1, [pc, #264]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e76:	3b01      	subs	r3, #1
 8003e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e80:	3b01      	subs	r3, #1
 8003e82:	025b      	lsls	r3, r3, #9
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	041b      	lsls	r3, r3, #16
 8003e90:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	061b      	lsls	r3, r3, #24
 8003e9e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ea2:	4935      	ldr	r1, [pc, #212]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ea8:	4b33      	ldr	r3, [pc, #204]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eac:	4a32      	ldr	r2, [pc, #200]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003eb4:	4b30      	ldr	r3, [pc, #192]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003eb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eb8:	4b31      	ldr	r3, [pc, #196]	@ (8003f80 <HAL_RCC_OscConfig+0x76c>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ec0:	00d2      	lsls	r2, r2, #3
 8003ec2:	492d      	ldr	r1, [pc, #180]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	f023 020c 	bic.w	r2, r3, #12
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed4:	4928      	ldr	r1, [pc, #160]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003eda:	4b27      	ldr	r3, [pc, #156]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	f023 0202 	bic.w	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	4924      	ldr	r1, [pc, #144]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003eec:	4b22      	ldr	r3, [pc, #136]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	4a21      	ldr	r2, [pc, #132]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	4a1e      	ldr	r2, [pc, #120]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003efe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f04:	4b1c      	ldr	r3, [pc, #112]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	4a1b      	ldr	r2, [pc, #108]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003f0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f10:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	4a18      	ldr	r2, [pc, #96]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f1c:	4b16      	ldr	r3, [pc, #88]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fe fc4c 	bl	80027c4 <HAL_GetTick>
 8003f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fe fc48 	bl	80027c4 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e091      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCC_OscConfig+0x71c>
 8003f4e:	e089      	b.n	8004064 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f50:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a08      	ldr	r2, [pc, #32]	@ (8003f78 <HAL_RCC_OscConfig+0x764>)
 8003f56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe fc32 	bl	80027c4 <HAL_GetTick>
 8003f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f62:	e00f      	b.n	8003f84 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe fc2e 	bl	80027c4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d908      	bls.n	8003f84 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e077      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
 8003f76:	bf00      	nop
 8003f78:	58024400 	.word	0x58024400
 8003f7c:	fffffc0c 	.word	0xfffffc0c
 8003f80:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f84:	4b3a      	ldr	r3, [pc, #232]	@ (8004070 <HAL_RCC_OscConfig+0x85c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e9      	bne.n	8003f64 <HAL_RCC_OscConfig+0x750>
 8003f90:	e068      	b.n	8004064 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f92:	4b37      	ldr	r3, [pc, #220]	@ (8004070 <HAL_RCC_OscConfig+0x85c>)
 8003f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f96:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f98:	4b35      	ldr	r3, [pc, #212]	@ (8004070 <HAL_RCC_OscConfig+0x85c>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d031      	beq.n	800400a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f003 0203 	and.w	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d12a      	bne.n	800400a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d122      	bne.n	800400a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d11a      	bne.n	800400a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	0a5b      	lsrs	r3, r3, #9
 8003fd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d111      	bne.n	800400a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
 8003fea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d108      	bne.n	800400a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	0e1b      	lsrs	r3, r3, #24
 8003ffc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004006:	429a      	cmp	r2, r3
 8004008:	d001      	beq.n	800400e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e02b      	b.n	8004066 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800400e:	4b18      	ldr	r3, [pc, #96]	@ (8004070 <HAL_RCC_OscConfig+0x85c>)
 8004010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004012:	08db      	lsrs	r3, r3, #3
 8004014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004018:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	429a      	cmp	r2, r3
 8004022:	d01f      	beq.n	8004064 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004024:	4b12      	ldr	r3, [pc, #72]	@ (8004070 <HAL_RCC_OscConfig+0x85c>)
 8004026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004028:	4a11      	ldr	r2, [pc, #68]	@ (8004070 <HAL_RCC_OscConfig+0x85c>)
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004030:	f7fe fbc8 	bl	80027c4 <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004036:	bf00      	nop
 8004038:	f7fe fbc4 	bl	80027c4 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	4293      	cmp	r3, r2
 8004042:	d0f9      	beq.n	8004038 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004044:	4b0a      	ldr	r3, [pc, #40]	@ (8004070 <HAL_RCC_OscConfig+0x85c>)
 8004046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004048:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <HAL_RCC_OscConfig+0x860>)
 800404a:	4013      	ands	r3, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004050:	00d2      	lsls	r2, r2, #3
 8004052:	4907      	ldr	r1, [pc, #28]	@ (8004070 <HAL_RCC_OscConfig+0x85c>)
 8004054:	4313      	orrs	r3, r2
 8004056:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <HAL_RCC_OscConfig+0x85c>)
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	4a04      	ldr	r2, [pc, #16]	@ (8004070 <HAL_RCC_OscConfig+0x85c>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3730      	adds	r7, #48	@ 0x30
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	58024400 	.word	0x58024400
 8004074:	ffff0007 	.word	0xffff0007

08004078 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e19c      	b.n	80043c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800408c:	4b8a      	ldr	r3, [pc, #552]	@ (80042b8 <HAL_RCC_ClockConfig+0x240>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d910      	bls.n	80040bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b87      	ldr	r3, [pc, #540]	@ (80042b8 <HAL_RCC_ClockConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 020f 	bic.w	r2, r3, #15
 80040a2:	4985      	ldr	r1, [pc, #532]	@ (80042b8 <HAL_RCC_ClockConfig+0x240>)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b83      	ldr	r3, [pc, #524]	@ (80042b8 <HAL_RCC_ClockConfig+0x240>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e184      	b.n	80043c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d010      	beq.n	80040ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	4b7b      	ldr	r3, [pc, #492]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d908      	bls.n	80040ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040d8:	4b78      	ldr	r3, [pc, #480]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	4975      	ldr	r1, [pc, #468]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d010      	beq.n	8004118 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	4b70      	ldr	r3, [pc, #448]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004102:	429a      	cmp	r2, r3
 8004104:	d908      	bls.n	8004118 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004106:	4b6d      	ldr	r3, [pc, #436]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	496a      	ldr	r1, [pc, #424]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004114:	4313      	orrs	r3, r2
 8004116:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b00      	cmp	r3, #0
 8004122:	d010      	beq.n	8004146 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	4b64      	ldr	r3, [pc, #400]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004130:	429a      	cmp	r2, r3
 8004132:	d908      	bls.n	8004146 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004134:	4b61      	ldr	r3, [pc, #388]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	495e      	ldr	r1, [pc, #376]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004142:	4313      	orrs	r3, r2
 8004144:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d010      	beq.n	8004174 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69da      	ldr	r2, [r3, #28]
 8004156:	4b59      	ldr	r3, [pc, #356]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800415e:	429a      	cmp	r2, r3
 8004160:	d908      	bls.n	8004174 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004162:	4b56      	ldr	r3, [pc, #344]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	4953      	ldr	r1, [pc, #332]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004170:	4313      	orrs	r3, r2
 8004172:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d010      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	4b4d      	ldr	r3, [pc, #308]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	429a      	cmp	r2, r3
 800418e:	d908      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004190:	4b4a      	ldr	r3, [pc, #296]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f023 020f 	bic.w	r2, r3, #15
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4947      	ldr	r1, [pc, #284]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d055      	beq.n	800425a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041ae:	4b43      	ldr	r3, [pc, #268]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4940      	ldr	r1, [pc, #256]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041c8:	4b3c      	ldr	r3, [pc, #240]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d121      	bne.n	8004218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0f6      	b.n	80043c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041e0:	4b36      	ldr	r3, [pc, #216]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d115      	bne.n	8004218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0ea      	b.n	80043c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041f8:	4b30      	ldr	r3, [pc, #192]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0de      	b.n	80043c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004208:	4b2c      	ldr	r3, [pc, #176]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0d6      	b.n	80043c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004218:	4b28      	ldr	r3, [pc, #160]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f023 0207 	bic.w	r2, r3, #7
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4925      	ldr	r1, [pc, #148]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004226:	4313      	orrs	r3, r2
 8004228:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422a:	f7fe facb 	bl	80027c4 <HAL_GetTick>
 800422e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004230:	e00a      	b.n	8004248 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004232:	f7fe fac7 	bl	80027c4 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0be      	b.n	80043c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004248:	4b1c      	ldr	r3, [pc, #112]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	429a      	cmp	r2, r3
 8004258:	d1eb      	bne.n	8004232 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d010      	beq.n	8004288 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	4b14      	ldr	r3, [pc, #80]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	429a      	cmp	r2, r3
 8004274:	d208      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004276:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f023 020f 	bic.w	r2, r3, #15
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	490e      	ldr	r1, [pc, #56]	@ (80042bc <HAL_RCC_ClockConfig+0x244>)
 8004284:	4313      	orrs	r3, r2
 8004286:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004288:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <HAL_RCC_ClockConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d214      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b08      	ldr	r3, [pc, #32]	@ (80042b8 <HAL_RCC_ClockConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 020f 	bic.w	r2, r3, #15
 800429e:	4906      	ldr	r1, [pc, #24]	@ (80042b8 <HAL_RCC_ClockConfig+0x240>)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <HAL_RCC_ClockConfig+0x240>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e086      	b.n	80043c6 <HAL_RCC_ClockConfig+0x34e>
 80042b8:	52002000 	.word	0x52002000
 80042bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d010      	beq.n	80042ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	4b3f      	ldr	r3, [pc, #252]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042d8:	429a      	cmp	r2, r3
 80042da:	d208      	bcs.n	80042ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042dc:	4b3c      	ldr	r3, [pc, #240]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	4939      	ldr	r1, [pc, #228]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d010      	beq.n	800431c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	4b34      	ldr	r3, [pc, #208]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004306:	429a      	cmp	r2, r3
 8004308:	d208      	bcs.n	800431c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800430a:	4b31      	ldr	r3, [pc, #196]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	492e      	ldr	r1, [pc, #184]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 8004318:	4313      	orrs	r3, r2
 800431a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d010      	beq.n	800434a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699a      	ldr	r2, [r3, #24]
 800432c:	4b28      	ldr	r3, [pc, #160]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004334:	429a      	cmp	r2, r3
 8004336:	d208      	bcs.n	800434a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004338:	4b25      	ldr	r3, [pc, #148]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	4922      	ldr	r1, [pc, #136]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 8004346:	4313      	orrs	r3, r2
 8004348:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d010      	beq.n	8004378 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	4b1d      	ldr	r3, [pc, #116]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004362:	429a      	cmp	r2, r3
 8004364:	d208      	bcs.n	8004378 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004366:	4b1a      	ldr	r3, [pc, #104]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	4917      	ldr	r1, [pc, #92]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 8004374:	4313      	orrs	r3, r2
 8004376:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004378:	f000 f834 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 800437c:	4602      	mov	r2, r0
 800437e:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	0a1b      	lsrs	r3, r3, #8
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	4912      	ldr	r1, [pc, #72]	@ (80043d4 <HAL_RCC_ClockConfig+0x35c>)
 800438a:	5ccb      	ldrb	r3, [r1, r3]
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
 8004394:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004396:	4b0e      	ldr	r3, [pc, #56]	@ (80043d0 <HAL_RCC_ClockConfig+0x358>)
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	4a0d      	ldr	r2, [pc, #52]	@ (80043d4 <HAL_RCC_ClockConfig+0x35c>)
 80043a0:	5cd3      	ldrb	r3, [r2, r3]
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ac:	4a0a      	ldr	r2, [pc, #40]	@ (80043d8 <HAL_RCC_ClockConfig+0x360>)
 80043ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043b0:	4a0a      	ldr	r2, [pc, #40]	@ (80043dc <HAL_RCC_ClockConfig+0x364>)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043b6:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <HAL_RCC_ClockConfig+0x368>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe f9b8 	bl	8002730 <HAL_InitTick>
 80043c0:	4603      	mov	r3, r0
 80043c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	58024400 	.word	0x58024400
 80043d4:	0800dd20 	.word	0x0800dd20
 80043d8:	24000010 	.word	0x24000010
 80043dc:	2400000c 	.word	0x2400000c
 80043e0:	24000014 	.word	0x24000014

080043e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	@ 0x24
 80043e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ea:	4bb3      	ldr	r3, [pc, #716]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043f2:	2b18      	cmp	r3, #24
 80043f4:	f200 8155 	bhi.w	80046a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80043f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004400 <HAL_RCC_GetSysClockFreq+0x1c>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004465 	.word	0x08004465
 8004404:	080046a3 	.word	0x080046a3
 8004408:	080046a3 	.word	0x080046a3
 800440c:	080046a3 	.word	0x080046a3
 8004410:	080046a3 	.word	0x080046a3
 8004414:	080046a3 	.word	0x080046a3
 8004418:	080046a3 	.word	0x080046a3
 800441c:	080046a3 	.word	0x080046a3
 8004420:	0800448b 	.word	0x0800448b
 8004424:	080046a3 	.word	0x080046a3
 8004428:	080046a3 	.word	0x080046a3
 800442c:	080046a3 	.word	0x080046a3
 8004430:	080046a3 	.word	0x080046a3
 8004434:	080046a3 	.word	0x080046a3
 8004438:	080046a3 	.word	0x080046a3
 800443c:	080046a3 	.word	0x080046a3
 8004440:	08004491 	.word	0x08004491
 8004444:	080046a3 	.word	0x080046a3
 8004448:	080046a3 	.word	0x080046a3
 800444c:	080046a3 	.word	0x080046a3
 8004450:	080046a3 	.word	0x080046a3
 8004454:	080046a3 	.word	0x080046a3
 8004458:	080046a3 	.word	0x080046a3
 800445c:	080046a3 	.word	0x080046a3
 8004460:	08004497 	.word	0x08004497
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004464:	4b94      	ldr	r3, [pc, #592]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d009      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004470:	4b91      	ldr	r3, [pc, #580]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	08db      	lsrs	r3, r3, #3
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	4a90      	ldr	r2, [pc, #576]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
 8004480:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004482:	e111      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004484:	4b8d      	ldr	r3, [pc, #564]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004486:	61bb      	str	r3, [r7, #24]
      break;
 8004488:	e10e      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800448a:	4b8d      	ldr	r3, [pc, #564]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800448c:	61bb      	str	r3, [r7, #24]
      break;
 800448e:	e10b      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004490:	4b8c      	ldr	r3, [pc, #560]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004492:	61bb      	str	r3, [r7, #24]
      break;
 8004494:	e108      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004496:	4b88      	ldr	r3, [pc, #544]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044a0:	4b85      	ldr	r3, [pc, #532]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044ac:	4b82      	ldr	r3, [pc, #520]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044b6:	4b80      	ldr	r3, [pc, #512]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ba:	08db      	lsrs	r3, r3, #3
 80044bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80e1 	beq.w	800469c <HAL_RCC_GetSysClockFreq+0x2b8>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	f000 8083 	beq.w	80045e8 <HAL_RCC_GetSysClockFreq+0x204>
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f200 80a1 	bhi.w	800462c <HAL_RCC_GetSysClockFreq+0x248>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_RCC_GetSysClockFreq+0x114>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d056      	beq.n	80045a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80044f6:	e099      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044f8:	4b6f      	ldr	r3, [pc, #444]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d02d      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004504:	4b6c      	ldr	r3, [pc, #432]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	08db      	lsrs	r3, r3, #3
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	4a6b      	ldr	r2, [pc, #428]	@ (80046bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452e:	4b62      	ldr	r3, [pc, #392]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004542:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80046c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800455e:	e087      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80046cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	4b51      	ldr	r3, [pc, #324]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004582:	ed97 6a02 	vldr	s12, [r7, #8]
 8004586:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80046c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045a2:	e065      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80046d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b40      	ldr	r3, [pc, #256]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80046c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045e6:	e043      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80046d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b2f      	ldr	r3, [pc, #188]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a02 	vldr	s12, [r7, #8]
 800460e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80046c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800462a:	e021      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80046d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b1e      	ldr	r3, [pc, #120]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004652:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80046c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800466e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004670:	4b11      	ldr	r3, [pc, #68]	@ (80046b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	0a5b      	lsrs	r3, r3, #9
 8004676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800467a:	3301      	adds	r3, #1
 800467c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004688:	edd7 6a07 	vldr	s13, [r7, #28]
 800468c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004694:	ee17 3a90 	vmov	r3, s15
 8004698:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800469a:	e005      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	61bb      	str	r3, [r7, #24]
      break;
 80046a0:	e002      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046a2:	4b07      	ldr	r3, [pc, #28]	@ (80046c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046a4:	61bb      	str	r3, [r7, #24]
      break;
 80046a6:	bf00      	nop
  }

  return sysclockfreq;
 80046a8:	69bb      	ldr	r3, [r7, #24]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3724      	adds	r7, #36	@ 0x24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	58024400 	.word	0x58024400
 80046bc:	03d09000 	.word	0x03d09000
 80046c0:	003d0900 	.word	0x003d0900
 80046c4:	016e3600 	.word	0x016e3600
 80046c8:	46000000 	.word	0x46000000
 80046cc:	4c742400 	.word	0x4c742400
 80046d0:	4a742400 	.word	0x4a742400
 80046d4:	4bb71b00 	.word	0x4bb71b00

080046d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80046de:	f7ff fe81 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80046e2:	4602      	mov	r2, r0
 80046e4:	4b10      	ldr	r3, [pc, #64]	@ (8004728 <HAL_RCC_GetHCLKFreq+0x50>)
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	490f      	ldr	r1, [pc, #60]	@ (800472c <HAL_RCC_GetHCLKFreq+0x54>)
 80046f0:	5ccb      	ldrb	r3, [r1, r3]
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	fa22 f303 	lsr.w	r3, r2, r3
 80046fa:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80046fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <HAL_RCC_GetHCLKFreq+0x50>)
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	4a09      	ldr	r2, [pc, #36]	@ (800472c <HAL_RCC_GetHCLKFreq+0x54>)
 8004706:	5cd3      	ldrb	r3, [r2, r3]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	fa22 f303 	lsr.w	r3, r2, r3
 8004712:	4a07      	ldr	r2, [pc, #28]	@ (8004730 <HAL_RCC_GetHCLKFreq+0x58>)
 8004714:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004716:	4a07      	ldr	r2, [pc, #28]	@ (8004734 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800471c:	4b04      	ldr	r3, [pc, #16]	@ (8004730 <HAL_RCC_GetHCLKFreq+0x58>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	58024400 	.word	0x58024400
 800472c:	0800dd20 	.word	0x0800dd20
 8004730:	24000010 	.word	0x24000010
 8004734:	2400000c 	.word	0x2400000c

08004738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800473c:	f7ff ffcc 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 8004740:	4602      	mov	r2, r0
 8004742:	4b06      	ldr	r3, [pc, #24]	@ (800475c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	4904      	ldr	r1, [pc, #16]	@ (8004760 <HAL_RCC_GetPCLK1Freq+0x28>)
 800474e:	5ccb      	ldrb	r3, [r1, r3]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	58024400 	.word	0x58024400
 8004760:	0800dd20 	.word	0x0800dd20

08004764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004768:	f7ff ffb6 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 800476c:	4602      	mov	r2, r0
 800476e:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	4904      	ldr	r1, [pc, #16]	@ (800478c <HAL_RCC_GetPCLK2Freq+0x28>)
 800477a:	5ccb      	ldrb	r3, [r1, r3]
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}
 8004788:	58024400 	.word	0x58024400
 800478c:	0800dd20 	.word	0x0800dd20

08004790 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004794:	b0c8      	sub	sp, #288	@ 0x120
 8004796:	af00      	add	r7, sp, #0
 8004798:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800479c:	2300      	movs	r3, #0
 800479e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047a2:	2300      	movs	r3, #0
 80047a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80047b4:	2500      	movs	r5, #0
 80047b6:	ea54 0305 	orrs.w	r3, r4, r5
 80047ba:	d049      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80047bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047c6:	d02f      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047cc:	d828      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047d2:	d01a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047d8:	d822      	bhi.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047e2:	d007      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047e4:	e01c      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e6:	4ba7      	ldr	r3, [pc, #668]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	4aa6      	ldr	r2, [pc, #664]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80047ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047f2:	e01a      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80047f8:	3308      	adds	r3, #8
 80047fa:	2102      	movs	r1, #2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f001 fc43 	bl	8006088 <RCCEx_PLL2_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004808:	e00f      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800480a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800480e:	3328      	adds	r3, #40	@ 0x28
 8004810:	2102      	movs	r1, #2
 8004812:	4618      	mov	r0, r3
 8004814:	f001 fcea 	bl	80061ec <RCCEx_PLL3_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800481e:	e004      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004826:	e000      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800482a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10a      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004832:	4b94      	ldr	r3, [pc, #592]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004836:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800483a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800483e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004840:	4a90      	ldr	r2, [pc, #576]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004842:	430b      	orrs	r3, r1
 8004844:	6513      	str	r3, [r2, #80]	@ 0x50
 8004846:	e003      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004848:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800484c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800485c:	f04f 0900 	mov.w	r9, #0
 8004860:	ea58 0309 	orrs.w	r3, r8, r9
 8004864:	d047      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004866:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	2b04      	cmp	r3, #4
 800486e:	d82a      	bhi.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004870:	a201      	add	r2, pc, #4	@ (adr r2, 8004878 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	0800488d 	.word	0x0800488d
 800487c:	0800489b 	.word	0x0800489b
 8004880:	080048b1 	.word	0x080048b1
 8004884:	080048cf 	.word	0x080048cf
 8004888:	080048cf 	.word	0x080048cf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800488c:	4b7d      	ldr	r3, [pc, #500]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	4a7c      	ldr	r2, [pc, #496]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004898:	e01a      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800489a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800489e:	3308      	adds	r3, #8
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f001 fbf0 	bl	8006088 <RCCEx_PLL2_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048ae:	e00f      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048b4:	3328      	adds	r3, #40	@ 0x28
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fc97 	bl	80061ec <RCCEx_PLL3_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048c4:	e004      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80048cc:	e000      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80048ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048dc:	f023 0107 	bic.w	r1, r3, #7
 80048e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e6:	4a67      	ldr	r2, [pc, #412]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80048ec:	e003      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80048f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80048f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004902:	f04f 0b00 	mov.w	fp, #0
 8004906:	ea5a 030b 	orrs.w	r3, sl, fp
 800490a:	d054      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800490c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004912:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004916:	d036      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004918:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800491c:	d82f      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800491e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004922:	d032      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004928:	d829      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800492a:	2bc0      	cmp	r3, #192	@ 0xc0
 800492c:	d02f      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800492e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004930:	d825      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004932:	2b80      	cmp	r3, #128	@ 0x80
 8004934:	d018      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8004936:	2b80      	cmp	r3, #128	@ 0x80
 8004938:	d821      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800493e:	2b40      	cmp	r3, #64	@ 0x40
 8004940:	d007      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8004942:	e01c      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004944:	4b4f      	ldr	r3, [pc, #316]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	4a4e      	ldr	r2, [pc, #312]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800494a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800494e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004950:	e01e      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004956:	3308      	adds	r3, #8
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f001 fb94 	bl	8006088 <RCCEx_PLL2_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8004966:	e013      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800496c:	3328      	adds	r3, #40	@ 0x28
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fc3b 	bl	80061ec <RCCEx_PLL3_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800497c:	e008      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004984:	e004      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8004986:	bf00      	nop
 8004988:	e002      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800498e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004990:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004998:	4b3a      	ldr	r3, [pc, #232]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800499a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800499c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80049a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a6:	4a37      	ldr	r2, [pc, #220]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049a8:	430b      	orrs	r3, r1
 80049aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80049b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80049b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80049c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80049cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80049d0:	460b      	mov	r3, r1
 80049d2:	4313      	orrs	r3, r2
 80049d4:	d05c      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80049d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80049e0:	d03b      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80049e2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80049e6:	d834      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80049e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049ec:	d037      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80049ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049f2:	d82e      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80049f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80049f8:	d033      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80049fa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80049fe:	d828      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a04:	d01a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a0a:	d822      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a14:	d007      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004a16:	e01c      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a18:	4b1a      	ldr	r3, [pc, #104]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	4a19      	ldr	r2, [pc, #100]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004a24:	e01e      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 fb2a 	bl	8006088 <RCCEx_PLL2_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004a3a:	e013      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a40:	3328      	adds	r3, #40	@ 0x28
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 fbd1 	bl	80061ec <RCCEx_PLL3_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8004a50:	e008      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004a58:	e004      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004a5a:	bf00      	nop
 8004a5c:	e002      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004a5e:	bf00      	nop
 8004a60:	e000      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8004a62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10d      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a70:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a7a:	4a02      	ldr	r2, [pc, #8]	@ (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8004a82:	bf00      	nop
 8004a84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004a8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004aa6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	d03a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	2b30      	cmp	r3, #48	@ 0x30
 8004ab8:	d01f      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004aba:	2b30      	cmp	r3, #48	@ 0x30
 8004abc:	d819      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d00c      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d815      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d019      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d111      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ace:	4bae      	ldr	r3, [pc, #696]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad2:	4aad      	ldr	r2, [pc, #692]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004ada:	e011      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 facf 	bl	8006088 <RCCEx_PLL2_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004af0:	e006      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004af8:	e002      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8004afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b08:	4b9f      	ldr	r3, [pc, #636]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b16:	4a9c      	ldr	r2, [pc, #624]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b1c:	e003      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004b22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004b32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b36:	2300      	movs	r3, #0
 8004b38:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4313      	orrs	r3, r2
 8004b44:	d051      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b50:	d035      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b56:	d82e      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004b58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b5c:	d031      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8004b5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b62:	d828      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b68:	d01a      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004b6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b6e:	d822      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b78:	d007      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8004b7a:	e01c      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b7c:	4b82      	ldr	r3, [pc, #520]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	4a81      	ldr	r2, [pc, #516]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b88:	e01c      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004b8e:	3308      	adds	r3, #8
 8004b90:	2100      	movs	r1, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	f001 fa78 	bl	8006088 <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b9e:	e011      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ba4:	3328      	adds	r3, #40	@ 0x28
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 fb1f 	bl	80061ec <RCCEx_PLL3_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bb4:	e006      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004bcc:	4b6e      	ldr	r3, [pc, #440]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bda:	4a6b      	ldr	r2, [pc, #428]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	6513      	str	r3, [r2, #80]	@ 0x50
 8004be0:	e003      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004be6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004bf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c00:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c04:	460b      	mov	r3, r1
 8004c06:	4313      	orrs	r3, r2
 8004c08:	d053      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c14:	d033      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004c16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c1a:	d82c      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c20:	d02f      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004c22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c26:	d826      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c2c:	d02b      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004c2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c32:	d820      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c38:	d012      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004c3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c3e:	d81a      	bhi.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d022      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c48:	d115      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c4e:	3308      	adds	r3, #8
 8004c50:	2101      	movs	r1, #1
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 fa18 	bl	8006088 <RCCEx_PLL2_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c5e:	e015      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004c64:	3328      	adds	r3, #40	@ 0x28
 8004c66:	2101      	movs	r1, #1
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 fabf 	bl	80061ec <RCCEx_PLL3_Config>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c74:	e00a      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004c7c:	e006      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004c7e:	bf00      	nop
 8004c80:	e004      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c94:	4b3c      	ldr	r3, [pc, #240]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ca2:	4a39      	ldr	r2, [pc, #228]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ca8:	e003      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004caa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004cae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cc8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	d060      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004cd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004cda:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004cde:	d039      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004ce0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8004ce4:	d832      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cea:	d035      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cf0:	d82c      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf6:	d031      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cfc:	d826      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004cfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d02:	d02d      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004d04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d08:	d820      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d0e:	d012      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d14:	d81a      	bhi.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d024      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d1e:	d115      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d24:	3308      	adds	r3, #8
 8004d26:	2101      	movs	r1, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f001 f9ad 	bl	8006088 <RCCEx_PLL2_Config>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d34:	e017      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d3a:	3328      	adds	r3, #40	@ 0x28
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 fa54 	bl	80061ec <RCCEx_PLL3_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d4a:	e00c      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004d52:	e008      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d54:	bf00      	nop
 8004d56:	e006      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d58:	bf00      	nop
 8004d5a:	e004      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d5c:	bf00      	nop
 8004d5e:	e002      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d60:	bf00      	nop
 8004d62:	e000      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10e      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d6e:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d72:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d7e:	4a02      	ldr	r2, [pc, #8]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d84:	e006      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004d86:	bf00      	nop
 8004d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004d90:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004da0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004daa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dae:	460b      	mov	r3, r1
 8004db0:	4313      	orrs	r3, r2
 8004db2:	d037      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dbe:	d00e      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004dc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dc4:	d816      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d018      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004dca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dce:	d111      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd0:	4bc4      	ldr	r3, [pc, #784]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd4:	4ac3      	ldr	r2, [pc, #780]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ddc:	e00f      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004de2:	3308      	adds	r3, #8
 8004de4:	2101      	movs	r1, #1
 8004de6:	4618      	mov	r0, r3
 8004de8:	f001 f94e 	bl	8006088 <RCCEx_PLL2_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004df2:	e004      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004dfa:	e000      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e06:	4bb7      	ldr	r3, [pc, #732]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e0a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e14:	4ab3      	ldr	r2, [pc, #716]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e16:	430b      	orrs	r3, r1
 8004e18:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e1a:	e003      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e20:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	d039      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d81c      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e91 	.word	0x08004e91
 8004e58:	08004e65 	.word	0x08004e65
 8004e5c:	08004e73 	.word	0x08004e73
 8004e60:	08004e91 	.word	0x08004e91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e64:	4b9f      	ldr	r3, [pc, #636]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	4a9e      	ldr	r2, [pc, #632]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e70:	e00f      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004e76:	3308      	adds	r3, #8
 8004e78:	2102      	movs	r1, #2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f001 f904 	bl	8006088 <RCCEx_PLL2_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e86:	e004      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004e8e:	e000      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e9a:	4b92      	ldr	r3, [pc, #584]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e9e:	f023 0103 	bic.w	r1, r3, #3
 8004ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea8:	4a8e      	ldr	r2, [pc, #568]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004eae:	e003      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004eb4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ece:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f000 8099 	beq.w	800500c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eda:	4b83      	ldr	r3, [pc, #524]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a82      	ldr	r2, [pc, #520]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ee6:	f7fd fc6d 	bl	80027c4 <HAL_GetTick>
 8004eea:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eee:	e00b      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef0:	f7fd fc68 	bl	80027c4 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b64      	cmp	r3, #100	@ 0x64
 8004efe:	d903      	bls.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8004f06:	e005      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f08:	4b77      	ldr	r3, [pc, #476]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0ed      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004f14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d173      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f1c:	4b71      	ldr	r3, [pc, #452]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f28:	4053      	eors	r3, r2
 8004f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d015      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f32:	4b6c      	ldr	r3, [pc, #432]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f3a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f3e:	4b69      	ldr	r3, [pc, #420]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f42:	4a68      	ldr	r2, [pc, #416]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f48:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f4a:	4b66      	ldr	r3, [pc, #408]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4e:	4a65      	ldr	r2, [pc, #404]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f54:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f56:	4a63      	ldr	r2, [pc, #396]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f6a:	d118      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fd fc2a 	bl	80027c4 <HAL_GetTick>
 8004f70:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f74:	e00d      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f76:	f7fd fc25 	bl	80027c4 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f80:	1ad2      	subs	r2, r2, r3
 8004f82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d903      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8004f90:	e005      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f92:	4b54      	ldr	r3, [pc, #336]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0eb      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004f9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d129      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004faa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fb6:	d10e      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fc8:	091a      	lsrs	r2, r3, #4
 8004fca:	4b48      	ldr	r3, [pc, #288]	@ (80050ec <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	4a45      	ldr	r2, [pc, #276]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6113      	str	r3, [r2, #16]
 8004fd4:	e005      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004fd6:	4b43      	ldr	r3, [pc, #268]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	4a42      	ldr	r2, [pc, #264]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fdc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004fe0:	6113      	str	r3, [r2, #16]
 8004fe2:	4b40      	ldr	r3, [pc, #256]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fe4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff8:	e008      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ffa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8004ffe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8005002:	e003      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005004:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005008:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800500c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f002 0301 	and.w	r3, r2, #1
 8005018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800501c:	2300      	movs	r3, #0
 800501e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005022:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005026:	460b      	mov	r3, r1
 8005028:	4313      	orrs	r3, r2
 800502a:	f000 8090 	beq.w	800514e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800502e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005032:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005036:	2b28      	cmp	r3, #40	@ 0x28
 8005038:	d870      	bhi.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800503a:	a201      	add	r2, pc, #4	@ (adr r2, 8005040 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800503c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005040:	08005125 	.word	0x08005125
 8005044:	0800511d 	.word	0x0800511d
 8005048:	0800511d 	.word	0x0800511d
 800504c:	0800511d 	.word	0x0800511d
 8005050:	0800511d 	.word	0x0800511d
 8005054:	0800511d 	.word	0x0800511d
 8005058:	0800511d 	.word	0x0800511d
 800505c:	0800511d 	.word	0x0800511d
 8005060:	080050f1 	.word	0x080050f1
 8005064:	0800511d 	.word	0x0800511d
 8005068:	0800511d 	.word	0x0800511d
 800506c:	0800511d 	.word	0x0800511d
 8005070:	0800511d 	.word	0x0800511d
 8005074:	0800511d 	.word	0x0800511d
 8005078:	0800511d 	.word	0x0800511d
 800507c:	0800511d 	.word	0x0800511d
 8005080:	08005107 	.word	0x08005107
 8005084:	0800511d 	.word	0x0800511d
 8005088:	0800511d 	.word	0x0800511d
 800508c:	0800511d 	.word	0x0800511d
 8005090:	0800511d 	.word	0x0800511d
 8005094:	0800511d 	.word	0x0800511d
 8005098:	0800511d 	.word	0x0800511d
 800509c:	0800511d 	.word	0x0800511d
 80050a0:	08005125 	.word	0x08005125
 80050a4:	0800511d 	.word	0x0800511d
 80050a8:	0800511d 	.word	0x0800511d
 80050ac:	0800511d 	.word	0x0800511d
 80050b0:	0800511d 	.word	0x0800511d
 80050b4:	0800511d 	.word	0x0800511d
 80050b8:	0800511d 	.word	0x0800511d
 80050bc:	0800511d 	.word	0x0800511d
 80050c0:	08005125 	.word	0x08005125
 80050c4:	0800511d 	.word	0x0800511d
 80050c8:	0800511d 	.word	0x0800511d
 80050cc:	0800511d 	.word	0x0800511d
 80050d0:	0800511d 	.word	0x0800511d
 80050d4:	0800511d 	.word	0x0800511d
 80050d8:	0800511d 	.word	0x0800511d
 80050dc:	0800511d 	.word	0x0800511d
 80050e0:	08005125 	.word	0x08005125
 80050e4:	58024400 	.word	0x58024400
 80050e8:	58024800 	.word	0x58024800
 80050ec:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050f4:	3308      	adds	r3, #8
 80050f6:	2101      	movs	r1, #1
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 ffc5 	bl	8006088 <RCCEx_PLL2_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005104:	e00f      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800510a:	3328      	adds	r3, #40	@ 0x28
 800510c:	2101      	movs	r1, #1
 800510e:	4618      	mov	r0, r3
 8005110:	f001 f86c 	bl	80061ec <RCCEx_PLL3_Config>
 8005114:	4603      	mov	r3, r0
 8005116:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800511a:	e004      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005122:	e000      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005126:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800512e:	4bc0      	ldr	r3, [pc, #768]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005132:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800513a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800513e:	4abc      	ldr	r2, [pc, #752]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005140:	430b      	orrs	r3, r1
 8005142:	6553      	str	r3, [r2, #84]	@ 0x54
 8005144:	e003      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005146:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800514a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800514e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005156:	f002 0302 	and.w	r3, r2, #2
 800515a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800515e:	2300      	movs	r3, #0
 8005160:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005164:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005168:	460b      	mov	r3, r1
 800516a:	4313      	orrs	r3, r2
 800516c:	d043      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800516e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005176:	2b05      	cmp	r3, #5
 8005178:	d824      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800517a:	a201      	add	r2, pc, #4	@ (adr r2, 8005180 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	080051cd 	.word	0x080051cd
 8005184:	08005199 	.word	0x08005199
 8005188:	080051af 	.word	0x080051af
 800518c:	080051cd 	.word	0x080051cd
 8005190:	080051cd 	.word	0x080051cd
 8005194:	080051cd 	.word	0x080051cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800519c:	3308      	adds	r3, #8
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 ff71 	bl	8006088 <RCCEx_PLL2_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051ac:	e00f      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051b2:	3328      	adds	r3, #40	@ 0x28
 80051b4:	2101      	movs	r1, #1
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 f818 	bl	80061ec <RCCEx_PLL3_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051c2:	e004      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80051ca:	e000      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80051cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10b      	bne.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80051d6:	4b96      	ldr	r3, [pc, #600]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051da:	f023 0107 	bic.w	r1, r3, #7
 80051de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e6:	4a92      	ldr	r2, [pc, #584]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80051ec:	e003      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80051f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f002 0304 	and.w	r3, r2, #4
 8005202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005206:	2300      	movs	r3, #0
 8005208:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800520c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005210:	460b      	mov	r3, r1
 8005212:	4313      	orrs	r3, r2
 8005214:	d043      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800521a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800521e:	2b05      	cmp	r3, #5
 8005220:	d824      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005275 	.word	0x08005275
 800522c:	08005241 	.word	0x08005241
 8005230:	08005257 	.word	0x08005257
 8005234:	08005275 	.word	0x08005275
 8005238:	08005275 	.word	0x08005275
 800523c:	08005275 	.word	0x08005275
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005244:	3308      	adds	r3, #8
 8005246:	2101      	movs	r1, #1
 8005248:	4618      	mov	r0, r3
 800524a:	f000 ff1d 	bl	8006088 <RCCEx_PLL2_Config>
 800524e:	4603      	mov	r3, r0
 8005250:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005254:	e00f      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800525a:	3328      	adds	r3, #40	@ 0x28
 800525c:	2101      	movs	r1, #1
 800525e:	4618      	mov	r0, r3
 8005260:	f000 ffc4 	bl	80061ec <RCCEx_PLL3_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800526a:	e004      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005272:	e000      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8005274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005276:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800527e:	4b6c      	ldr	r3, [pc, #432]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005282:	f023 0107 	bic.w	r1, r3, #7
 8005286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800528a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800528e:	4a68      	ldr	r2, [pc, #416]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005290:	430b      	orrs	r3, r1
 8005292:	6593      	str	r3, [r2, #88]	@ 0x58
 8005294:	e003      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005296:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800529a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800529e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f002 0320 	and.w	r3, r2, #32
 80052aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052ae:	2300      	movs	r3, #0
 80052b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052b8:	460b      	mov	r3, r1
 80052ba:	4313      	orrs	r3, r2
 80052bc:	d055      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80052be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052ca:	d033      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80052cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052d0:	d82c      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80052d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d6:	d02f      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052dc:	d826      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80052de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052e2:	d02b      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80052e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052e8:	d820      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80052ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052ee:	d012      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80052f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052f4:	d81a      	bhi.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d022      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80052fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052fe:	d115      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005304:	3308      	adds	r3, #8
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f000 febd 	bl	8006088 <RCCEx_PLL2_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005314:	e015      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800531a:	3328      	adds	r3, #40	@ 0x28
 800531c:	2102      	movs	r1, #2
 800531e:	4618      	mov	r0, r3
 8005320:	f000 ff64 	bl	80061ec <RCCEx_PLL3_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800532a:	e00a      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005332:	e006      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005334:	bf00      	nop
 8005336:	e004      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005338:	bf00      	nop
 800533a:	e002      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800533c:	bf00      	nop
 800533e:	e000      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8005340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005342:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10b      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800534a:	4b39      	ldr	r3, [pc, #228]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800534c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005352:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800535a:	4a35      	ldr	r2, [pc, #212]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800535c:	430b      	orrs	r3, r1
 800535e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005360:	e003      	b.n	800536a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005362:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005366:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800536a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005376:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800537a:	2300      	movs	r3, #0
 800537c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005380:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005384:	460b      	mov	r3, r1
 8005386:	4313      	orrs	r3, r2
 8005388:	d058      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800538a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800538e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005392:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005396:	d033      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005398:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800539c:	d82c      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800539e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053a2:	d02f      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80053a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053a8:	d826      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80053aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053ae:	d02b      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80053b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053b4:	d820      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80053b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ba:	d012      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80053bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053c0:	d81a      	bhi.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d022      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ca:	d115      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053d0:	3308      	adds	r3, #8
 80053d2:	2100      	movs	r1, #0
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fe57 	bl	8006088 <RCCEx_PLL2_Config>
 80053da:	4603      	mov	r3, r0
 80053dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053e0:	e015      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80053e6:	3328      	adds	r3, #40	@ 0x28
 80053e8:	2102      	movs	r1, #2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fefe 	bl	80061ec <RCCEx_PLL3_Config>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053f6:	e00a      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80053fe:	e006      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005400:	bf00      	nop
 8005402:	e004      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005404:	bf00      	nop
 8005406:	e002      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8005408:	bf00      	nop
 800540a:	e000      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800540c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10e      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005416:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800541e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005422:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005426:	4a02      	ldr	r2, [pc, #8]	@ (8005430 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8005428:	430b      	orrs	r3, r1
 800542a:	6593      	str	r3, [r2, #88]	@ 0x58
 800542c:	e006      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800542e:	bf00      	nop
 8005430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005434:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005438:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800543c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800544c:	2300      	movs	r3, #0
 800544e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005452:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005456:	460b      	mov	r3, r1
 8005458:	4313      	orrs	r3, r2
 800545a:	d055      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800545c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005460:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005464:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005468:	d033      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800546a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800546e:	d82c      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005470:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005474:	d02f      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800547a:	d826      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800547c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005480:	d02b      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005482:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005486:	d820      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005488:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800548c:	d012      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800548e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005492:	d81a      	bhi.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8005494:	2b00      	cmp	r3, #0
 8005496:	d022      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8005498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800549c:	d115      	bne.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800549e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054a2:	3308      	adds	r3, #8
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fdee 	bl	8006088 <RCCEx_PLL2_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054b2:	e015      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054b8:	3328      	adds	r3, #40	@ 0x28
 80054ba:	2102      	movs	r1, #2
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fe95 	bl	80061ec <RCCEx_PLL3_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054c8:	e00a      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80054d0:	e006      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80054d2:	bf00      	nop
 80054d4:	e004      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80054d6:	bf00      	nop
 80054d8:	e002      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80054da:	bf00      	nop
 80054dc:	e000      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80054de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80054e8:	4ba1      	ldr	r3, [pc, #644]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80054f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80054f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80054f8:	4a9d      	ldr	r2, [pc, #628]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054fa:	430b      	orrs	r3, r1
 80054fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80054fe:	e003      	b.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005500:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005504:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f002 0308 	and.w	r3, r2, #8
 8005514:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005518:	2300      	movs	r3, #0
 800551a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800551e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005522:	460b      	mov	r3, r1
 8005524:	4313      	orrs	r3, r2
 8005526:	d01e      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800552c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005534:	d10c      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800553a:	3328      	adds	r3, #40	@ 0x28
 800553c:	2102      	movs	r1, #2
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fe54 	bl	80061ec <RCCEx_PLL3_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005550:	4b87      	ldr	r3, [pc, #540]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005554:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800555c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005560:	4a83      	ldr	r2, [pc, #524]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005562:	430b      	orrs	r3, r1
 8005564:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f002 0310 	and.w	r3, r2, #16
 8005572:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005576:	2300      	movs	r3, #0
 8005578:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800557c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005580:	460b      	mov	r3, r1
 8005582:	4313      	orrs	r3, r2
 8005584:	d01e      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005586:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800558a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800558e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005592:	d10c      	bne.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005594:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005598:	3328      	adds	r3, #40	@ 0x28
 800559a:	2102      	movs	r1, #2
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fe25 	bl	80061ec <RCCEx_PLL3_Config>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055ae:	4b70      	ldr	r3, [pc, #448]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055be:	4a6c      	ldr	r2, [pc, #432]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80055d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055d4:	2300      	movs	r3, #0
 80055d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80055da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80055de:	460b      	mov	r3, r1
 80055e0:	4313      	orrs	r3, r2
 80055e2:	d03e      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80055e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055f0:	d022      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80055f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055f6:	d81b      	bhi.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d003      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005600:	d00b      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8005602:	e015      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005608:	3308      	adds	r3, #8
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fd3b 	bl	8006088 <RCCEx_PLL2_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005618:	e00f      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800561a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800561e:	3328      	adds	r3, #40	@ 0x28
 8005620:	2102      	movs	r1, #2
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fde2 	bl	80061ec <RCCEx_PLL3_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800562e:	e004      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8005636:	e000      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8005638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10b      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005642:	4b4b      	ldr	r3, [pc, #300]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005646:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800564a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800564e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005652:	4a47      	ldr	r2, [pc, #284]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005654:	430b      	orrs	r3, r1
 8005656:	6593      	str	r3, [r2, #88]	@ 0x58
 8005658:	e003      	b.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800565e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800566e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005670:	2300      	movs	r3, #0
 8005672:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005674:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005678:	460b      	mov	r3, r1
 800567a:	4313      	orrs	r3, r2
 800567c:	d03b      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800567e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005686:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800568a:	d01f      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800568c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005690:	d818      	bhi.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005696:	d003      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8005698:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800569c:	d007      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800569e:	e011      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a0:	4b33      	ldr	r3, [pc, #204]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	4a32      	ldr	r2, [pc, #200]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80056ac:	e00f      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056b2:	3328      	adds	r3, #40	@ 0x28
 80056b4:	2101      	movs	r1, #1
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fd98 	bl	80061ec <RCCEx_PLL3_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80056c2:	e004      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80056cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ce:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056d6:	4b26      	ldr	r3, [pc, #152]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056e6:	4a22      	ldr	r2, [pc, #136]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80056f2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005702:	673b      	str	r3, [r7, #112]	@ 0x70
 8005704:	2300      	movs	r3, #0
 8005706:	677b      	str	r3, [r7, #116]	@ 0x74
 8005708:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800570c:	460b      	mov	r3, r1
 800570e:	4313      	orrs	r3, r2
 8005710:	d034      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d007      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8005722:	e011      	b.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005724:	4b12      	ldr	r3, [pc, #72]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	4a11      	ldr	r2, [pc, #68]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800572a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005730:	e00e      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005732:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005736:	3308      	adds	r3, #8
 8005738:	2102      	movs	r1, #2
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fca4 	bl	8006088 <RCCEx_PLL2_Config>
 8005740:	4603      	mov	r3, r0
 8005742:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005746:	e003      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800574e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005750:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10d      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005758:	4b05      	ldr	r3, [pc, #20]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800575a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005760:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005766:	4a02      	ldr	r2, [pc, #8]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005768:	430b      	orrs	r3, r1
 800576a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800576c:	e006      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800576e:	bf00      	nop
 8005770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005778:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800577c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005788:	66bb      	str	r3, [r7, #104]	@ 0x68
 800578a:	2300      	movs	r3, #0
 800578c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800578e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005792:	460b      	mov	r3, r1
 8005794:	4313      	orrs	r3, r2
 8005796:	d00c      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800579c:	3328      	adds	r3, #40	@ 0x28
 800579e:	2102      	movs	r1, #2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fd23 	bl	80061ec <RCCEx_PLL3_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80057be:	663b      	str	r3, [r7, #96]	@ 0x60
 80057c0:	2300      	movs	r3, #0
 80057c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80057c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80057c8:	460b      	mov	r3, r1
 80057ca:	4313      	orrs	r3, r2
 80057cc:	d038      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80057ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057da:	d018      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80057dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057e0:	d811      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80057e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057e6:	d014      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80057e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ec:	d80b      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d011      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80057f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f6:	d106      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f8:	4bc3      	ldr	r3, [pc, #780]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fc:	4ac2      	ldr	r2, [pc, #776]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80057fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005802:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005804:	e008      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800580c:	e004      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800580e:	bf00      	nop
 8005810:	e002      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8005816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005818:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005820:	4bb9      	ldr	r3, [pc, #740]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005824:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005828:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005830:	4ab5      	ldr	r2, [pc, #724]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005832:	430b      	orrs	r3, r1
 8005834:	6553      	str	r3, [r2, #84]	@ 0x54
 8005836:	e003      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800583c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005840:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800584c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800584e:	2300      	movs	r3, #0
 8005850:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005852:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005856:	460b      	mov	r3, r1
 8005858:	4313      	orrs	r3, r2
 800585a:	d009      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800585c:	4baa      	ldr	r3, [pc, #680]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800585e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005860:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800586a:	4aa7      	ldr	r2, [pc, #668]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800586c:	430b      	orrs	r3, r1
 800586e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800587c:	653b      	str	r3, [r7, #80]	@ 0x50
 800587e:	2300      	movs	r3, #0
 8005880:	657b      	str	r3, [r7, #84]	@ 0x54
 8005882:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005886:	460b      	mov	r3, r1
 8005888:	4313      	orrs	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800588c:	4b9e      	ldr	r3, [pc, #632]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800588e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005890:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005894:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589a:	4a9b      	ldr	r2, [pc, #620]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800589c:	430b      	orrs	r3, r1
 800589e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80058a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80058ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ae:	2300      	movs	r3, #0
 80058b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80058b6:	460b      	mov	r3, r1
 80058b8:	4313      	orrs	r3, r2
 80058ba:	d009      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80058bc:	4b92      	ldr	r3, [pc, #584]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80058c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ca:	4a8f      	ldr	r2, [pc, #572]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80058dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80058de:	2300      	movs	r3, #0
 80058e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80058e6:	460b      	mov	r3, r1
 80058e8:	4313      	orrs	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058ec:	4b86      	ldr	r3, [pc, #536]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	4a85      	ldr	r2, [pc, #532]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058f6:	6113      	str	r3, [r2, #16]
 80058f8:	4b83      	ldr	r3, [pc, #524]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80058fa:	6919      	ldr	r1, [r3, #16]
 80058fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005900:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005904:	4a80      	ldr	r2, [pc, #512]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005906:	430b      	orrs	r3, r1
 8005908:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800590a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005916:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005918:	2300      	movs	r3, #0
 800591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800591c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005926:	4b78      	ldr	r3, [pc, #480]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800592a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800592e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005934:	4a74      	ldr	r2, [pc, #464]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005936:	430b      	orrs	r3, r1
 8005938:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800593a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005946:	633b      	str	r3, [r7, #48]	@ 0x30
 8005948:	2300      	movs	r3, #0
 800594a:	637b      	str	r3, [r7, #52]	@ 0x34
 800594c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005950:	460b      	mov	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005956:	4b6c      	ldr	r3, [pc, #432]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800595e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005966:	4a68      	ldr	r2, [pc, #416]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8005968:	430b      	orrs	r3, r1
 800596a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800596c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	2100      	movs	r1, #0
 8005976:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800597e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005982:	460b      	mov	r3, r1
 8005984:	4313      	orrs	r3, r2
 8005986:	d011      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800598c:	3308      	adds	r3, #8
 800598e:	2100      	movs	r1, #0
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fb79 	bl	8006088 <RCCEx_PLL2_Config>
 8005996:	4603      	mov	r3, r0
 8005998:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800599c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80059ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b4:	2100      	movs	r1, #0
 80059b6:	6239      	str	r1, [r7, #32]
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059be:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80059c2:	460b      	mov	r3, r1
 80059c4:	4313      	orrs	r3, r2
 80059c6:	d011      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059cc:	3308      	adds	r3, #8
 80059ce:	2101      	movs	r1, #1
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fb59 	bl	8006088 <RCCEx_PLL2_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80059dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80059e8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80059ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	2100      	movs	r1, #0
 80059f6:	61b9      	str	r1, [r7, #24]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d011      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	2102      	movs	r1, #2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fb39 	bl	8006088 <RCCEx_PLL2_Config>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a1c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a28:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	2100      	movs	r1, #0
 8005a36:	6139      	str	r1, [r7, #16]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a42:	460b      	mov	r3, r1
 8005a44:	4313      	orrs	r3, r2
 8005a46:	d011      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a4c:	3328      	adds	r3, #40	@ 0x28
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fbcb 	bl	80061ec <RCCEx_PLL3_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8005a5c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005a68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	2100      	movs	r1, #0
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a82:	460b      	mov	r3, r1
 8005a84:	4313      	orrs	r3, r2
 8005a86:	d011      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005a8c:	3328      	adds	r3, #40	@ 0x28
 8005a8e:	2101      	movs	r1, #1
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fbab 	bl	80061ec <RCCEx_PLL3_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005a9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005aa8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005aac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	6039      	str	r1, [r7, #0]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d011      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005acc:	3328      	adds	r3, #40	@ 0x28
 8005ace:	2102      	movs	r1, #2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fb8b 	bl	80061ec <RCCEx_PLL3_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8005adc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d003      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8005ae8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8005aec:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005b00:	46bd      	mov	sp, r7
 8005b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b06:	bf00      	nop
 8005b08:	58024400 	.word	0x58024400

08005b0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005b10:	f7fe fde2 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4b06      	ldr	r3, [pc, #24]	@ (8005b30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	091b      	lsrs	r3, r3, #4
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	4904      	ldr	r1, [pc, #16]	@ (8005b34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b22:	5ccb      	ldrb	r3, [r1, r3]
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	58024400 	.word	0x58024400
 8005b34:	0800dd20 	.word	0x0800dd20

08005b38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b089      	sub	sp, #36	@ 0x24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b40:	4ba1      	ldr	r3, [pc, #644]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	f003 0303 	and.w	r3, r3, #3
 8005b48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005b4a:	4b9f      	ldr	r3, [pc, #636]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4e:	0b1b      	lsrs	r3, r3, #12
 8005b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b56:	4b9c      	ldr	r3, [pc, #624]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5a:	091b      	lsrs	r3, r3, #4
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005b62:	4b99      	ldr	r3, [pc, #612]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b66:	08db      	lsrs	r3, r3, #3
 8005b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8111 	beq.w	8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	f000 8083 	beq.w	8005c94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	f200 80a1 	bhi.w	8005cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d056      	beq.n	8005c50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ba2:	e099      	b.n	8005cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ba4:	4b88      	ldr	r3, [pc, #544]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d02d      	beq.n	8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bb0:	4b85      	ldr	r3, [pc, #532]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	08db      	lsrs	r3, r3, #3
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	4a84      	ldr	r2, [pc, #528]	@ (8005dcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	ee07 3a90 	vmov	s15, r3
 8005bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bda:	4b7b      	ldr	r3, [pc, #492]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c0a:	e087      	b.n	8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c4e:	e065      	b.n	8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	ee07 3a90 	vmov	s15, r3
 8005c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c62:	4b59      	ldr	r3, [pc, #356]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c92:	e043      	b.n	8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca6:	4b48      	ldr	r3, [pc, #288]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cd6:	e021      	b.n	8005d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cea:	4b37      	ldr	r3, [pc, #220]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cfe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d20:	0a5b      	lsrs	r3, r3, #9
 8005d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d26:	ee07 3a90 	vmov	s15, r3
 8005d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d42:	ee17 2a90 	vmov	r2, s15
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4e:	0c1b      	lsrs	r3, r3, #16
 8005d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d54:	ee07 3a90 	vmov	s15, r3
 8005d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d70:	ee17 2a90 	vmov	r2, s15
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d78:	4b13      	ldr	r3, [pc, #76]	@ (8005dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7c:	0e1b      	lsrs	r3, r3, #24
 8005d7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d9e:	ee17 2a90 	vmov	r2, s15
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005da6:	e008      	b.n	8005dba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	609a      	str	r2, [r3, #8]
}
 8005dba:	bf00      	nop
 8005dbc:	3724      	adds	r7, #36	@ 0x24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	58024400 	.word	0x58024400
 8005dcc:	03d09000 	.word	0x03d09000
 8005dd0:	46000000 	.word	0x46000000
 8005dd4:	4c742400 	.word	0x4c742400
 8005dd8:	4a742400 	.word	0x4a742400
 8005ddc:	4bb71b00 	.word	0x4bb71b00

08005de0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b089      	sub	sp, #36	@ 0x24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005de8:	4ba1      	ldr	r3, [pc, #644]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005df2:	4b9f      	ldr	r3, [pc, #636]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	0d1b      	lsrs	r3, r3, #20
 8005df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dfc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e0a:	4b99      	ldr	r3, [pc, #612]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e0e:	08db      	lsrs	r3, r3, #3
 8005e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	fb02 f303 	mul.w	r3, r2, r3
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8111 	beq.w	8006050 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	f000 8083 	beq.w	8005f3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	f200 80a1 	bhi.w	8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d056      	beq.n	8005ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e4a:	e099      	b.n	8005f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e4c:	4b88      	ldr	r3, [pc, #544]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0320 	and.w	r3, r3, #32
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d02d      	beq.n	8005eb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e58:	4b85      	ldr	r3, [pc, #532]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	08db      	lsrs	r3, r3, #3
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	4a84      	ldr	r2, [pc, #528]	@ (8006074 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
 8005e68:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e82:	4b7b      	ldr	r3, [pc, #492]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e96:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005eb2:	e087      	b.n	8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ebe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800607c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eda:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ef6:	e065      	b.n	8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0a:	4b59      	ldr	r3, [pc, #356]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f3a:	e043      	b.n	8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006084 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4e:	4b48      	ldr	r3, [pc, #288]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f7e:	e021      	b.n	8005fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f92:	4b37      	ldr	r3, [pc, #220]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc8:	0a5b      	lsrs	r3, r3, #9
 8005fca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fea:	ee17 2a90 	vmov	r2, s15
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff6:	0c1b      	lsrs	r3, r3, #16
 8005ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ffc:	ee07 3a90 	vmov	s15, r3
 8006000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006008:	ee37 7a87 	vadd.f32	s14, s15, s14
 800600c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006018:	ee17 2a90 	vmov	r2, s15
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006020:	4b13      	ldr	r3, [pc, #76]	@ (8006070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006024:	0e1b      	lsrs	r3, r3, #24
 8006026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800603a:	edd7 6a07 	vldr	s13, [r7, #28]
 800603e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006046:	ee17 2a90 	vmov	r2, s15
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800604e:	e008      	b.n	8006062 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	609a      	str	r2, [r3, #8]
}
 8006062:	bf00      	nop
 8006064:	3724      	adds	r7, #36	@ 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	58024400 	.word	0x58024400
 8006074:	03d09000 	.word	0x03d09000
 8006078:	46000000 	.word	0x46000000
 800607c:	4c742400 	.word	0x4c742400
 8006080:	4a742400 	.word	0x4a742400
 8006084:	4bb71b00 	.word	0x4bb71b00

08006088 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006096:	4b53      	ldr	r3, [pc, #332]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 8006098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d101      	bne.n	80060a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e099      	b.n	80061da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060a6:	4b4f      	ldr	r3, [pc, #316]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a4e      	ldr	r2, [pc, #312]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 80060ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b2:	f7fc fb87 	bl	80027c4 <HAL_GetTick>
 80060b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060b8:	e008      	b.n	80060cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80060ba:	f7fc fb83 	bl	80027c4 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e086      	b.n	80061da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060cc:	4b45      	ldr	r3, [pc, #276]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1f0      	bne.n	80060ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80060d8:	4b42      	ldr	r3, [pc, #264]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 80060da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	031b      	lsls	r3, r3, #12
 80060e6:	493f      	ldr	r1, [pc, #252]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	025b      	lsls	r3, r3, #9
 80060fe:	b29b      	uxth	r3, r3
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	3b01      	subs	r3, #1
 8006108:	041b      	lsls	r3, r3, #16
 800610a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	3b01      	subs	r3, #1
 8006116:	061b      	lsls	r3, r3, #24
 8006118:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800611c:	4931      	ldr	r1, [pc, #196]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 800611e:	4313      	orrs	r3, r2
 8006120:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006122:	4b30      	ldr	r3, [pc, #192]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	492d      	ldr	r1, [pc, #180]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006134:	4b2b      	ldr	r3, [pc, #172]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 8006136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006138:	f023 0220 	bic.w	r2, r3, #32
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	4928      	ldr	r1, [pc, #160]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 8006142:	4313      	orrs	r3, r2
 8006144:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006146:	4b27      	ldr	r3, [pc, #156]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 8006148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614a:	4a26      	ldr	r2, [pc, #152]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 800614c:	f023 0310 	bic.w	r3, r3, #16
 8006150:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006152:	4b24      	ldr	r3, [pc, #144]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 8006154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006156:	4b24      	ldr	r3, [pc, #144]	@ (80061e8 <RCCEx_PLL2_Config+0x160>)
 8006158:	4013      	ands	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	69d2      	ldr	r2, [r2, #28]
 800615e:	00d2      	lsls	r2, r2, #3
 8006160:	4920      	ldr	r1, [pc, #128]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006166:	4b1f      	ldr	r3, [pc, #124]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 8006168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616a:	4a1e      	ldr	r2, [pc, #120]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 800616c:	f043 0310 	orr.w	r3, r3, #16
 8006170:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006178:	4b1a      	ldr	r3, [pc, #104]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	4a19      	ldr	r2, [pc, #100]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 800617e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006182:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006184:	e00f      	b.n	80061a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d106      	bne.n	800619a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800618c:	4b15      	ldr	r3, [pc, #84]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	4a14      	ldr	r2, [pc, #80]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 8006192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006196:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006198:	e005      	b.n	80061a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800619a:	4b12      	ldr	r3, [pc, #72]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 800619c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619e:	4a11      	ldr	r2, [pc, #68]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 80061a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061a6:	4b0f      	ldr	r3, [pc, #60]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a0e      	ldr	r2, [pc, #56]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 80061ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b2:	f7fc fb07 	bl	80027c4 <HAL_GetTick>
 80061b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061b8:	e008      	b.n	80061cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061ba:	f7fc fb03 	bl	80027c4 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e006      	b.n	80061da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061cc:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <RCCEx_PLL2_Config+0x15c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	58024400 	.word	0x58024400
 80061e8:	ffff0007 	.word	0xffff0007

080061ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061fa:	4b53      	ldr	r3, [pc, #332]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b03      	cmp	r3, #3
 8006204:	d101      	bne.n	800620a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e099      	b.n	800633e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800620a:	4b4f      	ldr	r3, [pc, #316]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a4e      	ldr	r2, [pc, #312]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 8006210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006216:	f7fc fad5 	bl	80027c4 <HAL_GetTick>
 800621a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800621c:	e008      	b.n	8006230 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800621e:	f7fc fad1 	bl	80027c4 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e086      	b.n	800633e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006230:	4b45      	ldr	r3, [pc, #276]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1f0      	bne.n	800621e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800623c:	4b42      	ldr	r3, [pc, #264]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	051b      	lsls	r3, r3, #20
 800624a:	493f      	ldr	r1, [pc, #252]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 800624c:	4313      	orrs	r3, r2
 800624e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	3b01      	subs	r3, #1
 8006256:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	3b01      	subs	r3, #1
 8006260:	025b      	lsls	r3, r3, #9
 8006262:	b29b      	uxth	r3, r3
 8006264:	431a      	orrs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	3b01      	subs	r3, #1
 800626c:	041b      	lsls	r3, r3, #16
 800626e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	3b01      	subs	r3, #1
 800627a:	061b      	lsls	r3, r3, #24
 800627c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006280:	4931      	ldr	r1, [pc, #196]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 8006282:	4313      	orrs	r3, r2
 8006284:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006286:	4b30      	ldr	r3, [pc, #192]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 8006288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	492d      	ldr	r1, [pc, #180]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 8006294:	4313      	orrs	r3, r2
 8006296:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006298:	4b2b      	ldr	r3, [pc, #172]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 800629a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	4928      	ldr	r1, [pc, #160]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062aa:	4b27      	ldr	r3, [pc, #156]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	4a26      	ldr	r2, [pc, #152]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062b6:	4b24      	ldr	r3, [pc, #144]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ba:	4b24      	ldr	r3, [pc, #144]	@ (800634c <RCCEx_PLL3_Config+0x160>)
 80062bc:	4013      	ands	r3, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	69d2      	ldr	r2, [r2, #28]
 80062c2:	00d2      	lsls	r2, r2, #3
 80062c4:	4920      	ldr	r1, [pc, #128]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80062ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d106      	bne.n	80062ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80062dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e0:	4a19      	ldr	r2, [pc, #100]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80062e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062e8:	e00f      	b.n	800630a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d106      	bne.n	80062fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80062f0:	4b15      	ldr	r3, [pc, #84]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f4:	4a14      	ldr	r2, [pc, #80]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 80062f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80062fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062fc:	e005      	b.n	800630a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80062fe:	4b12      	ldr	r3, [pc, #72]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 8006300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006302:	4a11      	ldr	r2, [pc, #68]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 8006304:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006308:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800630a:	4b0f      	ldr	r3, [pc, #60]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a0e      	ldr	r2, [pc, #56]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 8006310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006316:	f7fc fa55 	bl	80027c4 <HAL_GetTick>
 800631a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800631c:	e008      	b.n	8006330 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800631e:	f7fc fa51 	bl	80027c4 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e006      	b.n	800633e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006330:	4b05      	ldr	r3, [pc, #20]	@ (8006348 <RCCEx_PLL3_Config+0x15c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	58024400 	.word	0x58024400
 800634c:	ffff0007 	.word	0xffff0007

08006350 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e10f      	b.n	8006582 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a87      	ldr	r2, [pc, #540]	@ (800658c <HAL_SPI_Init+0x23c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00f      	beq.n	8006392 <HAL_SPI_Init+0x42>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a86      	ldr	r2, [pc, #536]	@ (8006590 <HAL_SPI_Init+0x240>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00a      	beq.n	8006392 <HAL_SPI_Init+0x42>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a84      	ldr	r2, [pc, #528]	@ (8006594 <HAL_SPI_Init+0x244>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d005      	beq.n	8006392 <HAL_SPI_Init+0x42>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	2b0f      	cmp	r3, #15
 800638c:	d901      	bls.n	8006392 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e0f7      	b.n	8006582 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 f968 	bl	8007668 <SPI_GetPacketSize>
 8006398:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a7b      	ldr	r2, [pc, #492]	@ (800658c <HAL_SPI_Init+0x23c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00c      	beq.n	80063be <HAL_SPI_Init+0x6e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a79      	ldr	r2, [pc, #484]	@ (8006590 <HAL_SPI_Init+0x240>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <HAL_SPI_Init+0x6e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a78      	ldr	r2, [pc, #480]	@ (8006594 <HAL_SPI_Init+0x244>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d002      	beq.n	80063be <HAL_SPI_Init+0x6e>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d811      	bhi.n	80063e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80063c2:	4a72      	ldr	r2, [pc, #456]	@ (800658c <HAL_SPI_Init+0x23c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d009      	beq.n	80063dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a70      	ldr	r2, [pc, #448]	@ (8006590 <HAL_SPI_Init+0x240>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d004      	beq.n	80063dc <HAL_SPI_Init+0x8c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a6f      	ldr	r2, [pc, #444]	@ (8006594 <HAL_SPI_Init+0x244>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d104      	bne.n	80063e6 <HAL_SPI_Init+0x96>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b10      	cmp	r3, #16
 80063e0:	d901      	bls.n	80063e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e0cd      	b.n	8006582 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fb fac6 	bl	800198c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0201 	bic.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006422:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800642c:	d119      	bne.n	8006462 <HAL_SPI_Init+0x112>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006436:	d103      	bne.n	8006440 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10c      	bne.n	8006462 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800644c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006450:	d107      	bne.n	8006462 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006460:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00f      	beq.n	800648e <HAL_SPI_Init+0x13e>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	2b06      	cmp	r3, #6
 8006474:	d90b      	bls.n	800648e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	430a      	orrs	r2, r1
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	e007      	b.n	800649e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800649c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69da      	ldr	r2, [r3, #28]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a6:	431a      	orrs	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b0:	ea42 0103 	orr.w	r1, r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064fe:	ea42 0103 	orr.w	r1, r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d113      	bne.n	800653e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006528:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800653c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0201 	bic.w	r2, r2, #1
 800654c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40013000 	.word	0x40013000
 8006590:	40003800 	.word	0x40003800
 8006594:	40003c00 	.word	0x40003c00

08006598 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af02      	add	r7, sp, #8
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	4613      	mov	r3, r2
 80065a6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3320      	adds	r3, #32
 80065ae:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065b0:	f7fc f908 	bl	80027c4 <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d001      	beq.n	80065c6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80065c2:	2302      	movs	r3, #2
 80065c4:	e1d1      	b.n	800696a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_SPI_Transmit+0x3a>
 80065cc:	88fb      	ldrh	r3, [r7, #6]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e1c9      	b.n	800696a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d101      	bne.n	80065e4 <HAL_SPI_Transmit+0x4c>
 80065e0:	2302      	movs	r3, #2
 80065e2:	e1c2      	b.n	800696a <HAL_SPI_Transmit+0x3d2>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2203      	movs	r2, #3
 80065f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	88fa      	ldrh	r2, [r7, #6]
 8006606:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	88fa      	ldrh	r2, [r7, #6]
 800660e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800663c:	d108      	bne.n	8006650 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800664c:	601a      	str	r2, [r3, #0]
 800664e:	e009      	b.n	8006664 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006662:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	4b96      	ldr	r3, [pc, #600]	@ (80068c4 <HAL_SPI_Transmit+0x32c>)
 800666c:	4013      	ands	r3, r2
 800666e:	88f9      	ldrh	r1, [r7, #6]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	430b      	orrs	r3, r1
 8006676:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006690:	d107      	bne.n	80066a2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	2b0f      	cmp	r3, #15
 80066a8:	d947      	bls.n	800673a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80066aa:	e03f      	b.n	800672c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d114      	bne.n	80066e4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ca:	1d1a      	adds	r2, r3, #4
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80066e2:	e023      	b.n	800672c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066e4:	f7fc f86e 	bl	80027c4 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d803      	bhi.n	80066fc <HAL_SPI_Transmit+0x164>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fa:	d102      	bne.n	8006702 <HAL_SPI_Transmit+0x16a>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d114      	bne.n	800672c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 fee2 	bl	80074cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800670e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e11e      	b.n	800696a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1b9      	bne.n	80066ac <HAL_SPI_Transmit+0x114>
 8006738:	e0f1      	b.n	800691e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	2b07      	cmp	r3, #7
 8006740:	f240 80e6 	bls.w	8006910 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006744:	e05d      	b.n	8006802 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b02      	cmp	r3, #2
 8006752:	d132      	bne.n	80067ba <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b01      	cmp	r3, #1
 800675e:	d918      	bls.n	8006792 <HAL_SPI_Transmit+0x1fa>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d014      	beq.n	8006792 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006778:	1d1a      	adds	r2, r3, #4
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b02      	subs	r3, #2
 8006788:	b29a      	uxth	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006790:	e037      	b.n	8006802 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006796:	881a      	ldrh	r2, [r3, #0]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a0:	1c9a      	adds	r2, r3, #2
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80067b8:	e023      	b.n	8006802 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067ba:	f7fc f803 	bl	80027c4 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d803      	bhi.n	80067d2 <HAL_SPI_Transmit+0x23a>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d102      	bne.n	80067d8 <HAL_SPI_Transmit+0x240>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d114      	bne.n	8006802 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fe77 	bl	80074cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e0b3      	b.n	800696a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006808:	b29b      	uxth	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d19b      	bne.n	8006746 <HAL_SPI_Transmit+0x1ae>
 800680e:	e086      	b.n	800691e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b02      	cmp	r3, #2
 800681c:	d154      	bne.n	80068c8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b03      	cmp	r3, #3
 8006828:	d918      	bls.n	800685c <HAL_SPI_Transmit+0x2c4>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800682e:	2b40      	cmp	r3, #64	@ 0x40
 8006830:	d914      	bls.n	800685c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006842:	1d1a      	adds	r2, r3, #4
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800684e:	b29b      	uxth	r3, r3
 8006850:	3b04      	subs	r3, #4
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800685a:	e059      	b.n	8006910 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006862:	b29b      	uxth	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d917      	bls.n	8006898 <HAL_SPI_Transmit+0x300>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d013      	beq.n	8006898 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006874:	881a      	ldrh	r2, [r3, #0]
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800687e:	1c9a      	adds	r2, r3, #2
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b02      	subs	r3, #2
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006896:	e03b      	b.n	8006910 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3320      	adds	r3, #32
 80068a2:	7812      	ldrb	r2, [r2, #0]
 80068a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80068c2:	e025      	b.n	8006910 <HAL_SPI_Transmit+0x378>
 80068c4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068c8:	f7fb ff7c 	bl	80027c4 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d803      	bhi.n	80068e0 <HAL_SPI_Transmit+0x348>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068de:	d102      	bne.n	80068e6 <HAL_SPI_Transmit+0x34e>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d114      	bne.n	8006910 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f000 fdf0 	bl	80074cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e02c      	b.n	800696a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	f47f af79 	bne.w	8006810 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2200      	movs	r2, #0
 8006926:	2108      	movs	r1, #8
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 fe6f 	bl	800760c <SPI_WaitOnFlagUntilTimeout>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d007      	beq.n	8006944 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800693a:	f043 0220 	orr.w	r2, r3, #32
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 fdc1 	bl	80074cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006968:	2300      	movs	r3, #0
  }
}
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop

08006974 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006988:	095b      	lsrs	r3, r3, #5
 800698a:	b29b      	uxth	r3, r3
 800698c:	3301      	adds	r3, #1
 800698e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3330      	adds	r3, #48	@ 0x30
 8006996:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006998:	f7fb ff14 	bl	80027c4 <HAL_GetTick>
 800699c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d001      	beq.n	80069ae <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80069aa:	2302      	movs	r3, #2
 80069ac:	e250      	b.n	8006e50 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_SPI_Receive+0x46>
 80069b4:	88fb      	ldrh	r3, [r7, #6]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e248      	b.n	8006e50 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_SPI_Receive+0x58>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e241      	b.n	8006e50 <HAL_SPI_Receive+0x4dc>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2204      	movs	r2, #4
 80069d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	88fa      	ldrh	r2, [r7, #6]
 80069ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	88fa      	ldrh	r2, [r7, #6]
 80069f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006a24:	d108      	bne.n	8006a38 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e009      	b.n	8006a4c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8006a4a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	4b95      	ldr	r3, [pc, #596]	@ (8006ca8 <HAL_SPI_Receive+0x334>)
 8006a54:	4013      	ands	r3, r2
 8006a56:	88f9      	ldrh	r1, [r7, #6]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	6812      	ldr	r2, [r2, #0]
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a78:	d107      	bne.n	8006a8a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b0f      	cmp	r3, #15
 8006a90:	d96c      	bls.n	8006b6c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006a92:	e064      	b.n	8006b5e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d114      	bne.n	8006ad4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ab2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006ab4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006aba:	1d1a      	adds	r2, r3, #4
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006ad2:	e044      	b.n	8006b5e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8bfa      	ldrh	r2, [r7, #30]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d919      	bls.n	8006b16 <HAL_SPI_Receive+0x1a2>
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d014      	beq.n	8006b16 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006af4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006af6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006afc:	1d1a      	adds	r2, r3, #4
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006b14:	e023      	b.n	8006b5e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b16:	f7fb fe55 	bl	80027c4 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d803      	bhi.n	8006b2e <HAL_SPI_Receive+0x1ba>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d102      	bne.n	8006b34 <HAL_SPI_Receive+0x1c0>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d114      	bne.n	8006b5e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 fcc9 	bl	80074cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e178      	b.n	8006e50 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d194      	bne.n	8006a94 <HAL_SPI_Receive+0x120>
 8006b6a:	e15e      	b.n	8006e2a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	2b07      	cmp	r3, #7
 8006b72:	f240 8153 	bls.w	8006e1c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006b76:	e08f      	b.n	8006c98 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	f003 0301 	and.w	r3, r3, #1
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d114      	bne.n	8006bb8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	8812      	ldrh	r2, [r2, #0]
 8006b96:	b292      	uxth	r2, r2
 8006b98:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b9e:	1c9a      	adds	r2, r3, #2
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006bb6:	e06f      	b.n	8006c98 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	8bfa      	ldrh	r2, [r7, #30]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d924      	bls.n	8006c10 <HAL_SPI_Receive+0x29c>
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01f      	beq.n	8006c10 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	8812      	ldrh	r2, [r2, #0]
 8006bd8:	b292      	uxth	r2, r2
 8006bda:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	8812      	ldrh	r2, [r2, #0]
 8006bee:	b292      	uxth	r2, r2
 8006bf0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bf6:	1c9a      	adds	r2, r3, #2
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	3b02      	subs	r3, #2
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c0e:	e043      	b.n	8006c98 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d119      	bne.n	8006c50 <HAL_SPI_Receive+0x2dc>
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d014      	beq.n	8006c50 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	8812      	ldrh	r2, [r2, #0]
 8006c2e:	b292      	uxth	r2, r2
 8006c30:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c36:	1c9a      	adds	r2, r3, #2
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006c4e:	e023      	b.n	8006c98 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c50:	f7fb fdb8 	bl	80027c4 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d803      	bhi.n	8006c68 <HAL_SPI_Receive+0x2f4>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c66:	d102      	bne.n	8006c6e <HAL_SPI_Receive+0x2fa>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d114      	bne.n	8006c98 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 fc2c 	bl	80074cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e0db      	b.n	8006e50 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f47f af69 	bne.w	8006b78 <HAL_SPI_Receive+0x204>
 8006ca6:	e0c0      	b.n	8006e2a <HAL_SPI_Receive+0x4b6>
 8006ca8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d117      	bne.n	8006cf2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006cf0:	e094      	b.n	8006e1c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	8bfa      	ldrh	r2, [r7, #30]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d946      	bls.n	8006d8e <HAL_SPI_Receive+0x41a>
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d041      	beq.n	8006d8e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d16:	7812      	ldrb	r2, [r2, #0]
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d32:	7812      	ldrb	r2, [r2, #0]
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d4e:	7812      	ldrb	r2, [r2, #0]
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	b2d2      	uxtb	r2, r2
 8006d6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b04      	subs	r3, #4
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006d8c:	e046      	b.n	8006e1c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d81c      	bhi.n	8006dd4 <HAL_SPI_Receive+0x460>
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d017      	beq.n	8006dd4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006db0:	7812      	ldrb	r2, [r2, #0]
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006dd2:	e023      	b.n	8006e1c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd4:	f7fb fcf6 	bl	80027c4 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d803      	bhi.n	8006dec <HAL_SPI_Receive+0x478>
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dea:	d102      	bne.n	8006df2 <HAL_SPI_Receive+0x47e>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d114      	bne.n	8006e1c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 fb6a 	bl	80074cc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dfe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e019      	b.n	8006e50 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f47f af41 	bne.w	8006cac <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 fb4e 	bl	80074cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
  }
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3720      	adds	r7, #32
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08e      	sub	sp, #56	@ 0x38
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3320      	adds	r3, #32
 8006e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3330      	adds	r3, #48	@ 0x30
 8006e74:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3301      	adds	r3, #1
 8006e80:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e82:	f7fb fc9f 	bl	80027c4 <HAL_GetTick>
 8006e86:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006e88:	887b      	ldrh	r3, [r7, #2]
 8006e8a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006e8c:	887b      	ldrh	r3, [r7, #2]
 8006e8e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d001      	beq.n	8006ea0 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e310      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <HAL_SPI_TransmitReceive+0x5a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <HAL_SPI_TransmitReceive+0x5a>
 8006eac:	887b      	ldrh	r3, [r7, #2]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e305      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d101      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x6c>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	e2fe      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x66a>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2205      	movs	r2, #5
 8006ed0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	887a      	ldrh	r2, [r7, #2]
 8006ee6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	887a      	ldrh	r2, [r7, #2]
 8006eee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	887a      	ldrh	r2, [r7, #2]
 8006efc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	887a      	ldrh	r2, [r7, #2]
 8006f04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006f22:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a70      	ldr	r2, [pc, #448]	@ (80070ec <HAL_SPI_TransmitReceive+0x294>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d009      	beq.n	8006f42 <HAL_SPI_TransmitReceive+0xea>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a6f      	ldr	r2, [pc, #444]	@ (80070f0 <HAL_SPI_TransmitReceive+0x298>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d004      	beq.n	8006f42 <HAL_SPI_TransmitReceive+0xea>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a6d      	ldr	r2, [pc, #436]	@ (80070f4 <HAL_SPI_TransmitReceive+0x29c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d102      	bne.n	8006f48 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006f42:	2310      	movs	r3, #16
 8006f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f46:	e001      	b.n	8006f4c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006f48:	2308      	movs	r3, #8
 8006f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	4b69      	ldr	r3, [pc, #420]	@ (80070f8 <HAL_SPI_TransmitReceive+0x2a0>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	8879      	ldrh	r1, [r7, #2]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f78:	d107      	bne.n	8006f8a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	f240 80a2 	bls.w	80070d8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f96:	089b      	lsrs	r3, r3, #2
 8006f98:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006f9a:	e094      	b.n	80070c6 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d120      	bne.n	8006fec <HAL_SPI_TransmitReceive+0x194>
 8006faa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01d      	beq.n	8006fec <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006fb0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006fb2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d217      	bcs.n	8006fec <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fcc:	1d1a      	adds	r2, r3, #4
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006fea:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006ff4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d065      	beq.n	80070c6 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b01      	cmp	r3, #1
 8007006:	d118      	bne.n	800703a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007010:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007012:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007018:	1d1a      	adds	r2, r3, #4
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007036:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007038:	e045      	b.n	80070c6 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800703a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800703c:	8bfb      	ldrh	r3, [r7, #30]
 800703e:	429a      	cmp	r2, r3
 8007040:	d21d      	bcs.n	800707e <HAL_SPI_TransmitReceive+0x226>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d018      	beq.n	800707e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007054:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007056:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800705c:	1d1a      	adds	r2, r3, #4
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800707a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800707c:	e023      	b.n	80070c6 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800707e:	f7fb fba1 	bl	80027c4 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800708a:	429a      	cmp	r2, r3
 800708c:	d803      	bhi.n	8007096 <HAL_SPI_TransmitReceive+0x23e>
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007094:	d102      	bne.n	800709c <HAL_SPI_TransmitReceive+0x244>
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	2b00      	cmp	r3, #0
 800709a:	d114      	bne.n	80070c6 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fa15 	bl	80074cc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e1fd      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80070c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f47f af67 	bne.w	8006f9c <HAL_SPI_TransmitReceive+0x144>
 80070ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f47f af63 	bne.w	8006f9c <HAL_SPI_TransmitReceive+0x144>
 80070d6:	e1ce      	b.n	8007476 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b07      	cmp	r3, #7
 80070de:	f240 81c2 	bls.w	8007466 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 80070e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e4:	085b      	lsrs	r3, r3, #1
 80070e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80070e8:	e0c9      	b.n	800727e <HAL_SPI_TransmitReceive+0x426>
 80070ea:	bf00      	nop
 80070ec:	40013000 	.word	0x40013000
 80070f0:	40003800 	.word	0x40003800
 80070f4:	40003c00 	.word	0x40003c00
 80070f8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b02      	cmp	r3, #2
 8007108:	d11f      	bne.n	800714a <HAL_SPI_TransmitReceive+0x2f2>
 800710a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01c      	beq.n	800714a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007110:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007112:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007116:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007118:	429a      	cmp	r2, r3
 800711a:	d216      	bcs.n	800714a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007120:	881a      	ldrh	r2, [r3, #0]
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800712a:	1c9a      	adds	r2, r3, #2
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007148:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007152:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 8092 	beq.w	800727e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b01      	cmp	r3, #1
 8007166:	d118      	bne.n	800719a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800716c:	6a3a      	ldr	r2, [r7, #32]
 800716e:	8812      	ldrh	r2, [r2, #0]
 8007170:	b292      	uxth	r2, r2
 8007172:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007178:	1c9a      	adds	r2, r3, #2
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	b29a      	uxth	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007196:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007198:	e071      	b.n	800727e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800719a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800719c:	8bfb      	ldrh	r3, [r7, #30]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d228      	bcs.n	80071f4 <HAL_SPI_TransmitReceive+0x39c>
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d023      	beq.n	80071f4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071b0:	6a3a      	ldr	r2, [r7, #32]
 80071b2:	8812      	ldrh	r2, [r2, #0]
 80071b4:	b292      	uxth	r2, r2
 80071b6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071bc:	1c9a      	adds	r2, r3, #2
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071c6:	6a3a      	ldr	r2, [r7, #32]
 80071c8:	8812      	ldrh	r2, [r2, #0]
 80071ca:	b292      	uxth	r2, r2
 80071cc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071d2:	1c9a      	adds	r2, r3, #2
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071de:	b29b      	uxth	r3, r3
 80071e0:	3b02      	subs	r3, #2
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80071f0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80071f2:	e044      	b.n	800727e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80071f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d11d      	bne.n	8007236 <HAL_SPI_TransmitReceive+0x3de>
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d018      	beq.n	8007236 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007208:	6a3a      	ldr	r2, [r7, #32]
 800720a:	8812      	ldrh	r2, [r2, #0]
 800720c:	b292      	uxth	r2, r2
 800720e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007214:	1c9a      	adds	r2, r3, #2
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007220:	b29b      	uxth	r3, r3
 8007222:	3b01      	subs	r3, #1
 8007224:	b29a      	uxth	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007232:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007234:	e023      	b.n	800727e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007236:	f7fb fac5 	bl	80027c4 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007242:	429a      	cmp	r2, r3
 8007244:	d803      	bhi.n	800724e <HAL_SPI_TransmitReceive+0x3f6>
 8007246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724c:	d102      	bne.n	8007254 <HAL_SPI_TransmitReceive+0x3fc>
 800724e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007250:	2b00      	cmp	r3, #0
 8007252:	d114      	bne.n	800727e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 f939 	bl	80074cc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007260:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e121      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800727e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007280:	2b00      	cmp	r3, #0
 8007282:	f47f af3b 	bne.w	80070fc <HAL_SPI_TransmitReceive+0x2a4>
 8007286:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007288:	2b00      	cmp	r3, #0
 800728a:	f47f af37 	bne.w	80070fc <HAL_SPI_TransmitReceive+0x2a4>
 800728e:	e0f2      	b.n	8007476 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b02      	cmp	r3, #2
 800729c:	d121      	bne.n	80072e2 <HAL_SPI_TransmitReceive+0x48a>
 800729e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01e      	beq.n	80072e2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80072a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80072a6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80072a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072aa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d218      	bcs.n	80072e2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3320      	adds	r3, #32
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80072e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80072ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80ba 	beq.w	8007466 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d11b      	bne.n	8007338 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	b2d2      	uxtb	r2, r2
 8007310:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007334:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007336:	e096      	b.n	8007466 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007338:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800733a:	8bfb      	ldrh	r3, [r7, #30]
 800733c:	429a      	cmp	r2, r3
 800733e:	d24a      	bcs.n	80073d6 <HAL_SPI_TransmitReceive+0x57e>
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d045      	beq.n	80073d6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007356:	7812      	ldrb	r2, [r2, #0]
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800738e:	7812      	ldrb	r2, [r2, #0]
 8007390:	b2d2      	uxtb	r2, r2
 8007392:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b04      	subs	r3, #4
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80073d4:	e047      	b.n	8007466 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80073d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d820      	bhi.n	800741e <HAL_SPI_TransmitReceive+0x5c6>
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d01b      	beq.n	800741e <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073f2:	7812      	ldrb	r2, [r2, #0]
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007408:	b29b      	uxth	r3, r3
 800740a:	3b01      	subs	r3, #1
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800741a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800741c:	e023      	b.n	8007466 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800741e:	f7fb f9d1 	bl	80027c4 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800742a:	429a      	cmp	r2, r3
 800742c:	d803      	bhi.n	8007436 <HAL_SPI_TransmitReceive+0x5de>
 800742e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007434:	d102      	bne.n	800743c <HAL_SPI_TransmitReceive+0x5e4>
 8007436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007438:	2b00      	cmp	r3, #0
 800743a:	d114      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f845 	bl	80074cc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007448:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e02d      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007466:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007468:	2b00      	cmp	r3, #0
 800746a:	f47f af11 	bne.w	8007290 <HAL_SPI_TransmitReceive+0x438>
 800746e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007470:	2b00      	cmp	r3, #0
 8007472:	f47f af0d 	bne.w	8007290 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800747c:	2200      	movs	r2, #0
 800747e:	2108      	movs	r1, #8
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f8c3 	bl	800760c <SPI_WaitOnFlagUntilTimeout>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d007      	beq.n	800749c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007492:	f043 0220 	orr.w	r2, r3, #32
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f815 	bl	80074cc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80074c0:	2300      	movs	r3, #0
  }
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3730      	adds	r7, #48	@ 0x30
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop

080074cc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699a      	ldr	r2, [r3, #24]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0208 	orr.w	r2, r2, #8
 80074ea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f042 0210 	orr.w	r2, r2, #16
 80074fa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6919      	ldr	r1, [r3, #16]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	4b3c      	ldr	r3, [pc, #240]	@ (8007608 <SPI_CloseTransfer+0x13c>)
 8007518:	400b      	ands	r3, r1
 800751a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800752a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b04      	cmp	r3, #4
 8007536:	d014      	beq.n	8007562 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f003 0320 	and.w	r3, r3, #32
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00f      	beq.n	8007562 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007548:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	699a      	ldr	r2, [r3, #24]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0220 	orr.w	r2, r2, #32
 8007560:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b03      	cmp	r3, #3
 800756c:	d014      	beq.n	8007598 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00f      	beq.n	8007598 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800757e:	f043 0204 	orr.w	r2, r3, #4
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007596:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00f      	beq.n	80075c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075a8:	f043 0201 	orr.w	r2, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699a      	ldr	r2, [r3, #24]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00f      	beq.n	80075ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075d2:	f043 0208 	orr.w	r2, r3, #8
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699a      	ldr	r2, [r3, #24]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80075fc:	bf00      	nop
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	fffffc90 	.word	0xfffffc90

0800760c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800761c:	e010      	b.n	8007640 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800761e:	f7fb f8d1 	bl	80027c4 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d803      	bhi.n	8007636 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007634:	d102      	bne.n	800763c <SPI_WaitOnFlagUntilTimeout+0x30>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e00f      	b.n	8007660 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	695a      	ldr	r2, [r3, #20]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	4013      	ands	r3, r2
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	429a      	cmp	r2, r3
 800764e:	bf0c      	ite	eq
 8007650:	2301      	moveq	r3, #1
 8007652:	2300      	movne	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	461a      	mov	r2, r3
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	429a      	cmp	r2, r3
 800765c:	d0df      	beq.n	800761e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	3301      	adds	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	3301      	adds	r3, #1
 8007680:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	3307      	adds	r3, #7
 8007686:	08db      	lsrs	r3, r3, #3
 8007688:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e049      	b.n	8007744 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7fa fd15 	bl	80020f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2202      	movs	r2, #2
 80076ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3304      	adds	r3, #4
 80076da:	4619      	mov	r1, r3
 80076dc:	4610      	mov	r0, r2
 80076de:	f000 f9a1 	bl	8007a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e049      	b.n	80077f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d106      	bne.n	8007778 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fa fc70 	bl	8002058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4610      	mov	r0, r2
 800778c:	f000 f94a 	bl	8007a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007816:	2302      	movs	r3, #2
 8007818:	e0ff      	b.n	8007a1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b14      	cmp	r3, #20
 8007826:	f200 80f0 	bhi.w	8007a0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800782a:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007885 	.word	0x08007885
 8007834:	08007a0b 	.word	0x08007a0b
 8007838:	08007a0b 	.word	0x08007a0b
 800783c:	08007a0b 	.word	0x08007a0b
 8007840:	080078c5 	.word	0x080078c5
 8007844:	08007a0b 	.word	0x08007a0b
 8007848:	08007a0b 	.word	0x08007a0b
 800784c:	08007a0b 	.word	0x08007a0b
 8007850:	08007907 	.word	0x08007907
 8007854:	08007a0b 	.word	0x08007a0b
 8007858:	08007a0b 	.word	0x08007a0b
 800785c:	08007a0b 	.word	0x08007a0b
 8007860:	08007947 	.word	0x08007947
 8007864:	08007a0b 	.word	0x08007a0b
 8007868:	08007a0b 	.word	0x08007a0b
 800786c:	08007a0b 	.word	0x08007a0b
 8007870:	08007989 	.word	0x08007989
 8007874:	08007a0b 	.word	0x08007a0b
 8007878:	08007a0b 	.word	0x08007a0b
 800787c:	08007a0b 	.word	0x08007a0b
 8007880:	080079c9 	.word	0x080079c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68b9      	ldr	r1, [r7, #8]
 800788a:	4618      	mov	r0, r3
 800788c:	f000 f970 	bl	8007b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0208 	orr.w	r2, r2, #8
 800789e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699a      	ldr	r2, [r3, #24]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f022 0204 	bic.w	r2, r2, #4
 80078ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6999      	ldr	r1, [r3, #24]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	619a      	str	r2, [r3, #24]
      break;
 80078c2:	e0a5      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 f9e0 	bl	8007c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699a      	ldr	r2, [r3, #24]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6999      	ldr	r1, [r3, #24]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	021a      	lsls	r2, r3, #8
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	430a      	orrs	r2, r1
 8007902:	619a      	str	r2, [r3, #24]
      break;
 8007904:	e084      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68b9      	ldr	r1, [r7, #8]
 800790c:	4618      	mov	r0, r3
 800790e:	f000 fa49 	bl	8007da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	69da      	ldr	r2, [r3, #28]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0208 	orr.w	r2, r2, #8
 8007920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69da      	ldr	r2, [r3, #28]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0204 	bic.w	r2, r2, #4
 8007930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	69d9      	ldr	r1, [r3, #28]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	61da      	str	r2, [r3, #28]
      break;
 8007944:	e064      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68b9      	ldr	r1, [r7, #8]
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fab1 	bl	8007eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69da      	ldr	r2, [r3, #28]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69d9      	ldr	r1, [r3, #28]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	021a      	lsls	r2, r3, #8
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	61da      	str	r2, [r3, #28]
      break;
 8007986:	e043      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68b9      	ldr	r1, [r7, #8]
 800798e:	4618      	mov	r0, r3
 8007990:	f000 fafa 	bl	8007f88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0208 	orr.w	r2, r2, #8
 80079a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 0204 	bic.w	r2, r2, #4
 80079b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	691a      	ldr	r2, [r3, #16]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80079c6:	e023      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fb3e 	bl	8008050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	021a      	lsls	r2, r3, #8
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a08:	e002      	b.n	8007a10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3718      	adds	r7, #24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop

08007a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a46      	ldr	r2, [pc, #280]	@ (8007b50 <TIM_Base_SetConfig+0x12c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a42:	d00f      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a43      	ldr	r2, [pc, #268]	@ (8007b54 <TIM_Base_SetConfig+0x130>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00b      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a42      	ldr	r2, [pc, #264]	@ (8007b58 <TIM_Base_SetConfig+0x134>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a41      	ldr	r2, [pc, #260]	@ (8007b5c <TIM_Base_SetConfig+0x138>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a40      	ldr	r2, [pc, #256]	@ (8007b60 <TIM_Base_SetConfig+0x13c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d108      	bne.n	8007a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a35      	ldr	r2, [pc, #212]	@ (8007b50 <TIM_Base_SetConfig+0x12c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d01f      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a84:	d01b      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a32      	ldr	r2, [pc, #200]	@ (8007b54 <TIM_Base_SetConfig+0x130>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d017      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a31      	ldr	r2, [pc, #196]	@ (8007b58 <TIM_Base_SetConfig+0x134>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a30      	ldr	r2, [pc, #192]	@ (8007b5c <TIM_Base_SetConfig+0x138>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00f      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2f      	ldr	r2, [pc, #188]	@ (8007b60 <TIM_Base_SetConfig+0x13c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00b      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8007b64 <TIM_Base_SetConfig+0x140>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d007      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8007b68 <TIM_Base_SetConfig+0x144>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d003      	beq.n	8007abe <TIM_Base_SetConfig+0x9a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8007b6c <TIM_Base_SetConfig+0x148>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d108      	bne.n	8007ad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a16      	ldr	r2, [pc, #88]	@ (8007b50 <TIM_Base_SetConfig+0x12c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00f      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a18      	ldr	r2, [pc, #96]	@ (8007b60 <TIM_Base_SetConfig+0x13c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00b      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a17      	ldr	r2, [pc, #92]	@ (8007b64 <TIM_Base_SetConfig+0x140>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d007      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a16      	ldr	r2, [pc, #88]	@ (8007b68 <TIM_Base_SetConfig+0x144>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_Base_SetConfig+0xf8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a15      	ldr	r2, [pc, #84]	@ (8007b6c <TIM_Base_SetConfig+0x148>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d103      	bne.n	8007b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	691a      	ldr	r2, [r3, #16]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d105      	bne.n	8007b42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f023 0201 	bic.w	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	611a      	str	r2, [r3, #16]
  }
}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	40010000 	.word	0x40010000
 8007b54:	40000400 	.word	0x40000400
 8007b58:	40000800 	.word	0x40000800
 8007b5c:	40000c00 	.word	0x40000c00
 8007b60:	40010400 	.word	0x40010400
 8007b64:	40014000 	.word	0x40014000
 8007b68:	40014400 	.word	0x40014400
 8007b6c:	40014800 	.word	0x40014800

08007b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	f023 0201 	bic.w	r2, r3, #1
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4b37      	ldr	r3, [pc, #220]	@ (8007c78 <TIM_OC1_SetConfig+0x108>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f023 0302 	bic.w	r3, r3, #2
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8007c7c <TIM_OC1_SetConfig+0x10c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00f      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a2c      	ldr	r2, [pc, #176]	@ (8007c80 <TIM_OC1_SetConfig+0x110>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00b      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a2b      	ldr	r2, [pc, #172]	@ (8007c84 <TIM_OC1_SetConfig+0x114>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d007      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a2a      	ldr	r2, [pc, #168]	@ (8007c88 <TIM_OC1_SetConfig+0x118>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d003      	beq.n	8007bec <TIM_OC1_SetConfig+0x7c>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a29      	ldr	r2, [pc, #164]	@ (8007c8c <TIM_OC1_SetConfig+0x11c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d10c      	bne.n	8007c06 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 0308 	bic.w	r3, r3, #8
 8007bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f023 0304 	bic.w	r3, r3, #4
 8007c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a1c      	ldr	r2, [pc, #112]	@ (8007c7c <TIM_OC1_SetConfig+0x10c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00f      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a1b      	ldr	r2, [pc, #108]	@ (8007c80 <TIM_OC1_SetConfig+0x110>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00b      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1a      	ldr	r2, [pc, #104]	@ (8007c84 <TIM_OC1_SetConfig+0x114>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d007      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a19      	ldr	r2, [pc, #100]	@ (8007c88 <TIM_OC1_SetConfig+0x118>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_OC1_SetConfig+0xbe>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a18      	ldr	r2, [pc, #96]	@ (8007c8c <TIM_OC1_SetConfig+0x11c>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d111      	bne.n	8007c52 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	621a      	str	r2, [r3, #32]
}
 8007c6c:	bf00      	nop
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	fffeff8f 	.word	0xfffeff8f
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40010400 	.word	0x40010400
 8007c84:	40014000 	.word	0x40014000
 8007c88:	40014400 	.word	0x40014400
 8007c8c:	40014800 	.word	0x40014800

08007c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	f023 0210 	bic.w	r2, r3, #16
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4b34      	ldr	r3, [pc, #208]	@ (8007d8c <TIM_OC2_SetConfig+0xfc>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f023 0320 	bic.w	r3, r3, #32
 8007cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a29      	ldr	r2, [pc, #164]	@ (8007d90 <TIM_OC2_SetConfig+0x100>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_OC2_SetConfig+0x68>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a28      	ldr	r2, [pc, #160]	@ (8007d94 <TIM_OC2_SetConfig+0x104>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d10d      	bne.n	8007d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a1e      	ldr	r2, [pc, #120]	@ (8007d90 <TIM_OC2_SetConfig+0x100>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00f      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8007d94 <TIM_OC2_SetConfig+0x104>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d00b      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a1c      	ldr	r2, [pc, #112]	@ (8007d98 <TIM_OC2_SetConfig+0x108>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d007      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8007d9c <TIM_OC2_SetConfig+0x10c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d003      	beq.n	8007d3c <TIM_OC2_SetConfig+0xac>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a1a      	ldr	r2, [pc, #104]	@ (8007da0 <TIM_OC2_SetConfig+0x110>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d113      	bne.n	8007d64 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	621a      	str	r2, [r3, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	feff8fff 	.word	0xfeff8fff
 8007d90:	40010000 	.word	0x40010000
 8007d94:	40010400 	.word	0x40010400
 8007d98:	40014000 	.word	0x40014000
 8007d9c:	40014400 	.word	0x40014400
 8007da0:	40014800 	.word	0x40014800

08007da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	4b33      	ldr	r3, [pc, #204]	@ (8007e9c <TIM_OC3_SetConfig+0xf8>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a28      	ldr	r2, [pc, #160]	@ (8007ea0 <TIM_OC3_SetConfig+0xfc>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d003      	beq.n	8007e0a <TIM_OC3_SetConfig+0x66>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a27      	ldr	r2, [pc, #156]	@ (8007ea4 <TIM_OC3_SetConfig+0x100>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d10d      	bne.n	8007e26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <TIM_OC3_SetConfig+0xfc>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00f      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a1c      	ldr	r2, [pc, #112]	@ (8007ea4 <TIM_OC3_SetConfig+0x100>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d00b      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a1b      	ldr	r2, [pc, #108]	@ (8007ea8 <TIM_OC3_SetConfig+0x104>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d007      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1a      	ldr	r2, [pc, #104]	@ (8007eac <TIM_OC3_SetConfig+0x108>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d003      	beq.n	8007e4e <TIM_OC3_SetConfig+0xaa>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a19      	ldr	r2, [pc, #100]	@ (8007eb0 <TIM_OC3_SetConfig+0x10c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d113      	bne.n	8007e76 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	621a      	str	r2, [r3, #32]
}
 8007e90:	bf00      	nop
 8007e92:	371c      	adds	r7, #28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	fffeff8f 	.word	0xfffeff8f
 8007ea0:	40010000 	.word	0x40010000
 8007ea4:	40010400 	.word	0x40010400
 8007ea8:	40014000 	.word	0x40014000
 8007eac:	40014400 	.word	0x40014400
 8007eb0:	40014800 	.word	0x40014800

08007eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
 8007ec8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4b24      	ldr	r3, [pc, #144]	@ (8007f70 <TIM_OC4_SetConfig+0xbc>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	031b      	lsls	r3, r3, #12
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a19      	ldr	r2, [pc, #100]	@ (8007f74 <TIM_OC4_SetConfig+0xc0>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00f      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a18      	ldr	r2, [pc, #96]	@ (8007f78 <TIM_OC4_SetConfig+0xc4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00b      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a17      	ldr	r2, [pc, #92]	@ (8007f7c <TIM_OC4_SetConfig+0xc8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a16      	ldr	r2, [pc, #88]	@ (8007f80 <TIM_OC4_SetConfig+0xcc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_OC4_SetConfig+0x80>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a15      	ldr	r2, [pc, #84]	@ (8007f84 <TIM_OC4_SetConfig+0xd0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d109      	bne.n	8007f48 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	019b      	lsls	r3, r3, #6
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	621a      	str	r2, [r3, #32]
}
 8007f62:	bf00      	nop
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	feff8fff 	.word	0xfeff8fff
 8007f74:	40010000 	.word	0x40010000
 8007f78:	40010400 	.word	0x40010400
 8007f7c:	40014000 	.word	0x40014000
 8007f80:	40014400 	.word	0x40014400
 8007f84:	40014800 	.word	0x40014800

08007f88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4b21      	ldr	r3, [pc, #132]	@ (8008038 <TIM_OC5_SetConfig+0xb0>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007fc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	041b      	lsls	r3, r3, #16
 8007fd0:	693a      	ldr	r2, [r7, #16]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a18      	ldr	r2, [pc, #96]	@ (800803c <TIM_OC5_SetConfig+0xb4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d00f      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a17      	ldr	r2, [pc, #92]	@ (8008040 <TIM_OC5_SetConfig+0xb8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a16      	ldr	r2, [pc, #88]	@ (8008044 <TIM_OC5_SetConfig+0xbc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d007      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a15      	ldr	r2, [pc, #84]	@ (8008048 <TIM_OC5_SetConfig+0xc0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_OC5_SetConfig+0x76>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a14      	ldr	r2, [pc, #80]	@ (800804c <TIM_OC5_SetConfig+0xc4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d109      	bne.n	8008012 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	021b      	lsls	r3, r3, #8
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	621a      	str	r2, [r3, #32]
}
 800802c:	bf00      	nop
 800802e:	371c      	adds	r7, #28
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	fffeff8f 	.word	0xfffeff8f
 800803c:	40010000 	.word	0x40010000
 8008040:	40010400 	.word	0x40010400
 8008044:	40014000 	.word	0x40014000
 8008048:	40014400 	.word	0x40014400
 800804c:	40014800 	.word	0x40014800

08008050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008050:	b480      	push	{r7}
 8008052:	b087      	sub	sp, #28
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4b22      	ldr	r3, [pc, #136]	@ (8008104 <TIM_OC6_SetConfig+0xb4>)
 800807c:	4013      	ands	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008092:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	051b      	lsls	r3, r3, #20
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4313      	orrs	r3, r2
 800809e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a19      	ldr	r2, [pc, #100]	@ (8008108 <TIM_OC6_SetConfig+0xb8>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d00f      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a18      	ldr	r2, [pc, #96]	@ (800810c <TIM_OC6_SetConfig+0xbc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00b      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a17      	ldr	r2, [pc, #92]	@ (8008110 <TIM_OC6_SetConfig+0xc0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d007      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a16      	ldr	r2, [pc, #88]	@ (8008114 <TIM_OC6_SetConfig+0xc4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d003      	beq.n	80080c8 <TIM_OC6_SetConfig+0x78>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a15      	ldr	r2, [pc, #84]	@ (8008118 <TIM_OC6_SetConfig+0xc8>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d109      	bne.n	80080dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	029b      	lsls	r3, r3, #10
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	621a      	str	r2, [r3, #32]
}
 80080f6:	bf00      	nop
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	feff8fff 	.word	0xfeff8fff
 8008108:	40010000 	.word	0x40010000
 800810c:	40010400 	.word	0x40010400
 8008110:	40014000 	.word	0x40014000
 8008114:	40014400 	.word	0x40014400
 8008118:	40014800 	.word	0x40014800

0800811c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800812c:	2b01      	cmp	r3, #1
 800812e:	d101      	bne.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008130:	2302      	movs	r3, #2
 8008132:	e06d      	b.n	8008210 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a30      	ldr	r2, [pc, #192]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d004      	beq.n	8008168 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a2f      	ldr	r2, [pc, #188]	@ (8008220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d108      	bne.n	800817a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800816e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	4313      	orrs	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008180:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a20      	ldr	r2, [pc, #128]	@ (800821c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d022      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081a6:	d01d      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008224 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d018      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008228 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d013      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a1a      	ldr	r2, [pc, #104]	@ (800822c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00e      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a15      	ldr	r2, [pc, #84]	@ (8008220 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d009      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a16      	ldr	r2, [pc, #88]	@ (8008230 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d004      	beq.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a15      	ldr	r2, [pc, #84]	@ (8008234 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d10c      	bne.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	40010000 	.word	0x40010000
 8008220:	40010400 	.word	0x40010400
 8008224:	40000400 	.word	0x40000400
 8008228:	40000800 	.word	0x40000800
 800822c:	40000c00 	.word	0x40000c00
 8008230:	40001800 	.word	0x40001800
 8008234:	40014000 	.word	0x40014000

08008238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e042      	b.n	80082d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008250:	2b00      	cmp	r3, #0
 8008252:	d106      	bne.n	8008262 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7fa f8f9 	bl	8002454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2224      	movs	r2, #36	@ 0x24
 8008266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0201 	bic.w	r2, r2, #1
 8008278:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fe94 	bl	8008fb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f825 	bl	80082d8 <UART_SetConfig>
 800828e:	4603      	mov	r3, r0
 8008290:	2b01      	cmp	r3, #1
 8008292:	d101      	bne.n	8008298 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e01b      	b.n	80082d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0201 	orr.w	r2, r2, #1
 80082c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 ff13 	bl	80090f4 <UART_CheckIdleState>
 80082ce:	4603      	mov	r3, r0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082dc:	b092      	sub	sp, #72	@ 0x48
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	431a      	orrs	r2, r3
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	4bbe      	ldr	r3, [pc, #760]	@ (8008600 <UART_SetConfig+0x328>)
 8008308:	4013      	ands	r3, r2
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008310:	430b      	orrs	r3, r1
 8008312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4ab3      	ldr	r2, [pc, #716]	@ (8008604 <UART_SetConfig+0x32c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d004      	beq.n	8008344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008340:	4313      	orrs	r3, r2
 8008342:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689a      	ldr	r2, [r3, #8]
 800834a:	4baf      	ldr	r3, [pc, #700]	@ (8008608 <UART_SetConfig+0x330>)
 800834c:	4013      	ands	r3, r2
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	6812      	ldr	r2, [r2, #0]
 8008352:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008354:	430b      	orrs	r3, r1
 8008356:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835e:	f023 010f 	bic.w	r1, r3, #15
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4aa6      	ldr	r2, [pc, #664]	@ (800860c <UART_SetConfig+0x334>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d177      	bne.n	8008468 <UART_SetConfig+0x190>
 8008378:	4ba5      	ldr	r3, [pc, #660]	@ (8008610 <UART_SetConfig+0x338>)
 800837a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008380:	2b28      	cmp	r3, #40	@ 0x28
 8008382:	d86d      	bhi.n	8008460 <UART_SetConfig+0x188>
 8008384:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <UART_SetConfig+0xb4>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	08008431 	.word	0x08008431
 8008390:	08008461 	.word	0x08008461
 8008394:	08008461 	.word	0x08008461
 8008398:	08008461 	.word	0x08008461
 800839c:	08008461 	.word	0x08008461
 80083a0:	08008461 	.word	0x08008461
 80083a4:	08008461 	.word	0x08008461
 80083a8:	08008461 	.word	0x08008461
 80083ac:	08008439 	.word	0x08008439
 80083b0:	08008461 	.word	0x08008461
 80083b4:	08008461 	.word	0x08008461
 80083b8:	08008461 	.word	0x08008461
 80083bc:	08008461 	.word	0x08008461
 80083c0:	08008461 	.word	0x08008461
 80083c4:	08008461 	.word	0x08008461
 80083c8:	08008461 	.word	0x08008461
 80083cc:	08008441 	.word	0x08008441
 80083d0:	08008461 	.word	0x08008461
 80083d4:	08008461 	.word	0x08008461
 80083d8:	08008461 	.word	0x08008461
 80083dc:	08008461 	.word	0x08008461
 80083e0:	08008461 	.word	0x08008461
 80083e4:	08008461 	.word	0x08008461
 80083e8:	08008461 	.word	0x08008461
 80083ec:	08008449 	.word	0x08008449
 80083f0:	08008461 	.word	0x08008461
 80083f4:	08008461 	.word	0x08008461
 80083f8:	08008461 	.word	0x08008461
 80083fc:	08008461 	.word	0x08008461
 8008400:	08008461 	.word	0x08008461
 8008404:	08008461 	.word	0x08008461
 8008408:	08008461 	.word	0x08008461
 800840c:	08008451 	.word	0x08008451
 8008410:	08008461 	.word	0x08008461
 8008414:	08008461 	.word	0x08008461
 8008418:	08008461 	.word	0x08008461
 800841c:	08008461 	.word	0x08008461
 8008420:	08008461 	.word	0x08008461
 8008424:	08008461 	.word	0x08008461
 8008428:	08008461 	.word	0x08008461
 800842c:	08008459 	.word	0x08008459
 8008430:	2301      	movs	r3, #1
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008436:	e326      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008438:	2304      	movs	r3, #4
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843e:	e322      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008440:	2308      	movs	r3, #8
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008446:	e31e      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008448:	2310      	movs	r3, #16
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844e:	e31a      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008450:	2320      	movs	r3, #32
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008456:	e316      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008458:	2340      	movs	r3, #64	@ 0x40
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845e:	e312      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008460:	2380      	movs	r3, #128	@ 0x80
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008466:	e30e      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a69      	ldr	r2, [pc, #420]	@ (8008614 <UART_SetConfig+0x33c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d130      	bne.n	80084d4 <UART_SetConfig+0x1fc>
 8008472:	4b67      	ldr	r3, [pc, #412]	@ (8008610 <UART_SetConfig+0x338>)
 8008474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008476:	f003 0307 	and.w	r3, r3, #7
 800847a:	2b05      	cmp	r3, #5
 800847c:	d826      	bhi.n	80084cc <UART_SetConfig+0x1f4>
 800847e:	a201      	add	r2, pc, #4	@ (adr r2, 8008484 <UART_SetConfig+0x1ac>)
 8008480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008484:	0800849d 	.word	0x0800849d
 8008488:	080084a5 	.word	0x080084a5
 800848c:	080084ad 	.word	0x080084ad
 8008490:	080084b5 	.word	0x080084b5
 8008494:	080084bd 	.word	0x080084bd
 8008498:	080084c5 	.word	0x080084c5
 800849c:	2300      	movs	r3, #0
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a2:	e2f0      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80084a4:	2304      	movs	r3, #4
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e2ec      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80084ac:	2308      	movs	r3, #8
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e2e8      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80084b4:	2310      	movs	r3, #16
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e2e4      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80084bc:	2320      	movs	r3, #32
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e2e0      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80084c4:	2340      	movs	r3, #64	@ 0x40
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ca:	e2dc      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80084cc:	2380      	movs	r3, #128	@ 0x80
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d2:	e2d8      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a4f      	ldr	r2, [pc, #316]	@ (8008618 <UART_SetConfig+0x340>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d130      	bne.n	8008540 <UART_SetConfig+0x268>
 80084de:	4b4c      	ldr	r3, [pc, #304]	@ (8008610 <UART_SetConfig+0x338>)
 80084e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e2:	f003 0307 	and.w	r3, r3, #7
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d826      	bhi.n	8008538 <UART_SetConfig+0x260>
 80084ea:	a201      	add	r2, pc, #4	@ (adr r2, 80084f0 <UART_SetConfig+0x218>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008509 	.word	0x08008509
 80084f4:	08008511 	.word	0x08008511
 80084f8:	08008519 	.word	0x08008519
 80084fc:	08008521 	.word	0x08008521
 8008500:	08008529 	.word	0x08008529
 8008504:	08008531 	.word	0x08008531
 8008508:	2300      	movs	r3, #0
 800850a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850e:	e2ba      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008510:	2304      	movs	r3, #4
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008516:	e2b6      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008518:	2308      	movs	r3, #8
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851e:	e2b2      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008520:	2310      	movs	r3, #16
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008526:	e2ae      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008528:	2320      	movs	r3, #32
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852e:	e2aa      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008530:	2340      	movs	r3, #64	@ 0x40
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008536:	e2a6      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008538:	2380      	movs	r3, #128	@ 0x80
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853e:	e2a2      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a35      	ldr	r2, [pc, #212]	@ (800861c <UART_SetConfig+0x344>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d130      	bne.n	80085ac <UART_SetConfig+0x2d4>
 800854a:	4b31      	ldr	r3, [pc, #196]	@ (8008610 <UART_SetConfig+0x338>)
 800854c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800854e:	f003 0307 	and.w	r3, r3, #7
 8008552:	2b05      	cmp	r3, #5
 8008554:	d826      	bhi.n	80085a4 <UART_SetConfig+0x2cc>
 8008556:	a201      	add	r2, pc, #4	@ (adr r2, 800855c <UART_SetConfig+0x284>)
 8008558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855c:	08008575 	.word	0x08008575
 8008560:	0800857d 	.word	0x0800857d
 8008564:	08008585 	.word	0x08008585
 8008568:	0800858d 	.word	0x0800858d
 800856c:	08008595 	.word	0x08008595
 8008570:	0800859d 	.word	0x0800859d
 8008574:	2300      	movs	r3, #0
 8008576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800857a:	e284      	b.n	8008a86 <UART_SetConfig+0x7ae>
 800857c:	2304      	movs	r3, #4
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008582:	e280      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008584:	2308      	movs	r3, #8
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858a:	e27c      	b.n	8008a86 <UART_SetConfig+0x7ae>
 800858c:	2310      	movs	r3, #16
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008592:	e278      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008594:	2320      	movs	r3, #32
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e274      	b.n	8008a86 <UART_SetConfig+0x7ae>
 800859c:	2340      	movs	r3, #64	@ 0x40
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e270      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80085a4:	2380      	movs	r3, #128	@ 0x80
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e26c      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a1b      	ldr	r2, [pc, #108]	@ (8008620 <UART_SetConfig+0x348>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d142      	bne.n	800863c <UART_SetConfig+0x364>
 80085b6:	4b16      	ldr	r3, [pc, #88]	@ (8008610 <UART_SetConfig+0x338>)
 80085b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ba:	f003 0307 	and.w	r3, r3, #7
 80085be:	2b05      	cmp	r3, #5
 80085c0:	d838      	bhi.n	8008634 <UART_SetConfig+0x35c>
 80085c2:	a201      	add	r2, pc, #4	@ (adr r2, 80085c8 <UART_SetConfig+0x2f0>)
 80085c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c8:	080085e1 	.word	0x080085e1
 80085cc:	080085e9 	.word	0x080085e9
 80085d0:	080085f1 	.word	0x080085f1
 80085d4:	080085f9 	.word	0x080085f9
 80085d8:	08008625 	.word	0x08008625
 80085dc:	0800862d 	.word	0x0800862d
 80085e0:	2300      	movs	r3, #0
 80085e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085e6:	e24e      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80085e8:	2304      	movs	r3, #4
 80085ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ee:	e24a      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80085f0:	2308      	movs	r3, #8
 80085f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085f6:	e246      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80085f8:	2310      	movs	r3, #16
 80085fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085fe:	e242      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008600:	cfff69f3 	.word	0xcfff69f3
 8008604:	58000c00 	.word	0x58000c00
 8008608:	11fff4ff 	.word	0x11fff4ff
 800860c:	40011000 	.word	0x40011000
 8008610:	58024400 	.word	0x58024400
 8008614:	40004400 	.word	0x40004400
 8008618:	40004800 	.word	0x40004800
 800861c:	40004c00 	.word	0x40004c00
 8008620:	40005000 	.word	0x40005000
 8008624:	2320      	movs	r3, #32
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800862a:	e22c      	b.n	8008a86 <UART_SetConfig+0x7ae>
 800862c:	2340      	movs	r3, #64	@ 0x40
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008632:	e228      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008634:	2380      	movs	r3, #128	@ 0x80
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800863a:	e224      	b.n	8008a86 <UART_SetConfig+0x7ae>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4ab1      	ldr	r2, [pc, #708]	@ (8008908 <UART_SetConfig+0x630>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d176      	bne.n	8008734 <UART_SetConfig+0x45c>
 8008646:	4bb1      	ldr	r3, [pc, #708]	@ (800890c <UART_SetConfig+0x634>)
 8008648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800864a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800864e:	2b28      	cmp	r3, #40	@ 0x28
 8008650:	d86c      	bhi.n	800872c <UART_SetConfig+0x454>
 8008652:	a201      	add	r2, pc, #4	@ (adr r2, 8008658 <UART_SetConfig+0x380>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	080086fd 	.word	0x080086fd
 800865c:	0800872d 	.word	0x0800872d
 8008660:	0800872d 	.word	0x0800872d
 8008664:	0800872d 	.word	0x0800872d
 8008668:	0800872d 	.word	0x0800872d
 800866c:	0800872d 	.word	0x0800872d
 8008670:	0800872d 	.word	0x0800872d
 8008674:	0800872d 	.word	0x0800872d
 8008678:	08008705 	.word	0x08008705
 800867c:	0800872d 	.word	0x0800872d
 8008680:	0800872d 	.word	0x0800872d
 8008684:	0800872d 	.word	0x0800872d
 8008688:	0800872d 	.word	0x0800872d
 800868c:	0800872d 	.word	0x0800872d
 8008690:	0800872d 	.word	0x0800872d
 8008694:	0800872d 	.word	0x0800872d
 8008698:	0800870d 	.word	0x0800870d
 800869c:	0800872d 	.word	0x0800872d
 80086a0:	0800872d 	.word	0x0800872d
 80086a4:	0800872d 	.word	0x0800872d
 80086a8:	0800872d 	.word	0x0800872d
 80086ac:	0800872d 	.word	0x0800872d
 80086b0:	0800872d 	.word	0x0800872d
 80086b4:	0800872d 	.word	0x0800872d
 80086b8:	08008715 	.word	0x08008715
 80086bc:	0800872d 	.word	0x0800872d
 80086c0:	0800872d 	.word	0x0800872d
 80086c4:	0800872d 	.word	0x0800872d
 80086c8:	0800872d 	.word	0x0800872d
 80086cc:	0800872d 	.word	0x0800872d
 80086d0:	0800872d 	.word	0x0800872d
 80086d4:	0800872d 	.word	0x0800872d
 80086d8:	0800871d 	.word	0x0800871d
 80086dc:	0800872d 	.word	0x0800872d
 80086e0:	0800872d 	.word	0x0800872d
 80086e4:	0800872d 	.word	0x0800872d
 80086e8:	0800872d 	.word	0x0800872d
 80086ec:	0800872d 	.word	0x0800872d
 80086f0:	0800872d 	.word	0x0800872d
 80086f4:	0800872d 	.word	0x0800872d
 80086f8:	08008725 	.word	0x08008725
 80086fc:	2301      	movs	r3, #1
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008702:	e1c0      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008704:	2304      	movs	r3, #4
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800870a:	e1bc      	b.n	8008a86 <UART_SetConfig+0x7ae>
 800870c:	2308      	movs	r3, #8
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008712:	e1b8      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008714:	2310      	movs	r3, #16
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800871a:	e1b4      	b.n	8008a86 <UART_SetConfig+0x7ae>
 800871c:	2320      	movs	r3, #32
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008722:	e1b0      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008724:	2340      	movs	r3, #64	@ 0x40
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800872a:	e1ac      	b.n	8008a86 <UART_SetConfig+0x7ae>
 800872c:	2380      	movs	r3, #128	@ 0x80
 800872e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008732:	e1a8      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a75      	ldr	r2, [pc, #468]	@ (8008910 <UART_SetConfig+0x638>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d130      	bne.n	80087a0 <UART_SetConfig+0x4c8>
 800873e:	4b73      	ldr	r3, [pc, #460]	@ (800890c <UART_SetConfig+0x634>)
 8008740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	2b05      	cmp	r3, #5
 8008748:	d826      	bhi.n	8008798 <UART_SetConfig+0x4c0>
 800874a:	a201      	add	r2, pc, #4	@ (adr r2, 8008750 <UART_SetConfig+0x478>)
 800874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008750:	08008769 	.word	0x08008769
 8008754:	08008771 	.word	0x08008771
 8008758:	08008779 	.word	0x08008779
 800875c:	08008781 	.word	0x08008781
 8008760:	08008789 	.word	0x08008789
 8008764:	08008791 	.word	0x08008791
 8008768:	2300      	movs	r3, #0
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800876e:	e18a      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008770:	2304      	movs	r3, #4
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008776:	e186      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008778:	2308      	movs	r3, #8
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800877e:	e182      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008780:	2310      	movs	r3, #16
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008786:	e17e      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008788:	2320      	movs	r3, #32
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800878e:	e17a      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008790:	2340      	movs	r3, #64	@ 0x40
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008796:	e176      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008798:	2380      	movs	r3, #128	@ 0x80
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800879e:	e172      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a5b      	ldr	r2, [pc, #364]	@ (8008914 <UART_SetConfig+0x63c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d130      	bne.n	800880c <UART_SetConfig+0x534>
 80087aa:	4b58      	ldr	r3, [pc, #352]	@ (800890c <UART_SetConfig+0x634>)
 80087ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	2b05      	cmp	r3, #5
 80087b4:	d826      	bhi.n	8008804 <UART_SetConfig+0x52c>
 80087b6:	a201      	add	r2, pc, #4	@ (adr r2, 80087bc <UART_SetConfig+0x4e4>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	080087d5 	.word	0x080087d5
 80087c0:	080087dd 	.word	0x080087dd
 80087c4:	080087e5 	.word	0x080087e5
 80087c8:	080087ed 	.word	0x080087ed
 80087cc:	080087f5 	.word	0x080087f5
 80087d0:	080087fd 	.word	0x080087fd
 80087d4:	2300      	movs	r3, #0
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087da:	e154      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80087dc:	2304      	movs	r3, #4
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e2:	e150      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80087e4:	2308      	movs	r3, #8
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ea:	e14c      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80087ec:	2310      	movs	r3, #16
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087f2:	e148      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80087f4:	2320      	movs	r3, #32
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087fa:	e144      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80087fc:	2340      	movs	r3, #64	@ 0x40
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008802:	e140      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008804:	2380      	movs	r3, #128	@ 0x80
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800880a:	e13c      	b.n	8008a86 <UART_SetConfig+0x7ae>
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a41      	ldr	r2, [pc, #260]	@ (8008918 <UART_SetConfig+0x640>)
 8008812:	4293      	cmp	r3, r2
 8008814:	f040 8082 	bne.w	800891c <UART_SetConfig+0x644>
 8008818:	4b3c      	ldr	r3, [pc, #240]	@ (800890c <UART_SetConfig+0x634>)
 800881a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008820:	2b28      	cmp	r3, #40	@ 0x28
 8008822:	d86d      	bhi.n	8008900 <UART_SetConfig+0x628>
 8008824:	a201      	add	r2, pc, #4	@ (adr r2, 800882c <UART_SetConfig+0x554>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	080088d1 	.word	0x080088d1
 8008830:	08008901 	.word	0x08008901
 8008834:	08008901 	.word	0x08008901
 8008838:	08008901 	.word	0x08008901
 800883c:	08008901 	.word	0x08008901
 8008840:	08008901 	.word	0x08008901
 8008844:	08008901 	.word	0x08008901
 8008848:	08008901 	.word	0x08008901
 800884c:	080088d9 	.word	0x080088d9
 8008850:	08008901 	.word	0x08008901
 8008854:	08008901 	.word	0x08008901
 8008858:	08008901 	.word	0x08008901
 800885c:	08008901 	.word	0x08008901
 8008860:	08008901 	.word	0x08008901
 8008864:	08008901 	.word	0x08008901
 8008868:	08008901 	.word	0x08008901
 800886c:	080088e1 	.word	0x080088e1
 8008870:	08008901 	.word	0x08008901
 8008874:	08008901 	.word	0x08008901
 8008878:	08008901 	.word	0x08008901
 800887c:	08008901 	.word	0x08008901
 8008880:	08008901 	.word	0x08008901
 8008884:	08008901 	.word	0x08008901
 8008888:	08008901 	.word	0x08008901
 800888c:	080088e9 	.word	0x080088e9
 8008890:	08008901 	.word	0x08008901
 8008894:	08008901 	.word	0x08008901
 8008898:	08008901 	.word	0x08008901
 800889c:	08008901 	.word	0x08008901
 80088a0:	08008901 	.word	0x08008901
 80088a4:	08008901 	.word	0x08008901
 80088a8:	08008901 	.word	0x08008901
 80088ac:	080088f1 	.word	0x080088f1
 80088b0:	08008901 	.word	0x08008901
 80088b4:	08008901 	.word	0x08008901
 80088b8:	08008901 	.word	0x08008901
 80088bc:	08008901 	.word	0x08008901
 80088c0:	08008901 	.word	0x08008901
 80088c4:	08008901 	.word	0x08008901
 80088c8:	08008901 	.word	0x08008901
 80088cc:	080088f9 	.word	0x080088f9
 80088d0:	2301      	movs	r3, #1
 80088d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088d6:	e0d6      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80088d8:	2304      	movs	r3, #4
 80088da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088de:	e0d2      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80088e0:	2308      	movs	r3, #8
 80088e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088e6:	e0ce      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80088e8:	2310      	movs	r3, #16
 80088ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ee:	e0ca      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80088f0:	2320      	movs	r3, #32
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088f6:	e0c6      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80088f8:	2340      	movs	r3, #64	@ 0x40
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fe:	e0c2      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008900:	2380      	movs	r3, #128	@ 0x80
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008906:	e0be      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008908:	40011400 	.word	0x40011400
 800890c:	58024400 	.word	0x58024400
 8008910:	40007800 	.word	0x40007800
 8008914:	40007c00 	.word	0x40007c00
 8008918:	40011800 	.word	0x40011800
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4aad      	ldr	r2, [pc, #692]	@ (8008bd8 <UART_SetConfig+0x900>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d176      	bne.n	8008a14 <UART_SetConfig+0x73c>
 8008926:	4bad      	ldr	r3, [pc, #692]	@ (8008bdc <UART_SetConfig+0x904>)
 8008928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800892a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800892e:	2b28      	cmp	r3, #40	@ 0x28
 8008930:	d86c      	bhi.n	8008a0c <UART_SetConfig+0x734>
 8008932:	a201      	add	r2, pc, #4	@ (adr r2, 8008938 <UART_SetConfig+0x660>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	080089dd 	.word	0x080089dd
 800893c:	08008a0d 	.word	0x08008a0d
 8008940:	08008a0d 	.word	0x08008a0d
 8008944:	08008a0d 	.word	0x08008a0d
 8008948:	08008a0d 	.word	0x08008a0d
 800894c:	08008a0d 	.word	0x08008a0d
 8008950:	08008a0d 	.word	0x08008a0d
 8008954:	08008a0d 	.word	0x08008a0d
 8008958:	080089e5 	.word	0x080089e5
 800895c:	08008a0d 	.word	0x08008a0d
 8008960:	08008a0d 	.word	0x08008a0d
 8008964:	08008a0d 	.word	0x08008a0d
 8008968:	08008a0d 	.word	0x08008a0d
 800896c:	08008a0d 	.word	0x08008a0d
 8008970:	08008a0d 	.word	0x08008a0d
 8008974:	08008a0d 	.word	0x08008a0d
 8008978:	080089ed 	.word	0x080089ed
 800897c:	08008a0d 	.word	0x08008a0d
 8008980:	08008a0d 	.word	0x08008a0d
 8008984:	08008a0d 	.word	0x08008a0d
 8008988:	08008a0d 	.word	0x08008a0d
 800898c:	08008a0d 	.word	0x08008a0d
 8008990:	08008a0d 	.word	0x08008a0d
 8008994:	08008a0d 	.word	0x08008a0d
 8008998:	080089f5 	.word	0x080089f5
 800899c:	08008a0d 	.word	0x08008a0d
 80089a0:	08008a0d 	.word	0x08008a0d
 80089a4:	08008a0d 	.word	0x08008a0d
 80089a8:	08008a0d 	.word	0x08008a0d
 80089ac:	08008a0d 	.word	0x08008a0d
 80089b0:	08008a0d 	.word	0x08008a0d
 80089b4:	08008a0d 	.word	0x08008a0d
 80089b8:	080089fd 	.word	0x080089fd
 80089bc:	08008a0d 	.word	0x08008a0d
 80089c0:	08008a0d 	.word	0x08008a0d
 80089c4:	08008a0d 	.word	0x08008a0d
 80089c8:	08008a0d 	.word	0x08008a0d
 80089cc:	08008a0d 	.word	0x08008a0d
 80089d0:	08008a0d 	.word	0x08008a0d
 80089d4:	08008a0d 	.word	0x08008a0d
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e050      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e04c      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e048      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e044      	b.n	8008a86 <UART_SetConfig+0x7ae>
 80089fc:	2320      	movs	r3, #32
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e040      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008a04:	2340      	movs	r3, #64	@ 0x40
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e03c      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008a0c:	2380      	movs	r3, #128	@ 0x80
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e038      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a71      	ldr	r2, [pc, #452]	@ (8008be0 <UART_SetConfig+0x908>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d130      	bne.n	8008a80 <UART_SetConfig+0x7a8>
 8008a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8008bdc <UART_SetConfig+0x904>)
 8008a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d826      	bhi.n	8008a78 <UART_SetConfig+0x7a0>
 8008a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <UART_SetConfig+0x758>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a49 	.word	0x08008a49
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2302      	movs	r3, #2
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e01a      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e016      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e012      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e00e      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e00a      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008a70:	2340      	movs	r3, #64	@ 0x40
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e006      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008a78:	2380      	movs	r3, #128	@ 0x80
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e002      	b.n	8008a86 <UART_SetConfig+0x7ae>
 8008a80:	2380      	movs	r3, #128	@ 0x80
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a55      	ldr	r2, [pc, #340]	@ (8008be0 <UART_SetConfig+0x908>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	f040 80f8 	bne.w	8008c82 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	dc46      	bgt.n	8008b28 <UART_SetConfig+0x850>
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	db75      	blt.n	8008b8a <UART_SetConfig+0x8b2>
 8008a9e:	3b02      	subs	r3, #2
 8008aa0:	2b1e      	cmp	r3, #30
 8008aa2:	d872      	bhi.n	8008b8a <UART_SetConfig+0x8b2>
 8008aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8008aac <UART_SetConfig+0x7d4>)
 8008aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aaa:	bf00      	nop
 8008aac:	08008b2f 	.word	0x08008b2f
 8008ab0:	08008b8b 	.word	0x08008b8b
 8008ab4:	08008b37 	.word	0x08008b37
 8008ab8:	08008b8b 	.word	0x08008b8b
 8008abc:	08008b8b 	.word	0x08008b8b
 8008ac0:	08008b8b 	.word	0x08008b8b
 8008ac4:	08008b47 	.word	0x08008b47
 8008ac8:	08008b8b 	.word	0x08008b8b
 8008acc:	08008b8b 	.word	0x08008b8b
 8008ad0:	08008b8b 	.word	0x08008b8b
 8008ad4:	08008b8b 	.word	0x08008b8b
 8008ad8:	08008b8b 	.word	0x08008b8b
 8008adc:	08008b8b 	.word	0x08008b8b
 8008ae0:	08008b8b 	.word	0x08008b8b
 8008ae4:	08008b57 	.word	0x08008b57
 8008ae8:	08008b8b 	.word	0x08008b8b
 8008aec:	08008b8b 	.word	0x08008b8b
 8008af0:	08008b8b 	.word	0x08008b8b
 8008af4:	08008b8b 	.word	0x08008b8b
 8008af8:	08008b8b 	.word	0x08008b8b
 8008afc:	08008b8b 	.word	0x08008b8b
 8008b00:	08008b8b 	.word	0x08008b8b
 8008b04:	08008b8b 	.word	0x08008b8b
 8008b08:	08008b8b 	.word	0x08008b8b
 8008b0c:	08008b8b 	.word	0x08008b8b
 8008b10:	08008b8b 	.word	0x08008b8b
 8008b14:	08008b8b 	.word	0x08008b8b
 8008b18:	08008b8b 	.word	0x08008b8b
 8008b1c:	08008b8b 	.word	0x08008b8b
 8008b20:	08008b8b 	.word	0x08008b8b
 8008b24:	08008b7d 	.word	0x08008b7d
 8008b28:	2b40      	cmp	r3, #64	@ 0x40
 8008b2a:	d02a      	beq.n	8008b82 <UART_SetConfig+0x8aa>
 8008b2c:	e02d      	b.n	8008b8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008b2e:	f7fc ffed 	bl	8005b0c <HAL_RCCEx_GetD3PCLK1Freq>
 8008b32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008b34:	e02f      	b.n	8008b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fc fffc 	bl	8005b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b44:	e027      	b.n	8008b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b46:	f107 0318 	add.w	r3, r7, #24
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd f948 	bl	8005de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b54:	e01f      	b.n	8008b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b56:	4b21      	ldr	r3, [pc, #132]	@ (8008bdc <UART_SetConfig+0x904>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d009      	beq.n	8008b76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b62:	4b1e      	ldr	r3, [pc, #120]	@ (8008bdc <UART_SetConfig+0x904>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	08db      	lsrs	r3, r3, #3
 8008b68:	f003 0303 	and.w	r3, r3, #3
 8008b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8008be4 <UART_SetConfig+0x90c>)
 8008b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b74:	e00f      	b.n	8008b96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008b76:	4b1b      	ldr	r3, [pc, #108]	@ (8008be4 <UART_SetConfig+0x90c>)
 8008b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b7a:	e00c      	b.n	8008b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8008be8 <UART_SetConfig+0x910>)
 8008b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b80:	e009      	b.n	8008b96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b88:	e005      	b.n	8008b96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008b94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 81ee 	beq.w	8008f7a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba2:	4a12      	ldr	r2, [pc, #72]	@ (8008bec <UART_SetConfig+0x914>)
 8008ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bb0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	4413      	add	r3, r2
 8008bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d305      	bcc.n	8008bce <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d910      	bls.n	8008bf0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008bd4:	e1d1      	b.n	8008f7a <UART_SetConfig+0xca2>
 8008bd6:	bf00      	nop
 8008bd8:	40011c00 	.word	0x40011c00
 8008bdc:	58024400 	.word	0x58024400
 8008be0:	58000c00 	.word	0x58000c00
 8008be4:	03d09000 	.word	0x03d09000
 8008be8:	003d0900 	.word	0x003d0900
 8008bec:	0800dd30 	.word	0x0800dd30
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	60bb      	str	r3, [r7, #8]
 8008bf6:	60fa      	str	r2, [r7, #12]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	4ac0      	ldr	r2, [pc, #768]	@ (8008f00 <UART_SetConfig+0xc28>)
 8008bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	2200      	movs	r2, #0
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008c12:	f7f7 fbbd 	bl	8000390 <__aeabi_uldivmod>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	f04f 0200 	mov.w	r2, #0
 8008c22:	f04f 0300 	mov.w	r3, #0
 8008c26:	020b      	lsls	r3, r1, #8
 8008c28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c2c:	0202      	lsls	r2, r0, #8
 8008c2e:	6979      	ldr	r1, [r7, #20]
 8008c30:	6849      	ldr	r1, [r1, #4]
 8008c32:	0849      	lsrs	r1, r1, #1
 8008c34:	2000      	movs	r0, #0
 8008c36:	460c      	mov	r4, r1
 8008c38:	4605      	mov	r5, r0
 8008c3a:	eb12 0804 	adds.w	r8, r2, r4
 8008c3e:	eb43 0905 	adc.w	r9, r3, r5
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	469a      	mov	sl, r3
 8008c4a:	4693      	mov	fp, r2
 8008c4c:	4652      	mov	r2, sl
 8008c4e:	465b      	mov	r3, fp
 8008c50:	4640      	mov	r0, r8
 8008c52:	4649      	mov	r1, r9
 8008c54:	f7f7 fb9c 	bl	8000390 <__aeabi_uldivmod>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c66:	d308      	bcc.n	8008c7a <UART_SetConfig+0x9a2>
 8008c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c6e:	d204      	bcs.n	8008c7a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c76:	60da      	str	r2, [r3, #12]
 8008c78:	e17f      	b.n	8008f7a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008c80:	e17b      	b.n	8008f7a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c8a:	f040 80bd 	bne.w	8008e08 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008c8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c92:	2b20      	cmp	r3, #32
 8008c94:	dc48      	bgt.n	8008d28 <UART_SetConfig+0xa50>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	db7b      	blt.n	8008d92 <UART_SetConfig+0xaba>
 8008c9a:	2b20      	cmp	r3, #32
 8008c9c:	d879      	bhi.n	8008d92 <UART_SetConfig+0xaba>
 8008c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca4 <UART_SetConfig+0x9cc>)
 8008ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca4:	08008d2f 	.word	0x08008d2f
 8008ca8:	08008d37 	.word	0x08008d37
 8008cac:	08008d93 	.word	0x08008d93
 8008cb0:	08008d93 	.word	0x08008d93
 8008cb4:	08008d3f 	.word	0x08008d3f
 8008cb8:	08008d93 	.word	0x08008d93
 8008cbc:	08008d93 	.word	0x08008d93
 8008cc0:	08008d93 	.word	0x08008d93
 8008cc4:	08008d4f 	.word	0x08008d4f
 8008cc8:	08008d93 	.word	0x08008d93
 8008ccc:	08008d93 	.word	0x08008d93
 8008cd0:	08008d93 	.word	0x08008d93
 8008cd4:	08008d93 	.word	0x08008d93
 8008cd8:	08008d93 	.word	0x08008d93
 8008cdc:	08008d93 	.word	0x08008d93
 8008ce0:	08008d93 	.word	0x08008d93
 8008ce4:	08008d5f 	.word	0x08008d5f
 8008ce8:	08008d93 	.word	0x08008d93
 8008cec:	08008d93 	.word	0x08008d93
 8008cf0:	08008d93 	.word	0x08008d93
 8008cf4:	08008d93 	.word	0x08008d93
 8008cf8:	08008d93 	.word	0x08008d93
 8008cfc:	08008d93 	.word	0x08008d93
 8008d00:	08008d93 	.word	0x08008d93
 8008d04:	08008d93 	.word	0x08008d93
 8008d08:	08008d93 	.word	0x08008d93
 8008d0c:	08008d93 	.word	0x08008d93
 8008d10:	08008d93 	.word	0x08008d93
 8008d14:	08008d93 	.word	0x08008d93
 8008d18:	08008d93 	.word	0x08008d93
 8008d1c:	08008d93 	.word	0x08008d93
 8008d20:	08008d93 	.word	0x08008d93
 8008d24:	08008d85 	.word	0x08008d85
 8008d28:	2b40      	cmp	r3, #64	@ 0x40
 8008d2a:	d02e      	beq.n	8008d8a <UART_SetConfig+0xab2>
 8008d2c:	e031      	b.n	8008d92 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d2e:	f7fb fd03 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 8008d32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d34:	e033      	b.n	8008d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d36:	f7fb fd15 	bl	8004764 <HAL_RCC_GetPCLK2Freq>
 8008d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008d3c:	e02f      	b.n	8008d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fc fef8 	bl	8005b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d4c:	e027      	b.n	8008d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d4e:	f107 0318 	add.w	r3, r7, #24
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fd f844 	bl	8005de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d5c:	e01f      	b.n	8008d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d5e:	4b69      	ldr	r3, [pc, #420]	@ (8008f04 <UART_SetConfig+0xc2c>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d009      	beq.n	8008d7e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008d6a:	4b66      	ldr	r3, [pc, #408]	@ (8008f04 <UART_SetConfig+0xc2c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	08db      	lsrs	r3, r3, #3
 8008d70:	f003 0303 	and.w	r3, r3, #3
 8008d74:	4a64      	ldr	r2, [pc, #400]	@ (8008f08 <UART_SetConfig+0xc30>)
 8008d76:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008d7c:	e00f      	b.n	8008d9e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008d7e:	4b62      	ldr	r3, [pc, #392]	@ (8008f08 <UART_SetConfig+0xc30>)
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d82:	e00c      	b.n	8008d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d84:	4b61      	ldr	r3, [pc, #388]	@ (8008f0c <UART_SetConfig+0xc34>)
 8008d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d88:	e009      	b.n	8008d9e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d90:	e005      	b.n	8008d9e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 80ea 	beq.w	8008f7a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	4a55      	ldr	r2, [pc, #340]	@ (8008f00 <UART_SetConfig+0xc28>)
 8008dac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008db0:	461a      	mov	r2, r3
 8008db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008db8:	005a      	lsls	r2, r3, #1
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	441a      	add	r2, r3
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dce:	2b0f      	cmp	r3, #15
 8008dd0:	d916      	bls.n	8008e00 <UART_SetConfig+0xb28>
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd8:	d212      	bcs.n	8008e00 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	f023 030f 	bic.w	r3, r3, #15
 8008de2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	f003 0307 	and.w	r3, r3, #7
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008df2:	4313      	orrs	r3, r2
 8008df4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008dfc:	60da      	str	r2, [r3, #12]
 8008dfe:	e0bc      	b.n	8008f7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008e06:	e0b8      	b.n	8008f7a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e0c:	2b20      	cmp	r3, #32
 8008e0e:	dc4b      	bgt.n	8008ea8 <UART_SetConfig+0xbd0>
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f2c0 8087 	blt.w	8008f24 <UART_SetConfig+0xc4c>
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	f200 8084 	bhi.w	8008f24 <UART_SetConfig+0xc4c>
 8008e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e24 <UART_SetConfig+0xb4c>)
 8008e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e22:	bf00      	nop
 8008e24:	08008eaf 	.word	0x08008eaf
 8008e28:	08008eb7 	.word	0x08008eb7
 8008e2c:	08008f25 	.word	0x08008f25
 8008e30:	08008f25 	.word	0x08008f25
 8008e34:	08008ebf 	.word	0x08008ebf
 8008e38:	08008f25 	.word	0x08008f25
 8008e3c:	08008f25 	.word	0x08008f25
 8008e40:	08008f25 	.word	0x08008f25
 8008e44:	08008ecf 	.word	0x08008ecf
 8008e48:	08008f25 	.word	0x08008f25
 8008e4c:	08008f25 	.word	0x08008f25
 8008e50:	08008f25 	.word	0x08008f25
 8008e54:	08008f25 	.word	0x08008f25
 8008e58:	08008f25 	.word	0x08008f25
 8008e5c:	08008f25 	.word	0x08008f25
 8008e60:	08008f25 	.word	0x08008f25
 8008e64:	08008edf 	.word	0x08008edf
 8008e68:	08008f25 	.word	0x08008f25
 8008e6c:	08008f25 	.word	0x08008f25
 8008e70:	08008f25 	.word	0x08008f25
 8008e74:	08008f25 	.word	0x08008f25
 8008e78:	08008f25 	.word	0x08008f25
 8008e7c:	08008f25 	.word	0x08008f25
 8008e80:	08008f25 	.word	0x08008f25
 8008e84:	08008f25 	.word	0x08008f25
 8008e88:	08008f25 	.word	0x08008f25
 8008e8c:	08008f25 	.word	0x08008f25
 8008e90:	08008f25 	.word	0x08008f25
 8008e94:	08008f25 	.word	0x08008f25
 8008e98:	08008f25 	.word	0x08008f25
 8008e9c:	08008f25 	.word	0x08008f25
 8008ea0:	08008f25 	.word	0x08008f25
 8008ea4:	08008f17 	.word	0x08008f17
 8008ea8:	2b40      	cmp	r3, #64	@ 0x40
 8008eaa:	d037      	beq.n	8008f1c <UART_SetConfig+0xc44>
 8008eac:	e03a      	b.n	8008f24 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eae:	f7fb fc43 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 8008eb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008eb4:	e03c      	b.n	8008f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008eb6:	f7fb fc55 	bl	8004764 <HAL_RCC_GetPCLK2Freq>
 8008eba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ebc:	e038      	b.n	8008f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fc fe38 	bl	8005b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ecc:	e030      	b.n	8008f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ece:	f107 0318 	add.w	r3, r7, #24
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fc ff84 	bl	8005de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008edc:	e028      	b.n	8008f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ede:	4b09      	ldr	r3, [pc, #36]	@ (8008f04 <UART_SetConfig+0xc2c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 0320 	and.w	r3, r3, #32
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d012      	beq.n	8008f10 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008eea:	4b06      	ldr	r3, [pc, #24]	@ (8008f04 <UART_SetConfig+0xc2c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	08db      	lsrs	r3, r3, #3
 8008ef0:	f003 0303 	and.w	r3, r3, #3
 8008ef4:	4a04      	ldr	r2, [pc, #16]	@ (8008f08 <UART_SetConfig+0xc30>)
 8008ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8008efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008efc:	e018      	b.n	8008f30 <UART_SetConfig+0xc58>
 8008efe:	bf00      	nop
 8008f00:	0800dd30 	.word	0x0800dd30
 8008f04:	58024400 	.word	0x58024400
 8008f08:	03d09000 	.word	0x03d09000
 8008f0c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008f10:	4b24      	ldr	r3, [pc, #144]	@ (8008fa4 <UART_SetConfig+0xccc>)
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f14:	e00c      	b.n	8008f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f16:	4b24      	ldr	r3, [pc, #144]	@ (8008fa8 <UART_SetConfig+0xcd0>)
 8008f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f1a:	e009      	b.n	8008f30 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f22:	e005      	b.n	8008f30 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f2e:	bf00      	nop
    }

    if (pclk != 0U)
 8008f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d021      	beq.n	8008f7a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8008fac <UART_SetConfig+0xcd4>)
 8008f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f40:	461a      	mov	r2, r3
 8008f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f44:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	085b      	lsrs	r3, r3, #1
 8008f4e:	441a      	add	r2, r3
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f58:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5c:	2b0f      	cmp	r3, #15
 8008f5e:	d909      	bls.n	8008f74 <UART_SetConfig+0xc9c>
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f66:	d205      	bcs.n	8008f74 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	60da      	str	r2, [r3, #12]
 8008f72:	e002      	b.n	8008f7a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	2200      	movs	r2, #0
 8008f94:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008f96:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3748      	adds	r7, #72	@ 0x48
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fa4:	03d09000 	.word	0x03d09000
 8008fa8:	003d0900 	.word	0x003d0900
 8008fac:	0800dd30 	.word	0x0800dd30

08008fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fbc:	f003 0308 	and.w	r3, r3, #8
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00a      	beq.n	8008fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01a      	beq.n	80090c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090ae:	d10a      	bne.n	80090c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	605a      	str	r2, [r3, #4]
  }
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b098      	sub	sp, #96	@ 0x60
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009104:	f7f9 fb5e 	bl	80027c4 <HAL_GetTick>
 8009108:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 0308 	and.w	r3, r3, #8
 8009114:	2b08      	cmp	r3, #8
 8009116:	d12f      	bne.n	8009178 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009118:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009120:	2200      	movs	r2, #0
 8009122:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f88e 	bl	8009248 <UART_WaitOnFlagUntilTimeout>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d022      	beq.n	8009178 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009146:	653b      	str	r3, [r7, #80]	@ 0x50
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	461a      	mov	r2, r3
 800914e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009150:	647b      	str	r3, [r7, #68]	@ 0x44
 8009152:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009154:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009158:	e841 2300 	strex	r3, r2, [r1]
 800915c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800915e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e6      	bne.n	8009132 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2220      	movs	r2, #32
 8009168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e063      	b.n	8009240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0304 	and.w	r3, r3, #4
 8009182:	2b04      	cmp	r3, #4
 8009184:	d149      	bne.n	800921a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009186:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800918e:	2200      	movs	r2, #0
 8009190:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 f857 	bl	8009248 <UART_WaitOnFlagUntilTimeout>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d03c      	beq.n	800921a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	623b      	str	r3, [r7, #32]
   return(result);
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091be:	633b      	str	r3, [r7, #48]	@ 0x30
 80091c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e6      	bne.n	80091a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3308      	adds	r3, #8
 80091d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f023 0301 	bic.w	r3, r3, #1
 80091e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3308      	adds	r3, #8
 80091f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091f2:	61fa      	str	r2, [r7, #28]
 80091f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	69b9      	ldr	r1, [r7, #24]
 80091f8:	69fa      	ldr	r2, [r7, #28]
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e5      	bne.n	80091d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2220      	movs	r2, #32
 800920a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e012      	b.n	8009240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2220      	movs	r2, #32
 800921e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2220      	movs	r2, #32
 8009226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3758      	adds	r7, #88	@ 0x58
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	4613      	mov	r3, r2
 8009256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009258:	e04f      	b.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d04b      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009262:	f7f9 faaf 	bl	80027c4 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	429a      	cmp	r2, r3
 8009270:	d302      	bcc.n	8009278 <UART_WaitOnFlagUntilTimeout+0x30>
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e04e      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	d037      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b80      	cmp	r3, #128	@ 0x80
 800928e:	d034      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2b40      	cmp	r3, #64	@ 0x40
 8009294:	d031      	beq.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	69db      	ldr	r3, [r3, #28]
 800929c:	f003 0308 	and.w	r3, r3, #8
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	d110      	bne.n	80092c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2208      	movs	r2, #8
 80092aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 f839 	bl	8009324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2208      	movs	r2, #8
 80092b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e029      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092d4:	d111      	bne.n	80092fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f81f 	bl	8009324 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2220      	movs	r2, #32
 80092ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e00f      	b.n	800931a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	69da      	ldr	r2, [r3, #28]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	4013      	ands	r3, r2
 8009304:	68ba      	ldr	r2, [r7, #8]
 8009306:	429a      	cmp	r2, r3
 8009308:	bf0c      	ite	eq
 800930a:	2301      	moveq	r3, #1
 800930c:	2300      	movne	r3, #0
 800930e:	b2db      	uxtb	r3, r3
 8009310:	461a      	mov	r2, r3
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	429a      	cmp	r2, r3
 8009316:	d0a0      	beq.n	800925a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009324:	b480      	push	{r7}
 8009326:	b095      	sub	sp, #84	@ 0x54
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800933a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009340:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	461a      	mov	r2, r3
 8009348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934a:	643b      	str	r3, [r7, #64]	@ 0x40
 800934c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009350:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e6      	bne.n	800932c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3308      	adds	r3, #8
 8009364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	e853 3f00 	ldrex	r3, [r3]
 800936c:	61fb      	str	r3, [r7, #28]
   return(result);
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	4b1e      	ldr	r3, [pc, #120]	@ (80093ec <UART_EndRxTransfer+0xc8>)
 8009372:	4013      	ands	r3, r2
 8009374:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3308      	adds	r3, #8
 800937c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800937e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009380:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009382:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e5      	bne.n	800935e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009396:	2b01      	cmp	r3, #1
 8009398:	d118      	bne.n	80093cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f023 0310 	bic.w	r3, r3, #16
 80093ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093b8:	61bb      	str	r3, [r7, #24]
 80093ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6979      	ldr	r1, [r7, #20]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	613b      	str	r3, [r7, #16]
   return(result);
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e6      	bne.n	800939a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2220      	movs	r2, #32
 80093d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80093e0:	bf00      	nop
 80093e2:	3754      	adds	r7, #84	@ 0x54
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	effffffe 	.word	0xeffffffe

080093f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_UARTEx_DisableFifoMode+0x16>
 8009402:	2302      	movs	r3, #2
 8009404:	e027      	b.n	8009456 <HAL_UARTEx_DisableFifoMode+0x66>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2224      	movs	r2, #36	@ 0x24
 8009412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0201 	bic.w	r2, r2, #1
 800942c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009434:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3714      	adds	r7, #20
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
 800946a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009472:	2b01      	cmp	r3, #1
 8009474:	d101      	bne.n	800947a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009476:	2302      	movs	r3, #2
 8009478:	e02d      	b.n	80094d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2201      	movs	r2, #1
 800947e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2224      	movs	r2, #36	@ 0x24
 8009486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f022 0201 	bic.w	r2, r2, #1
 80094a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f850 	bl	800955c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2220      	movs	r2, #32
 80094c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d101      	bne.n	80094f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094f2:	2302      	movs	r3, #2
 80094f4:	e02d      	b.n	8009552 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2224      	movs	r2, #36	@ 0x24
 8009502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0201 	bic.w	r2, r2, #1
 800951c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	430a      	orrs	r2, r1
 8009530:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f812 	bl	800955c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b085      	sub	sp, #20
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009568:	2b00      	cmp	r3, #0
 800956a:	d108      	bne.n	800957e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800957c:	e031      	b.n	80095e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800957e:	2310      	movs	r3, #16
 8009580:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009582:	2310      	movs	r3, #16
 8009584:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	0e5b      	lsrs	r3, r3, #25
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	0f5b      	lsrs	r3, r3, #29
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 0307 	and.w	r3, r3, #7
 80095a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	7b3a      	ldrb	r2, [r7, #12]
 80095aa:	4911      	ldr	r1, [pc, #68]	@ (80095f0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ac:	5c8a      	ldrb	r2, [r1, r2]
 80095ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095b2:	7b3a      	ldrb	r2, [r7, #12]
 80095b4:	490f      	ldr	r1, [pc, #60]	@ (80095f4 <UARTEx_SetNbDataToProcess+0x98>)
 80095b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095bc:	b29a      	uxth	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	7b7a      	ldrb	r2, [r7, #13]
 80095c8:	4909      	ldr	r1, [pc, #36]	@ (80095f0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ca:	5c8a      	ldrb	r2, [r1, r2]
 80095cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095d0:	7b7a      	ldrb	r2, [r7, #13]
 80095d2:	4908      	ldr	r1, [pc, #32]	@ (80095f4 <UARTEx_SetNbDataToProcess+0x98>)
 80095d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80095da:	b29a      	uxth	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80095e2:	bf00      	nop
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	0800dd48 	.word	0x0800dd48
 80095f4:	0800dd50 	.word	0x0800dd50

080095f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80095fc:	4904      	ldr	r1, [pc, #16]	@ (8009610 <MX_FATFS_Init+0x18>)
 80095fe:	4805      	ldr	r0, [pc, #20]	@ (8009614 <MX_FATFS_Init+0x1c>)
 8009600:	f004 f8c6 	bl	800d790 <FATFS_LinkDriver>
 8009604:	4603      	mov	r3, r0
 8009606:	461a      	mov	r2, r3
 8009608:	4b03      	ldr	r3, [pc, #12]	@ (8009618 <MX_FATFS_Init+0x20>)
 800960a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800960c:	bf00      	nop
 800960e:	bd80      	pop	{r7, pc}
 8009610:	240026c8 	.word	0x240026c8
 8009614:	2400001c 	.word	0x2400001c
 8009618:	240026c4 	.word	0x240026c4

0800961c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009620:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009622:	4618      	mov	r0, r3
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8009636:	79fb      	ldrb	r3, [r7, #7]
 8009638:	4618      	mov	r0, r3
 800963a:	f000 f9fd 	bl	8009a38 <SD_disk_initialize>
 800963e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fad5 	bl	8009c04 <SD_disk_status>
 800965a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800965c:	4618      	mov	r0, r3
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	607a      	str	r2, [r7, #4]
 800966e:	603b      	str	r3, [r7, #0]
 8009670:	4603      	mov	r3, r0
 8009672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8009674:	7bf8      	ldrb	r0, [r7, #15]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	68b9      	ldr	r1, [r7, #8]
 800967c:	f000 fad8 	bl	8009c30 <SD_disk_read>
 8009680:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800968a:	b580      	push	{r7, lr}
 800968c:	b084      	sub	sp, #16
 800968e:	af00      	add	r7, sp, #0
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	603b      	str	r3, [r7, #0]
 8009696:	4603      	mov	r3, r0
 8009698:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800969a:	7bf8      	ldrb	r0, [r7, #15]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	68b9      	ldr	r1, [r7, #8]
 80096a2:	f000 fb2f 	bl	8009d04 <SD_disk_write>
 80096a6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	603a      	str	r2, [r7, #0]
 80096ba:	71fb      	strb	r3, [r7, #7]
 80096bc:	460b      	mov	r3, r1
 80096be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80096c0:	79b9      	ldrb	r1, [r7, #6]
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fba0 	bl	8009e0c <SD_disk_ioctl>
 80096cc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80096dc:	2200      	movs	r2, #0
 80096de:	2110      	movs	r1, #16
 80096e0:	4802      	ldr	r0, [pc, #8]	@ (80096ec <SELECT+0x14>)
 80096e2:	f7f9 ff0f 	bl	8003504 <HAL_GPIO_WritePin>
}
 80096e6:	bf00      	nop
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	58020000 	.word	0x58020000

080096f0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80096f4:	2201      	movs	r2, #1
 80096f6:	2110      	movs	r1, #16
 80096f8:	4802      	ldr	r0, [pc, #8]	@ (8009704 <DESELECT+0x14>)
 80096fa:	f7f9 ff03 	bl	8003504 <HAL_GPIO_WritePin>
}
 80096fe:	bf00      	nop
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	58020000 	.word	0x58020000

08009708 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8009712:	bf00      	nop
 8009714:	4b08      	ldr	r3, [pc, #32]	@ (8009738 <SPI_TxByte+0x30>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b02      	cmp	r3, #2
 8009720:	d1f8      	bne.n	8009714 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8009722:	1df9      	adds	r1, r7, #7
 8009724:	2364      	movs	r3, #100	@ 0x64
 8009726:	2201      	movs	r2, #1
 8009728:	4803      	ldr	r0, [pc, #12]	@ (8009738 <SPI_TxByte+0x30>)
 800972a:	f7fc ff35 	bl	8006598 <HAL_SPI_Transmit>
}
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	2400223c 	.word	0x2400223c

0800973c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8009748:	bf00      	nop
 800974a:	4b08      	ldr	r3, [pc, #32]	@ (800976c <SPI_TxBuffer+0x30>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b02      	cmp	r3, #2
 8009756:	d1f8      	bne.n	800974a <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8009758:	887a      	ldrh	r2, [r7, #2]
 800975a:	2364      	movs	r3, #100	@ 0x64
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	4803      	ldr	r0, [pc, #12]	@ (800976c <SPI_TxBuffer+0x30>)
 8009760:	f7fc ff1a 	bl	8006598 <HAL_SPI_Transmit>
}
 8009764:	bf00      	nop
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	2400223c 	.word	0x2400223c

08009770 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8009776:	23ff      	movs	r3, #255	@ 0xff
 8009778:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800977a:	bf00      	nop
 800977c:	4b09      	ldr	r3, [pc, #36]	@ (80097a4 <SPI_RxByte+0x34>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	f003 0302 	and.w	r3, r3, #2
 8009786:	2b02      	cmp	r3, #2
 8009788:	d1f8      	bne.n	800977c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800978a:	1dba      	adds	r2, r7, #6
 800978c:	1df9      	adds	r1, r7, #7
 800978e:	2364      	movs	r3, #100	@ 0x64
 8009790:	9300      	str	r3, [sp, #0]
 8009792:	2301      	movs	r3, #1
 8009794:	4803      	ldr	r0, [pc, #12]	@ (80097a4 <SPI_RxByte+0x34>)
 8009796:	f7fd fb5f 	bl	8006e58 <HAL_SPI_TransmitReceive>
  return data;
 800979a:	79bb      	ldrb	r3, [r7, #6]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	2400223c 	.word	0x2400223c

080097a8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80097b0:	f7ff ffde 	bl	8009770 <SPI_RxByte>
 80097b4:	4603      	mov	r3, r0
 80097b6:	461a      	mov	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	701a      	strb	r2, [r3, #0]
}
 80097bc:	bf00      	nop
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 80097ca:	4b0a      	ldr	r3, [pc, #40]	@ (80097f4 <SD_ReadyWait+0x30>)
 80097cc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80097d0:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 80097d2:	f7ff ffcd 	bl	8009770 <SPI_RxByte>
 80097d6:	4603      	mov	r3, r0
 80097d8:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	2bff      	cmp	r3, #255	@ 0xff
 80097de:	d003      	beq.n	80097e8 <SD_ReadyWait+0x24>
 80097e0:	4b04      	ldr	r3, [pc, #16]	@ (80097f4 <SD_ReadyWait+0x30>)
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1f4      	bne.n	80097d2 <SD_ReadyWait+0xe>
  return res;
 80097e8:	79fb      	ldrb	r3, [r7, #7]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	240026ce 	.word	0x240026ce

080097f8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80097fe:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8009802:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8009804:	f7ff ff74 	bl	80096f0 <DESELECT>
  for(int i = 0; i < 10; i++)
 8009808:	2300      	movs	r3, #0
 800980a:	60bb      	str	r3, [r7, #8]
 800980c:	e005      	b.n	800981a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800980e:	20ff      	movs	r0, #255	@ 0xff
 8009810:	f7ff ff7a 	bl	8009708 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	3301      	adds	r3, #1
 8009818:	60bb      	str	r3, [r7, #8]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b09      	cmp	r3, #9
 800981e:	ddf6      	ble.n	800980e <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 8009820:	f7ff ff5a 	bl	80096d8 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8009824:	2340      	movs	r3, #64	@ 0x40
 8009826:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800982c:	2300      	movs	r3, #0
 800982e:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 8009838:	2395      	movs	r3, #149	@ 0x95
 800983a:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800983c:	463b      	mov	r3, r7
 800983e:	2106      	movs	r1, #6
 8009840:	4618      	mov	r0, r3
 8009842:	f7ff ff7b 	bl	800973c <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8009846:	e002      	b.n	800984e <SD_PowerOn+0x56>
  {
    cnt--;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3b01      	subs	r3, #1
 800984c:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800984e:	f7ff ff8f 	bl	8009770 <SPI_RxByte>
 8009852:	4603      	mov	r3, r0
 8009854:	2b01      	cmp	r3, #1
 8009856:	d002      	beq.n	800985e <SD_PowerOn+0x66>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1f4      	bne.n	8009848 <SD_PowerOn+0x50>
  }
  DESELECT();
 800985e:	f7ff ff47 	bl	80096f0 <DESELECT>
  SPI_TxByte(0XFF);
 8009862:	20ff      	movs	r0, #255	@ 0xff
 8009864:	f7ff ff50 	bl	8009708 <SPI_TxByte>
  PowerFlag = 1;
 8009868:	4b03      	ldr	r3, [pc, #12]	@ (8009878 <SD_PowerOn+0x80>)
 800986a:	2201      	movs	r2, #1
 800986c:	701a      	strb	r2, [r3, #0]
}
 800986e:	bf00      	nop
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	240026d1 	.word	0x240026d1

0800987c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800987c:	b480      	push	{r7}
 800987e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8009880:	4b03      	ldr	r3, [pc, #12]	@ (8009890 <SD_PowerOff+0x14>)
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
}
 8009886:	bf00      	nop
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr
 8009890:	240026d1 	.word	0x240026d1

08009894 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0
  return PowerFlag;
 8009898:	4b03      	ldr	r3, [pc, #12]	@ (80098a8 <SD_CheckPower+0x14>)
 800989a:	781b      	ldrb	r3, [r3, #0]
}
 800989c:	4618      	mov	r0, r3
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	240026d1 	.word	0x240026d1

080098ac <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 80098b6:	4b13      	ldr	r3, [pc, #76]	@ (8009904 <SD_RxDataBlock+0x58>)
 80098b8:	22c8      	movs	r2, #200	@ 0xc8
 80098ba:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 80098bc:	f7ff ff58 	bl	8009770 <SPI_RxByte>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	2bff      	cmp	r3, #255	@ 0xff
 80098c8:	d103      	bne.n	80098d2 <SD_RxDataBlock+0x26>
 80098ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009904 <SD_RxDataBlock+0x58>)
 80098cc:	881b      	ldrh	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1f4      	bne.n	80098bc <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
 80098d4:	2bfe      	cmp	r3, #254	@ 0xfe
 80098d6:	d001      	beq.n	80098dc <SD_RxDataBlock+0x30>
 80098d8:	2300      	movs	r3, #0
 80098da:	e00f      	b.n	80098fc <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	1c5a      	adds	r2, r3, #1
 80098e0:	607a      	str	r2, [r7, #4]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7ff ff60 	bl	80097a8 <SPI_RxBytePtr>
  } while(len--);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	1e5a      	subs	r2, r3, #1
 80098ec:	603a      	str	r2, [r7, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1f4      	bne.n	80098dc <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 80098f2:	f7ff ff3d 	bl	8009770 <SPI_RxByte>
  SPI_RxByte();
 80098f6:	f7ff ff3b 	bl	8009770 <SPI_RxByte>
  return TRUE;
 80098fa:	2301      	movs	r3, #1
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	240026cc 	.word	0x240026cc

08009908 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8009914:	2300      	movs	r3, #0
 8009916:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8009918:	f7ff ff54 	bl	80097c4 <SD_ReadyWait>
 800991c:	4603      	mov	r3, r0
 800991e:	2bff      	cmp	r3, #255	@ 0xff
 8009920:	d001      	beq.n	8009926 <SD_TxDataBlock+0x1e>
 8009922:	2300      	movs	r3, #0
 8009924:	e02f      	b.n	8009986 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 8009926:	78fb      	ldrb	r3, [r7, #3]
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff feed 	bl	8009708 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800992e:	78fb      	ldrb	r3, [r7, #3]
 8009930:	2bfd      	cmp	r3, #253	@ 0xfd
 8009932:	d020      	beq.n	8009976 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8009934:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff feff 	bl	800973c <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800993e:	f7ff ff17 	bl	8009770 <SPI_RxByte>
    SPI_RxByte();
 8009942:	f7ff ff15 	bl	8009770 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8009946:	e00b      	b.n	8009960 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8009948:	f7ff ff12 	bl	8009770 <SPI_RxByte>
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	f003 031f 	and.w	r3, r3, #31
 8009956:	2b05      	cmp	r3, #5
 8009958:	d006      	beq.n	8009968 <SD_TxDataBlock+0x60>
      i++;
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	3301      	adds	r3, #1
 800995e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b40      	cmp	r3, #64	@ 0x40
 8009964:	d9f0      	bls.n	8009948 <SD_TxDataBlock+0x40>
 8009966:	e000      	b.n	800996a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8009968:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800996a:	bf00      	nop
 800996c:	f7ff ff00 	bl	8009770 <SPI_RxByte>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0fa      	beq.n	800996c <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8009976:	7bfb      	ldrb	r3, [r7, #15]
 8009978:	f003 031f 	and.w	r3, r3, #31
 800997c:	2b05      	cmp	r3, #5
 800997e:	d101      	bne.n	8009984 <SD_TxDataBlock+0x7c>
 8009980:	2301      	movs	r3, #1
 8009982:	e000      	b.n	8009986 <SD_TxDataBlock+0x7e>

  return FALSE;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	4603      	mov	r3, r0
 8009996:	6039      	str	r1, [r7, #0]
 8009998:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800999a:	f7ff ff13 	bl	80097c4 <SD_ReadyWait>
 800999e:	4603      	mov	r3, r0
 80099a0:	2bff      	cmp	r3, #255	@ 0xff
 80099a2:	d001      	beq.n	80099a8 <SD_SendCmd+0x1a>
 80099a4:	23ff      	movs	r3, #255	@ 0xff
 80099a6:	e042      	b.n	8009a2e <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff feac 	bl	8009708 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	0e1b      	lsrs	r3, r3, #24
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff fea6 	bl	8009708 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	0c1b      	lsrs	r3, r3, #16
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff fea0 	bl	8009708 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	0a1b      	lsrs	r3, r3, #8
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff fe9a 	bl	8009708 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff fe95 	bl	8009708 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	2b40      	cmp	r3, #64	@ 0x40
 80099e2:	d102      	bne.n	80099ea <SD_SendCmd+0x5c>
 80099e4:	2395      	movs	r3, #149	@ 0x95
 80099e6:	73fb      	strb	r3, [r7, #15]
 80099e8:	e007      	b.n	80099fa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	2b48      	cmp	r3, #72	@ 0x48
 80099ee:	d102      	bne.n	80099f6 <SD_SendCmd+0x68>
 80099f0:	2387      	movs	r3, #135	@ 0x87
 80099f2:	73fb      	strb	r3, [r7, #15]
 80099f4:	e001      	b.n	80099fa <SD_SendCmd+0x6c>
  else crc = 1;
 80099f6:	2301      	movs	r3, #1
 80099f8:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fe83 	bl	8009708 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	2b4c      	cmp	r3, #76	@ 0x4c
 8009a06:	d101      	bne.n	8009a0c <SD_SendCmd+0x7e>
 8009a08:	f7ff feb2 	bl	8009770 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8009a0c:	230a      	movs	r3, #10
 8009a0e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8009a10:	f7ff feae 	bl	8009770 <SPI_RxByte>
 8009a14:	4603      	mov	r3, r0
 8009a16:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8009a18:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	da05      	bge.n	8009a2c <SD_SendCmd+0x9e>
 8009a20:	7bbb      	ldrb	r3, [r7, #14]
 8009a22:	3b01      	subs	r3, #1
 8009a24:	73bb      	strb	r3, [r7, #14]
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f1      	bne.n	8009a10 <SD_SendCmd+0x82>

  return res;
 8009a2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8009a38:	b590      	push	{r4, r7, lr}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	4603      	mov	r3, r0
 8009a40:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <SD_disk_initialize+0x14>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e0d1      	b.n	8009bf0 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8009a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8009bf8 <SD_disk_initialize+0x1c0>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <SD_disk_initialize+0x2a>
 8009a5a:	4b67      	ldr	r3, [pc, #412]	@ (8009bf8 <SD_disk_initialize+0x1c0>)
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	e0c6      	b.n	8009bf0 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 8009a62:	f7ff fec9 	bl	80097f8 <SD_PowerOn>
  /* slave select */
  SELECT();
 8009a66:	f7ff fe37 	bl	80096d8 <SELECT>
  /* check disk type */
  type = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8009a6e:	2100      	movs	r1, #0
 8009a70:	2040      	movs	r0, #64	@ 0x40
 8009a72:	f7ff ff8c 	bl	800998e <SD_SendCmd>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	f040 80a1 	bne.w	8009bc0 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8009a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8009bfc <SD_disk_initialize+0x1c4>)
 8009a80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009a84:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8009a86:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8009a8a:	2048      	movs	r0, #72	@ 0x48
 8009a8c:	f7ff ff7f 	bl	800998e <SD_SendCmd>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d155      	bne.n	8009b42 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
 8009a9a:	e00c      	b.n	8009ab6 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8009a9c:	7bfc      	ldrb	r4, [r7, #15]
 8009a9e:	f7ff fe67 	bl	8009770 <SPI_RxByte>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	f104 0310 	add.w	r3, r4, #16
 8009aaa:	443b      	add	r3, r7
 8009aac:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	73fb      	strb	r3, [r7, #15]
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d9ef      	bls.n	8009a9c <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8009abc:	7abb      	ldrb	r3, [r7, #10]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d17e      	bne.n	8009bc0 <SD_disk_initialize+0x188>
 8009ac2:	7afb      	ldrb	r3, [r7, #11]
 8009ac4:	2baa      	cmp	r3, #170	@ 0xaa
 8009ac6:	d17b      	bne.n	8009bc0 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8009ac8:	2100      	movs	r1, #0
 8009aca:	2077      	movs	r0, #119	@ 0x77
 8009acc:	f7ff ff5f 	bl	800998e <SD_SendCmd>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d807      	bhi.n	8009ae6 <SD_disk_initialize+0xae>
 8009ad6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8009ada:	2069      	movs	r0, #105	@ 0x69
 8009adc:	f7ff ff57 	bl	800998e <SD_SendCmd>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8009ae6:	4b45      	ldr	r3, [pc, #276]	@ (8009bfc <SD_disk_initialize+0x1c4>)
 8009ae8:	881b      	ldrh	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1ec      	bne.n	8009ac8 <SD_disk_initialize+0x90>
 8009aee:	e000      	b.n	8009af2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8009af0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8009af2:	4b42      	ldr	r3, [pc, #264]	@ (8009bfc <SD_disk_initialize+0x1c4>)
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d062      	beq.n	8009bc0 <SD_disk_initialize+0x188>
 8009afa:	2100      	movs	r1, #0
 8009afc:	207a      	movs	r0, #122	@ 0x7a
 8009afe:	f7ff ff46 	bl	800998e <SD_SendCmd>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d15b      	bne.n	8009bc0 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73fb      	strb	r3, [r7, #15]
 8009b0c:	e00c      	b.n	8009b28 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8009b0e:	7bfc      	ldrb	r4, [r7, #15]
 8009b10:	f7ff fe2e 	bl	8009770 <SPI_RxByte>
 8009b14:	4603      	mov	r3, r0
 8009b16:	461a      	mov	r2, r3
 8009b18:	f104 0310 	add.w	r3, r4, #16
 8009b1c:	443b      	add	r3, r7
 8009b1e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	3301      	adds	r3, #1
 8009b26:	73fb      	strb	r3, [r7, #15]
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d9ef      	bls.n	8009b0e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8009b2e:	7a3b      	ldrb	r3, [r7, #8]
 8009b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <SD_disk_initialize+0x104>
 8009b38:	230c      	movs	r3, #12
 8009b3a:	e000      	b.n	8009b3e <SD_disk_initialize+0x106>
 8009b3c:	2304      	movs	r3, #4
 8009b3e:	73bb      	strb	r3, [r7, #14]
 8009b40:	e03e      	b.n	8009bc0 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8009b42:	2100      	movs	r1, #0
 8009b44:	2077      	movs	r0, #119	@ 0x77
 8009b46:	f7ff ff22 	bl	800998e <SD_SendCmd>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d808      	bhi.n	8009b62 <SD_disk_initialize+0x12a>
 8009b50:	2100      	movs	r1, #0
 8009b52:	2069      	movs	r0, #105	@ 0x69
 8009b54:	f7ff ff1b 	bl	800998e <SD_SendCmd>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d801      	bhi.n	8009b62 <SD_disk_initialize+0x12a>
 8009b5e:	2302      	movs	r3, #2
 8009b60:	e000      	b.n	8009b64 <SD_disk_initialize+0x12c>
 8009b62:	2301      	movs	r3, #1
 8009b64:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d10e      	bne.n	8009b8a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	2077      	movs	r0, #119	@ 0x77
 8009b70:	f7ff ff0d 	bl	800998e <SD_SendCmd>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d80e      	bhi.n	8009b98 <SD_disk_initialize+0x160>
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	2069      	movs	r0, #105	@ 0x69
 8009b7e:	f7ff ff06 	bl	800998e <SD_SendCmd>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d107      	bne.n	8009b98 <SD_disk_initialize+0x160>
 8009b88:	e00c      	b.n	8009ba4 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	2041      	movs	r0, #65	@ 0x41
 8009b8e:	f7ff fefe 	bl	800998e <SD_SendCmd>
 8009b92:	4603      	mov	r3, r0
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d004      	beq.n	8009ba2 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 8009b98:	4b18      	ldr	r3, [pc, #96]	@ (8009bfc <SD_disk_initialize+0x1c4>)
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1e2      	bne.n	8009b66 <SD_disk_initialize+0x12e>
 8009ba0:	e000      	b.n	8009ba4 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8009ba2:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8009ba4:	4b15      	ldr	r3, [pc, #84]	@ (8009bfc <SD_disk_initialize+0x1c4>)
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d007      	beq.n	8009bbc <SD_disk_initialize+0x184>
 8009bac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009bb0:	2050      	movs	r0, #80	@ 0x50
 8009bb2:	f7ff feec 	bl	800998e <SD_SendCmd>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <SD_disk_initialize+0x188>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 8009bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8009c00 <SD_disk_initialize+0x1c8>)
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
 8009bc4:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 8009bc6:	f7ff fd93 	bl	80096f0 <DESELECT>
  SPI_RxByte();
 8009bca:	f7ff fdd1 	bl	8009770 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d008      	beq.n	8009be6 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8009bd4:	4b08      	ldr	r3, [pc, #32]	@ (8009bf8 <SD_disk_initialize+0x1c0>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	f023 0301 	bic.w	r3, r3, #1
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	4b05      	ldr	r3, [pc, #20]	@ (8009bf8 <SD_disk_initialize+0x1c0>)
 8009be2:	701a      	strb	r2, [r3, #0]
 8009be4:	e001      	b.n	8009bea <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8009be6:	f7ff fe49 	bl	800987c <SD_PowerOff>
  }
  return Stat;
 8009bea:	4b03      	ldr	r3, [pc, #12]	@ (8009bf8 <SD_disk_initialize+0x1c0>)
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	b2db      	uxtb	r3, r3
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd90      	pop	{r4, r7, pc}
 8009bf8:	24000030 	.word	0x24000030
 8009bfc:	240026cc 	.word	0x240026cc
 8009c00:	240026d0 	.word	0x240026d0

08009c04 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <SD_disk_status+0x14>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e002      	b.n	8009c1e <SD_disk_status+0x1a>
  return Stat;
 8009c18:	4b04      	ldr	r3, [pc, #16]	@ (8009c2c <SD_disk_status+0x28>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	b2db      	uxtb	r3, r3
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	24000030 	.word	0x24000030

08009c30 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	607a      	str	r2, [r7, #4]
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d102      	bne.n	8009c4c <SD_disk_read+0x1c>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d101      	bne.n	8009c50 <SD_disk_read+0x20>
 8009c4c:	2304      	movs	r3, #4
 8009c4e:	e051      	b.n	8009cf4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009c50:	4b2a      	ldr	r3, [pc, #168]	@ (8009cfc <SD_disk_read+0xcc>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	f003 0301 	and.w	r3, r3, #1
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <SD_disk_read+0x32>
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e048      	b.n	8009cf4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8009c62:	4b27      	ldr	r3, [pc, #156]	@ (8009d00 <SD_disk_read+0xd0>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	f003 0304 	and.w	r3, r3, #4
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d102      	bne.n	8009c74 <SD_disk_read+0x44>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	025b      	lsls	r3, r3, #9
 8009c72:	607b      	str	r3, [r7, #4]

  SELECT();
 8009c74:	f7ff fd30 	bl	80096d8 <SELECT>

  if (count == 1)
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d111      	bne.n	8009ca2 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	2051      	movs	r0, #81	@ 0x51
 8009c82:	f7ff fe84 	bl	800998e <SD_SendCmd>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d129      	bne.n	8009ce0 <SD_disk_read+0xb0>
 8009c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009c90:	68b8      	ldr	r0, [r7, #8]
 8009c92:	f7ff fe0b 	bl	80098ac <SD_RxDataBlock>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d021      	beq.n	8009ce0 <SD_disk_read+0xb0>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	603b      	str	r3, [r7, #0]
 8009ca0:	e01e      	b.n	8009ce0 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	2052      	movs	r0, #82	@ 0x52
 8009ca6:	f7ff fe72 	bl	800998e <SD_SendCmd>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d117      	bne.n	8009ce0 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8009cb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009cb4:	68b8      	ldr	r0, [r7, #8]
 8009cb6:	f7ff fdf9 	bl	80098ac <SD_RxDataBlock>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <SD_disk_read+0xa6>
        buff += 512;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009cc6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	603b      	str	r3, [r7, #0]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1ed      	bne.n	8009cb0 <SD_disk_read+0x80>
 8009cd4:	e000      	b.n	8009cd8 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8009cd6:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8009cd8:	2100      	movs	r1, #0
 8009cda:	204c      	movs	r0, #76	@ 0x4c
 8009cdc:	f7ff fe57 	bl	800998e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8009ce0:	f7ff fd06 	bl	80096f0 <DESELECT>
  SPI_RxByte();
 8009ce4:	f7ff fd44 	bl	8009770 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bf14      	ite	ne
 8009cee:	2301      	movne	r3, #1
 8009cf0:	2300      	moveq	r3, #0
 8009cf2:	b2db      	uxtb	r3, r3
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	24000030 	.word	0x24000030
 8009d00:	240026d0 	.word	0x240026d0

08009d04 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	607a      	str	r2, [r7, #4]
 8009d0e:	603b      	str	r3, [r7, #0]
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <SD_disk_write+0x1c>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <SD_disk_write+0x20>
 8009d20:	2304      	movs	r3, #4
 8009d22:	e06b      	b.n	8009dfc <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d24:	4b37      	ldr	r3, [pc, #220]	@ (8009e04 <SD_disk_write+0x100>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <SD_disk_write+0x32>
 8009d32:	2303      	movs	r3, #3
 8009d34:	e062      	b.n	8009dfc <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8009d36:	4b33      	ldr	r3, [pc, #204]	@ (8009e04 <SD_disk_write+0x100>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0304 	and.w	r3, r3, #4
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <SD_disk_write+0x44>
 8009d44:	2302      	movs	r3, #2
 8009d46:	e059      	b.n	8009dfc <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8009d48:	4b2f      	ldr	r3, [pc, #188]	@ (8009e08 <SD_disk_write+0x104>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <SD_disk_write+0x56>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	025b      	lsls	r3, r3, #9
 8009d58:	607b      	str	r3, [r7, #4]

  SELECT();
 8009d5a:	f7ff fcbd 	bl	80096d8 <SELECT>

  if (count == 1)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d110      	bne.n	8009d86 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	2058      	movs	r0, #88	@ 0x58
 8009d68:	f7ff fe11 	bl	800998e <SD_SendCmd>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d13a      	bne.n	8009de8 <SD_disk_write+0xe4>
 8009d72:	21fe      	movs	r1, #254	@ 0xfe
 8009d74:	68b8      	ldr	r0, [r7, #8]
 8009d76:	f7ff fdc7 	bl	8009908 <SD_TxDataBlock>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d033      	beq.n	8009de8 <SD_disk_write+0xe4>
      count = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	603b      	str	r3, [r7, #0]
 8009d84:	e030      	b.n	8009de8 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8009d86:	4b20      	ldr	r3, [pc, #128]	@ (8009e08 <SD_disk_write+0x104>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	f003 0302 	and.w	r3, r3, #2
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d007      	beq.n	8009da2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8009d92:	2100      	movs	r1, #0
 8009d94:	2077      	movs	r0, #119	@ 0x77
 8009d96:	f7ff fdfa 	bl	800998e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	2057      	movs	r0, #87	@ 0x57
 8009d9e:	f7ff fdf6 	bl	800998e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	2059      	movs	r0, #89	@ 0x59
 8009da6:	f7ff fdf2 	bl	800998e <SD_SendCmd>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d11b      	bne.n	8009de8 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8009db0:	21fc      	movs	r1, #252	@ 0xfc
 8009db2:	68b8      	ldr	r0, [r7, #8]
 8009db4:	f7ff fda8 	bl	8009908 <SD_TxDataBlock>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d00a      	beq.n	8009dd4 <SD_disk_write+0xd0>
        buff += 512;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009dc4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1ee      	bne.n	8009db0 <SD_disk_write+0xac>
 8009dd2:	e000      	b.n	8009dd6 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8009dd4:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8009dd6:	21fd      	movs	r1, #253	@ 0xfd
 8009dd8:	2000      	movs	r0, #0
 8009dda:	f7ff fd95 	bl	8009908 <SD_TxDataBlock>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d101      	bne.n	8009de8 <SD_disk_write+0xe4>
      {
        count = 1;
 8009de4:	2301      	movs	r3, #1
 8009de6:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8009de8:	f7ff fc82 	bl	80096f0 <DESELECT>
  SPI_RxByte();
 8009dec:	f7ff fcc0 	bl	8009770 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	bf14      	ite	ne
 8009df6:	2301      	movne	r3, #1
 8009df8:	2300      	moveq	r3, #0
 8009dfa:	b2db      	uxtb	r3, r3
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	24000030 	.word	0x24000030
 8009e08:	240026d0 	.word	0x240026d0

08009e0c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8009e0c:	b590      	push	{r4, r7, lr}
 8009e0e:	b08b      	sub	sp, #44	@ 0x2c
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	603a      	str	r2, [r7, #0]
 8009e16:	71fb      	strb	r3, [r7, #7]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <SD_disk_ioctl+0x1e>
 8009e26:	2304      	movs	r3, #4
 8009e28:	e113      	b.n	800a052 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8009e30:	79bb      	ldrb	r3, [r7, #6]
 8009e32:	2b05      	cmp	r3, #5
 8009e34:	d124      	bne.n	8009e80 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d012      	beq.n	8009e64 <SD_disk_ioctl+0x58>
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	dc1a      	bgt.n	8009e78 <SD_disk_ioctl+0x6c>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <SD_disk_ioctl+0x40>
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d006      	beq.n	8009e58 <SD_disk_ioctl+0x4c>
 8009e4a:	e015      	b.n	8009e78 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8009e4c:	f7ff fd16 	bl	800987c <SD_PowerOff>
      res = RES_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009e56:	e0fa      	b.n	800a04e <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8009e58:	f7ff fcce 	bl	80097f8 <SD_PowerOn>
      res = RES_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009e62:	e0f4      	b.n	800a04e <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	1c5c      	adds	r4, r3, #1
 8009e68:	f7ff fd14 	bl	8009894 <SD_CheckPower>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8009e70:	2300      	movs	r3, #0
 8009e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009e76:	e0ea      	b.n	800a04e <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8009e78:	2304      	movs	r3, #4
 8009e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009e7e:	e0e6      	b.n	800a04e <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 8009e80:	4b76      	ldr	r3, [pc, #472]	@ (800a05c <SD_disk_ioctl+0x250>)
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e0df      	b.n	800a052 <SD_disk_ioctl+0x246>
    }
    SELECT();
 8009e92:	f7ff fc21 	bl	80096d8 <SELECT>
    switch (ctrl)
 8009e96:	79bb      	ldrb	r3, [r7, #6]
 8009e98:	2b0d      	cmp	r3, #13
 8009e9a:	f200 80c9 	bhi.w	800a030 <SD_disk_ioctl+0x224>
 8009e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea4 <SD_disk_ioctl+0x98>)
 8009ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea4:	08009f9b 	.word	0x08009f9b
 8009ea8:	08009edd 	.word	0x08009edd
 8009eac:	08009f8b 	.word	0x08009f8b
 8009eb0:	0800a031 	.word	0x0800a031
 8009eb4:	0800a031 	.word	0x0800a031
 8009eb8:	0800a031 	.word	0x0800a031
 8009ebc:	0800a031 	.word	0x0800a031
 8009ec0:	0800a031 	.word	0x0800a031
 8009ec4:	0800a031 	.word	0x0800a031
 8009ec8:	0800a031 	.word	0x0800a031
 8009ecc:	0800a031 	.word	0x0800a031
 8009ed0:	08009fad 	.word	0x08009fad
 8009ed4:	08009fd1 	.word	0x08009fd1
 8009ed8:	08009ff5 	.word	0x08009ff5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8009edc:	2100      	movs	r1, #0
 8009ede:	2049      	movs	r0, #73	@ 0x49
 8009ee0:	f7ff fd55 	bl	800998e <SD_SendCmd>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f040 80a6 	bne.w	800a038 <SD_disk_ioctl+0x22c>
 8009eec:	f107 030c 	add.w	r3, r7, #12
 8009ef0:	2110      	movs	r1, #16
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7ff fcda 	bl	80098ac <SD_RxDataBlock>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 809c 	beq.w	800a038 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8009f00:	7b3b      	ldrb	r3, [r7, #12]
 8009f02:	099b      	lsrs	r3, r3, #6
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d10d      	bne.n	8009f26 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8009f0a:	7d7b      	ldrb	r3, [r7, #21]
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	7d3b      	ldrb	r3, [r7, #20]
 8009f10:	021b      	lsls	r3, r3, #8
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	4413      	add	r3, r2
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	3301      	adds	r3, #1
 8009f1a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8009f1c:	8bfb      	ldrh	r3, [r7, #30]
 8009f1e:	029a      	lsls	r2, r3, #10
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	e02d      	b.n	8009f82 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009f26:	7c7b      	ldrb	r3, [r7, #17]
 8009f28:	f003 030f 	and.w	r3, r3, #15
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	7dbb      	ldrb	r3, [r7, #22]
 8009f30:	09db      	lsrs	r3, r3, #7
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	4413      	add	r3, r2
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	7d7b      	ldrb	r3, [r7, #21]
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	f003 0306 	and.w	r3, r3, #6
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	4413      	add	r3, r2
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	3302      	adds	r3, #2
 8009f4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8009f4e:	7d3b      	ldrb	r3, [r7, #20]
 8009f50:	099b      	lsrs	r3, r3, #6
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	461a      	mov	r2, r3
 8009f56:	7cfb      	ldrb	r3, [r7, #19]
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	4413      	add	r3, r2
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	7cbb      	ldrb	r3, [r7, #18]
 8009f62:	029b      	lsls	r3, r3, #10
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	4413      	add	r3, r2
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	3301      	adds	r3, #1
 8009f72:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8009f74:	8bfa      	ldrh	r2, [r7, #30]
 8009f76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f7a:	3b09      	subs	r3, #9
 8009f7c:	409a      	lsls	r2, r3
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8009f88:	e056      	b.n	800a038 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f90:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009f98:	e055      	b.n	800a046 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8009f9a:	f7ff fc13 	bl	80097c4 <SD_ReadyWait>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2bff      	cmp	r3, #255	@ 0xff
 8009fa2:	d14b      	bne.n	800a03c <SD_disk_ioctl+0x230>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009faa:	e047      	b.n	800a03c <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8009fac:	2100      	movs	r1, #0
 8009fae:	2049      	movs	r0, #73	@ 0x49
 8009fb0:	f7ff fced 	bl	800998e <SD_SendCmd>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d142      	bne.n	800a040 <SD_disk_ioctl+0x234>
 8009fba:	2110      	movs	r1, #16
 8009fbc:	6a38      	ldr	r0, [r7, #32]
 8009fbe:	f7ff fc75 	bl	80098ac <SD_RxDataBlock>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d03b      	beq.n	800a040 <SD_disk_ioctl+0x234>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009fce:	e037      	b.n	800a040 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	204a      	movs	r0, #74	@ 0x4a
 8009fd4:	f7ff fcdb 	bl	800998e <SD_SendCmd>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d132      	bne.n	800a044 <SD_disk_ioctl+0x238>
 8009fde:	2110      	movs	r1, #16
 8009fe0:	6a38      	ldr	r0, [r7, #32]
 8009fe2:	f7ff fc63 	bl	80098ac <SD_RxDataBlock>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d02b      	beq.n	800a044 <SD_disk_ioctl+0x238>
 8009fec:	2300      	movs	r3, #0
 8009fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8009ff2:	e027      	b.n	800a044 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	207a      	movs	r0, #122	@ 0x7a
 8009ff8:	f7ff fcc9 	bl	800998e <SD_SendCmd>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d116      	bne.n	800a030 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 800a002:	2300      	movs	r3, #0
 800a004:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a008:	e00b      	b.n	800a022 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 800a00a:	6a3c      	ldr	r4, [r7, #32]
 800a00c:	1c63      	adds	r3, r4, #1
 800a00e:	623b      	str	r3, [r7, #32]
 800a010:	f7ff fbae 	bl	8009770 <SPI_RxByte>
 800a014:	4603      	mov	r3, r0
 800a016:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800a018:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a01c:	3301      	adds	r3, #1
 800a01e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a022:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a026:	2b03      	cmp	r3, #3
 800a028:	d9ef      	bls.n	800a00a <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800a030:	2304      	movs	r3, #4
 800a032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a036:	e006      	b.n	800a046 <SD_disk_ioctl+0x23a>
      break;
 800a038:	bf00      	nop
 800a03a:	e004      	b.n	800a046 <SD_disk_ioctl+0x23a>
      break;
 800a03c:	bf00      	nop
 800a03e:	e002      	b.n	800a046 <SD_disk_ioctl+0x23a>
      break;
 800a040:	bf00      	nop
 800a042:	e000      	b.n	800a046 <SD_disk_ioctl+0x23a>
      break;
 800a044:	bf00      	nop
    }
    DESELECT();
 800a046:	f7ff fb53 	bl	80096f0 <DESELECT>
    SPI_RxByte();
 800a04a:	f7ff fb91 	bl	8009770 <SPI_RxByte>
  }
  return res;
 800a04e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a052:	4618      	mov	r0, r3
 800a054:	372c      	adds	r7, #44	@ 0x2c
 800a056:	46bd      	mov	sp, r7
 800a058:	bd90      	pop	{r4, r7, pc}
 800a05a:	bf00      	nop
 800a05c:	24000030 	.word	0x24000030

0800a060 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	4603      	mov	r3, r0
 800a068:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a06a:	79fb      	ldrb	r3, [r7, #7]
 800a06c:	4a08      	ldr	r2, [pc, #32]	@ (800a090 <disk_status+0x30>)
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4413      	add	r3, r2
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	79fa      	ldrb	r2, [r7, #7]
 800a078:	4905      	ldr	r1, [pc, #20]	@ (800a090 <disk_status+0x30>)
 800a07a:	440a      	add	r2, r1
 800a07c:	7a12      	ldrb	r2, [r2, #8]
 800a07e:	4610      	mov	r0, r2
 800a080:	4798      	blx	r3
 800a082:	4603      	mov	r3, r0
 800a084:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a086:	7bfb      	ldrb	r3, [r7, #15]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	240028fc 	.word	0x240028fc

0800a094 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	4a0e      	ldr	r2, [pc, #56]	@ (800a0e0 <disk_initialize+0x4c>)
 800a0a6:	5cd3      	ldrb	r3, [r2, r3]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d114      	bne.n	800a0d6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	4a0c      	ldr	r2, [pc, #48]	@ (800a0e0 <disk_initialize+0x4c>)
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	79fa      	ldrb	r2, [r7, #7]
 800a0ba:	4909      	ldr	r1, [pc, #36]	@ (800a0e0 <disk_initialize+0x4c>)
 800a0bc:	440a      	add	r2, r1
 800a0be:	7a12      	ldrb	r2, [r2, #8]
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4798      	blx	r3
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d103      	bne.n	800a0d6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a0ce:	79fb      	ldrb	r3, [r7, #7]
 800a0d0:	4a03      	ldr	r2, [pc, #12]	@ (800a0e0 <disk_initialize+0x4c>)
 800a0d2:	2101      	movs	r1, #1
 800a0d4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	240028fc 	.word	0x240028fc

0800a0e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a0e4:	b590      	push	{r4, r7, lr}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	607a      	str	r2, [r7, #4]
 800a0ee:	603b      	str	r3, [r7, #0]
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	4a0a      	ldr	r2, [pc, #40]	@ (800a120 <disk_read+0x3c>)
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	689c      	ldr	r4, [r3, #8]
 800a100:	7bfb      	ldrb	r3, [r7, #15]
 800a102:	4a07      	ldr	r2, [pc, #28]	@ (800a120 <disk_read+0x3c>)
 800a104:	4413      	add	r3, r2
 800a106:	7a18      	ldrb	r0, [r3, #8]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	68b9      	ldr	r1, [r7, #8]
 800a10e:	47a0      	blx	r4
 800a110:	4603      	mov	r3, r0
 800a112:	75fb      	strb	r3, [r7, #23]
  return res;
 800a114:	7dfb      	ldrb	r3, [r7, #23]
}
 800a116:	4618      	mov	r0, r3
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd90      	pop	{r4, r7, pc}
 800a11e:	bf00      	nop
 800a120:	240028fc 	.word	0x240028fc

0800a124 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a124:	b590      	push	{r4, r7, lr}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
 800a12e:	603b      	str	r3, [r7, #0]
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	4a0a      	ldr	r2, [pc, #40]	@ (800a160 <disk_write+0x3c>)
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	68dc      	ldr	r4, [r3, #12]
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	4a07      	ldr	r2, [pc, #28]	@ (800a160 <disk_write+0x3c>)
 800a144:	4413      	add	r3, r2
 800a146:	7a18      	ldrb	r0, [r3, #8]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	68b9      	ldr	r1, [r7, #8]
 800a14e:	47a0      	blx	r4
 800a150:	4603      	mov	r3, r0
 800a152:	75fb      	strb	r3, [r7, #23]
  return res;
 800a154:	7dfb      	ldrb	r3, [r7, #23]
}
 800a156:	4618      	mov	r0, r3
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd90      	pop	{r4, r7, pc}
 800a15e:	bf00      	nop
 800a160:	240028fc 	.word	0x240028fc

0800a164 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	4603      	mov	r3, r0
 800a16c:	603a      	str	r2, [r7, #0]
 800a16e:	71fb      	strb	r3, [r7, #7]
 800a170:	460b      	mov	r3, r1
 800a172:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a174:	79fb      	ldrb	r3, [r7, #7]
 800a176:	4a09      	ldr	r2, [pc, #36]	@ (800a19c <disk_ioctl+0x38>)
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	79fa      	ldrb	r2, [r7, #7]
 800a182:	4906      	ldr	r1, [pc, #24]	@ (800a19c <disk_ioctl+0x38>)
 800a184:	440a      	add	r2, r1
 800a186:	7a10      	ldrb	r0, [r2, #8]
 800a188:	79b9      	ldrb	r1, [r7, #6]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	4798      	blx	r3
 800a18e:	4603      	mov	r3, r0
 800a190:	73fb      	strb	r3, [r7, #15]
  return res;
 800a192:	7bfb      	ldrb	r3, [r7, #15]
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	240028fc 	.word	0x240028fc

0800a1a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a1b0:	89fb      	ldrh	r3, [r7, #14]
 800a1b2:	021b      	lsls	r3, r3, #8
 800a1b4:	b21a      	sxth	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	b21b      	sxth	r3, r3
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b21b      	sxth	r3, r3
 800a1c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a1c2:	89fb      	ldrh	r3, [r7, #14]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	3303      	adds	r3, #3
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	021b      	lsls	r3, r3, #8
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	3202      	adds	r2, #2
 800a1e8:	7812      	ldrb	r2, [r2, #0]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	021b      	lsls	r3, r3, #8
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	3201      	adds	r2, #1
 800a1f6:	7812      	ldrb	r2, [r2, #0]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	021b      	lsls	r3, r3, #8
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	7812      	ldrb	r2, [r2, #0]
 800a204:	4313      	orrs	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]
	return rv;
 800a208:	68fb      	ldr	r3, [r7, #12]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	460b      	mov	r3, r1
 800a220:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	887a      	ldrh	r2, [r7, #2]
 800a22a:	b2d2      	uxtb	r2, r2
 800a22c:	701a      	strb	r2, [r3, #0]
 800a22e:	887b      	ldrh	r3, [r7, #2]
 800a230:	0a1b      	lsrs	r3, r3, #8
 800a232:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	607a      	str	r2, [r7, #4]
 800a23a:	887a      	ldrh	r2, [r7, #2]
 800a23c:	b2d2      	uxtb	r2, r2
 800a23e:	701a      	strb	r2, [r3, #0]
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	701a      	strb	r2, [r3, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	0a1b      	lsrs	r3, r3, #8
 800a266:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	607a      	str	r2, [r7, #4]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	0a1b      	lsrs	r3, r3, #8
 800a278:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	1c5a      	adds	r2, r3, #1
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	683a      	ldr	r2, [r7, #0]
 800a282:	b2d2      	uxtb	r2, r2
 800a284:	701a      	strb	r2, [r3, #0]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	0a1b      	lsrs	r3, r3, #8
 800a28a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	1c5a      	adds	r2, r3, #1
 800a290:	607a      	str	r2, [r7, #4]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	b2d2      	uxtb	r2, r2
 800a296:	701a      	strb	r2, [r3, #0]
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00d      	beq.n	800a2da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	1c53      	adds	r3, r2, #1
 800a2c2:	613b      	str	r3, [r7, #16]
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	1c59      	adds	r1, r3, #1
 800a2c8:	6179      	str	r1, [r7, #20]
 800a2ca:	7812      	ldrb	r2, [r2, #0]
 800a2cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	607b      	str	r3, [r7, #4]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1f1      	bne.n	800a2be <mem_cpy+0x1a>
	}
}
 800a2da:	bf00      	nop
 800a2dc:	371c      	adds	r7, #28
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a2e6:	b480      	push	{r7}
 800a2e8:	b087      	sub	sp, #28
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	60f8      	str	r0, [r7, #12]
 800a2ee:	60b9      	str	r1, [r7, #8]
 800a2f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	617a      	str	r2, [r7, #20]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	b2d2      	uxtb	r2, r2
 800a300:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	3b01      	subs	r3, #1
 800a306:	607b      	str	r3, [r7, #4]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d1f3      	bne.n	800a2f6 <mem_set+0x10>
}
 800a30e:	bf00      	nop
 800a310:	bf00      	nop
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a31c:	b480      	push	{r7}
 800a31e:	b089      	sub	sp, #36	@ 0x24
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	61fb      	str	r3, [r7, #28]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	61fa      	str	r2, [r7, #28]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	4619      	mov	r1, r3
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	61ba      	str	r2, [r7, #24]
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	1acb      	subs	r3, r1, r3
 800a348:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	607b      	str	r3, [r7, #4]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d002      	beq.n	800a35c <mem_cmp+0x40>
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d0eb      	beq.n	800a334 <mem_cmp+0x18>

	return r;
 800a35c:	697b      	ldr	r3, [r7, #20]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3724      	adds	r7, #36	@ 0x24
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a374:	e002      	b.n	800a37c <chk_chr+0x12>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	3301      	adds	r3, #1
 800a37a:	607b      	str	r3, [r7, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d005      	beq.n	800a390 <chk_chr+0x26>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d1f2      	bne.n	800a376 <chk_chr+0xc>
	return *str;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	781b      	ldrb	r3, [r3, #0]
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60bb      	str	r3, [r7, #8]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	e029      	b.n	800a408 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a3b4:	4a27      	ldr	r2, [pc, #156]	@ (800a454 <chk_lock+0xb4>)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	011b      	lsls	r3, r3, #4
 800a3ba:	4413      	add	r3, r2
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01d      	beq.n	800a3fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a3c2:	4a24      	ldr	r2, [pc, #144]	@ (800a454 <chk_lock+0xb4>)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	4413      	add	r3, r2
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d116      	bne.n	800a402 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a3d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a454 <chk_lock+0xb4>)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	011b      	lsls	r3, r3, #4
 800a3da:	4413      	add	r3, r2
 800a3dc:	3304      	adds	r3, #4
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d10c      	bne.n	800a402 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a454 <chk_lock+0xb4>)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	011b      	lsls	r3, r3, #4
 800a3ee:	4413      	add	r3, r2
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d102      	bne.n	800a402 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3fc:	e007      	b.n	800a40e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a3fe:	2301      	movs	r3, #1
 800a400:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	3301      	adds	r3, #1
 800a406:	60fb      	str	r3, [r7, #12]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d9d2      	bls.n	800a3b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2b02      	cmp	r3, #2
 800a412:	d109      	bne.n	800a428 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d102      	bne.n	800a420 <chk_lock+0x80>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d101      	bne.n	800a424 <chk_lock+0x84>
 800a420:	2300      	movs	r3, #0
 800a422:	e010      	b.n	800a446 <chk_lock+0xa6>
 800a424:	2312      	movs	r3, #18
 800a426:	e00e      	b.n	800a446 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d108      	bne.n	800a440 <chk_lock+0xa0>
 800a42e:	4a09      	ldr	r2, [pc, #36]	@ (800a454 <chk_lock+0xb4>)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	011b      	lsls	r3, r3, #4
 800a434:	4413      	add	r3, r2
 800a436:	330c      	adds	r3, #12
 800a438:	881b      	ldrh	r3, [r3, #0]
 800a43a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a43e:	d101      	bne.n	800a444 <chk_lock+0xa4>
 800a440:	2310      	movs	r3, #16
 800a442:	e000      	b.n	800a446 <chk_lock+0xa6>
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	240026dc 	.word	0x240026dc

0800a458 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a45e:	2300      	movs	r3, #0
 800a460:	607b      	str	r3, [r7, #4]
 800a462:	e002      	b.n	800a46a <enq_lock+0x12>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3301      	adds	r3, #1
 800a468:	607b      	str	r3, [r7, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d806      	bhi.n	800a47e <enq_lock+0x26>
 800a470:	4a09      	ldr	r2, [pc, #36]	@ (800a498 <enq_lock+0x40>)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	011b      	lsls	r3, r3, #4
 800a476:	4413      	add	r3, r2
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1f2      	bne.n	800a464 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b02      	cmp	r3, #2
 800a482:	bf14      	ite	ne
 800a484:	2301      	movne	r3, #1
 800a486:	2300      	moveq	r3, #0
 800a488:	b2db      	uxtb	r3, r3
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	240026dc 	.word	0x240026dc

0800a49c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	e01f      	b.n	800a4ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a4ac:	4a41      	ldr	r2, [pc, #260]	@ (800a5b4 <inc_lock+0x118>)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	011b      	lsls	r3, r3, #4
 800a4b2:	4413      	add	r3, r2
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d113      	bne.n	800a4e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a4be:	4a3d      	ldr	r2, [pc, #244]	@ (800a5b4 <inc_lock+0x118>)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	011b      	lsls	r3, r3, #4
 800a4c4:	4413      	add	r3, r2
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d109      	bne.n	800a4e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a4d2:	4a38      	ldr	r2, [pc, #224]	@ (800a5b4 <inc_lock+0x118>)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	011b      	lsls	r3, r3, #4
 800a4d8:	4413      	add	r3, r2
 800a4da:	3308      	adds	r3, #8
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d006      	beq.n	800a4f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d9dc      	bls.n	800a4ac <inc_lock+0x10>
 800a4f2:	e000      	b.n	800a4f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a4f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d132      	bne.n	800a562 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	e002      	b.n	800a508 <inc_lock+0x6c>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	3301      	adds	r3, #1
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d806      	bhi.n	800a51c <inc_lock+0x80>
 800a50e:	4a29      	ldr	r2, [pc, #164]	@ (800a5b4 <inc_lock+0x118>)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	011b      	lsls	r3, r3, #4
 800a514:	4413      	add	r3, r2
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1f2      	bne.n	800a502 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d101      	bne.n	800a526 <inc_lock+0x8a>
 800a522:	2300      	movs	r3, #0
 800a524:	e040      	b.n	800a5a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	4922      	ldr	r1, [pc, #136]	@ (800a5b4 <inc_lock+0x118>)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	011b      	lsls	r3, r3, #4
 800a530:	440b      	add	r3, r1
 800a532:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	491e      	ldr	r1, [pc, #120]	@ (800a5b4 <inc_lock+0x118>)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	011b      	lsls	r3, r3, #4
 800a53e:	440b      	add	r3, r1
 800a540:	3304      	adds	r3, #4
 800a542:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	695a      	ldr	r2, [r3, #20]
 800a548:	491a      	ldr	r1, [pc, #104]	@ (800a5b4 <inc_lock+0x118>)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	011b      	lsls	r3, r3, #4
 800a54e:	440b      	add	r3, r1
 800a550:	3308      	adds	r3, #8
 800a552:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a554:	4a17      	ldr	r2, [pc, #92]	@ (800a5b4 <inc_lock+0x118>)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	011b      	lsls	r3, r3, #4
 800a55a:	4413      	add	r3, r2
 800a55c:	330c      	adds	r3, #12
 800a55e:	2200      	movs	r2, #0
 800a560:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d009      	beq.n	800a57c <inc_lock+0xe0>
 800a568:	4a12      	ldr	r2, [pc, #72]	@ (800a5b4 <inc_lock+0x118>)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	011b      	lsls	r3, r3, #4
 800a56e:	4413      	add	r3, r2
 800a570:	330c      	adds	r3, #12
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <inc_lock+0xe0>
 800a578:	2300      	movs	r3, #0
 800a57a:	e015      	b.n	800a5a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d108      	bne.n	800a594 <inc_lock+0xf8>
 800a582:	4a0c      	ldr	r2, [pc, #48]	@ (800a5b4 <inc_lock+0x118>)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	011b      	lsls	r3, r3, #4
 800a588:	4413      	add	r3, r2
 800a58a:	330c      	adds	r3, #12
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	3301      	adds	r3, #1
 800a590:	b29a      	uxth	r2, r3
 800a592:	e001      	b.n	800a598 <inc_lock+0xfc>
 800a594:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a598:	4906      	ldr	r1, [pc, #24]	@ (800a5b4 <inc_lock+0x118>)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	011b      	lsls	r3, r3, #4
 800a59e:	440b      	add	r3, r1
 800a5a0:	330c      	adds	r3, #12
 800a5a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	3301      	adds	r3, #1
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr
 800a5b4:	240026dc 	.word	0x240026dc

0800a5b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	607b      	str	r3, [r7, #4]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d825      	bhi.n	800a618 <dec_lock+0x60>
		n = Files[i].ctr;
 800a5cc:	4a17      	ldr	r2, [pc, #92]	@ (800a62c <dec_lock+0x74>)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	011b      	lsls	r3, r3, #4
 800a5d2:	4413      	add	r3, r2
 800a5d4:	330c      	adds	r3, #12
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a5da:	89fb      	ldrh	r3, [r7, #14]
 800a5dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5e0:	d101      	bne.n	800a5e6 <dec_lock+0x2e>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a5e6:	89fb      	ldrh	r3, [r7, #14]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <dec_lock+0x3a>
 800a5ec:	89fb      	ldrh	r3, [r7, #14]
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a5f2:	4a0e      	ldr	r2, [pc, #56]	@ (800a62c <dec_lock+0x74>)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	011b      	lsls	r3, r3, #4
 800a5f8:	4413      	add	r3, r2
 800a5fa:	330c      	adds	r3, #12
 800a5fc:	89fa      	ldrh	r2, [r7, #14]
 800a5fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a600:	89fb      	ldrh	r3, [r7, #14]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d105      	bne.n	800a612 <dec_lock+0x5a>
 800a606:	4a09      	ldr	r2, [pc, #36]	@ (800a62c <dec_lock+0x74>)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	011b      	lsls	r3, r3, #4
 800a60c:	4413      	add	r3, r2
 800a60e:	2200      	movs	r2, #0
 800a610:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	737b      	strb	r3, [r7, #13]
 800a616:	e001      	b.n	800a61c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a618:	2302      	movs	r3, #2
 800a61a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a61c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	240026dc 	.word	0x240026dc

0800a630 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a638:	2300      	movs	r3, #0
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e010      	b.n	800a660 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a63e:	4a0d      	ldr	r2, [pc, #52]	@ (800a674 <clear_lock+0x44>)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	011b      	lsls	r3, r3, #4
 800a644:	4413      	add	r3, r2
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d105      	bne.n	800a65a <clear_lock+0x2a>
 800a64e:	4a09      	ldr	r2, [pc, #36]	@ (800a674 <clear_lock+0x44>)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	011b      	lsls	r3, r3, #4
 800a654:	4413      	add	r3, r2
 800a656:	2200      	movs	r2, #0
 800a658:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3301      	adds	r3, #1
 800a65e:	60fb      	str	r3, [r7, #12]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d9eb      	bls.n	800a63e <clear_lock+0xe>
	}
}
 800a666:	bf00      	nop
 800a668:	bf00      	nop
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	240026dc 	.word	0x240026dc

0800a678 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	78db      	ldrb	r3, [r3, #3]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d034      	beq.n	800a6f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a690:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	7858      	ldrb	r0, [r3, #1]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a69c:	2301      	movs	r3, #1
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	f7ff fd40 	bl	800a124 <disk_write>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d002      	beq.n	800a6b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	73fb      	strb	r3, [r7, #15]
 800a6ae:	e022      	b.n	800a6f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	1ad2      	subs	r2, r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d217      	bcs.n	800a6f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	789b      	ldrb	r3, [r3, #2]
 800a6ca:	613b      	str	r3, [r7, #16]
 800a6cc:	e010      	b.n	800a6f0 <sync_window+0x78>
					wsect += fs->fsize;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d2:	697a      	ldr	r2, [r7, #20]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	7858      	ldrb	r0, [r3, #1]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	f7ff fd1d 	bl	800a124 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	613b      	str	r3, [r7, #16]
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d8eb      	bhi.n	800a6ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a712:	683a      	ldr	r2, [r7, #0]
 800a714:	429a      	cmp	r2, r3
 800a716:	d01b      	beq.n	800a750 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7ff ffad 	bl	800a678 <sync_window>
 800a71e:	4603      	mov	r3, r0
 800a720:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d113      	bne.n	800a750 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	7858      	ldrb	r0, [r3, #1]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a732:	2301      	movs	r3, #1
 800a734:	683a      	ldr	r2, [r7, #0]
 800a736:	f7ff fcd5 	bl	800a0e4 <disk_read>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d004      	beq.n	800a74a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a740:	f04f 33ff 	mov.w	r3, #4294967295
 800a744:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a746:	2301      	movs	r3, #1
 800a748:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	683a      	ldr	r2, [r7, #0]
 800a74e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
	...

0800a75c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff ff87 	bl	800a678 <sync_window>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d159      	bne.n	800a828 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d149      	bne.n	800a810 <sync_fs+0xb4>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	791b      	ldrb	r3, [r3, #4]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d145      	bne.n	800a810 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	899b      	ldrh	r3, [r3, #12]
 800a78e:	461a      	mov	r2, r3
 800a790:	2100      	movs	r1, #0
 800a792:	f7ff fda8 	bl	800a2e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	333c      	adds	r3, #60	@ 0x3c
 800a79a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a79e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7ff fd37 	bl	800a216 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	333c      	adds	r3, #60	@ 0x3c
 800a7ac:	4921      	ldr	r1, [pc, #132]	@ (800a834 <sync_fs+0xd8>)
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7ff fd4c 	bl	800a24c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	333c      	adds	r3, #60	@ 0x3c
 800a7b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a7bc:	491e      	ldr	r1, [pc, #120]	@ (800a838 <sync_fs+0xdc>)
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7ff fd44 	bl	800a24c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	333c      	adds	r3, #60	@ 0x3c
 800a7c8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	f7ff fd3a 	bl	800a24c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	333c      	adds	r3, #60	@ 0x3c
 800a7dc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	f7ff fd30 	bl	800a24c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	7858      	ldrb	r0, [r3, #1]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a804:	2301      	movs	r3, #1
 800a806:	f7ff fc8d 	bl	800a124 <disk_write>
			fs->fsi_flag = 0;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	785b      	ldrb	r3, [r3, #1]
 800a814:	2200      	movs	r2, #0
 800a816:	2100      	movs	r1, #0
 800a818:	4618      	mov	r0, r3
 800a81a:	f7ff fca3 	bl	800a164 <disk_ioctl>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <sync_fs+0xcc>
 800a824:	2301      	movs	r3, #1
 800a826:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a828:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	41615252 	.word	0x41615252
 800a838:	61417272 	.word	0x61417272

0800a83c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	3b02      	subs	r3, #2
 800a84a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a1b      	ldr	r3, [r3, #32]
 800a850:	3b02      	subs	r3, #2
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	429a      	cmp	r2, r3
 800a856:	d301      	bcc.n	800a85c <clust2sect+0x20>
 800a858:	2300      	movs	r3, #0
 800a85a:	e008      	b.n	800a86e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	895b      	ldrh	r3, [r3, #10]
 800a860:	461a      	mov	r2, r3
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	fb03 f202 	mul.w	r2, r3, r2
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a86c:	4413      	add	r3, r2
}
 800a86e:	4618      	mov	r0, r3
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b086      	sub	sp, #24
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d904      	bls.n	800a89a <get_fat+0x20>
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	429a      	cmp	r2, r3
 800a898:	d302      	bcc.n	800a8a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a89a:	2301      	movs	r3, #1
 800a89c:	617b      	str	r3, [r7, #20]
 800a89e:	e0ba      	b.n	800aa16 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	f000 8082 	beq.w	800a9b4 <get_fat+0x13a>
 800a8b0:	2b03      	cmp	r3, #3
 800a8b2:	f300 80a6 	bgt.w	800aa02 <get_fat+0x188>
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d002      	beq.n	800a8c0 <get_fat+0x46>
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d055      	beq.n	800a96a <get_fat+0xf0>
 800a8be:	e0a0      	b.n	800aa02 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	085b      	lsrs	r3, r3, #1
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	899b      	ldrh	r3, [r3, #12]
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	fbb3 f3f1 	udiv	r3, r3, r1
 800a8de:	4413      	add	r3, r2
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6938      	ldr	r0, [r7, #16]
 800a8e4:	f7ff ff0c 	bl	800a700 <move_window>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f040 808c 	bne.w	800aa08 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	1c5a      	adds	r2, r3, #1
 800a8f4:	60fa      	str	r2, [r7, #12]
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	8992      	ldrh	r2, [r2, #12]
 800a8fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8fe:	fb01 f202 	mul.w	r2, r1, r2
 800a902:	1a9b      	subs	r3, r3, r2
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	4413      	add	r3, r2
 800a908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a90c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	899b      	ldrh	r3, [r3, #12]
 800a916:	4619      	mov	r1, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a91e:	4413      	add	r3, r2
 800a920:	4619      	mov	r1, r3
 800a922:	6938      	ldr	r0, [r7, #16]
 800a924:	f7ff feec 	bl	800a700 <move_window>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d16e      	bne.n	800aa0c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	899b      	ldrh	r3, [r3, #12]
 800a932:	461a      	mov	r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	fbb3 f1f2 	udiv	r1, r3, r2
 800a93a:	fb01 f202 	mul.w	r2, r1, r2
 800a93e:	1a9b      	subs	r3, r3, r2
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	4413      	add	r3, r2
 800a944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d002      	beq.n	800a960 <get_fat+0xe6>
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	091b      	lsrs	r3, r3, #4
 800a95e:	e002      	b.n	800a966 <get_fat+0xec>
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a966:	617b      	str	r3, [r7, #20]
			break;
 800a968:	e055      	b.n	800aa16 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	899b      	ldrh	r3, [r3, #12]
 800a972:	085b      	lsrs	r3, r3, #1
 800a974:	b29b      	uxth	r3, r3
 800a976:	4619      	mov	r1, r3
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a97e:	4413      	add	r3, r2
 800a980:	4619      	mov	r1, r3
 800a982:	6938      	ldr	r0, [r7, #16]
 800a984:	f7ff febc 	bl	800a700 <move_window>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d140      	bne.n	800aa10 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	8992      	ldrh	r2, [r2, #12]
 800a99c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9a0:	fb00 f202 	mul.w	r2, r0, r2
 800a9a4:	1a9b      	subs	r3, r3, r2
 800a9a6:	440b      	add	r3, r1
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7ff fbf9 	bl	800a1a0 <ld_word>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	617b      	str	r3, [r7, #20]
			break;
 800a9b2:	e030      	b.n	800aa16 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	899b      	ldrh	r3, [r3, #12]
 800a9bc:	089b      	lsrs	r3, r3, #2
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9c8:	4413      	add	r3, r2
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6938      	ldr	r0, [r7, #16]
 800a9ce:	f7ff fe97 	bl	800a700 <move_window>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d11d      	bne.n	800aa14 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	8992      	ldrh	r2, [r2, #12]
 800a9e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9ea:	fb00 f202 	mul.w	r2, r0, r2
 800a9ee:	1a9b      	subs	r3, r3, r2
 800a9f0:	440b      	add	r3, r1
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7ff fbec 	bl	800a1d0 <ld_dword>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a9fe:	617b      	str	r3, [r7, #20]
			break;
 800aa00:	e009      	b.n	800aa16 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aa02:	2301      	movs	r3, #1
 800aa04:	617b      	str	r3, [r7, #20]
 800aa06:	e006      	b.n	800aa16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa08:	bf00      	nop
 800aa0a:	e004      	b.n	800aa16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa0c:	bf00      	nop
 800aa0e:	e002      	b.n	800aa16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aa10:	bf00      	nop
 800aa12:	e000      	b.n	800aa16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aa14:	bf00      	nop
		}
	}

	return val;
 800aa16:	697b      	ldr	r3, [r7, #20]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aa20:	b590      	push	{r4, r7, lr}
 800aa22:	b089      	sub	sp, #36	@ 0x24
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aa2c:	2302      	movs	r3, #2
 800aa2e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	f240 8109 	bls.w	800ac4a <put_fat+0x22a>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	f080 8103 	bcs.w	800ac4a <put_fat+0x22a>
		switch (fs->fs_type) {
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	f000 80b6 	beq.w	800abba <put_fat+0x19a>
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	f300 80fb 	bgt.w	800ac4a <put_fat+0x22a>
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d003      	beq.n	800aa60 <put_fat+0x40>
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	f000 8083 	beq.w	800ab64 <put_fat+0x144>
 800aa5e:	e0f4      	b.n	800ac4a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	61bb      	str	r3, [r7, #24]
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	085b      	lsrs	r3, r3, #1
 800aa68:	69ba      	ldr	r2, [r7, #24]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	899b      	ldrh	r3, [r3, #12]
 800aa76:	4619      	mov	r1, r3
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa7e:	4413      	add	r3, r2
 800aa80:	4619      	mov	r1, r3
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7ff fe3c 	bl	800a700 <move_window>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa8c:	7ffb      	ldrb	r3, [r7, #31]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	f040 80d4 	bne.w	800ac3c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	1c5a      	adds	r2, r3, #1
 800aa9e:	61ba      	str	r2, [r7, #24]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	8992      	ldrh	r2, [r2, #12]
 800aaa4:	fbb3 f0f2 	udiv	r0, r3, r2
 800aaa8:	fb00 f202 	mul.w	r2, r0, r2
 800aaac:	1a9b      	subs	r3, r3, r2
 800aaae:	440b      	add	r3, r1
 800aab0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	f003 0301 	and.w	r3, r3, #1
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00d      	beq.n	800aad8 <put_fat+0xb8>
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	b25b      	sxtb	r3, r3
 800aac2:	f003 030f 	and.w	r3, r3, #15
 800aac6:	b25a      	sxtb	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	011b      	lsls	r3, r3, #4
 800aace:	b25b      	sxtb	r3, r3
 800aad0:	4313      	orrs	r3, r2
 800aad2:	b25b      	sxtb	r3, r3
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	e001      	b.n	800aadc <put_fat+0xbc>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2201      	movs	r2, #1
 800aae4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	899b      	ldrh	r3, [r3, #12]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800aaf6:	4413      	add	r3, r2
 800aaf8:	4619      	mov	r1, r3
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f7ff fe00 	bl	800a700 <move_window>
 800ab00:	4603      	mov	r3, r0
 800ab02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab04:	7ffb      	ldrb	r3, [r7, #31]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f040 809a 	bne.w	800ac40 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	899b      	ldrh	r3, [r3, #12]
 800ab16:	461a      	mov	r2, r3
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab1e:	fb00 f202 	mul.w	r2, r0, r2
 800ab22:	1a9b      	subs	r3, r3, r2
 800ab24:	440b      	add	r3, r1
 800ab26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <put_fat+0x11a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	091b      	lsrs	r3, r3, #4
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	e00e      	b.n	800ab58 <put_fat+0x138>
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	b25b      	sxtb	r3, r3
 800ab40:	f023 030f 	bic.w	r3, r3, #15
 800ab44:	b25a      	sxtb	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	0a1b      	lsrs	r3, r3, #8
 800ab4a:	b25b      	sxtb	r3, r3
 800ab4c:	f003 030f 	and.w	r3, r3, #15
 800ab50:	b25b      	sxtb	r3, r3
 800ab52:	4313      	orrs	r3, r2
 800ab54:	b25b      	sxtb	r3, r3
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	70da      	strb	r2, [r3, #3]
			break;
 800ab62:	e072      	b.n	800ac4a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	899b      	ldrh	r3, [r3, #12]
 800ab6c:	085b      	lsrs	r3, r3, #1
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	4619      	mov	r1, r3
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab78:	4413      	add	r3, r2
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f7ff fdbf 	bl	800a700 <move_window>
 800ab82:	4603      	mov	r3, r0
 800ab84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab86:	7ffb      	ldrb	r3, [r7, #31]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d15b      	bne.n	800ac44 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	8992      	ldrh	r2, [r2, #12]
 800ab9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab9e:	fb00 f202 	mul.w	r2, r0, r2
 800aba2:	1a9b      	subs	r3, r3, r2
 800aba4:	440b      	add	r3, r1
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	b292      	uxth	r2, r2
 800abaa:	4611      	mov	r1, r2
 800abac:	4618      	mov	r0, r3
 800abae:	f7ff fb32 	bl	800a216 <st_word>
			fs->wflag = 1;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2201      	movs	r2, #1
 800abb6:	70da      	strb	r2, [r3, #3]
			break;
 800abb8:	e047      	b.n	800ac4a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	899b      	ldrh	r3, [r3, #12]
 800abc2:	089b      	lsrs	r3, r3, #2
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	4619      	mov	r1, r3
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	fbb3 f3f1 	udiv	r3, r3, r1
 800abce:	4413      	add	r3, r2
 800abd0:	4619      	mov	r1, r3
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7ff fd94 	bl	800a700 <move_window>
 800abd8:	4603      	mov	r3, r0
 800abda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800abdc:	7ffb      	ldrb	r3, [r7, #31]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d132      	bne.n	800ac48 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	8992      	ldrh	r2, [r2, #12]
 800abf6:	fbb3 f0f2 	udiv	r0, r3, r2
 800abfa:	fb00 f202 	mul.w	r2, r0, r2
 800abfe:	1a9b      	subs	r3, r3, r2
 800ac00:	440b      	add	r3, r1
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff fae4 	bl	800a1d0 <ld_dword>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ac0e:	4323      	orrs	r3, r4
 800ac10:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	8992      	ldrh	r2, [r2, #12]
 800ac20:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac24:	fb00 f202 	mul.w	r2, r0, r2
 800ac28:	1a9b      	subs	r3, r3, r2
 800ac2a:	440b      	add	r3, r1
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7ff fb0c 	bl	800a24c <st_dword>
			fs->wflag = 1;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2201      	movs	r2, #1
 800ac38:	70da      	strb	r2, [r3, #3]
			break;
 800ac3a:	e006      	b.n	800ac4a <put_fat+0x22a>
			if (res != FR_OK) break;
 800ac3c:	bf00      	nop
 800ac3e:	e004      	b.n	800ac4a <put_fat+0x22a>
			if (res != FR_OK) break;
 800ac40:	bf00      	nop
 800ac42:	e002      	b.n	800ac4a <put_fat+0x22a>
			if (res != FR_OK) break;
 800ac44:	bf00      	nop
 800ac46:	e000      	b.n	800ac4a <put_fat+0x22a>
			if (res != FR_OK) break;
 800ac48:	bf00      	nop
		}
	}
	return res;
 800ac4a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3724      	adds	r7, #36	@ 0x24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd90      	pop	{r4, r7, pc}

0800ac54 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b088      	sub	sp, #32
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d904      	bls.n	800ac7a <remove_chain+0x26>
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	6a1b      	ldr	r3, [r3, #32]
 800ac74:	68ba      	ldr	r2, [r7, #8]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d301      	bcc.n	800ac7e <remove_chain+0x2a>
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	e04b      	b.n	800ad16 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00c      	beq.n	800ac9e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ac84:	f04f 32ff 	mov.w	r2, #4294967295
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	69b8      	ldr	r0, [r7, #24]
 800ac8c:	f7ff fec8 	bl	800aa20 <put_fat>
 800ac90:	4603      	mov	r3, r0
 800ac92:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ac94:	7ffb      	ldrb	r3, [r7, #31]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <remove_chain+0x4a>
 800ac9a:	7ffb      	ldrb	r3, [r7, #31]
 800ac9c:	e03b      	b.n	800ad16 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7ff fdea 	bl	800a87a <get_fat>
 800aca6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d031      	beq.n	800ad12 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d101      	bne.n	800acb8 <remove_chain+0x64>
 800acb4:	2302      	movs	r3, #2
 800acb6:	e02e      	b.n	800ad16 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbe:	d101      	bne.n	800acc4 <remove_chain+0x70>
 800acc0:	2301      	movs	r3, #1
 800acc2:	e028      	b.n	800ad16 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800acc4:	2200      	movs	r2, #0
 800acc6:	68b9      	ldr	r1, [r7, #8]
 800acc8:	69b8      	ldr	r0, [r7, #24]
 800acca:	f7ff fea9 	bl	800aa20 <put_fat>
 800acce:	4603      	mov	r3, r0
 800acd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800acd2:	7ffb      	ldrb	r3, [r7, #31]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d001      	beq.n	800acdc <remove_chain+0x88>
 800acd8:	7ffb      	ldrb	r3, [r7, #31]
 800acda:	e01c      	b.n	800ad16 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	699a      	ldr	r2, [r3, #24]
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	6a1b      	ldr	r3, [r3, #32]
 800ace4:	3b02      	subs	r3, #2
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d20b      	bcs.n	800ad02 <remove_chain+0xae>
			fs->free_clst++;
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	699b      	ldr	r3, [r3, #24]
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	791b      	ldrb	r3, [r3, #4]
 800acf8:	f043 0301 	orr.w	r3, r3, #1
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d3c6      	bcc.n	800ac9e <remove_chain+0x4a>
 800ad10:	e000      	b.n	800ad14 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ad12:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ad14:	2300      	movs	r3, #0
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3720      	adds	r7, #32
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b088      	sub	sp, #32
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d10d      	bne.n	800ad50 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <create_chain+0x2c>
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	6a1b      	ldr	r3, [r3, #32]
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d31b      	bcc.n	800ad82 <create_chain+0x64>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	61bb      	str	r3, [r7, #24]
 800ad4e:	e018      	b.n	800ad82 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ad50:	6839      	ldr	r1, [r7, #0]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff fd91 	bl	800a87a <get_fat>
 800ad58:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d801      	bhi.n	800ad64 <create_chain+0x46>
 800ad60:	2301      	movs	r3, #1
 800ad62:	e070      	b.n	800ae46 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6a:	d101      	bne.n	800ad70 <create_chain+0x52>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	e06a      	b.n	800ae46 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d201      	bcs.n	800ad7e <create_chain+0x60>
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	e063      	b.n	800ae46 <create_chain+0x128>
		scl = clst;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	6a1b      	ldr	r3, [r3, #32]
 800ad90:	69fa      	ldr	r2, [r7, #28]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d307      	bcc.n	800ada6 <create_chain+0x88>
				ncl = 2;
 800ad96:	2302      	movs	r3, #2
 800ad98:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ad9a:	69fa      	ldr	r2, [r7, #28]
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d901      	bls.n	800ada6 <create_chain+0x88>
 800ada2:	2300      	movs	r3, #0
 800ada4:	e04f      	b.n	800ae46 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ada6:	69f9      	ldr	r1, [r7, #28]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff fd66 	bl	800a87a <get_fat>
 800adae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00e      	beq.n	800add4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d003      	beq.n	800adc4 <create_chain+0xa6>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc2:	d101      	bne.n	800adc8 <create_chain+0xaa>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	e03e      	b.n	800ae46 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800adc8:	69fa      	ldr	r2, [r7, #28]
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d1da      	bne.n	800ad86 <create_chain+0x68>
 800add0:	2300      	movs	r3, #0
 800add2:	e038      	b.n	800ae46 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800add4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800add6:	f04f 32ff 	mov.w	r2, #4294967295
 800adda:	69f9      	ldr	r1, [r7, #28]
 800addc:	6938      	ldr	r0, [r7, #16]
 800adde:	f7ff fe1f 	bl	800aa20 <put_fat>
 800ade2:	4603      	mov	r3, r0
 800ade4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d109      	bne.n	800ae00 <create_chain+0xe2>
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d006      	beq.n	800ae00 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800adf2:	69fa      	ldr	r2, [r7, #28]
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6938      	ldr	r0, [r7, #16]
 800adf8:	f7ff fe12 	bl	800aa20 <put_fat>
 800adfc:	4603      	mov	r3, r0
 800adfe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d116      	bne.n	800ae34 <create_chain+0x116>
		fs->last_clst = ncl;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	69fa      	ldr	r2, [r7, #28]
 800ae0a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	699a      	ldr	r2, [r3, #24]
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	6a1b      	ldr	r3, [r3, #32]
 800ae14:	3b02      	subs	r3, #2
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d804      	bhi.n	800ae24 <create_chain+0x106>
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	1e5a      	subs	r2, r3, #1
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	791b      	ldrb	r3, [r3, #4]
 800ae28:	f043 0301 	orr.w	r3, r3, #1
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	711a      	strb	r2, [r3, #4]
 800ae32:	e007      	b.n	800ae44 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d102      	bne.n	800ae40 <create_chain+0x122>
 800ae3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae3e:	e000      	b.n	800ae42 <create_chain+0x124>
 800ae40:	2301      	movs	r3, #1
 800ae42:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ae44:	69fb      	ldr	r3, [r7, #28]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3720      	adds	r7, #32
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b087      	sub	sp, #28
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae62:	3304      	adds	r3, #4
 800ae64:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	899b      	ldrh	r3, [r3, #12]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	8952      	ldrh	r2, [r2, #10]
 800ae76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae7a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	1d1a      	adds	r2, r3, #4
 800ae80:	613a      	str	r2, [r7, #16]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <clmt_clust+0x42>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e010      	b.n	800aeb2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d307      	bcc.n	800aea8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ae98:	697a      	ldr	r2, [r7, #20]
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	617b      	str	r3, [r7, #20]
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	3304      	adds	r3, #4
 800aea4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aea6:	e7e9      	b.n	800ae7c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800aea8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	4413      	add	r3, r2
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	371c      	adds	r7, #28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr

0800aebe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b086      	sub	sp, #24
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aed4:	d204      	bcs.n	800aee0 <dir_sdi+0x22>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	f003 031f 	and.w	r3, r3, #31
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800aee0:	2302      	movs	r3, #2
 800aee2:	e071      	b.n	800afc8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d106      	bne.n	800af04 <dir_sdi+0x46>
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d902      	bls.n	800af04 <dir_sdi+0x46>
		clst = fs->dirbase;
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af02:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10c      	bne.n	800af24 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	095b      	lsrs	r3, r3, #5
 800af0e:	693a      	ldr	r2, [r7, #16]
 800af10:	8912      	ldrh	r2, [r2, #8]
 800af12:	4293      	cmp	r3, r2
 800af14:	d301      	bcc.n	800af1a <dir_sdi+0x5c>
 800af16:	2302      	movs	r3, #2
 800af18:	e056      	b.n	800afc8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	61da      	str	r2, [r3, #28]
 800af22:	e02d      	b.n	800af80 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	895b      	ldrh	r3, [r3, #10]
 800af28:	461a      	mov	r2, r3
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	899b      	ldrh	r3, [r3, #12]
 800af2e:	fb02 f303 	mul.w	r3, r2, r3
 800af32:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af34:	e019      	b.n	800af6a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6979      	ldr	r1, [r7, #20]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7ff fc9d 	bl	800a87a <get_fat>
 800af40:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af48:	d101      	bne.n	800af4e <dir_sdi+0x90>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e03c      	b.n	800afc8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d904      	bls.n	800af5e <dir_sdi+0xa0>
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d301      	bcc.n	800af62 <dir_sdi+0xa4>
 800af5e:	2302      	movs	r3, #2
 800af60:	e032      	b.n	800afc8 <dir_sdi+0x10a>
			ofs -= csz;
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d2e1      	bcs.n	800af36 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800af72:	6979      	ldr	r1, [r7, #20]
 800af74:	6938      	ldr	r0, [r7, #16]
 800af76:	f7ff fc61 	bl	800a83c <clust2sect>
 800af7a:	4602      	mov	r2, r0
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <dir_sdi+0xd4>
 800af8e:	2302      	movs	r3, #2
 800af90:	e01a      	b.n	800afc8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	69da      	ldr	r2, [r3, #28]
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	899b      	ldrh	r3, [r3, #12]
 800af9a:	4619      	mov	r1, r3
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800afa2:	441a      	add	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	899b      	ldrh	r3, [r3, #12]
 800afb2:	461a      	mov	r2, r3
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800afba:	fb00 f202 	mul.w	r2, r0, r2
 800afbe:	1a9b      	subs	r3, r3, r2
 800afc0:	18ca      	adds	r2, r1, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	695b      	ldr	r3, [r3, #20]
 800afe4:	3320      	adds	r3, #32
 800afe6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	69db      	ldr	r3, [r3, #28]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d003      	beq.n	800aff8 <dir_next+0x28>
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aff6:	d301      	bcc.n	800affc <dir_next+0x2c>
 800aff8:	2304      	movs	r3, #4
 800affa:	e0bb      	b.n	800b174 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	899b      	ldrh	r3, [r3, #12]
 800b000:	461a      	mov	r2, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	fbb3 f1f2 	udiv	r1, r3, r2
 800b008:	fb01 f202 	mul.w	r2, r1, r2
 800b00c:	1a9b      	subs	r3, r3, r2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f040 809d 	bne.w	800b14e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	1c5a      	adds	r2, r3, #1
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d10b      	bne.n	800b03e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	095b      	lsrs	r3, r3, #5
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	8912      	ldrh	r2, [r2, #8]
 800b02e:	4293      	cmp	r3, r2
 800b030:	f0c0 808d 	bcc.w	800b14e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	61da      	str	r2, [r3, #28]
 800b03a:	2304      	movs	r3, #4
 800b03c:	e09a      	b.n	800b174 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	899b      	ldrh	r3, [r3, #12]
 800b042:	461a      	mov	r2, r3
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	fbb3 f3f2 	udiv	r3, r3, r2
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	8952      	ldrh	r2, [r2, #10]
 800b04e:	3a01      	subs	r2, #1
 800b050:	4013      	ands	r3, r2
 800b052:	2b00      	cmp	r3, #0
 800b054:	d17b      	bne.n	800b14e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	4619      	mov	r1, r3
 800b05e:	4610      	mov	r0, r2
 800b060:	f7ff fc0b 	bl	800a87a <get_fat>
 800b064:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d801      	bhi.n	800b070 <dir_next+0xa0>
 800b06c:	2302      	movs	r3, #2
 800b06e:	e081      	b.n	800b174 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b076:	d101      	bne.n	800b07c <dir_next+0xac>
 800b078:	2301      	movs	r3, #1
 800b07a:	e07b      	b.n	800b174 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6a1b      	ldr	r3, [r3, #32]
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	429a      	cmp	r2, r3
 800b084:	d359      	bcc.n	800b13a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d104      	bne.n	800b096 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2200      	movs	r2, #0
 800b090:	61da      	str	r2, [r3, #28]
 800b092:	2304      	movs	r3, #4
 800b094:	e06e      	b.n	800b174 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	4619      	mov	r1, r3
 800b09e:	4610      	mov	r0, r2
 800b0a0:	f7ff fe3d 	bl	800ad1e <create_chain>
 800b0a4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <dir_next+0xe0>
 800b0ac:	2307      	movs	r3, #7
 800b0ae:	e061      	b.n	800b174 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d101      	bne.n	800b0ba <dir_next+0xea>
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	e05c      	b.n	800b174 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c0:	d101      	bne.n	800b0c6 <dir_next+0xf6>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e056      	b.n	800b174 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f7ff fad6 	bl	800a678 <sync_window>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <dir_next+0x106>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e04e      	b.n	800b174 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	899b      	ldrh	r3, [r3, #12]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	f7ff f8ff 	bl	800a2e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	613b      	str	r3, [r7, #16]
 800b0ec:	6979      	ldr	r1, [r7, #20]
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff fba4 	bl	800a83c <clust2sect>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	639a      	str	r2, [r3, #56]	@ 0x38
 800b0fa:	e012      	b.n	800b122 <dir_next+0x152>
						fs->wflag = 1;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2201      	movs	r2, #1
 800b100:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f7ff fab8 	bl	800a678 <sync_window>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d001      	beq.n	800b112 <dir_next+0x142>
 800b10e:	2301      	movs	r3, #1
 800b110:	e030      	b.n	800b174 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	3301      	adds	r3, #1
 800b116:	613b      	str	r3, [r7, #16]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	639a      	str	r2, [r3, #56]	@ 0x38
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	895b      	ldrh	r3, [r3, #10]
 800b126:	461a      	mov	r2, r3
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d3e6      	bcc.n	800b0fc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	1ad2      	subs	r2, r2, r3
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	697a      	ldr	r2, [r7, #20]
 800b13e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b140:	6979      	ldr	r1, [r7, #20]
 800b142:	68f8      	ldr	r0, [r7, #12]
 800b144:	f7ff fb7a 	bl	800a83c <clust2sect>
 800b148:	4602      	mov	r2, r0
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68ba      	ldr	r2, [r7, #8]
 800b152:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	899b      	ldrh	r3, [r3, #12]
 800b15e:	461a      	mov	r2, r3
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	fbb3 f0f2 	udiv	r0, r3, r2
 800b166:	fb00 f202 	mul.w	r2, r0, r2
 800b16a:	1a9b      	subs	r3, r3, r2
 800b16c:	18ca      	adds	r2, r1, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b18c:	2100      	movs	r1, #0
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff fe95 	bl	800aebe <dir_sdi>
 800b194:	4603      	mov	r3, r0
 800b196:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b198:	7dfb      	ldrb	r3, [r7, #23]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d12b      	bne.n	800b1f6 <dir_alloc+0x7a>
		n = 0;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f7ff faa9 	bl	800a700 <move_window>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d11d      	bne.n	800b1f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6a1b      	ldr	r3, [r3, #32]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	2be5      	cmp	r3, #229	@ 0xe5
 800b1c0:	d004      	beq.n	800b1cc <dir_alloc+0x50>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d107      	bne.n	800b1dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	613b      	str	r3, [r7, #16]
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d102      	bne.n	800b1e0 <dir_alloc+0x64>
 800b1da:	e00c      	b.n	800b1f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b1dc:	2300      	movs	r3, #0
 800b1de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff fef4 	bl	800afd0 <dir_next>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b1ec:	7dfb      	ldrb	r3, [r7, #23]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0d7      	beq.n	800b1a2 <dir_alloc+0x26>
 800b1f2:	e000      	b.n	800b1f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b1f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b1f6:	7dfb      	ldrb	r3, [r7, #23]
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	d101      	bne.n	800b200 <dir_alloc+0x84>
 800b1fc:	2307      	movs	r3, #7
 800b1fe:	75fb      	strb	r3, [r7, #23]
	return res;
 800b200:	7dfb      	ldrb	r3, [r7, #23]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3718      	adds	r7, #24
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b084      	sub	sp, #16
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	331a      	adds	r3, #26
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fe ffc1 	bl	800a1a0 <ld_word>
 800b21e:	4603      	mov	r3, r0
 800b220:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	2b03      	cmp	r3, #3
 800b228:	d109      	bne.n	800b23e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	3314      	adds	r3, #20
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fe ffb6 	bl	800a1a0 <ld_word>
 800b234:	4603      	mov	r3, r0
 800b236:	041b      	lsls	r3, r3, #16
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b23e:	68fb      	ldr	r3, [r7, #12]
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	331a      	adds	r3, #26
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	b292      	uxth	r2, r2
 800b25c:	4611      	mov	r1, r2
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe ffd9 	bl	800a216 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d109      	bne.n	800b280 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	f103 0214 	add.w	r2, r3, #20
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	0c1b      	lsrs	r3, r3, #16
 800b276:	b29b      	uxth	r3, r3
 800b278:	4619      	mov	r1, r3
 800b27a:	4610      	mov	r0, r2
 800b27c:	f7fe ffcb 	bl	800a216 <st_word>
	}
}
 800b280:	bf00      	nop
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b288:	b590      	push	{r4, r7, lr}
 800b28a:	b087      	sub	sp, #28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	331a      	adds	r3, #26
 800b296:	4618      	mov	r0, r3
 800b298:	f7fe ff82 	bl	800a1a0 <ld_word>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <cmp_lfn+0x1e>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	e059      	b.n	800b35a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2ae:	1e5a      	subs	r2, r3, #1
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	4413      	add	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b2bc:	2301      	movs	r3, #1
 800b2be:	81fb      	strh	r3, [r7, #14]
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	e033      	b.n	800b32e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b2c6:	4a27      	ldr	r2, [pc, #156]	@ (800b364 <cmp_lfn+0xdc>)
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fe ff63 	bl	800a1a0 <ld_word>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b2de:	89fb      	ldrh	r3, [r7, #14]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01a      	beq.n	800b31a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	2bfe      	cmp	r3, #254	@ 0xfe
 800b2e8:	d812      	bhi.n	800b310 <cmp_lfn+0x88>
 800b2ea:	89bb      	ldrh	r3, [r7, #12]
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f002 fa9b 	bl	800d828 <ff_wtoupper>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	461c      	mov	r4, r3
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	1c5a      	adds	r2, r3, #1
 800b2fa:	617a      	str	r2, [r7, #20]
 800b2fc:	005b      	lsls	r3, r3, #1
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	4413      	add	r3, r2
 800b302:	881b      	ldrh	r3, [r3, #0]
 800b304:	4618      	mov	r0, r3
 800b306:	f002 fa8f 	bl	800d828 <ff_wtoupper>
 800b30a:	4603      	mov	r3, r0
 800b30c:	429c      	cmp	r4, r3
 800b30e:	d001      	beq.n	800b314 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b310:	2300      	movs	r3, #0
 800b312:	e022      	b.n	800b35a <cmp_lfn+0xd2>
			}
			wc = uc;
 800b314:	89bb      	ldrh	r3, [r7, #12]
 800b316:	81fb      	strh	r3, [r7, #14]
 800b318:	e006      	b.n	800b328 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b31a:	89bb      	ldrh	r3, [r7, #12]
 800b31c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b320:	4293      	cmp	r3, r2
 800b322:	d001      	beq.n	800b328 <cmp_lfn+0xa0>
 800b324:	2300      	movs	r3, #0
 800b326:	e018      	b.n	800b35a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	3301      	adds	r3, #1
 800b32c:	613b      	str	r3, [r7, #16]
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	2b0c      	cmp	r3, #12
 800b332:	d9c8      	bls.n	800b2c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00b      	beq.n	800b358 <cmp_lfn+0xd0>
 800b340:	89fb      	ldrh	r3, [r7, #14]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d008      	beq.n	800b358 <cmp_lfn+0xd0>
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	4413      	add	r3, r2
 800b34e:	881b      	ldrh	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <cmp_lfn+0xd0>
 800b354:	2300      	movs	r3, #0
 800b356:	e000      	b.n	800b35a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b358:	2301      	movs	r3, #1
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	371c      	adds	r7, #28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd90      	pop	{r4, r7, pc}
 800b362:	bf00      	nop
 800b364:	0800ddd8 	.word	0x0800ddd8

0800b368 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b088      	sub	sp, #32
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	4611      	mov	r1, r2
 800b374:	461a      	mov	r2, r3
 800b376:	460b      	mov	r3, r1
 800b378:	71fb      	strb	r3, [r7, #7]
 800b37a:	4613      	mov	r3, r2
 800b37c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	330d      	adds	r3, #13
 800b382:	79ba      	ldrb	r2, [r7, #6]
 800b384:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	330b      	adds	r3, #11
 800b38a:	220f      	movs	r2, #15
 800b38c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	330c      	adds	r3, #12
 800b392:	2200      	movs	r2, #0
 800b394:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	331a      	adds	r3, #26
 800b39a:	2100      	movs	r1, #0
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7fe ff3a 	bl	800a216 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	1e5a      	subs	r2, r3, #1
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	005b      	lsls	r3, r3, #1
 800b3aa:	4413      	add	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4413      	add	r3, r2
 800b3b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	82fb      	strh	r3, [r7, #22]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b3ba:	8afb      	ldrh	r3, [r7, #22]
 800b3bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d007      	beq.n	800b3d4 <put_lfn+0x6c>
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	1c5a      	adds	r2, r3, #1
 800b3c8:	61fa      	str	r2, [r7, #28]
 800b3ca:	005b      	lsls	r3, r3, #1
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b3d4:	4a17      	ldr	r2, [pc, #92]	@ (800b434 <put_lfn+0xcc>)
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	4413      	add	r3, r2
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	461a      	mov	r2, r3
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	8afa      	ldrh	r2, [r7, #22]
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7fe ff15 	bl	800a216 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b3ec:	8afb      	ldrh	r3, [r7, #22]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d102      	bne.n	800b3f8 <put_lfn+0x90>
 800b3f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b3f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	61bb      	str	r3, [r7, #24]
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	2b0c      	cmp	r3, #12
 800b402:	d9da      	bls.n	800b3ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b404:	8afb      	ldrh	r3, [r7, #22]
 800b406:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d006      	beq.n	800b41c <put_lfn+0xb4>
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	005b      	lsls	r3, r3, #1
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	4413      	add	r3, r2
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d103      	bne.n	800b424 <put_lfn+0xbc>
 800b41c:	79fb      	ldrb	r3, [r7, #7]
 800b41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b422:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	79fa      	ldrb	r2, [r7, #7]
 800b428:	701a      	strb	r2, [r3, #0]
}
 800b42a:	bf00      	nop
 800b42c:	3720      	adds	r7, #32
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	0800ddd8 	.word	0x0800ddd8

0800b438 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b08c      	sub	sp, #48	@ 0x30
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b446:	220b      	movs	r2, #11
 800b448:	68b9      	ldr	r1, [r7, #8]
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f7fe ff2a 	bl	800a2a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b05      	cmp	r3, #5
 800b454:	d929      	bls.n	800b4aa <gen_numname+0x72>
		sr = seq;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b45a:	e020      	b.n	800b49e <gen_numname+0x66>
			wc = *lfn++;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	1c9a      	adds	r2, r3, #2
 800b460:	607a      	str	r2, [r7, #4]
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b466:	2300      	movs	r3, #0
 800b468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b46a:	e015      	b.n	800b498 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	005a      	lsls	r2, r3, #1
 800b470:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b472:	f003 0301 	and.w	r3, r3, #1
 800b476:	4413      	add	r3, r2
 800b478:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b47a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b47c:	085b      	lsrs	r3, r3, #1
 800b47e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d003      	beq.n	800b492 <gen_numname+0x5a>
 800b48a:	69fa      	ldr	r2, [r7, #28]
 800b48c:	4b30      	ldr	r3, [pc, #192]	@ (800b550 <gen_numname+0x118>)
 800b48e:	4053      	eors	r3, r2
 800b490:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b494:	3301      	adds	r3, #1
 800b496:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49a:	2b0f      	cmp	r3, #15
 800b49c:	d9e6      	bls.n	800b46c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	881b      	ldrh	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1da      	bne.n	800b45c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b4aa:	2307      	movs	r3, #7
 800b4ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	f003 030f 	and.w	r3, r3, #15
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	3330      	adds	r3, #48	@ 0x30
 800b4ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b4be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b4c2:	2b39      	cmp	r3, #57	@ 0x39
 800b4c4:	d904      	bls.n	800b4d0 <gen_numname+0x98>
 800b4c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b4ca:	3307      	adds	r3, #7
 800b4cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d2:	1e5a      	subs	r2, r3, #1
 800b4d4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b4d6:	3330      	adds	r3, #48	@ 0x30
 800b4d8:	443b      	add	r3, r7
 800b4da:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b4de:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	091b      	lsrs	r3, r3, #4
 800b4e6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1df      	bne.n	800b4ae <gen_numname+0x76>
	ns[i] = '~';
 800b4ee:	f107 0214 	add.w	r2, r7, #20
 800b4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f4:	4413      	add	r3, r2
 800b4f6:	227e      	movs	r2, #126	@ 0x7e
 800b4f8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4fe:	e002      	b.n	800b506 <gen_numname+0xce>
 800b500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b502:	3301      	adds	r3, #1
 800b504:	627b      	str	r3, [r7, #36]	@ 0x24
 800b506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d205      	bcs.n	800b51a <gen_numname+0xe2>
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b512:	4413      	add	r3, r2
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	2b20      	cmp	r3, #32
 800b518:	d1f2      	bne.n	800b500 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51c:	2b07      	cmp	r3, #7
 800b51e:	d807      	bhi.n	800b530 <gen_numname+0xf8>
 800b520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b526:	3330      	adds	r3, #48	@ 0x30
 800b528:	443b      	add	r3, r7
 800b52a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b52e:	e000      	b.n	800b532 <gen_numname+0xfa>
 800b530:	2120      	movs	r1, #32
 800b532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	627a      	str	r2, [r7, #36]	@ 0x24
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	4413      	add	r3, r2
 800b53c:	460a      	mov	r2, r1
 800b53e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b542:	2b07      	cmp	r3, #7
 800b544:	d9e9      	bls.n	800b51a <gen_numname+0xe2>
}
 800b546:	bf00      	nop
 800b548:	bf00      	nop
 800b54a:	3730      	adds	r7, #48	@ 0x30
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	00011021 	.word	0x00011021

0800b554 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b560:	230b      	movs	r3, #11
 800b562:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	b2da      	uxtb	r2, r3
 800b568:	0852      	lsrs	r2, r2, #1
 800b56a:	01db      	lsls	r3, r3, #7
 800b56c:	4313      	orrs	r3, r2
 800b56e:	b2da      	uxtb	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	1c59      	adds	r1, r3, #1
 800b574:	6079      	str	r1, [r7, #4]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	4413      	add	r3, r2
 800b57a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	3b01      	subs	r3, #1
 800b580:	60bb      	str	r3, [r7, #8]
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1ed      	bne.n	800b564 <sum_sfn+0x10>
	return sum;
 800b588:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b086      	sub	sp, #24
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7ff fc89 	bl	800aebe <dir_sdi>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d001      	beq.n	800b5ba <dir_find+0x24>
 800b5b6:	7dfb      	ldrb	r3, [r7, #23]
 800b5b8:	e0a9      	b.n	800b70e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b5ba:	23ff      	movs	r3, #255	@ 0xff
 800b5bc:	753b      	strb	r3, [r7, #20]
 800b5be:	7d3b      	ldrb	r3, [r7, #20]
 800b5c0:	757b      	strb	r3, [r7, #21]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6938      	ldr	r0, [r7, #16]
 800b5d2:	f7ff f895 	bl	800a700 <move_window>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b5da:	7dfb      	ldrb	r3, [r7, #23]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f040 8090 	bne.w	800b702 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b5ea:	7dbb      	ldrb	r3, [r7, #22]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d102      	bne.n	800b5f6 <dir_find+0x60>
 800b5f0:	2304      	movs	r3, #4
 800b5f2:	75fb      	strb	r3, [r7, #23]
 800b5f4:	e08a      	b.n	800b70c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	330b      	adds	r3, #11
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b602:	73fb      	strb	r3, [r7, #15]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	7bfa      	ldrb	r2, [r7, #15]
 800b608:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b60a:	7dbb      	ldrb	r3, [r7, #22]
 800b60c:	2be5      	cmp	r3, #229	@ 0xe5
 800b60e:	d007      	beq.n	800b620 <dir_find+0x8a>
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	f003 0308 	and.w	r3, r3, #8
 800b616:	2b00      	cmp	r3, #0
 800b618:	d009      	beq.n	800b62e <dir_find+0x98>
 800b61a:	7bfb      	ldrb	r3, [r7, #15]
 800b61c:	2b0f      	cmp	r3, #15
 800b61e:	d006      	beq.n	800b62e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b620:	23ff      	movs	r3, #255	@ 0xff
 800b622:	757b      	strb	r3, [r7, #21]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f04f 32ff 	mov.w	r2, #4294967295
 800b62a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b62c:	e05e      	b.n	800b6ec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	2b0f      	cmp	r3, #15
 800b632:	d136      	bne.n	800b6a2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b63a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d154      	bne.n	800b6ec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b642:	7dbb      	ldrb	r3, [r7, #22]
 800b644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00d      	beq.n	800b668 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a1b      	ldr	r3, [r3, #32]
 800b650:	7b5b      	ldrb	r3, [r3, #13]
 800b652:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b654:	7dbb      	ldrb	r3, [r7, #22]
 800b656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b65a:	75bb      	strb	r3, [r7, #22]
 800b65c:	7dbb      	ldrb	r3, [r7, #22]
 800b65e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	695a      	ldr	r2, [r3, #20]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b668:	7dba      	ldrb	r2, [r7, #22]
 800b66a:	7d7b      	ldrb	r3, [r7, #21]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d115      	bne.n	800b69c <dir_find+0x106>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a1b      	ldr	r3, [r3, #32]
 800b674:	330d      	adds	r3, #13
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	7d3a      	ldrb	r2, [r7, #20]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d10e      	bne.n	800b69c <dir_find+0x106>
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	691a      	ldr	r2, [r3, #16]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	4619      	mov	r1, r3
 800b688:	4610      	mov	r0, r2
 800b68a:	f7ff fdfd 	bl	800b288 <cmp_lfn>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d003      	beq.n	800b69c <dir_find+0x106>
 800b694:	7d7b      	ldrb	r3, [r7, #21]
 800b696:	3b01      	subs	r3, #1
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	e000      	b.n	800b69e <dir_find+0x108>
 800b69c:	23ff      	movs	r3, #255	@ 0xff
 800b69e:	757b      	strb	r3, [r7, #21]
 800b6a0:	e024      	b.n	800b6ec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b6a2:	7d7b      	ldrb	r3, [r7, #21]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d109      	bne.n	800b6bc <dir_find+0x126>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a1b      	ldr	r3, [r3, #32]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff ff51 	bl	800b554 <sum_sfn>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	7d3b      	ldrb	r3, [r7, #20]
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d024      	beq.n	800b706 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b6c2:	f003 0301 	and.w	r3, r3, #1
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10a      	bne.n	800b6e0 <dir_find+0x14a>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a18      	ldr	r0, [r3, #32]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	3324      	adds	r3, #36	@ 0x24
 800b6d2:	220b      	movs	r2, #11
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	f7fe fe21 	bl	800a31c <mem_cmp>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d014      	beq.n	800b70a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b6e0:	23ff      	movs	r3, #255	@ 0xff
 800b6e2:	757b      	strb	r3, [r7, #21]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ea:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7ff fc6e 	bl	800afd0 <dir_next>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f43f af65 	beq.w	800b5ca <dir_find+0x34>
 800b700:	e004      	b.n	800b70c <dir_find+0x176>
		if (res != FR_OK) break;
 800b702:	bf00      	nop
 800b704:	e002      	b.n	800b70c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b706:	bf00      	nop
 800b708:	e000      	b.n	800b70c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b70a:	bf00      	nop

	return res;
 800b70c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
	...

0800b718 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b08c      	sub	sp, #48	@ 0x30
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b72c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <dir_register+0x20>
 800b734:	2306      	movs	r3, #6
 800b736:	e0e0      	b.n	800b8fa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b738:	2300      	movs	r3, #0
 800b73a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b73c:	e002      	b.n	800b744 <dir_register+0x2c>
 800b73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b740:	3301      	adds	r3, #1
 800b742:	627b      	str	r3, [r7, #36]	@ 0x24
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	691a      	ldr	r2, [r3, #16]
 800b748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74a:	005b      	lsls	r3, r3, #1
 800b74c:	4413      	add	r3, r2
 800b74e:	881b      	ldrh	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1f4      	bne.n	800b73e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800b75a:	f107 030c 	add.w	r3, r7, #12
 800b75e:	220c      	movs	r2, #12
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fd9f 	bl	800a2a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b766:	7dfb      	ldrb	r3, [r7, #23]
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d032      	beq.n	800b7d6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2240      	movs	r2, #64	@ 0x40
 800b774:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800b778:	2301      	movs	r3, #1
 800b77a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b77c:	e016      	b.n	800b7ac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	691a      	ldr	r2, [r3, #16]
 800b788:	f107 010c 	add.w	r1, r7, #12
 800b78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b78e:	f7ff fe53 	bl	800b438 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7ff feff 	bl	800b596 <dir_find>
 800b798:	4603      	mov	r3, r0
 800b79a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800b79e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d106      	bne.n	800b7b4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ae:	2b63      	cmp	r3, #99	@ 0x63
 800b7b0:	d9e5      	bls.n	800b77e <dir_register+0x66>
 800b7b2:	e000      	b.n	800b7b6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b7b4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b8:	2b64      	cmp	r3, #100	@ 0x64
 800b7ba:	d101      	bne.n	800b7c0 <dir_register+0xa8>
 800b7bc:	2307      	movs	r3, #7
 800b7be:	e09c      	b.n	800b8fa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b7c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7c4:	2b04      	cmp	r3, #4
 800b7c6:	d002      	beq.n	800b7ce <dir_register+0xb6>
 800b7c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7cc:	e095      	b.n	800b8fa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b7ce:	7dfa      	ldrb	r2, [r7, #23]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b7d6:	7dfb      	ldrb	r3, [r7, #23]
 800b7d8:	f003 0302 	and.w	r3, r3, #2
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d007      	beq.n	800b7f0 <dir_register+0xd8>
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e2:	330c      	adds	r3, #12
 800b7e4:	4a47      	ldr	r2, [pc, #284]	@ (800b904 <dir_register+0x1ec>)
 800b7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ea:	089b      	lsrs	r3, r3, #2
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	e000      	b.n	800b7f2 <dir_register+0xda>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b7f4:	6a39      	ldr	r1, [r7, #32]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff fcc0 	bl	800b17c <dir_alloc>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b802:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b806:	2b00      	cmp	r3, #0
 800b808:	d148      	bne.n	800b89c <dir_register+0x184>
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	3b01      	subs	r3, #1
 800b80e:	623b      	str	r3, [r7, #32]
 800b810:	6a3b      	ldr	r3, [r7, #32]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d042      	beq.n	800b89c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	695a      	ldr	r2, [r3, #20]
 800b81a:	6a3b      	ldr	r3, [r7, #32]
 800b81c:	015b      	lsls	r3, r3, #5
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff fb4b 	bl	800aebe <dir_sdi>
 800b828:	4603      	mov	r3, r0
 800b82a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b82e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b832:	2b00      	cmp	r3, #0
 800b834:	d132      	bne.n	800b89c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	3324      	adds	r3, #36	@ 0x24
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7ff fe8a 	bl	800b554 <sum_sfn>
 800b840:	4603      	mov	r3, r0
 800b842:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	69db      	ldr	r3, [r3, #28]
 800b848:	4619      	mov	r1, r3
 800b84a:	69f8      	ldr	r0, [r7, #28]
 800b84c:	f7fe ff58 	bl	800a700 <move_window>
 800b850:	4603      	mov	r3, r0
 800b852:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800b856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d11d      	bne.n	800b89a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	6918      	ldr	r0, [r3, #16]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a19      	ldr	r1, [r3, #32]
 800b866:	6a3b      	ldr	r3, [r7, #32]
 800b868:	b2da      	uxtb	r2, r3
 800b86a:	7efb      	ldrb	r3, [r7, #27]
 800b86c:	f7ff fd7c 	bl	800b368 <put_lfn>
				fs->wflag = 1;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	2201      	movs	r2, #1
 800b874:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b876:	2100      	movs	r1, #0
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff fba9 	bl	800afd0 <dir_next>
 800b87e:	4603      	mov	r3, r0
 800b880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800b884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d107      	bne.n	800b89c <dir_register+0x184>
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	3b01      	subs	r3, #1
 800b890:	623b      	str	r3, [r7, #32]
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1d5      	bne.n	800b844 <dir_register+0x12c>
 800b898:	e000      	b.n	800b89c <dir_register+0x184>
				if (res != FR_OK) break;
 800b89a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b89c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d128      	bne.n	800b8f6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	69db      	ldr	r3, [r3, #28]
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	69f8      	ldr	r0, [r7, #28]
 800b8ac:	f7fe ff28 	bl	800a700 <move_window>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b8b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d11b      	bne.n	800b8f6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	2220      	movs	r2, #32
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe fd0d 	bl	800a2e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a18      	ldr	r0, [r3, #32]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	3324      	adds	r3, #36	@ 0x24
 800b8d4:	220b      	movs	r2, #11
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	f7fe fce4 	bl	800a2a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	330c      	adds	r3, #12
 800b8e8:	f002 0218 	and.w	r2, r2, #24
 800b8ec:	b2d2      	uxtb	r2, r2
 800b8ee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b8f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3730      	adds	r7, #48	@ 0x30
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	4ec4ec4f 	.word	0x4ec4ec4f

0800b908 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08a      	sub	sp, #40	@ 0x28
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	613b      	str	r3, [r7, #16]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	2300      	movs	r3, #0
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	61ba      	str	r2, [r7, #24]
 800b92e:	693a      	ldr	r2, [r7, #16]
 800b930:	4413      	add	r3, r2
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b936:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b938:	2b1f      	cmp	r3, #31
 800b93a:	d940      	bls.n	800b9be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b93c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b93e:	2b2f      	cmp	r3, #47	@ 0x2f
 800b940:	d006      	beq.n	800b950 <create_name+0x48>
 800b942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b944:	2b5c      	cmp	r3, #92	@ 0x5c
 800b946:	d110      	bne.n	800b96a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b948:	e002      	b.n	800b950 <create_name+0x48>
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	3301      	adds	r3, #1
 800b94e:	61bb      	str	r3, [r7, #24]
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	4413      	add	r3, r2
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	2b2f      	cmp	r3, #47	@ 0x2f
 800b95a:	d0f6      	beq.n	800b94a <create_name+0x42>
 800b95c:	693a      	ldr	r2, [r7, #16]
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	4413      	add	r3, r2
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b5c      	cmp	r3, #92	@ 0x5c
 800b966:	d0f0      	beq.n	800b94a <create_name+0x42>
			break;
 800b968:	e02a      	b.n	800b9c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2bfe      	cmp	r3, #254	@ 0xfe
 800b96e:	d901      	bls.n	800b974 <create_name+0x6c>
 800b970:	2306      	movs	r3, #6
 800b972:	e1ca      	b.n	800bd0a <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b974:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b976:	b2db      	uxtb	r3, r3
 800b978:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b97a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b97c:	2101      	movs	r1, #1
 800b97e:	4618      	mov	r0, r3
 800b980:	f001 ff16 	bl	800d7b0 <ff_convert>
 800b984:	4603      	mov	r3, r0
 800b986:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b988:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <create_name+0x8a>
 800b98e:	2306      	movs	r3, #6
 800b990:	e1bb      	b.n	800bd0a <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b992:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b994:	2b7f      	cmp	r3, #127	@ 0x7f
 800b996:	d809      	bhi.n	800b9ac <create_name+0xa4>
 800b998:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b99a:	4619      	mov	r1, r3
 800b99c:	489e      	ldr	r0, [pc, #632]	@ (800bc18 <create_name+0x310>)
 800b99e:	f7fe fce4 	bl	800a36a <chk_chr>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <create_name+0xa4>
 800b9a8:	2306      	movs	r3, #6
 800b9aa:	e1ae      	b.n	800bd0a <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	617a      	str	r2, [r7, #20]
 800b9b2:	005b      	lsls	r3, r3, #1
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b9ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b9bc:	e7b4      	b.n	800b928 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b9be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	441a      	add	r2, r3
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b9ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9cc:	2b1f      	cmp	r3, #31
 800b9ce:	d801      	bhi.n	800b9d4 <create_name+0xcc>
 800b9d0:	2304      	movs	r3, #4
 800b9d2:	e000      	b.n	800b9d6 <create_name+0xce>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d109      	bne.n	800b9f4 <create_name+0xec>
 800b9e0:	697a      	ldr	r2, [r7, #20]
 800b9e2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b9e6:	4413      	add	r3, r2
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9f2:	d015      	beq.n	800ba20 <create_name+0x118>
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d14d      	bne.n	800ba96 <create_name+0x18e>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ba00:	4413      	add	r3, r2
 800ba02:	005b      	lsls	r3, r3, #1
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	4413      	add	r3, r2
 800ba08:	881b      	ldrh	r3, [r3, #0]
 800ba0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba0c:	d143      	bne.n	800ba96 <create_name+0x18e>
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	4b82      	ldr	r3, [pc, #520]	@ (800bc1c <create_name+0x314>)
 800ba12:	4413      	add	r3, r2
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4413      	add	r3, r2
 800ba1a:	881b      	ldrh	r3, [r3, #0]
 800ba1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba1e:	d13a      	bne.n	800ba96 <create_name+0x18e>
		lfn[di] = 0;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	005b      	lsls	r3, r3, #1
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	4413      	add	r3, r2
 800ba28:	2200      	movs	r2, #0
 800ba2a:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	623b      	str	r3, [r7, #32]
 800ba30:	e00f      	b.n	800ba52 <create_name+0x14a>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800ba32:	6a3a      	ldr	r2, [r7, #32]
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d201      	bcs.n	800ba3e <create_name+0x136>
 800ba3a:	212e      	movs	r1, #46	@ 0x2e
 800ba3c:	e000      	b.n	800ba40 <create_name+0x138>
 800ba3e:	2120      	movs	r1, #32
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	4413      	add	r3, r2
 800ba46:	3324      	adds	r3, #36	@ 0x24
 800ba48:	460a      	mov	r2, r1
 800ba4a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800ba4c:	6a3b      	ldr	r3, [r7, #32]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	623b      	str	r3, [r7, #32]
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	2b0a      	cmp	r3, #10
 800ba56:	d9ec      	bls.n	800ba32 <create_name+0x12a>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800ba58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba5c:	f043 0320 	orr.w	r3, r3, #32
 800ba60:	b2d9      	uxtb	r1, r3
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	6a3b      	ldr	r3, [r7, #32]
 800ba66:	4413      	add	r3, r2
 800ba68:	3324      	adds	r3, #36	@ 0x24
 800ba6a:	460a      	mov	r2, r1
 800ba6c:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e14b      	b.n	800bd0a <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ba78:	4413      	add	r3, r2
 800ba7a:	005b      	lsls	r3, r3, #1
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	881b      	ldrh	r3, [r3, #0]
 800ba82:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ba84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba86:	2b20      	cmp	r3, #32
 800ba88:	d002      	beq.n	800ba90 <create_name+0x188>
 800ba8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba8e:	d106      	bne.n	800ba9e <create_name+0x196>
		di--;
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	3b01      	subs	r3, #1
 800ba94:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1ea      	bne.n	800ba72 <create_name+0x16a>
 800ba9c:	e000      	b.n	800baa0 <create_name+0x198>
		if (w != ' ' && w != '.') break;
 800ba9e:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	4413      	add	r3, r2
 800baa8:	2200      	movs	r2, #0
 800baaa:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d101      	bne.n	800bab6 <create_name+0x1ae>
 800bab2:	2306      	movs	r3, #6
 800bab4:	e129      	b.n	800bd0a <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3324      	adds	r3, #36	@ 0x24
 800baba:	220b      	movs	r2, #11
 800babc:	2120      	movs	r1, #32
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fe fc11 	bl	800a2e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bac4:	2300      	movs	r3, #0
 800bac6:	61bb      	str	r3, [r7, #24]
 800bac8:	e002      	b.n	800bad0 <create_name+0x1c8>
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	3301      	adds	r3, #1
 800bace:	61bb      	str	r3, [r7, #24]
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	005b      	lsls	r3, r3, #1
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	4413      	add	r3, r2
 800bad8:	881b      	ldrh	r3, [r3, #0]
 800bada:	2b20      	cmp	r3, #32
 800badc:	d0f5      	beq.n	800baca <create_name+0x1c2>
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	005b      	lsls	r3, r3, #1
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	4413      	add	r3, r2
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	2b2e      	cmp	r3, #46	@ 0x2e
 800baea:	d0ee      	beq.n	800baca <create_name+0x1c2>
	if (si) cf |= NS_LOSS | NS_LFN;
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d009      	beq.n	800bb06 <create_name+0x1fe>
 800baf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800baf6:	f043 0303 	orr.w	r3, r3, #3
 800bafa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bafe:	e002      	b.n	800bb06 <create_name+0x1fe>
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	3b01      	subs	r3, #1
 800bb04:	617b      	str	r3, [r7, #20]
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d009      	beq.n	800bb20 <create_name+0x218>
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800bb12:	4413      	add	r3, r2
 800bb14:	005b      	lsls	r3, r3, #1
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	4413      	add	r3, r2
 800bb1a:	881b      	ldrh	r3, [r3, #0]
 800bb1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb1e:	d1ef      	bne.n	800bb00 <create_name+0x1f8>

	i = b = 0; ni = 8;
 800bb20:	2300      	movs	r3, #0
 800bb22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bb26:	2300      	movs	r3, #0
 800bb28:	623b      	str	r3, [r7, #32]
 800bb2a:	2308      	movs	r3, #8
 800bb2c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	1c5a      	adds	r2, r3, #1
 800bb32:	61ba      	str	r2, [r7, #24]
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	4413      	add	r3, r2
 800bb3a:	881b      	ldrh	r3, [r3, #0]
 800bb3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bb3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 8098 	beq.w	800bc76 <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bb46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb48:	2b20      	cmp	r3, #32
 800bb4a:	d006      	beq.n	800bb5a <create_name+0x252>
 800bb4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb50:	d10a      	bne.n	800bb68 <create_name+0x260>
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d006      	beq.n	800bb68 <create_name+0x260>
			cf |= NS_LOSS | NS_LFN; continue;
 800bb5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb5e:	f043 0303 	orr.w	r3, r3, #3
 800bb62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb66:	e085      	b.n	800bc74 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bb68:	6a3a      	ldr	r2, [r7, #32]
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d203      	bcs.n	800bb78 <create_name+0x270>
 800bb70:	69ba      	ldr	r2, [r7, #24]
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d123      	bne.n	800bbc0 <create_name+0x2b8>
			if (ni == 11) {				/* Long extension */
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	2b0b      	cmp	r3, #11
 800bb7c:	d106      	bne.n	800bb8c <create_name+0x284>
				cf |= NS_LOSS | NS_LFN; break;
 800bb7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb82:	f043 0303 	orr.w	r3, r3, #3
 800bb86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb8a:	e077      	b.n	800bc7c <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bb8c:	69ba      	ldr	r2, [r7, #24]
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d005      	beq.n	800bba0 <create_name+0x298>
 800bb94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb98:	f043 0303 	orr.w	r3, r3, #3
 800bb9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d868      	bhi.n	800bc7a <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	61bb      	str	r3, [r7, #24]
 800bbac:	2308      	movs	r3, #8
 800bbae:	623b      	str	r3, [r7, #32]
 800bbb0:	230b      	movs	r3, #11
 800bbb2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bbb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bbbe:	e059      	b.n	800bc74 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bbc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbc2:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbc4:	d914      	bls.n	800bbf0 <create_name+0x2e8>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bbc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbc8:	2100      	movs	r1, #0
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 fdf0 	bl	800d7b0 <ff_convert>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bbd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d004      	beq.n	800bbe4 <create_name+0x2dc>
 800bbda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbdc:	3b80      	subs	r3, #128	@ 0x80
 800bbde:	4a10      	ldr	r2, [pc, #64]	@ (800bc20 <create_name+0x318>)
 800bbe0:	5cd3      	ldrb	r3, [r2, r3]
 800bbe2:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbe8:	f043 0302 	orr.w	r3, r3, #2
 800bbec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bbf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d007      	beq.n	800bc06 <create_name+0x2fe>
 800bbf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	480a      	ldr	r0, [pc, #40]	@ (800bc24 <create_name+0x31c>)
 800bbfc:	f7fe fbb5 	bl	800a36a <chk_chr>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d010      	beq.n	800bc28 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bc06:	235f      	movs	r3, #95	@ 0x5f
 800bc08:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bc0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc0e:	f043 0303 	orr.w	r3, r3, #3
 800bc12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc16:	e023      	b.n	800bc60 <create_name+0x358>
 800bc18:	0800dcd8 	.word	0x0800dcd8
 800bc1c:	7ffffffe 	.word	0x7ffffffe
 800bc20:	0800dd58 	.word	0x0800dd58
 800bc24:	0800dce4 	.word	0x0800dce4
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bc28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc2a:	2b40      	cmp	r3, #64	@ 0x40
 800bc2c:	d909      	bls.n	800bc42 <create_name+0x33a>
 800bc2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc30:	2b5a      	cmp	r3, #90	@ 0x5a
 800bc32:	d806      	bhi.n	800bc42 <create_name+0x33a>
					b |= 2;
 800bc34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc38:	f043 0302 	orr.w	r3, r3, #2
 800bc3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bc40:	e00e      	b.n	800bc60 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bc42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc44:	2b60      	cmp	r3, #96	@ 0x60
 800bc46:	d90b      	bls.n	800bc60 <create_name+0x358>
 800bc48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc4a:	2b7a      	cmp	r3, #122	@ 0x7a
 800bc4c:	d808      	bhi.n	800bc60 <create_name+0x358>
						b |= 1; w -= 0x20;
 800bc4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc52:	f043 0301 	orr.w	r3, r3, #1
 800bc56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bc5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc5c:	3b20      	subs	r3, #32
 800bc5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bc60:	6a3b      	ldr	r3, [r7, #32]
 800bc62:	1c5a      	adds	r2, r3, #1
 800bc64:	623a      	str	r2, [r7, #32]
 800bc66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bc68:	b2d1      	uxtb	r1, r2
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	460a      	mov	r2, r1
 800bc70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800bc74:	e75b      	b.n	800bb2e <create_name+0x226>
		if (!w) break;					/* Break on end of the LFN */
 800bc76:	bf00      	nop
 800bc78:	e000      	b.n	800bc7c <create_name+0x374>
			if (si > di) break;			/* No extension */
 800bc7a:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bc82:	2be5      	cmp	r3, #229	@ 0xe5
 800bc84:	d103      	bne.n	800bc8e <create_name+0x386>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2205      	movs	r2, #5
 800bc8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	2b08      	cmp	r3, #8
 800bc92:	d104      	bne.n	800bc9e <create_name+0x396>
 800bc94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bc9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bca2:	f003 030c 	and.w	r3, r3, #12
 800bca6:	2b0c      	cmp	r3, #12
 800bca8:	d005      	beq.n	800bcb6 <create_name+0x3ae>
 800bcaa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcae:	f003 0303 	and.w	r3, r3, #3
 800bcb2:	2b03      	cmp	r3, #3
 800bcb4:	d105      	bne.n	800bcc2 <create_name+0x3ba>
 800bcb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcba:	f043 0302 	orr.w	r3, r3, #2
 800bcbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bcc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcc6:	f003 0302 	and.w	r3, r3, #2
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d117      	bne.n	800bcfe <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bcce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcd2:	f003 0303 	and.w	r3, r3, #3
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d105      	bne.n	800bce6 <create_name+0x3de>
 800bcda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcde:	f043 0310 	orr.w	r3, r3, #16
 800bce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bce6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcea:	f003 030c 	and.w	r3, r3, #12
 800bcee:	2b04      	cmp	r3, #4
 800bcf0:	d105      	bne.n	800bcfe <create_name+0x3f6>
 800bcf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcf6:	f043 0308 	orr.w	r3, r3, #8
 800bcfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bd04:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800bd08:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3728      	adds	r7, #40	@ 0x28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop

0800bd14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd2e:	d00b      	beq.n	800bd48 <follow_path+0x34>
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	2b5c      	cmp	r3, #92	@ 0x5c
 800bd36:	d007      	beq.n	800bd48 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	69da      	ldr	r2, [r3, #28]
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	609a      	str	r2, [r3, #8]
 800bd40:	e00d      	b.n	800bd5e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	3301      	adds	r3, #1
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd4e:	d0f8      	beq.n	800bd42 <follow_path+0x2e>
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	2b5c      	cmp	r3, #92	@ 0x5c
 800bd56:	d0f4      	beq.n	800bd42 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2b1f      	cmp	r3, #31
 800bd64:	d80a      	bhi.n	800bd7c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2280      	movs	r2, #128	@ 0x80
 800bd6a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bd6e:	2100      	movs	r1, #0
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f7ff f8a4 	bl	800aebe <dir_sdi>
 800bd76:	4603      	mov	r3, r0
 800bd78:	75fb      	strb	r3, [r7, #23]
 800bd7a:	e05b      	b.n	800be34 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd7c:	463b      	mov	r3, r7
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7ff fdc1 	bl	800b908 <create_name>
 800bd86:	4603      	mov	r3, r0
 800bd88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd8a:	7dfb      	ldrb	r3, [r7, #23]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d14c      	bne.n	800be2a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7ff fc00 	bl	800b596 <dir_find>
 800bd96:	4603      	mov	r3, r0
 800bd98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bda0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01b      	beq.n	800bde0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bda8:	7dfb      	ldrb	r3, [r7, #23]
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	d13f      	bne.n	800be2e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800bdae:	7afb      	ldrb	r3, [r7, #11]
 800bdb0:	f003 0320 	and.w	r3, r3, #32
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00b      	beq.n	800bdd0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800bdb8:	7afb      	ldrb	r3, [r7, #11]
 800bdba:	f003 0304 	and.w	r3, r3, #4
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d031      	beq.n	800be26 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2280      	movs	r2, #128	@ 0x80
 800bdc6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800bdce:	e02e      	b.n	800be2e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bdd0:	7afb      	ldrb	r3, [r7, #11]
 800bdd2:	f003 0304 	and.w	r3, r3, #4
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d129      	bne.n	800be2e <follow_path+0x11a>
 800bdda:	2305      	movs	r3, #5
 800bddc:	75fb      	strb	r3, [r7, #23]
				break;
 800bdde:	e026      	b.n	800be2e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bde0:	7afb      	ldrb	r3, [r7, #11]
 800bde2:	f003 0304 	and.w	r3, r3, #4
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d123      	bne.n	800be32 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	799b      	ldrb	r3, [r3, #6]
 800bdee:	f003 0310 	and.w	r3, r3, #16
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d102      	bne.n	800bdfc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800bdf6:	2305      	movs	r3, #5
 800bdf8:	75fb      	strb	r3, [r7, #23]
 800bdfa:	e01b      	b.n	800be34 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	695b      	ldr	r3, [r3, #20]
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	8992      	ldrh	r2, [r2, #12]
 800be0a:	fbb3 f0f2 	udiv	r0, r3, r2
 800be0e:	fb00 f202 	mul.w	r2, r0, r2
 800be12:	1a9b      	subs	r3, r3, r2
 800be14:	440b      	add	r3, r1
 800be16:	4619      	mov	r1, r3
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f7ff f9f6 	bl	800b20a <ld_clust>
 800be1e:	4602      	mov	r2, r0
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	609a      	str	r2, [r3, #8]
 800be24:	e7aa      	b.n	800bd7c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800be26:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800be28:	e7a8      	b.n	800bd7c <follow_path+0x68>
			if (res != FR_OK) break;
 800be2a:	bf00      	nop
 800be2c:	e002      	b.n	800be34 <follow_path+0x120>
				break;
 800be2e:	bf00      	nop
 800be30:	e000      	b.n	800be34 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800be32:	bf00      	nop
			}
		}
	}

	return res;
 800be34:	7dfb      	ldrb	r3, [r7, #23]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3718      	adds	r7, #24
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800be3e:	b480      	push	{r7}
 800be40:	b087      	sub	sp, #28
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800be46:	f04f 33ff 	mov.w	r3, #4294967295
 800be4a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d031      	beq.n	800beb8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	e002      	b.n	800be62 <get_ldnumber+0x24>
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	3301      	adds	r3, #1
 800be60:	617b      	str	r3, [r7, #20]
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	2b1f      	cmp	r3, #31
 800be68:	d903      	bls.n	800be72 <get_ldnumber+0x34>
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	2b3a      	cmp	r3, #58	@ 0x3a
 800be70:	d1f4      	bne.n	800be5c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	2b3a      	cmp	r3, #58	@ 0x3a
 800be78:	d11c      	bne.n	800beb4 <get_ldnumber+0x76>
			tp = *path;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	1c5a      	adds	r2, r3, #1
 800be84:	60fa      	str	r2, [r7, #12]
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	3b30      	subs	r3, #48	@ 0x30
 800be8a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	2b09      	cmp	r3, #9
 800be90:	d80e      	bhi.n	800beb0 <get_ldnumber+0x72>
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	429a      	cmp	r2, r3
 800be98:	d10a      	bne.n	800beb0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d107      	bne.n	800beb0 <get_ldnumber+0x72>
					vol = (int)i;
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	3301      	adds	r3, #1
 800bea8:	617b      	str	r3, [r7, #20]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	e002      	b.n	800beba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800beb4:	2300      	movs	r3, #0
 800beb6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800beb8:	693b      	ldr	r3, [r7, #16]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	371c      	adds	r7, #28
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
	...

0800bec8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	70da      	strb	r2, [r3, #3]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f04f 32ff 	mov.w	r2, #4294967295
 800bede:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f7fe fc0c 	bl	800a700 <move_window>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <check_fs+0x2a>
 800beee:	2304      	movs	r3, #4
 800bef0:	e038      	b.n	800bf64 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	333c      	adds	r3, #60	@ 0x3c
 800bef6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800befa:	4618      	mov	r0, r3
 800befc:	f7fe f950 	bl	800a1a0 <ld_word>
 800bf00:	4603      	mov	r3, r0
 800bf02:	461a      	mov	r2, r3
 800bf04:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d001      	beq.n	800bf10 <check_fs+0x48>
 800bf0c:	2303      	movs	r3, #3
 800bf0e:	e029      	b.n	800bf64 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf16:	2be9      	cmp	r3, #233	@ 0xe9
 800bf18:	d009      	beq.n	800bf2e <check_fs+0x66>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf20:	2beb      	cmp	r3, #235	@ 0xeb
 800bf22:	d11e      	bne.n	800bf62 <check_fs+0x9a>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bf2a:	2b90      	cmp	r3, #144	@ 0x90
 800bf2c:	d119      	bne.n	800bf62 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	333c      	adds	r3, #60	@ 0x3c
 800bf32:	3336      	adds	r3, #54	@ 0x36
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fe f94b 	bl	800a1d0 <ld_dword>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bf40:	4a0a      	ldr	r2, [pc, #40]	@ (800bf6c <check_fs+0xa4>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d101      	bne.n	800bf4a <check_fs+0x82>
 800bf46:	2300      	movs	r3, #0
 800bf48:	e00c      	b.n	800bf64 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	333c      	adds	r3, #60	@ 0x3c
 800bf4e:	3352      	adds	r3, #82	@ 0x52
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe f93d 	bl	800a1d0 <ld_dword>
 800bf56:	4603      	mov	r3, r0
 800bf58:	4a05      	ldr	r2, [pc, #20]	@ (800bf70 <check_fs+0xa8>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d101      	bne.n	800bf62 <check_fs+0x9a>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	e000      	b.n	800bf64 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bf62:	2302      	movs	r3, #2
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	00544146 	.word	0x00544146
 800bf70:	33544146 	.word	0x33544146

0800bf74 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b096      	sub	sp, #88	@ 0x58
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	4613      	mov	r3, r2
 800bf80:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f7ff ff58 	bl	800be3e <get_ldnumber>
 800bf8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	da01      	bge.n	800bf9a <find_volume+0x26>
 800bf96:	230b      	movs	r3, #11
 800bf98:	e268      	b.n	800c46c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bf9a:	4a9f      	ldr	r2, [pc, #636]	@ (800c218 <find_volume+0x2a4>)
 800bf9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfa2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d101      	bne.n	800bfae <find_volume+0x3a>
 800bfaa:	230c      	movs	r3, #12
 800bfac:	e25e      	b.n	800c46c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfb2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bfb4:	79fb      	ldrb	r3, [r7, #7]
 800bfb6:	f023 0301 	bic.w	r3, r3, #1
 800bfba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d01a      	beq.n	800bffa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc6:	785b      	ldrb	r3, [r3, #1]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fe f849 	bl	800a060 <disk_status>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bfd4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bfd8:	f003 0301 	and.w	r3, r3, #1
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10c      	bne.n	800bffa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bfe0:	79fb      	ldrb	r3, [r7, #7]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d007      	beq.n	800bff6 <find_volume+0x82>
 800bfe6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bfea:	f003 0304 	and.w	r3, r3, #4
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bff2:	230a      	movs	r3, #10
 800bff4:	e23a      	b.n	800c46c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800bff6:	2300      	movs	r3, #0
 800bff8:	e238      	b.n	800c46c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bffc:	2200      	movs	r2, #0
 800bffe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c002:	b2da      	uxtb	r2, r3
 800c004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c006:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00a:	785b      	ldrb	r3, [r3, #1]
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fe f841 	bl	800a094 <disk_initialize>
 800c012:	4603      	mov	r3, r0
 800c014:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c018:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c01c:	f003 0301 	and.w	r3, r3, #1
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c024:	2303      	movs	r3, #3
 800c026:	e221      	b.n	800c46c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c028:	79fb      	ldrb	r3, [r7, #7]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d007      	beq.n	800c03e <find_volume+0xca>
 800c02e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c032:	f003 0304 	and.w	r3, r3, #4
 800c036:	2b00      	cmp	r3, #0
 800c038:	d001      	beq.n	800c03e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c03a:	230a      	movs	r3, #10
 800c03c:	e216      	b.n	800c46c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c040:	7858      	ldrb	r0, [r3, #1]
 800c042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c044:	330c      	adds	r3, #12
 800c046:	461a      	mov	r2, r3
 800c048:	2102      	movs	r1, #2
 800c04a:	f7fe f88b 	bl	800a164 <disk_ioctl>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d001      	beq.n	800c058 <find_volume+0xe4>
 800c054:	2301      	movs	r3, #1
 800c056:	e209      	b.n	800c46c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c05a:	899b      	ldrh	r3, [r3, #12]
 800c05c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c060:	d80d      	bhi.n	800c07e <find_volume+0x10a>
 800c062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c064:	899b      	ldrh	r3, [r3, #12]
 800c066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c06a:	d308      	bcc.n	800c07e <find_volume+0x10a>
 800c06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c06e:	899b      	ldrh	r3, [r3, #12]
 800c070:	461a      	mov	r2, r3
 800c072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c074:	899b      	ldrh	r3, [r3, #12]
 800c076:	3b01      	subs	r3, #1
 800c078:	4013      	ands	r3, r2
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d001      	beq.n	800c082 <find_volume+0x10e>
 800c07e:	2301      	movs	r3, #1
 800c080:	e1f4      	b.n	800c46c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c086:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c088:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c08a:	f7ff ff1d 	bl	800bec8 <check_fs>
 800c08e:	4603      	mov	r3, r0
 800c090:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c094:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d149      	bne.n	800c130 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c09c:	2300      	movs	r3, #0
 800c09e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0a0:	e01e      	b.n	800c0e0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a4:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800c0a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c0b0:	4413      	add	r3, r2
 800c0b2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d006      	beq.n	800c0cc <find_volume+0x158>
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	3308      	adds	r3, #8
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fe f884 	bl	800a1d0 <ld_dword>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	e000      	b.n	800c0ce <find_volume+0x15a>
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	3358      	adds	r3, #88	@ 0x58
 800c0d4:	443b      	add	r3, r7
 800c0d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c0da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0dc:	3301      	adds	r3, #1
 800c0de:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0e2:	2b03      	cmp	r3, #3
 800c0e4:	d9dd      	bls.n	800c0a2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c0ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <find_volume+0x182>
 800c0f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c0f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	3358      	adds	r3, #88	@ 0x58
 800c0fc:	443b      	add	r3, r7
 800c0fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c102:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c106:	2b00      	cmp	r3, #0
 800c108:	d005      	beq.n	800c116 <find_volume+0x1a2>
 800c10a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c10c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c10e:	f7ff fedb 	bl	800bec8 <check_fs>
 800c112:	4603      	mov	r3, r0
 800c114:	e000      	b.n	800c118 <find_volume+0x1a4>
 800c116:	2303      	movs	r3, #3
 800c118:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c11c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c120:	2b01      	cmp	r3, #1
 800c122:	d905      	bls.n	800c130 <find_volume+0x1bc>
 800c124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c126:	3301      	adds	r3, #1
 800c128:	643b      	str	r3, [r7, #64]	@ 0x40
 800c12a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d9e2      	bls.n	800c0f6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c130:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c134:	2b04      	cmp	r3, #4
 800c136:	d101      	bne.n	800c13c <find_volume+0x1c8>
 800c138:	2301      	movs	r3, #1
 800c13a:	e197      	b.n	800c46c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c13c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c140:	2b01      	cmp	r3, #1
 800c142:	d901      	bls.n	800c148 <find_volume+0x1d4>
 800c144:	230d      	movs	r3, #13
 800c146:	e191      	b.n	800c46c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c14a:	333c      	adds	r3, #60	@ 0x3c
 800c14c:	330b      	adds	r3, #11
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe f826 	bl	800a1a0 <ld_word>
 800c154:	4603      	mov	r3, r0
 800c156:	461a      	mov	r2, r3
 800c158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15a:	899b      	ldrh	r3, [r3, #12]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d001      	beq.n	800c164 <find_volume+0x1f0>
 800c160:	230d      	movs	r3, #13
 800c162:	e183      	b.n	800c46c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c166:	333c      	adds	r3, #60	@ 0x3c
 800c168:	3316      	adds	r3, #22
 800c16a:	4618      	mov	r0, r3
 800c16c:	f7fe f818 	bl	800a1a0 <ld_word>
 800c170:	4603      	mov	r3, r0
 800c172:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c176:	2b00      	cmp	r3, #0
 800c178:	d106      	bne.n	800c188 <find_volume+0x214>
 800c17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17c:	333c      	adds	r3, #60	@ 0x3c
 800c17e:	3324      	adds	r3, #36	@ 0x24
 800c180:	4618      	mov	r0, r3
 800c182:	f7fe f825 	bl	800a1d0 <ld_dword>
 800c186:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c18c:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c190:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800c194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c196:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19a:	789b      	ldrb	r3, [r3, #2]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d005      	beq.n	800c1ac <find_volume+0x238>
 800c1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a2:	789b      	ldrb	r3, [r3, #2]
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d001      	beq.n	800c1ac <find_volume+0x238>
 800c1a8:	230d      	movs	r3, #13
 800c1aa:	e15f      	b.n	800c46c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ae:	789b      	ldrb	r3, [r3, #2]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1b4:	fb02 f303 	mul.w	r3, r2, r3
 800c1b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1bc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c8:	895b      	ldrh	r3, [r3, #10]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d008      	beq.n	800c1e0 <find_volume+0x26c>
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d0:	895b      	ldrh	r3, [r3, #10]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d6:	895b      	ldrh	r3, [r3, #10]
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	4013      	ands	r3, r2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d001      	beq.n	800c1e4 <find_volume+0x270>
 800c1e0:	230d      	movs	r3, #13
 800c1e2:	e143      	b.n	800c46c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e6:	333c      	adds	r3, #60	@ 0x3c
 800c1e8:	3311      	adds	r3, #17
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fd ffd8 	bl	800a1a0 <ld_word>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fa:	891b      	ldrh	r3, [r3, #8]
 800c1fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1fe:	8992      	ldrh	r2, [r2, #12]
 800c200:	0952      	lsrs	r2, r2, #5
 800c202:	b292      	uxth	r2, r2
 800c204:	fbb3 f1f2 	udiv	r1, r3, r2
 800c208:	fb01 f202 	mul.w	r2, r1, r2
 800c20c:	1a9b      	subs	r3, r3, r2
 800c20e:	b29b      	uxth	r3, r3
 800c210:	2b00      	cmp	r3, #0
 800c212:	d003      	beq.n	800c21c <find_volume+0x2a8>
 800c214:	230d      	movs	r3, #13
 800c216:	e129      	b.n	800c46c <find_volume+0x4f8>
 800c218:	240026d4 	.word	0x240026d4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c21e:	333c      	adds	r3, #60	@ 0x3c
 800c220:	3313      	adds	r3, #19
 800c222:	4618      	mov	r0, r3
 800c224:	f7fd ffbc 	bl	800a1a0 <ld_word>
 800c228:	4603      	mov	r3, r0
 800c22a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c22c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d106      	bne.n	800c240 <find_volume+0x2cc>
 800c232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c234:	333c      	adds	r3, #60	@ 0x3c
 800c236:	3320      	adds	r3, #32
 800c238:	4618      	mov	r0, r3
 800c23a:	f7fd ffc9 	bl	800a1d0 <ld_dword>
 800c23e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c242:	333c      	adds	r3, #60	@ 0x3c
 800c244:	330e      	adds	r3, #14
 800c246:	4618      	mov	r0, r3
 800c248:	f7fd ffaa 	bl	800a1a0 <ld_word>
 800c24c:	4603      	mov	r3, r0
 800c24e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c250:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c252:	2b00      	cmp	r3, #0
 800c254:	d101      	bne.n	800c25a <find_volume+0x2e6>
 800c256:	230d      	movs	r3, #13
 800c258:	e108      	b.n	800c46c <find_volume+0x4f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c25a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c25c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c25e:	4413      	add	r3, r2
 800c260:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c262:	8911      	ldrh	r1, [r2, #8]
 800c264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c266:	8992      	ldrh	r2, [r2, #12]
 800c268:	0952      	lsrs	r2, r2, #5
 800c26a:	b292      	uxth	r2, r2
 800c26c:	fbb1 f2f2 	udiv	r2, r1, r2
 800c270:	b292      	uxth	r2, r2
 800c272:	4413      	add	r3, r2
 800c274:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d201      	bcs.n	800c282 <find_volume+0x30e>
 800c27e:	230d      	movs	r3, #13
 800c280:	e0f4      	b.n	800c46c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c282:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c28a:	8952      	ldrh	r2, [r2, #10]
 800c28c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c290:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <find_volume+0x328>
 800c298:	230d      	movs	r3, #13
 800c29a:	e0e7      	b.n	800c46c <find_volume+0x4f8>
		fmt = FS_FAT32;
 800c29c:	2303      	movs	r3, #3
 800c29e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d802      	bhi.n	800c2b2 <find_volume+0x33e>
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d802      	bhi.n	800c2c2 <find_volume+0x34e>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c4:	1c9a      	adds	r2, r3, #2
 800c2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c8:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800c2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2ce:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c2d0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c2d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2d4:	441a      	add	r2, r3
 800c2d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d8:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800c2da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2de:	441a      	add	r2, r3
 800c2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e2:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800c2e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2e8:	2b03      	cmp	r3, #3
 800c2ea:	d11e      	bne.n	800c32a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ee:	333c      	adds	r3, #60	@ 0x3c
 800c2f0:	332a      	adds	r3, #42	@ 0x2a
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7fd ff54 	bl	800a1a0 <ld_word>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <find_volume+0x38e>
 800c2fe:	230d      	movs	r3, #13
 800c300:	e0b4      	b.n	800c46c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c304:	891b      	ldrh	r3, [r3, #8]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <find_volume+0x39a>
 800c30a:	230d      	movs	r3, #13
 800c30c:	e0ae      	b.n	800c46c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c310:	333c      	adds	r3, #60	@ 0x3c
 800c312:	332c      	adds	r3, #44	@ 0x2c
 800c314:	4618      	mov	r0, r3
 800c316:	f7fd ff5b 	bl	800a1d0 <ld_dword>
 800c31a:	4602      	mov	r2, r0
 800c31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31e:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c322:	6a1b      	ldr	r3, [r3, #32]
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	647b      	str	r3, [r7, #68]	@ 0x44
 800c328:	e01f      	b.n	800c36a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c32c:	891b      	ldrh	r3, [r3, #8]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <find_volume+0x3c2>
 800c332:	230d      	movs	r3, #13
 800c334:	e09a      	b.n	800c46c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c33a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c33c:	441a      	add	r2, r3
 800c33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c340:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c342:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c346:	2b02      	cmp	r3, #2
 800c348:	d103      	bne.n	800c352 <find_volume+0x3de>
 800c34a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	e00a      	b.n	800c368 <find_volume+0x3f4>
 800c352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c354:	6a1a      	ldr	r2, [r3, #32]
 800c356:	4613      	mov	r3, r2
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	4413      	add	r3, r2
 800c35c:	085a      	lsrs	r2, r3, #1
 800c35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	f003 0301 	and.w	r3, r3, #1
 800c366:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c368:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c370:	899b      	ldrh	r3, [r3, #12]
 800c372:	4619      	mov	r1, r3
 800c374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c376:	440b      	add	r3, r1
 800c378:	3b01      	subs	r3, #1
 800c37a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c37c:	8989      	ldrh	r1, [r1, #12]
 800c37e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c382:	429a      	cmp	r2, r3
 800c384:	d201      	bcs.n	800c38a <find_volume+0x416>
 800c386:	230d      	movs	r3, #13
 800c388:	e070      	b.n	800c46c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c38c:	f04f 32ff 	mov.w	r2, #4294967295
 800c390:	619a      	str	r2, [r3, #24]
 800c392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c394:	699a      	ldr	r2, [r3, #24]
 800c396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c398:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39c:	2280      	movs	r2, #128	@ 0x80
 800c39e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c3a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c3a4:	2b03      	cmp	r3, #3
 800c3a6:	d149      	bne.n	800c43c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3aa:	333c      	adds	r3, #60	@ 0x3c
 800c3ac:	3330      	adds	r3, #48	@ 0x30
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fd fef6 	bl	800a1a0 <ld_word>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b01      	cmp	r3, #1
 800c3b8:	d140      	bne.n	800c43c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c3ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3bc:	3301      	adds	r3, #1
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c3c2:	f7fe f99d 	bl	800a700 <move_window>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d137      	bne.n	800c43c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d4:	333c      	adds	r3, #60	@ 0x3c
 800c3d6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fd fee0 	bl	800a1a0 <ld_word>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d127      	bne.n	800c43c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ee:	333c      	adds	r3, #60	@ 0x3c
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7fd feed 	bl	800a1d0 <ld_dword>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	4a1e      	ldr	r2, [pc, #120]	@ (800c474 <find_volume+0x500>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d11e      	bne.n	800c43c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c400:	333c      	adds	r3, #60	@ 0x3c
 800c402:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c406:	4618      	mov	r0, r3
 800c408:	f7fd fee2 	bl	800a1d0 <ld_dword>
 800c40c:	4603      	mov	r3, r0
 800c40e:	4a1a      	ldr	r2, [pc, #104]	@ (800c478 <find_volume+0x504>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d113      	bne.n	800c43c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c416:	333c      	adds	r3, #60	@ 0x3c
 800c418:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fd fed7 	bl	800a1d0 <ld_dword>
 800c422:	4602      	mov	r2, r0
 800c424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c426:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42a:	333c      	adds	r3, #60	@ 0x3c
 800c42c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c430:	4618      	mov	r0, r3
 800c432:	f7fd fecd 	bl	800a1d0 <ld_dword>
 800c436:	4602      	mov	r2, r0
 800c438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c442:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c444:	4b0d      	ldr	r3, [pc, #52]	@ (800c47c <find_volume+0x508>)
 800c446:	881b      	ldrh	r3, [r3, #0]
 800c448:	3301      	adds	r3, #1
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	4b0b      	ldr	r3, [pc, #44]	@ (800c47c <find_volume+0x508>)
 800c44e:	801a      	strh	r2, [r3, #0]
 800c450:	4b0a      	ldr	r3, [pc, #40]	@ (800c47c <find_volume+0x508>)
 800c452:	881a      	ldrh	r2, [r3, #0]
 800c454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c456:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45a:	4a09      	ldr	r2, [pc, #36]	@ (800c480 <find_volume+0x50c>)
 800c45c:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800c45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c460:	2200      	movs	r2, #0
 800c462:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c464:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c466:	f7fe f8e3 	bl	800a630 <clear_lock>
#endif
	return FR_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3758      	adds	r7, #88	@ 0x58
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	41615252 	.word	0x41615252
 800c478:	61417272 	.word	0x61417272
 800c47c:	240026d8 	.word	0x240026d8
 800c480:	240026fc 	.word	0x240026fc

0800c484 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c48e:	2309      	movs	r3, #9
 800c490:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d01c      	beq.n	800c4d2 <validate+0x4e>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d018      	beq.n	800c4d2 <validate+0x4e>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d013      	beq.n	800c4d2 <validate+0x4e>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	889a      	ldrh	r2, [r3, #4]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	88db      	ldrh	r3, [r3, #6]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d10c      	bne.n	800c4d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	785b      	ldrb	r3, [r3, #1]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fd fdce 	bl	800a060 <disk_status>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	f003 0301 	and.w	r3, r3, #1
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <validate+0x4e>
			res = FR_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d102      	bne.n	800c4de <validate+0x5a>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	e000      	b.n	800c4e0 <validate+0x5c>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	683a      	ldr	r2, [r7, #0]
 800c4e2:	6013      	str	r3, [r2, #0]
	return res;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
	...

0800c4f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b088      	sub	sp, #32
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c502:	f107 0310 	add.w	r3, r7, #16
 800c506:	4618      	mov	r0, r3
 800c508:	f7ff fc99 	bl	800be3e <get_ldnumber>
 800c50c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	2b00      	cmp	r3, #0
 800c512:	da01      	bge.n	800c518 <f_mount+0x28>
 800c514:	230b      	movs	r3, #11
 800c516:	e02b      	b.n	800c570 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c518:	4a17      	ldr	r2, [pc, #92]	@ (800c578 <f_mount+0x88>)
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c520:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d005      	beq.n	800c534 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c528:	69b8      	ldr	r0, [r7, #24]
 800c52a:	f7fe f881 	bl	800a630 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	2200      	movs	r2, #0
 800c532:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d002      	beq.n	800c540 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	490d      	ldr	r1, [pc, #52]	@ (800c578 <f_mount+0x88>)
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <f_mount+0x66>
 800c550:	79fb      	ldrb	r3, [r7, #7]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d001      	beq.n	800c55a <f_mount+0x6a>
 800c556:	2300      	movs	r3, #0
 800c558:	e00a      	b.n	800c570 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c55a:	f107 010c 	add.w	r1, r7, #12
 800c55e:	f107 0308 	add.w	r3, r7, #8
 800c562:	2200      	movs	r2, #0
 800c564:	4618      	mov	r0, r3
 800c566:	f7ff fd05 	bl	800bf74 <find_volume>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3720      	adds	r7, #32
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	240026d4 	.word	0x240026d4

0800c57c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b09a      	sub	sp, #104	@ 0x68
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	4613      	mov	r3, r2
 800c588:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <f_open+0x18>
 800c590:	2309      	movs	r3, #9
 800c592:	e1b7      	b.n	800c904 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c594:	79fb      	ldrb	r3, [r7, #7]
 800c596:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c59a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c59c:	79fa      	ldrb	r2, [r7, #7]
 800c59e:	f107 0114 	add.w	r1, r7, #20
 800c5a2:	f107 0308 	add.w	r3, r7, #8
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7ff fce4 	bl	800bf74 <find_volume>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800c5b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f040 819b 	bne.w	800c8f2 <f_open+0x376>
		dj.obj.fs = fs;
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c5c0:	68ba      	ldr	r2, [r7, #8]
 800c5c2:	f107 0318 	add.w	r3, r7, #24
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff fba3 	bl	800bd14 <follow_path>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c5d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d118      	bne.n	800c60e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c5dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c5e0:	b25b      	sxtb	r3, r3
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	da03      	bge.n	800c5ee <f_open+0x72>
				res = FR_INVALID_NAME;
 800c5e6:	2306      	movs	r3, #6
 800c5e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c5ec:	e00f      	b.n	800c60e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c5ee:	79fb      	ldrb	r3, [r7, #7]
 800c5f0:	2b01      	cmp	r3, #1
 800c5f2:	bf8c      	ite	hi
 800c5f4:	2301      	movhi	r3, #1
 800c5f6:	2300      	movls	r3, #0
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f107 0318 	add.w	r3, r7, #24
 800c600:	4611      	mov	r1, r2
 800c602:	4618      	mov	r0, r3
 800c604:	f7fd fecc 	bl	800a3a0 <chk_lock>
 800c608:	4603      	mov	r3, r0
 800c60a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	f003 031c 	and.w	r3, r3, #28
 800c614:	2b00      	cmp	r3, #0
 800c616:	d07f      	beq.n	800c718 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c618:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d017      	beq.n	800c650 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c620:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c624:	2b04      	cmp	r3, #4
 800c626:	d10e      	bne.n	800c646 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c628:	f7fd ff16 	bl	800a458 <enq_lock>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d006      	beq.n	800c640 <f_open+0xc4>
 800c632:	f107 0318 	add.w	r3, r7, #24
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff f86e 	bl	800b718 <dir_register>
 800c63c:	4603      	mov	r3, r0
 800c63e:	e000      	b.n	800c642 <f_open+0xc6>
 800c640:	2312      	movs	r3, #18
 800c642:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c646:	79fb      	ldrb	r3, [r7, #7]
 800c648:	f043 0308 	orr.w	r3, r3, #8
 800c64c:	71fb      	strb	r3, [r7, #7]
 800c64e:	e010      	b.n	800c672 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c650:	7fbb      	ldrb	r3, [r7, #30]
 800c652:	f003 0311 	and.w	r3, r3, #17
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <f_open+0xe6>
					res = FR_DENIED;
 800c65a:	2307      	movs	r3, #7
 800c65c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c660:	e007      	b.n	800c672 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c662:	79fb      	ldrb	r3, [r7, #7]
 800c664:	f003 0304 	and.w	r3, r3, #4
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d002      	beq.n	800c672 <f_open+0xf6>
 800c66c:	2308      	movs	r3, #8
 800c66e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c672:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c676:	2b00      	cmp	r3, #0
 800c678:	d168      	bne.n	800c74c <f_open+0x1d0>
 800c67a:	79fb      	ldrb	r3, [r7, #7]
 800c67c:	f003 0308 	and.w	r3, r3, #8
 800c680:	2b00      	cmp	r3, #0
 800c682:	d063      	beq.n	800c74c <f_open+0x1d0>
				dw = GET_FATTIME();
 800c684:	f7fc ffca 	bl	800961c <get_fattime>
 800c688:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c68c:	330e      	adds	r3, #14
 800c68e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c690:	4618      	mov	r0, r3
 800c692:	f7fd fddb 	bl	800a24c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c698:	3316      	adds	r3, #22
 800c69a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fd fdd5 	bl	800a24c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a4:	330b      	adds	r3, #11
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fe fdaa 	bl	800b20a <ld_clust>
 800c6b6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c6bc:	2200      	movs	r2, #0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe fdc2 	bl	800b248 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c6:	331c      	adds	r3, #28
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fd fdbe 	bl	800a24c <st_dword>
					fs->wflag = 1;
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c6d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d037      	beq.n	800c74c <f_open+0x1d0>
						dw = fs->winsect;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e0:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c6e2:	f107 0318 	add.w	r3, r7, #24
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fe fab2 	bl	800ac54 <remove_chain>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800c6f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d126      	bne.n	800c74c <f_open+0x1d0>
							res = move_window(fs, dw);
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c702:	4618      	mov	r0, r3
 800c704:	f7fd fffc 	bl	800a700 <move_window>
 800c708:	4603      	mov	r3, r0
 800c70a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c712:	3a01      	subs	r2, #1
 800c714:	615a      	str	r2, [r3, #20]
 800c716:	e019      	b.n	800c74c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c718:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d115      	bne.n	800c74c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c720:	7fbb      	ldrb	r3, [r7, #30]
 800c722:	f003 0310 	and.w	r3, r3, #16
 800c726:	2b00      	cmp	r3, #0
 800c728:	d003      	beq.n	800c732 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c72a:	2304      	movs	r3, #4
 800c72c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c730:	e00c      	b.n	800c74c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d007      	beq.n	800c74c <f_open+0x1d0>
 800c73c:	7fbb      	ldrb	r3, [r7, #30]
 800c73e:	f003 0301 	and.w	r3, r3, #1
 800c742:	2b00      	cmp	r3, #0
 800c744:	d002      	beq.n	800c74c <f_open+0x1d0>
						res = FR_DENIED;
 800c746:	2307      	movs	r3, #7
 800c748:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c74c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c750:	2b00      	cmp	r3, #0
 800c752:	d126      	bne.n	800c7a2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c754:	79fb      	ldrb	r3, [r7, #7]
 800c756:	f003 0308 	and.w	r3, r3, #8
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c75e:	79fb      	ldrb	r3, [r7, #7]
 800c760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c764:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c76e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	2b01      	cmp	r3, #1
 800c778:	bf8c      	ite	hi
 800c77a:	2301      	movhi	r3, #1
 800c77c:	2300      	movls	r3, #0
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	461a      	mov	r2, r3
 800c782:	f107 0318 	add.w	r3, r7, #24
 800c786:	4611      	mov	r1, r2
 800c788:	4618      	mov	r0, r3
 800c78a:	f7fd fe87 	bl	800a49c <inc_lock>
 800c78e:	4602      	mov	r2, r0
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d102      	bne.n	800c7a2 <f_open+0x226>
 800c79c:	2302      	movs	r3, #2
 800c79e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c7a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f040 80a3 	bne.w	800c8f2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe fd29 	bl	800b20a <ld_clust>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c0:	331c      	adds	r3, #28
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fd fd04 	bl	800a1d0 <ld_dword>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c7d4:	697a      	ldr	r2, [r7, #20]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	88da      	ldrh	r2, [r3, #6]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	79fa      	ldrb	r2, [r7, #7]
 800c7e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3330      	adds	r3, #48	@ 0x30
 800c7fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c802:	2100      	movs	r1, #0
 800c804:	4618      	mov	r0, r3
 800c806:	f7fd fd6e 	bl	800a2e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	f003 0320 	and.w	r3, r3, #32
 800c810:	2b00      	cmp	r3, #0
 800c812:	d06e      	beq.n	800c8f2 <f_open+0x376>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d06a      	beq.n	800c8f2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	68da      	ldr	r2, [r3, #12]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	895b      	ldrh	r3, [r3, #10]
 800c828:	461a      	mov	r2, r3
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	899b      	ldrh	r3, [r3, #12]
 800c82e:	fb02 f303 	mul.w	r3, r2, r3
 800c832:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c840:	e016      	b.n	800c870 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c846:	4618      	mov	r0, r3
 800c848:	f7fe f817 	bl	800a87a <get_fat>
 800c84c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c84e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c850:	2b01      	cmp	r3, #1
 800c852:	d802      	bhi.n	800c85a <f_open+0x2de>
 800c854:	2302      	movs	r3, #2
 800c856:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c85a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c860:	d102      	bne.n	800c868 <f_open+0x2ec>
 800c862:	2301      	movs	r3, #1
 800c864:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c868:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c86a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c870:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c874:	2b00      	cmp	r3, #0
 800c876:	d103      	bne.n	800c880 <f_open+0x304>
 800c878:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c87a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d8e0      	bhi.n	800c842 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c884:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c886:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d131      	bne.n	800c8f2 <f_open+0x376>
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	899b      	ldrh	r3, [r3, #12]
 800c892:	461a      	mov	r2, r3
 800c894:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c896:	fbb3 f1f2 	udiv	r1, r3, r2
 800c89a:	fb01 f202 	mul.w	r2, r1, r2
 800c89e:	1a9b      	subs	r3, r3, r2
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d026      	beq.n	800c8f2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fd ffc7 	bl	800a83c <clust2sect>
 800c8ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c8b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d103      	bne.n	800c8be <f_open+0x342>
						res = FR_INT_ERR;
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c8bc:	e019      	b.n	800c8f2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	899b      	ldrh	r3, [r3, #12]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8cc:	441a      	add	r2, r3
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	7858      	ldrb	r0, [r3, #1]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6a1a      	ldr	r2, [r3, #32]
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	f7fd fbff 	bl	800a0e4 <disk_read>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d002      	beq.n	800c8f2 <f_open+0x376>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c8f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <f_open+0x384>
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c900:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800c904:	4618      	mov	r0, r3
 800c906:	3768      	adds	r7, #104	@ 0x68
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08c      	sub	sp, #48	@ 0x30
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
 800c918:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2200      	movs	r2, #0
 800c922:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f107 0210 	add.w	r2, r7, #16
 800c92a:	4611      	mov	r1, r2
 800c92c:	4618      	mov	r0, r3
 800c92e:	f7ff fda9 	bl	800c484 <validate>
 800c932:	4603      	mov	r3, r0
 800c934:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c938:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d107      	bne.n	800c950 <f_write+0x44>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	7d5b      	ldrb	r3, [r3, #21]
 800c944:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c948:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d002      	beq.n	800c956 <f_write+0x4a>
 800c950:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c954:	e16a      	b.n	800cc2c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	7d1b      	ldrb	r3, [r3, #20]
 800c95a:	f003 0302 	and.w	r3, r3, #2
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d101      	bne.n	800c966 <f_write+0x5a>
 800c962:	2307      	movs	r3, #7
 800c964:	e162      	b.n	800cc2c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	699a      	ldr	r2, [r3, #24]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	441a      	add	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	429a      	cmp	r2, r3
 800c974:	f080 814c 	bcs.w	800cc10 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	43db      	mvns	r3, r3
 800c97e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c980:	e146      	b.n	800cc10 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	693a      	ldr	r2, [r7, #16]
 800c988:	8992      	ldrh	r2, [r2, #12]
 800c98a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c98e:	fb01 f202 	mul.w	r2, r1, r2
 800c992:	1a9b      	subs	r3, r3, r2
 800c994:	2b00      	cmp	r3, #0
 800c996:	f040 80f1 	bne.w	800cb7c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	699b      	ldr	r3, [r3, #24]
 800c99e:	693a      	ldr	r2, [r7, #16]
 800c9a0:	8992      	ldrh	r2, [r2, #12]
 800c9a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	8952      	ldrh	r2, [r2, #10]
 800c9aa:	3a01      	subs	r2, #1
 800c9ac:	4013      	ands	r3, r2
 800c9ae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d143      	bne.n	800ca3e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	699b      	ldr	r3, [r3, #24]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10c      	bne.n	800c9d8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d11a      	bne.n	800ca00 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fe f9a5 	bl	800ad1e <create_chain>
 800c9d4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c9d6:	e013      	b.n	800ca00 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d007      	beq.n	800c9f0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f7fe fa31 	bl	800ae4e <clmt_clust>
 800c9ec:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c9ee:	e007      	b.n	800ca00 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	69db      	ldr	r3, [r3, #28]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	f7fe f990 	bl	800ad1e <create_chain>
 800c9fe:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f000 8109 	beq.w	800cc1a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ca08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d104      	bne.n	800ca18 <f_write+0x10c>
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2202      	movs	r2, #2
 800ca12:	755a      	strb	r2, [r3, #21]
 800ca14:	2302      	movs	r3, #2
 800ca16:	e109      	b.n	800cc2c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca1e:	d104      	bne.n	800ca2a <f_write+0x11e>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2201      	movs	r2, #1
 800ca24:	755a      	strb	r2, [r3, #21]
 800ca26:	2301      	movs	r3, #1
 800ca28:	e100      	b.n	800cc2c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca2e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d102      	bne.n	800ca3e <f_write+0x132>
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca3c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	7d1b      	ldrb	r3, [r3, #20]
 800ca42:	b25b      	sxtb	r3, r3
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	da18      	bge.n	800ca7a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	7858      	ldrb	r0, [r3, #1]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6a1a      	ldr	r2, [r3, #32]
 800ca56:	2301      	movs	r3, #1
 800ca58:	f7fd fb64 	bl	800a124 <disk_write>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d004      	beq.n	800ca6c <f_write+0x160>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2201      	movs	r2, #1
 800ca66:	755a      	strb	r2, [r3, #21]
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e0df      	b.n	800cc2c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	7d1b      	ldrb	r3, [r3, #20]
 800ca70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ca7a:	693a      	ldr	r2, [r7, #16]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	69db      	ldr	r3, [r3, #28]
 800ca80:	4619      	mov	r1, r3
 800ca82:	4610      	mov	r0, r2
 800ca84:	f7fd feda 	bl	800a83c <clust2sect>
 800ca88:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d104      	bne.n	800ca9a <f_write+0x18e>
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2202      	movs	r2, #2
 800ca94:	755a      	strb	r2, [r3, #21]
 800ca96:	2302      	movs	r3, #2
 800ca98:	e0c8      	b.n	800cc2c <f_write+0x320>
			sect += csect;
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	4413      	add	r3, r2
 800caa0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	899b      	ldrh	r3, [r3, #12]
 800caa6:	461a      	mov	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800caae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d043      	beq.n	800cb3e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cab6:	69ba      	ldr	r2, [r7, #24]
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	4413      	add	r3, r2
 800cabc:	693a      	ldr	r2, [r7, #16]
 800cabe:	8952      	ldrh	r2, [r2, #10]
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d905      	bls.n	800cad0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	895b      	ldrh	r3, [r3, #10]
 800cac8:	461a      	mov	r2, r3
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	7858      	ldrb	r0, [r3, #1]
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	69f9      	ldr	r1, [r7, #28]
 800cada:	f7fd fb23 	bl	800a124 <disk_write>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d004      	beq.n	800caee <f_write+0x1e2>
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2201      	movs	r2, #1
 800cae8:	755a      	strb	r2, [r3, #21]
 800caea:	2301      	movs	r3, #1
 800caec:	e09e      	b.n	800cc2c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6a1a      	ldr	r2, [r3, #32]
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	6a3a      	ldr	r2, [r7, #32]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d918      	bls.n	800cb2e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6a1a      	ldr	r2, [r3, #32]
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	693a      	ldr	r2, [r7, #16]
 800cb0c:	8992      	ldrh	r2, [r2, #12]
 800cb0e:	fb02 f303 	mul.w	r3, r2, r3
 800cb12:	69fa      	ldr	r2, [r7, #28]
 800cb14:	18d1      	adds	r1, r2, r3
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	899b      	ldrh	r3, [r3, #12]
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	f7fd fbc2 	bl	800a2a4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	7d1b      	ldrb	r3, [r3, #20]
 800cb24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	899b      	ldrh	r3, [r3, #12]
 800cb32:	461a      	mov	r2, r3
 800cb34:	6a3b      	ldr	r3, [r7, #32]
 800cb36:	fb02 f303 	mul.w	r3, r2, r3
 800cb3a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cb3c:	e04b      	b.n	800cbd6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	697a      	ldr	r2, [r7, #20]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d016      	beq.n	800cb76 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	699a      	ldr	r2, [r3, #24]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d210      	bcs.n	800cb76 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	7858      	ldrb	r0, [r3, #1]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb5e:	2301      	movs	r3, #1
 800cb60:	697a      	ldr	r2, [r7, #20]
 800cb62:	f7fd fabf 	bl	800a0e4 <disk_read>
 800cb66:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d004      	beq.n	800cb76 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	755a      	strb	r2, [r3, #21]
 800cb72:	2301      	movs	r3, #1
 800cb74:	e05a      	b.n	800cc2c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	697a      	ldr	r2, [r7, #20]
 800cb7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	899b      	ldrh	r3, [r3, #12]
 800cb80:	4618      	mov	r0, r3
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	699b      	ldr	r3, [r3, #24]
 800cb86:	693a      	ldr	r2, [r7, #16]
 800cb88:	8992      	ldrh	r2, [r2, #12]
 800cb8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb8e:	fb01 f202 	mul.w	r2, r1, r2
 800cb92:	1a9b      	subs	r3, r3, r2
 800cb94:	1ac3      	subs	r3, r0, r3
 800cb96:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cb98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d901      	bls.n	800cba4 <f_write+0x298>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	699b      	ldr	r3, [r3, #24]
 800cbae:	693a      	ldr	r2, [r7, #16]
 800cbb0:	8992      	ldrh	r2, [r2, #12]
 800cbb2:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbb6:	fb00 f202 	mul.w	r2, r0, r2
 800cbba:	1a9b      	subs	r3, r3, r2
 800cbbc:	440b      	add	r3, r1
 800cbbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbc0:	69f9      	ldr	r1, [r7, #28]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7fd fb6e 	bl	800a2a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	7d1b      	ldrb	r3, [r3, #20]
 800cbcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cbd6:	69fa      	ldr	r2, [r7, #28]
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbda:	4413      	add	r3, r2
 800cbdc:	61fb      	str	r3, [r7, #28]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	699a      	ldr	r2, [r3, #24]
 800cbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe4:	441a      	add	r2, r3
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	619a      	str	r2, [r3, #24]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	68da      	ldr	r2, [r3, #12]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	bf38      	it	cc
 800cbf6:	461a      	movcc	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	60da      	str	r2, [r3, #12]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc02:	441a      	add	r2, r3
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	601a      	str	r2, [r3, #0]
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f47f aeb5 	bne.w	800c982 <f_write+0x76>
 800cc18:	e000      	b.n	800cc1c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cc1a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	7d1b      	ldrb	r3, [r3, #20]
 800cc20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3730      	adds	r7, #48	@ 0x30
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f107 0208 	add.w	r2, r7, #8
 800cc42:	4611      	mov	r1, r2
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff fc1d 	bl	800c484 <validate>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc4e:	7dfb      	ldrb	r3, [r7, #23]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d168      	bne.n	800cd26 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	7d1b      	ldrb	r3, [r3, #20]
 800cc58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d062      	beq.n	800cd26 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	7d1b      	ldrb	r3, [r3, #20]
 800cc64:	b25b      	sxtb	r3, r3
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	da15      	bge.n	800cc96 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	7858      	ldrb	r0, [r3, #1]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6a1a      	ldr	r2, [r3, #32]
 800cc78:	2301      	movs	r3, #1
 800cc7a:	f7fd fa53 	bl	800a124 <disk_write>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d001      	beq.n	800cc88 <f_sync+0x54>
 800cc84:	2301      	movs	r3, #1
 800cc86:	e04f      	b.n	800cd28 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	7d1b      	ldrb	r3, [r3, #20]
 800cc8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc90:	b2da      	uxtb	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cc96:	f7fc fcc1 	bl	800961c <get_fattime>
 800cc9a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cca2:	4619      	mov	r1, r3
 800cca4:	4610      	mov	r0, r2
 800cca6:	f7fd fd2b 	bl	800a700 <move_window>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d138      	bne.n	800cd26 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccb8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	330b      	adds	r3, #11
 800ccbe:	781a      	ldrb	r2, [r3, #0]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	330b      	adds	r3, #11
 800ccc4:	f042 0220 	orr.w	r2, r2, #32
 800ccc8:	b2d2      	uxtb	r2, r2
 800ccca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6818      	ldr	r0, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	68f9      	ldr	r1, [r7, #12]
 800ccd8:	f7fe fab6 	bl	800b248 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f103 021c 	add.w	r2, r3, #28
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	4619      	mov	r1, r3
 800cce8:	4610      	mov	r0, r2
 800ccea:	f7fd faaf 	bl	800a24c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	3316      	adds	r3, #22
 800ccf2:	6939      	ldr	r1, [r7, #16]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7fd faa9 	bl	800a24c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	3312      	adds	r3, #18
 800ccfe:	2100      	movs	r1, #0
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7fd fa88 	bl	800a216 <st_word>
					fs->wflag = 1;
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	4618      	mov	r0, r3
 800cd10:	f7fd fd24 	bl	800a75c <sync_fs>
 800cd14:	4603      	mov	r3, r0
 800cd16:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	7d1b      	ldrb	r3, [r3, #20]
 800cd1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b084      	sub	sp, #16
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff ff7b 	bl	800cc34 <f_sync>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d118      	bne.n	800cd7a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f107 0208 	add.w	r2, r7, #8
 800cd4e:	4611      	mov	r1, r2
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7ff fb97 	bl	800c484 <validate>
 800cd56:	4603      	mov	r3, r0
 800cd58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10c      	bne.n	800cd7a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fd fc27 	bl	800a5b8 <dec_lock>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d102      	bne.n	800cd7a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cd7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b090      	sub	sp, #64	@ 0x40
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f107 0208 	add.w	r2, r7, #8
 800cd94:	4611      	mov	r1, r2
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7ff fb74 	bl	800c484 <validate>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cda2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d103      	bne.n	800cdb2 <f_lseek+0x2e>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	7d5b      	ldrb	r3, [r3, #21]
 800cdae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cdb2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <f_lseek+0x3c>
 800cdba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cdbe:	e201      	b.n	800d1c4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f000 80d9 	beq.w	800cf7c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd0:	d15a      	bne.n	800ce88 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdda:	1d1a      	adds	r2, r3, #4
 800cddc:	627a      	str	r2, [r7, #36]	@ 0x24
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	617b      	str	r3, [r7, #20]
 800cde2:	2302      	movs	r3, #2
 800cde4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800cdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d03a      	beq.n	800ce68 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	613b      	str	r3, [r7, #16]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdfc:	3302      	adds	r3, #2
 800cdfe:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ce00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce02:	60fb      	str	r3, [r7, #12]
 800ce04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce06:	3301      	adds	r3, #1
 800ce08:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fd fd33 	bl	800a87a <get_fat>
 800ce14:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ce16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d804      	bhi.n	800ce26 <f_lseek+0xa2>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2202      	movs	r2, #2
 800ce20:	755a      	strb	r2, [r3, #21]
 800ce22:	2302      	movs	r3, #2
 800ce24:	e1ce      	b.n	800d1c4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2c:	d104      	bne.n	800ce38 <f_lseek+0xb4>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	755a      	strb	r2, [r3, #21]
 800ce34:	2301      	movs	r3, #1
 800ce36:	e1c5      	b.n	800d1c4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d0de      	beq.n	800ce00 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ce42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d809      	bhi.n	800ce5e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4c:	1d1a      	adds	r2, r3, #4
 800ce4e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ce50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce56:	1d1a      	adds	r2, r3, #4
 800ce58:	627a      	str	r2, [r7, #36]	@ 0x24
 800ce5a:	693a      	ldr	r2, [r7, #16]
 800ce5c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	6a1b      	ldr	r3, [r3, #32]
 800ce62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d3c4      	bcc.n	800cdf2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce6e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ce70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d803      	bhi.n	800ce80 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ce78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	601a      	str	r2, [r3, #0]
 800ce7e:	e19f      	b.n	800d1c0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ce80:	2311      	movs	r3, #17
 800ce82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ce86:	e19b      	b.n	800d1c0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d902      	bls.n	800ce98 <f_lseek+0x114>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 818d 	beq.w	800d1c0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7fd ffce 	bl	800ae4e <clmt_clust>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	69db      	ldr	r3, [r3, #28]
 800cebe:	4619      	mov	r1, r3
 800cec0:	4610      	mov	r0, r2
 800cec2:	f7fd fcbb 	bl	800a83c <clust2sect>
 800cec6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d104      	bne.n	800ced8 <f_lseek+0x154>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2202      	movs	r2, #2
 800ced2:	755a      	strb	r2, [r3, #21]
 800ced4:	2302      	movs	r3, #2
 800ced6:	e175      	b.n	800d1c4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	3b01      	subs	r3, #1
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	8992      	ldrh	r2, [r2, #12]
 800cee0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	8952      	ldrh	r2, [r2, #10]
 800cee8:	3a01      	subs	r2, #1
 800ceea:	4013      	ands	r3, r2
 800ceec:	69ba      	ldr	r2, [r7, #24]
 800ceee:	4413      	add	r3, r2
 800cef0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	68ba      	ldr	r2, [r7, #8]
 800cef8:	8992      	ldrh	r2, [r2, #12]
 800cefa:	fbb3 f1f2 	udiv	r1, r3, r2
 800cefe:	fb01 f202 	mul.w	r2, r1, r2
 800cf02:	1a9b      	subs	r3, r3, r2
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f000 815b 	beq.w	800d1c0 <f_lseek+0x43c>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	69ba      	ldr	r2, [r7, #24]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	f000 8155 	beq.w	800d1c0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	7d1b      	ldrb	r3, [r3, #20]
 800cf1a:	b25b      	sxtb	r3, r3
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	da18      	bge.n	800cf52 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	7858      	ldrb	r0, [r3, #1]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6a1a      	ldr	r2, [r3, #32]
 800cf2e:	2301      	movs	r3, #1
 800cf30:	f7fd f8f8 	bl	800a124 <disk_write>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d004      	beq.n	800cf44 <f_lseek+0x1c0>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	755a      	strb	r2, [r3, #21]
 800cf40:	2301      	movs	r3, #1
 800cf42:	e13f      	b.n	800d1c4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	7d1b      	ldrb	r3, [r3, #20]
 800cf48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	7858      	ldrb	r0, [r3, #1]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	69ba      	ldr	r2, [r7, #24]
 800cf60:	f7fd f8c0 	bl	800a0e4 <disk_read>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d004      	beq.n	800cf74 <f_lseek+0x1f0>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	755a      	strb	r2, [r3, #21]
 800cf70:	2301      	movs	r3, #1
 800cf72:	e127      	b.n	800d1c4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	69ba      	ldr	r2, [r7, #24]
 800cf78:	621a      	str	r2, [r3, #32]
 800cf7a:	e121      	b.n	800d1c0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	683a      	ldr	r2, [r7, #0]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d908      	bls.n	800cf98 <f_lseek+0x214>
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	7d1b      	ldrb	r3, [r3, #20]
 800cf8a:	f003 0302 	and.w	r3, r3, #2
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d102      	bne.n	800cf98 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	699b      	ldr	r3, [r3, #24]
 800cf9c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfa6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f000 80b5 	beq.w	800d11a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	895b      	ldrh	r3, [r3, #10]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	899b      	ldrh	r3, [r3, #12]
 800cfba:	fb02 f303 	mul.w	r3, r2, r3
 800cfbe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d01b      	beq.n	800cffe <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	1e5a      	subs	r2, r3, #1
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfd0:	6a3b      	ldr	r3, [r7, #32]
 800cfd2:	1e59      	subs	r1, r3, #1
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d30f      	bcc.n	800cffe <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cfde:	6a3b      	ldr	r3, [r7, #32]
 800cfe0:	1e5a      	subs	r2, r3, #1
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	425b      	negs	r3, r3
 800cfe6:	401a      	ands	r2, r3
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	699b      	ldr	r3, [r3, #24]
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	69db      	ldr	r3, [r3, #28]
 800cffa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cffc:	e022      	b.n	800d044 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	689b      	ldr	r3, [r3, #8]
 800d002:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d006:	2b00      	cmp	r3, #0
 800d008:	d119      	bne.n	800d03e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2100      	movs	r1, #0
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fd fe85 	bl	800ad1e <create_chain>
 800d014:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d104      	bne.n	800d026 <f_lseek+0x2a2>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2202      	movs	r2, #2
 800d020:	755a      	strb	r2, [r3, #21]
 800d022:	2302      	movs	r3, #2
 800d024:	e0ce      	b.n	800d1c4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02c:	d104      	bne.n	800d038 <f_lseek+0x2b4>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2201      	movs	r2, #1
 800d032:	755a      	strb	r2, [r3, #21]
 800d034:	2301      	movs	r3, #1
 800d036:	e0c5      	b.n	800d1c4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d03c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d042:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d046:	2b00      	cmp	r3, #0
 800d048:	d067      	beq.n	800d11a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d04a:	e03a      	b.n	800d0c2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	603b      	str	r3, [r7, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	699a      	ldr	r2, [r3, #24]
 800d058:	69fb      	ldr	r3, [r7, #28]
 800d05a:	441a      	add	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7d1b      	ldrb	r3, [r3, #20]
 800d064:	f003 0302 	and.w	r3, r3, #2
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d00b      	beq.n	800d084 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d070:	4618      	mov	r0, r3
 800d072:	f7fd fe54 	bl	800ad1e <create_chain>
 800d076:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d108      	bne.n	800d090 <f_lseek+0x30c>
							ofs = 0; break;
 800d07e:	2300      	movs	r3, #0
 800d080:	603b      	str	r3, [r7, #0]
 800d082:	e022      	b.n	800d0ca <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fd fbf6 	bl	800a87a <get_fat>
 800d08e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d096:	d104      	bne.n	800d0a2 <f_lseek+0x31e>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	755a      	strb	r2, [r3, #21]
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e090      	b.n	800d1c4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d904      	bls.n	800d0b2 <f_lseek+0x32e>
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	6a1b      	ldr	r3, [r3, #32]
 800d0ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d304      	bcc.n	800d0bc <f_lseek+0x338>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2202      	movs	r2, #2
 800d0b6:	755a      	strb	r2, [r3, #21]
 800d0b8:	2302      	movs	r3, #2
 800d0ba:	e083      	b.n	800d1c4 <f_lseek+0x440>
					fp->clust = clst;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0c0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d0c2:	683a      	ldr	r2, [r7, #0]
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d8c0      	bhi.n	800d04c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	699a      	ldr	r2, [r3, #24]
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	441a      	add	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	899b      	ldrh	r3, [r3, #12]
 800d0da:	461a      	mov	r2, r3
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0e2:	fb01 f202 	mul.w	r2, r1, r2
 800d0e6:	1a9b      	subs	r3, r3, r2
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d016      	beq.n	800d11a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fd fba3 	bl	800a83c <clust2sect>
 800d0f6:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d0f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d104      	bne.n	800d108 <f_lseek+0x384>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2202      	movs	r2, #2
 800d102:	755a      	strb	r2, [r3, #21]
 800d104:	2302      	movs	r3, #2
 800d106:	e05d      	b.n	800d1c4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	899b      	ldrh	r3, [r3, #12]
 800d10c:	461a      	mov	r2, r3
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	fbb3 f3f2 	udiv	r3, r3, r2
 800d114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d116:	4413      	add	r3, r2
 800d118:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	699a      	ldr	r2, [r3, #24]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	68db      	ldr	r3, [r3, #12]
 800d122:	429a      	cmp	r2, r3
 800d124:	d90a      	bls.n	800d13c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	699a      	ldr	r2, [r3, #24]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	7d1b      	ldrb	r3, [r3, #20]
 800d132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d136:	b2da      	uxtb	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	68ba      	ldr	r2, [r7, #8]
 800d142:	8992      	ldrh	r2, [r2, #12]
 800d144:	fbb3 f1f2 	udiv	r1, r3, r2
 800d148:	fb01 f202 	mul.w	r2, r1, r2
 800d14c:	1a9b      	subs	r3, r3, r2
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d036      	beq.n	800d1c0 <f_lseek+0x43c>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6a1b      	ldr	r3, [r3, #32]
 800d156:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d158:	429a      	cmp	r2, r3
 800d15a:	d031      	beq.n	800d1c0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	7d1b      	ldrb	r3, [r3, #20]
 800d160:	b25b      	sxtb	r3, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	da18      	bge.n	800d198 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	7858      	ldrb	r0, [r3, #1]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6a1a      	ldr	r2, [r3, #32]
 800d174:	2301      	movs	r3, #1
 800d176:	f7fc ffd5 	bl	800a124 <disk_write>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d004      	beq.n	800d18a <f_lseek+0x406>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	755a      	strb	r2, [r3, #21]
 800d186:	2301      	movs	r3, #1
 800d188:	e01c      	b.n	800d1c4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	7d1b      	ldrb	r3, [r3, #20]
 800d18e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d192:	b2da      	uxtb	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	7858      	ldrb	r0, [r3, #1]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1a6:	f7fc ff9d 	bl	800a0e4 <disk_read>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d004      	beq.n	800d1ba <f_lseek+0x436>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	755a      	strb	r2, [r3, #21]
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	e004      	b.n	800d1c4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1be:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d1c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3740      	adds	r7, #64	@ 0x40
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d1d8:	78fb      	ldrb	r3, [r7, #3]
 800d1da:	2b0a      	cmp	r3, #10
 800d1dc:	d103      	bne.n	800d1e6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d1de:	210d      	movs	r1, #13
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7ff fff3 	bl	800d1cc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	db25      	blt.n	800d23e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	1c5a      	adds	r2, r3, #1
 800d1f6:	60fa      	str	r2, [r7, #12]
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	78fa      	ldrb	r2, [r7, #3]
 800d1fe:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b3c      	cmp	r3, #60	@ 0x3c
 800d204:	dd12      	ble.n	800d22c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6818      	ldr	r0, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f103 010c 	add.w	r1, r3, #12
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	f107 0308 	add.w	r3, r7, #8
 800d216:	f7ff fb79 	bl	800c90c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d101      	bne.n	800d226 <putc_bfd+0x5a>
 800d222:	2300      	movs	r3, #0
 800d224:	e001      	b.n	800d22a <putc_bfd+0x5e>
 800d226:	f04f 33ff 	mov.w	r3, #4294967295
 800d22a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	68fa      	ldr	r2, [r7, #12]
 800d230:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	1c5a      	adds	r2, r3, #1
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	609a      	str	r2, [r3, #8]
 800d23c:	e000      	b.n	800d240 <putc_bfd+0x74>
	if (i < 0) return;
 800d23e:	bf00      	nop
}
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}

0800d246 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d246:	b580      	push	{r7, lr}
 800d248:	b084      	sub	sp, #16
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	db16      	blt.n	800d284 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6818      	ldr	r0, [r3, #0]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f103 010c 	add.w	r1, r3, #12
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	461a      	mov	r2, r3
 800d266:	f107 030c 	add.w	r3, r7, #12
 800d26a:	f7ff fb4f 	bl	800c90c <f_write>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d107      	bne.n	800d284 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d102      	bne.n	800d284 <putc_flush+0x3e>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	689b      	ldr	r3, [r3, #8]
 800d282:	e001      	b.n	800d288 <putc_flush+0x42>
	return EOF;
 800d284:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	683a      	ldr	r2, [r7, #0]
 800d29e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	605a      	str	r2, [r3, #4]
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	609a      	str	r2, [r3, #8]
}
 800d2ae:	bf00      	nop
 800d2b0:	370c      	adds	r7, #12
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
	...

0800d2bc <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800d2bc:	b40e      	push	{r1, r2, r3}
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b0a7      	sub	sp, #156	@ 0x9c
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800d2c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d2ca:	6879      	ldr	r1, [r7, #4]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7ff ffdf 	bl	800d290 <putc_init>

	va_start(arp, fmt);
 800d2d2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800d2d6:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800d2d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d2dc:	1c5a      	adds	r2, r3, #1
 800d2de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800d2e8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 81f2 	beq.w	800d6d6 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800d2f2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d2f6:	2b25      	cmp	r3, #37	@ 0x25
 800d2f8:	d008      	beq.n	800d30c <f_printf+0x50>
			putc_bfd(&pb, c);
 800d2fa:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800d2fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d302:	4611      	mov	r1, r2
 800d304:	4618      	mov	r0, r3
 800d306:	f7ff ff61 	bl	800d1cc <putc_bfd>
			continue;
 800d30a:	e1e3      	b.n	800d6d4 <f_printf+0x418>
		}
		w = f = 0;
 800d30c:	2300      	movs	r3, #0
 800d30e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d312:	2300      	movs	r3, #0
 800d314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800d318:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d31c:	1c5a      	adds	r2, r3, #1
 800d31e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800d328:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d32c:	2b30      	cmp	r3, #48	@ 0x30
 800d32e:	d10b      	bne.n	800d348 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800d330:	2301      	movs	r3, #1
 800d332:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800d346:	e024      	b.n	800d392 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800d348:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d34c:	2b2d      	cmp	r3, #45	@ 0x2d
 800d34e:	d120      	bne.n	800d392 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800d350:	2302      	movs	r3, #2
 800d352:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d35a:	1c5a      	adds	r2, r3, #1
 800d35c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d366:	e014      	b.n	800d392 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800d368:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d36c:	4613      	mov	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	005b      	lsls	r3, r3, #1
 800d374:	461a      	mov	r2, r3
 800d376:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d37a:	4413      	add	r3, r2
 800d37c:	3b30      	subs	r3, #48	@ 0x30
 800d37e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800d382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d386:	1c5a      	adds	r2, r3, #1
 800d388:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800d392:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d396:	2b2f      	cmp	r3, #47	@ 0x2f
 800d398:	d903      	bls.n	800d3a2 <f_printf+0xe6>
 800d39a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d39e:	2b39      	cmp	r3, #57	@ 0x39
 800d3a0:	d9e2      	bls.n	800d368 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d3a2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d3a6:	2b6c      	cmp	r3, #108	@ 0x6c
 800d3a8:	d003      	beq.n	800d3b2 <f_printf+0xf6>
 800d3aa:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d3ae:	2b4c      	cmp	r3, #76	@ 0x4c
 800d3b0:	d10d      	bne.n	800d3ce <f_printf+0x112>
			f |= 4; c = *fmt++;
 800d3b2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d3b6:	f043 0304 	orr.w	r3, r3, #4
 800d3ba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d3be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800d3ce:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f000 8181 	beq.w	800d6da <f_printf+0x41e>
		d = c;
 800d3d8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d3dc:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800d3e0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d3e4:	2b60      	cmp	r3, #96	@ 0x60
 800d3e6:	d908      	bls.n	800d3fa <f_printf+0x13e>
 800d3e8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d3ec:	2b7a      	cmp	r3, #122	@ 0x7a
 800d3ee:	d804      	bhi.n	800d3fa <f_printf+0x13e>
 800d3f0:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d3f4:	3b20      	subs	r3, #32
 800d3f6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800d3fa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d3fe:	3b42      	subs	r3, #66	@ 0x42
 800d400:	2b16      	cmp	r3, #22
 800d402:	f200 8098 	bhi.w	800d536 <f_printf+0x27a>
 800d406:	a201      	add	r2, pc, #4	@ (adr r2, 800d40c <f_printf+0x150>)
 800d408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d40c:	0800d517 	.word	0x0800d517
 800d410:	0800d4ff 	.word	0x0800d4ff
 800d414:	0800d527 	.word	0x0800d527
 800d418:	0800d537 	.word	0x0800d537
 800d41c:	0800d537 	.word	0x0800d537
 800d420:	0800d537 	.word	0x0800d537
 800d424:	0800d537 	.word	0x0800d537
 800d428:	0800d537 	.word	0x0800d537
 800d42c:	0800d537 	.word	0x0800d537
 800d430:	0800d537 	.word	0x0800d537
 800d434:	0800d537 	.word	0x0800d537
 800d438:	0800d537 	.word	0x0800d537
 800d43c:	0800d537 	.word	0x0800d537
 800d440:	0800d51f 	.word	0x0800d51f
 800d444:	0800d537 	.word	0x0800d537
 800d448:	0800d537 	.word	0x0800d537
 800d44c:	0800d537 	.word	0x0800d537
 800d450:	0800d469 	.word	0x0800d469
 800d454:	0800d537 	.word	0x0800d537
 800d458:	0800d527 	.word	0x0800d527
 800d45c:	0800d537 	.word	0x0800d537
 800d460:	0800d537 	.word	0x0800d537
 800d464:	0800d52f 	.word	0x0800d52f
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d468:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d46a:	1d1a      	adds	r2, r3, #4
 800d46c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800d472:	2300      	movs	r3, #0
 800d474:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d478:	e004      	b.n	800d484 <f_printf+0x1c8>
 800d47a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d47e:	3301      	adds	r3, #1
 800d480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d484:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d486:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d48a:	4413      	add	r3, r2
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1f3      	bne.n	800d47a <f_printf+0x1be>
			if (!(f & 2)) {
 800d492:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d496:	f003 0302 	and.w	r3, r3, #2
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d11a      	bne.n	800d4d4 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d49e:	e005      	b.n	800d4ac <f_printf+0x1f0>
 800d4a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d4a4:	2120      	movs	r1, #32
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff fe90 	bl	800d1cc <putc_bfd>
 800d4ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d4b0:	1c5a      	adds	r2, r3, #1
 800d4b2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d4b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d8f0      	bhi.n	800d4a0 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d4be:	e009      	b.n	800d4d4 <f_printf+0x218>
 800d4c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d4c2:	1c5a      	adds	r2, r3, #1
 800d4c4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d4c6:	781a      	ldrb	r2, [r3, #0]
 800d4c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7ff fe7c 	bl	800d1cc <putc_bfd>
 800d4d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1f1      	bne.n	800d4c0 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d4dc:	e005      	b.n	800d4ea <f_printf+0x22e>
 800d4de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d4e2:	2120      	movs	r1, #32
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7ff fe71 	bl	800d1cc <putc_bfd>
 800d4ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d4ee:	1c5a      	adds	r2, r3, #1
 800d4f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d4f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d8f0      	bhi.n	800d4de <f_printf+0x222>
			continue;
 800d4fc:	e0ea      	b.n	800d6d4 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d4fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d500:	1d1a      	adds	r2, r3, #4
 800d502:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	b2da      	uxtb	r2, r3
 800d508:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d50c:	4611      	mov	r1, r2
 800d50e:	4618      	mov	r0, r3
 800d510:	f7ff fe5c 	bl	800d1cc <putc_bfd>
 800d514:	e0de      	b.n	800d6d4 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800d516:	2302      	movs	r3, #2
 800d518:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d51c:	e014      	b.n	800d548 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800d51e:	2308      	movs	r3, #8
 800d520:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d524:	e010      	b.n	800d548 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d526:	230a      	movs	r3, #10
 800d528:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d52c:	e00c      	b.n	800d548 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d52e:	2310      	movs	r3, #16
 800d530:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d534:	e008      	b.n	800d548 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d536:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800d53a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d53e:	4611      	mov	r1, r2
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fe43 	bl	800d1cc <putc_bfd>
 800d546:	e0c5      	b.n	800d6d4 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d548:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d54c:	f003 0304 	and.w	r3, r3, #4
 800d550:	2b00      	cmp	r3, #0
 800d552:	d004      	beq.n	800d55e <f_printf+0x2a2>
 800d554:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d556:	1d1a      	adds	r2, r3, #4
 800d558:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	e00c      	b.n	800d578 <f_printf+0x2bc>
 800d55e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d562:	2b44      	cmp	r3, #68	@ 0x44
 800d564:	d104      	bne.n	800d570 <f_printf+0x2b4>
 800d566:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d568:	1d1a      	adds	r2, r3, #4
 800d56a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	e003      	b.n	800d578 <f_printf+0x2bc>
 800d570:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d572:	1d1a      	adds	r2, r3, #4
 800d574:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800d57c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d580:	2b44      	cmp	r3, #68	@ 0x44
 800d582:	d10e      	bne.n	800d5a2 <f_printf+0x2e6>
 800d584:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d588:	2b00      	cmp	r3, #0
 800d58a:	da0a      	bge.n	800d5a2 <f_printf+0x2e6>
			v = 0 - v;
 800d58c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d590:	425b      	negs	r3, r3
 800d592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800d596:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d59a:	f043 0308 	orr.w	r3, r3, #8
 800d59e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800d5a8:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800d5ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d5b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5b4:	fb01 f202 	mul.w	r2, r1, r2
 800d5b8:	1a9b      	subs	r3, r3, r2
 800d5ba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800d5be:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800d5c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d5ce:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d5d2:	2b09      	cmp	r3, #9
 800d5d4:	d90b      	bls.n	800d5ee <f_printf+0x332>
 800d5d6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d5da:	2b78      	cmp	r3, #120	@ 0x78
 800d5dc:	d101      	bne.n	800d5e2 <f_printf+0x326>
 800d5de:	2227      	movs	r2, #39	@ 0x27
 800d5e0:	e000      	b.n	800d5e4 <f_printf+0x328>
 800d5e2:	2207      	movs	r2, #7
 800d5e4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800d5ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d5f2:	1c5a      	adds	r2, r3, #1
 800d5f4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800d5f8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d5fc:	3230      	adds	r2, #48	@ 0x30
 800d5fe:	b2d2      	uxtb	r2, r2
 800d600:	3398      	adds	r3, #152	@ 0x98
 800d602:	443b      	add	r3, r7
 800d604:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800d608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d003      	beq.n	800d618 <f_printf+0x35c>
 800d610:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d614:	2b1f      	cmp	r3, #31
 800d616:	d9c7      	bls.n	800d5a8 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800d618:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d61c:	f003 0308 	and.w	r3, r3, #8
 800d620:	2b00      	cmp	r3, #0
 800d622:	d009      	beq.n	800d638 <f_printf+0x37c>
 800d624:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d628:	1c5a      	adds	r2, r3, #1
 800d62a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800d62e:	3398      	adds	r3, #152	@ 0x98
 800d630:	443b      	add	r3, r7
 800d632:	222d      	movs	r2, #45	@ 0x2d
 800d634:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800d638:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d63c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d640:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d644:	f003 0301 	and.w	r3, r3, #1
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d001      	beq.n	800d650 <f_printf+0x394>
 800d64c:	2330      	movs	r3, #48	@ 0x30
 800d64e:	e000      	b.n	800d652 <f_printf+0x396>
 800d650:	2320      	movs	r3, #32
 800d652:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d656:	e007      	b.n	800d668 <f_printf+0x3ac>
 800d658:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d65c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d660:	4611      	mov	r1, r2
 800d662:	4618      	mov	r0, r3
 800d664:	f7ff fdb2 	bl	800d1cc <putc_bfd>
 800d668:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d66c:	f003 0302 	and.w	r3, r3, #2
 800d670:	2b00      	cmp	r3, #0
 800d672:	d108      	bne.n	800d686 <f_printf+0x3ca>
 800d674:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d678:	1c5a      	adds	r2, r3, #1
 800d67a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d67e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d682:	429a      	cmp	r2, r3
 800d684:	d8e8      	bhi.n	800d658 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800d686:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d68a:	3b01      	subs	r3, #1
 800d68c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d690:	f107 020c 	add.w	r2, r7, #12
 800d694:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d698:	4413      	add	r3, r2
 800d69a:	781a      	ldrb	r2, [r3, #0]
 800d69c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7ff fd92 	bl	800d1cc <putc_bfd>
		} while (i);
 800d6a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d1ea      	bne.n	800d686 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800d6b0:	e007      	b.n	800d6c2 <f_printf+0x406>
 800d6b2:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d6b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7ff fd85 	bl	800d1cc <putc_bfd>
 800d6c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6c6:	1c5a      	adds	r2, r3, #1
 800d6c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d6cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d8ee      	bhi.n	800d6b2 <f_printf+0x3f6>
		c = *fmt++;
 800d6d4:	e600      	b.n	800d2d8 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d6d6:	bf00      	nop
 800d6d8:	e000      	b.n	800d6dc <f_printf+0x420>
		if (!c) break;
 800d6da:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800d6dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7ff fdb0 	bl	800d246 <putc_flush>
 800d6e6:	4603      	mov	r3, r0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	379c      	adds	r7, #156	@ 0x9c
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6f2:	b003      	add	sp, #12
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop

0800d6f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b087      	sub	sp, #28
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	4613      	mov	r3, r2
 800d704:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d706:	2301      	movs	r3, #1
 800d708:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d70a:	2300      	movs	r3, #0
 800d70c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d70e:	4b1f      	ldr	r3, [pc, #124]	@ (800d78c <FATFS_LinkDriverEx+0x94>)
 800d710:	7a5b      	ldrb	r3, [r3, #9]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	2b00      	cmp	r3, #0
 800d716:	d131      	bne.n	800d77c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d718:	4b1c      	ldr	r3, [pc, #112]	@ (800d78c <FATFS_LinkDriverEx+0x94>)
 800d71a:	7a5b      	ldrb	r3, [r3, #9]
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	461a      	mov	r2, r3
 800d720:	4b1a      	ldr	r3, [pc, #104]	@ (800d78c <FATFS_LinkDriverEx+0x94>)
 800d722:	2100      	movs	r1, #0
 800d724:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d726:	4b19      	ldr	r3, [pc, #100]	@ (800d78c <FATFS_LinkDriverEx+0x94>)
 800d728:	7a5b      	ldrb	r3, [r3, #9]
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	4a17      	ldr	r2, [pc, #92]	@ (800d78c <FATFS_LinkDriverEx+0x94>)
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	4413      	add	r3, r2
 800d732:	68fa      	ldr	r2, [r7, #12]
 800d734:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d736:	4b15      	ldr	r3, [pc, #84]	@ (800d78c <FATFS_LinkDriverEx+0x94>)
 800d738:	7a5b      	ldrb	r3, [r3, #9]
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	461a      	mov	r2, r3
 800d73e:	4b13      	ldr	r3, [pc, #76]	@ (800d78c <FATFS_LinkDriverEx+0x94>)
 800d740:	4413      	add	r3, r2
 800d742:	79fa      	ldrb	r2, [r7, #7]
 800d744:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d746:	4b11      	ldr	r3, [pc, #68]	@ (800d78c <FATFS_LinkDriverEx+0x94>)
 800d748:	7a5b      	ldrb	r3, [r3, #9]
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	1c5a      	adds	r2, r3, #1
 800d74e:	b2d1      	uxtb	r1, r2
 800d750:	4a0e      	ldr	r2, [pc, #56]	@ (800d78c <FATFS_LinkDriverEx+0x94>)
 800d752:	7251      	strb	r1, [r2, #9]
 800d754:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d756:	7dbb      	ldrb	r3, [r7, #22]
 800d758:	3330      	adds	r3, #48	@ 0x30
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	3301      	adds	r3, #1
 800d764:	223a      	movs	r2, #58	@ 0x3a
 800d766:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	3302      	adds	r3, #2
 800d76c:	222f      	movs	r2, #47	@ 0x2f
 800d76e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	3303      	adds	r3, #3
 800d774:	2200      	movs	r2, #0
 800d776:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d77c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	371c      	adds	r7, #28
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	240028fc 	.word	0x240028fc

0800d790 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d79a:	2200      	movs	r2, #0
 800d79c:	6839      	ldr	r1, [r7, #0]
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f7ff ffaa 	bl	800d6f8 <FATFS_LinkDriverEx>
 800d7a4:	4603      	mov	r3, r0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
	...

0800d7b0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	6039      	str	r1, [r7, #0]
 800d7ba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d7bc:	88fb      	ldrh	r3, [r7, #6]
 800d7be:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7c0:	d802      	bhi.n	800d7c8 <ff_convert+0x18>
		c = chr;
 800d7c2:	88fb      	ldrh	r3, [r7, #6]
 800d7c4:	81fb      	strh	r3, [r7, #14]
 800d7c6:	e025      	b.n	800d814 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00b      	beq.n	800d7e6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d7ce:	88fb      	ldrh	r3, [r7, #6]
 800d7d0:	2bff      	cmp	r3, #255	@ 0xff
 800d7d2:	d805      	bhi.n	800d7e0 <ff_convert+0x30>
 800d7d4:	88fb      	ldrh	r3, [r7, #6]
 800d7d6:	3b80      	subs	r3, #128	@ 0x80
 800d7d8:	4a12      	ldr	r2, [pc, #72]	@ (800d824 <ff_convert+0x74>)
 800d7da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7de:	e000      	b.n	800d7e2 <ff_convert+0x32>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	81fb      	strh	r3, [r7, #14]
 800d7e4:	e016      	b.n	800d814 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	81fb      	strh	r3, [r7, #14]
 800d7ea:	e009      	b.n	800d800 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d7ec:	89fb      	ldrh	r3, [r7, #14]
 800d7ee:	4a0d      	ldr	r2, [pc, #52]	@ (800d824 <ff_convert+0x74>)
 800d7f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7f4:	88fa      	ldrh	r2, [r7, #6]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d006      	beq.n	800d808 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d7fa:	89fb      	ldrh	r3, [r7, #14]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	81fb      	strh	r3, [r7, #14]
 800d800:	89fb      	ldrh	r3, [r7, #14]
 800d802:	2b7f      	cmp	r3, #127	@ 0x7f
 800d804:	d9f2      	bls.n	800d7ec <ff_convert+0x3c>
 800d806:	e000      	b.n	800d80a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d808:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d80a:	89fb      	ldrh	r3, [r7, #14]
 800d80c:	3380      	adds	r3, #128	@ 0x80
 800d80e:	b29b      	uxth	r3, r3
 800d810:	b2db      	uxtb	r3, r3
 800d812:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d814:	89fb      	ldrh	r3, [r7, #14]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	0800dde8 	.word	0x0800dde8

0800d828 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d828:	b480      	push	{r7}
 800d82a:	b087      	sub	sp, #28
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	4603      	mov	r3, r0
 800d830:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d832:	88fb      	ldrh	r3, [r7, #6]
 800d834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d838:	d201      	bcs.n	800d83e <ff_wtoupper+0x16>
 800d83a:	4b3e      	ldr	r3, [pc, #248]	@ (800d934 <ff_wtoupper+0x10c>)
 800d83c:	e000      	b.n	800d840 <ff_wtoupper+0x18>
 800d83e:	4b3e      	ldr	r3, [pc, #248]	@ (800d938 <ff_wtoupper+0x110>)
 800d840:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	1c9a      	adds	r2, r3, #2
 800d846:	617a      	str	r2, [r7, #20]
 800d848:	881b      	ldrh	r3, [r3, #0]
 800d84a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d84c:	8a7b      	ldrh	r3, [r7, #18]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d068      	beq.n	800d924 <ff_wtoupper+0xfc>
 800d852:	88fa      	ldrh	r2, [r7, #6]
 800d854:	8a7b      	ldrh	r3, [r7, #18]
 800d856:	429a      	cmp	r2, r3
 800d858:	d364      	bcc.n	800d924 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	1c9a      	adds	r2, r3, #2
 800d85e:	617a      	str	r2, [r7, #20]
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	823b      	strh	r3, [r7, #16]
 800d864:	8a3b      	ldrh	r3, [r7, #16]
 800d866:	0a1b      	lsrs	r3, r3, #8
 800d868:	81fb      	strh	r3, [r7, #14]
 800d86a:	8a3b      	ldrh	r3, [r7, #16]
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d870:	88fa      	ldrh	r2, [r7, #6]
 800d872:	8a79      	ldrh	r1, [r7, #18]
 800d874:	8a3b      	ldrh	r3, [r7, #16]
 800d876:	440b      	add	r3, r1
 800d878:	429a      	cmp	r2, r3
 800d87a:	da49      	bge.n	800d910 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d87c:	89fb      	ldrh	r3, [r7, #14]
 800d87e:	2b08      	cmp	r3, #8
 800d880:	d84f      	bhi.n	800d922 <ff_wtoupper+0xfa>
 800d882:	a201      	add	r2, pc, #4	@ (adr r2, 800d888 <ff_wtoupper+0x60>)
 800d884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d888:	0800d8ad 	.word	0x0800d8ad
 800d88c:	0800d8bf 	.word	0x0800d8bf
 800d890:	0800d8d5 	.word	0x0800d8d5
 800d894:	0800d8dd 	.word	0x0800d8dd
 800d898:	0800d8e5 	.word	0x0800d8e5
 800d89c:	0800d8ed 	.word	0x0800d8ed
 800d8a0:	0800d8f5 	.word	0x0800d8f5
 800d8a4:	0800d8fd 	.word	0x0800d8fd
 800d8a8:	0800d905 	.word	0x0800d905
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d8ac:	88fa      	ldrh	r2, [r7, #6]
 800d8ae:	8a7b      	ldrh	r3, [r7, #18]
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	697a      	ldr	r2, [r7, #20]
 800d8b6:	4413      	add	r3, r2
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	80fb      	strh	r3, [r7, #6]
 800d8bc:	e027      	b.n	800d90e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d8be:	88fa      	ldrh	r2, [r7, #6]
 800d8c0:	8a7b      	ldrh	r3, [r7, #18]
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	f003 0301 	and.w	r3, r3, #1
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	88fa      	ldrh	r2, [r7, #6]
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	80fb      	strh	r3, [r7, #6]
 800d8d2:	e01c      	b.n	800d90e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d8d4:	88fb      	ldrh	r3, [r7, #6]
 800d8d6:	3b10      	subs	r3, #16
 800d8d8:	80fb      	strh	r3, [r7, #6]
 800d8da:	e018      	b.n	800d90e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d8dc:	88fb      	ldrh	r3, [r7, #6]
 800d8de:	3b20      	subs	r3, #32
 800d8e0:	80fb      	strh	r3, [r7, #6]
 800d8e2:	e014      	b.n	800d90e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d8e4:	88fb      	ldrh	r3, [r7, #6]
 800d8e6:	3b30      	subs	r3, #48	@ 0x30
 800d8e8:	80fb      	strh	r3, [r7, #6]
 800d8ea:	e010      	b.n	800d90e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d8ec:	88fb      	ldrh	r3, [r7, #6]
 800d8ee:	3b1a      	subs	r3, #26
 800d8f0:	80fb      	strh	r3, [r7, #6]
 800d8f2:	e00c      	b.n	800d90e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d8f4:	88fb      	ldrh	r3, [r7, #6]
 800d8f6:	3308      	adds	r3, #8
 800d8f8:	80fb      	strh	r3, [r7, #6]
 800d8fa:	e008      	b.n	800d90e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d8fc:	88fb      	ldrh	r3, [r7, #6]
 800d8fe:	3b50      	subs	r3, #80	@ 0x50
 800d900:	80fb      	strh	r3, [r7, #6]
 800d902:	e004      	b.n	800d90e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d904:	88fb      	ldrh	r3, [r7, #6]
 800d906:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800d90a:	80fb      	strh	r3, [r7, #6]
 800d90c:	bf00      	nop
			}
			break;
 800d90e:	e008      	b.n	800d922 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d910:	89fb      	ldrh	r3, [r7, #14]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d195      	bne.n	800d842 <ff_wtoupper+0x1a>
 800d916:	8a3b      	ldrh	r3, [r7, #16]
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	697a      	ldr	r2, [r7, #20]
 800d91c:	4413      	add	r3, r2
 800d91e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d920:	e78f      	b.n	800d842 <ff_wtoupper+0x1a>
			break;
 800d922:	bf00      	nop
	}

	return chr;
 800d924:	88fb      	ldrh	r3, [r7, #6]
}
 800d926:	4618      	mov	r0, r3
 800d928:	371c      	adds	r7, #28
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	0800dee8 	.word	0x0800dee8
 800d938:	0800e0dc 	.word	0x0800e0dc

0800d93c <memset>:
 800d93c:	4402      	add	r2, r0
 800d93e:	4603      	mov	r3, r0
 800d940:	4293      	cmp	r3, r2
 800d942:	d100      	bne.n	800d946 <memset+0xa>
 800d944:	4770      	bx	lr
 800d946:	f803 1b01 	strb.w	r1, [r3], #1
 800d94a:	e7f9      	b.n	800d940 <memset+0x4>

0800d94c <__errno>:
 800d94c:	4b01      	ldr	r3, [pc, #4]	@ (800d954 <__errno+0x8>)
 800d94e:	6818      	ldr	r0, [r3, #0]
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	24000034 	.word	0x24000034

0800d958 <__libc_init_array>:
 800d958:	b570      	push	{r4, r5, r6, lr}
 800d95a:	4d0d      	ldr	r5, [pc, #52]	@ (800d990 <__libc_init_array+0x38>)
 800d95c:	4c0d      	ldr	r4, [pc, #52]	@ (800d994 <__libc_init_array+0x3c>)
 800d95e:	1b64      	subs	r4, r4, r5
 800d960:	10a4      	asrs	r4, r4, #2
 800d962:	2600      	movs	r6, #0
 800d964:	42a6      	cmp	r6, r4
 800d966:	d109      	bne.n	800d97c <__libc_init_array+0x24>
 800d968:	4d0b      	ldr	r5, [pc, #44]	@ (800d998 <__libc_init_array+0x40>)
 800d96a:	4c0c      	ldr	r4, [pc, #48]	@ (800d99c <__libc_init_array+0x44>)
 800d96c:	f000 f954 	bl	800dc18 <_init>
 800d970:	1b64      	subs	r4, r4, r5
 800d972:	10a4      	asrs	r4, r4, #2
 800d974:	2600      	movs	r6, #0
 800d976:	42a6      	cmp	r6, r4
 800d978:	d105      	bne.n	800d986 <__libc_init_array+0x2e>
 800d97a:	bd70      	pop	{r4, r5, r6, pc}
 800d97c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d980:	4798      	blx	r3
 800d982:	3601      	adds	r6, #1
 800d984:	e7ee      	b.n	800d964 <__libc_init_array+0xc>
 800d986:	f855 3b04 	ldr.w	r3, [r5], #4
 800d98a:	4798      	blx	r3
 800d98c:	3601      	adds	r6, #1
 800d98e:	e7f2      	b.n	800d976 <__libc_init_array+0x1e>
 800d990:	0800ea30 	.word	0x0800ea30
 800d994:	0800ea30 	.word	0x0800ea30
 800d998:	0800ea30 	.word	0x0800ea30
 800d99c:	0800ea34 	.word	0x0800ea34

0800d9a0 <memcpy>:
 800d9a0:	440a      	add	r2, r1
 800d9a2:	4291      	cmp	r1, r2
 800d9a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9a8:	d100      	bne.n	800d9ac <memcpy+0xc>
 800d9aa:	4770      	bx	lr
 800d9ac:	b510      	push	{r4, lr}
 800d9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9b6:	4291      	cmp	r1, r2
 800d9b8:	d1f9      	bne.n	800d9ae <memcpy+0xe>
 800d9ba:	bd10      	pop	{r4, pc}
 800d9bc:	0000      	movs	r0, r0
	...

0800d9c0 <log>:
 800d9c0:	b4f0      	push	{r4, r5, r6, r7}
 800d9c2:	ee10 0a90 	vmov	r0, s1
 800d9c6:	ee10 3a10 	vmov	r3, s0
 800d9ca:	f04f 34ff 	mov.w	r4, #4294967295
 800d9ce:	429c      	cmp	r4, r3
 800d9d0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 800d9d4:	4c70      	ldr	r4, [pc, #448]	@ (800db98 <log+0x1d8>)
 800d9d6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 800d9da:	418c      	sbcs	r4, r1
 800d9dc:	ed2d 8b02 	vpush	{d8}
 800d9e0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800d9e4:	d35a      	bcc.n	800da9c <log+0xdc>
 800d9e6:	4a6d      	ldr	r2, [pc, #436]	@ (800db9c <log+0x1dc>)
 800d9e8:	4290      	cmp	r0, r2
 800d9ea:	bf08      	it	eq
 800d9ec:	2b00      	cmpeq	r3, #0
 800d9ee:	f000 80c4 	beq.w	800db7a <log+0x1ba>
 800d9f2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800d9f6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d9fa:	4b69      	ldr	r3, [pc, #420]	@ (800dba0 <log+0x1e0>)
 800d9fc:	ee20 2b00 	vmul.f64	d2, d0, d0
 800da00:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800da04:	ee20 4b02 	vmul.f64	d4, d0, d2
 800da08:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 800da0c:	eea6 7b00 	vfma.f64	d7, d6, d0
 800da10:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 800da14:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 800da18:	eea6 7b02 	vfma.f64	d7, d6, d2
 800da1c:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 800da20:	eea5 6b00 	vfma.f64	d6, d5, d0
 800da24:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 800da28:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 800da2c:	eea5 6b02 	vfma.f64	d6, d5, d2
 800da30:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 800da34:	eea3 5b00 	vfma.f64	d5, d3, d0
 800da38:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 800da3c:	eea3 5b02 	vfma.f64	d5, d3, d2
 800da40:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 800da44:	eea3 5b04 	vfma.f64	d5, d3, d4
 800da48:	eea5 6b04 	vfma.f64	d6, d5, d4
 800da4c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800da50:	eea6 7b04 	vfma.f64	d7, d6, d4
 800da54:	eeb0 2b47 	vmov.f64	d2, d7
 800da58:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 800db80 <log+0x1c0>
 800da5c:	eeb0 6b40 	vmov.f64	d6, d0
 800da60:	eeb0 3b40 	vmov.f64	d3, d0
 800da64:	eea0 6b07 	vfma.f64	d6, d0, d7
 800da68:	eea0 6b47 	vfms.f64	d6, d0, d7
 800da6c:	ee30 8b46 	vsub.f64	d8, d0, d6
 800da70:	ee26 1b06 	vmul.f64	d1, d6, d6
 800da74:	eea1 3b05 	vfma.f64	d3, d1, d5
 800da78:	ee30 7b43 	vsub.f64	d7, d0, d3
 800da7c:	ee30 0b06 	vadd.f64	d0, d0, d6
 800da80:	eea1 7b05 	vfma.f64	d7, d1, d5
 800da84:	ee25 5b08 	vmul.f64	d5, d5, d8
 800da88:	eea5 7b00 	vfma.f64	d7, d5, d0
 800da8c:	eea2 7b04 	vfma.f64	d7, d2, d4
 800da90:	ee33 0b07 	vadd.f64	d0, d3, d7
 800da94:	ecbd 8b02 	vpop	{d8}
 800da98:	bcf0      	pop	{r4, r5, r6, r7}
 800da9a:	4770      	bx	lr
 800da9c:	f1a2 0410 	sub.w	r4, r2, #16
 800daa0:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 800daa4:	428c      	cmp	r4, r1
 800daa6:	d923      	bls.n	800daf0 <log+0x130>
 800daa8:	18d9      	adds	r1, r3, r3
 800daaa:	eb40 0400 	adc.w	r4, r0, r0
 800daae:	4321      	orrs	r1, r4
 800dab0:	d105      	bne.n	800dabe <log+0xfe>
 800dab2:	ecbd 8b02 	vpop	{d8}
 800dab6:	2001      	movs	r0, #1
 800dab8:	bcf0      	pop	{r4, r5, r6, r7}
 800daba:	f000 b885 	b.w	800dbc8 <__math_divzero>
 800dabe:	4939      	ldr	r1, [pc, #228]	@ (800dba4 <log+0x1e4>)
 800dac0:	4288      	cmp	r0, r1
 800dac2:	bf08      	it	eq
 800dac4:	2b00      	cmpeq	r3, #0
 800dac6:	d0e5      	beq.n	800da94 <log+0xd4>
 800dac8:	0413      	lsls	r3, r2, #16
 800daca:	d403      	bmi.n	800dad4 <log+0x114>
 800dacc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800dad0:	4393      	bics	r3, r2
 800dad2:	d104      	bne.n	800dade <log+0x11e>
 800dad4:	ecbd 8b02 	vpop	{d8}
 800dad8:	bcf0      	pop	{r4, r5, r6, r7}
 800dada:	f000 b88d 	b.w	800dbf8 <__math_invalid>
 800dade:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800db88 <log+0x1c8>
 800dae2:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dae6:	ec53 2b17 	vmov	r2, r3, d7
 800daea:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 800daee:	4613      	mov	r3, r2
 800daf0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 800daf4:	492a      	ldr	r1, [pc, #168]	@ (800dba0 <log+0x1e0>)
 800daf6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800dafa:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 800dafe:	f3c2 3446 	ubfx	r4, r2, #13, #7
 800db02:	0d15      	lsrs	r5, r2, #20
 800db04:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 800db08:	052d      	lsls	r5, r5, #20
 800db0a:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 800db0e:	1e1e      	subs	r6, r3, #0
 800db10:	1b47      	subs	r7, r0, r5
 800db12:	ec47 6b16 	vmov	d6, r6, r7
 800db16:	1512      	asrs	r2, r2, #20
 800db18:	eea7 5b06 	vfma.f64	d5, d7, d6
 800db1c:	ee07 2a90 	vmov	s15, r2
 800db20:	ee25 2b05 	vmul.f64	d2, d5, d5
 800db24:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800db28:	ed91 4b00 	vldr	d4, [r1]
 800db2c:	ee25 1b02 	vmul.f64	d1, d5, d2
 800db30:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 800db34:	eea4 7b06 	vfma.f64	d7, d4, d6
 800db38:	ee35 4b07 	vadd.f64	d4, d5, d7
 800db3c:	ee37 0b44 	vsub.f64	d0, d7, d4
 800db40:	ed91 7b02 	vldr	d7, [r1, #8]
 800db44:	ee30 0b05 	vadd.f64	d0, d0, d5
 800db48:	eea7 0b06 	vfma.f64	d0, d7, d6
 800db4c:	ed91 7b04 	vldr	d7, [r1, #16]
 800db50:	ed91 6b08 	vldr	d6, [r1, #32]
 800db54:	eea7 0b02 	vfma.f64	d0, d7, d2
 800db58:	ed91 7b06 	vldr	d7, [r1, #24]
 800db5c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 800db60:	eea6 7b05 	vfma.f64	d7, d6, d5
 800db64:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 800db68:	eea3 6b05 	vfma.f64	d6, d3, d5
 800db6c:	eea6 7b02 	vfma.f64	d7, d6, d2
 800db70:	eea1 0b07 	vfma.f64	d0, d1, d7
 800db74:	ee30 0b04 	vadd.f64	d0, d0, d4
 800db78:	e78c      	b.n	800da94 <log+0xd4>
 800db7a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 800db90 <log+0x1d0>
 800db7e:	e789      	b.n	800da94 <log+0xd4>
 800db80:	00000000 	.word	0x00000000
 800db84:	41a00000 	.word	0x41a00000
 800db88:	00000000 	.word	0x00000000
 800db8c:	43300000 	.word	0x43300000
	...
 800db98:	000308ff 	.word	0x000308ff
 800db9c:	3ff00000 	.word	0x3ff00000
 800dba0:	0800e198 	.word	0x0800e198
 800dba4:	7ff00000 	.word	0x7ff00000

0800dba8 <with_errno>:
 800dba8:	b510      	push	{r4, lr}
 800dbaa:	ed2d 8b02 	vpush	{d8}
 800dbae:	eeb0 8b40 	vmov.f64	d8, d0
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	f7ff feca 	bl	800d94c <__errno>
 800dbb8:	eeb0 0b48 	vmov.f64	d0, d8
 800dbbc:	ecbd 8b02 	vpop	{d8}
 800dbc0:	6004      	str	r4, [r0, #0]
 800dbc2:	bd10      	pop	{r4, pc}
 800dbc4:	0000      	movs	r0, r0
	...

0800dbc8 <__math_divzero>:
 800dbc8:	b082      	sub	sp, #8
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800dbd0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800dbd4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800dbd8:	ed8d 7b00 	vstr	d7, [sp]
 800dbdc:	ed9d 0b00 	vldr	d0, [sp]
 800dbe0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800dbf0 <__math_divzero+0x28>
 800dbe4:	2022      	movs	r0, #34	@ 0x22
 800dbe6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800dbea:	b002      	add	sp, #8
 800dbec:	f7ff bfdc 	b.w	800dba8 <with_errno>
	...

0800dbf8 <__math_invalid>:
 800dbf8:	eeb0 7b40 	vmov.f64	d7, d0
 800dbfc:	eeb4 7b47 	vcmp.f64	d7, d7
 800dc00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc04:	ee30 6b40 	vsub.f64	d6, d0, d0
 800dc08:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800dc0c:	d602      	bvs.n	800dc14 <__math_invalid+0x1c>
 800dc0e:	2021      	movs	r0, #33	@ 0x21
 800dc10:	f7ff bfca 	b.w	800dba8 <with_errno>
 800dc14:	4770      	bx	lr
	...

0800dc18 <_init>:
 800dc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1a:	bf00      	nop
 800dc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc1e:	bc08      	pop	{r3}
 800dc20:	469e      	mov	lr, r3
 800dc22:	4770      	bx	lr

0800dc24 <_fini>:
 800dc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc26:	bf00      	nop
 800dc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc2a:	bc08      	pop	{r3}
 800dc2c:	469e      	mov	lr, r3
 800dc2e:	4770      	bx	lr
